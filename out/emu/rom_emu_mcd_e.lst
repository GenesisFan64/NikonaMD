 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 01/10/2025 01:25:22 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD by GenesisFan64 2023-2025
       3/       0 :                     ;
       4/       0 :                     ; A devkit in assembly for developing software on the SEGA 16-bit
       5/       0 :                     ; family of systems:
       6/       0 :                     ; Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ;
       8/       0 :                     ; DO NOT MODIFY THE nikona FOLDER AS IT WILL GET UPDATED WITH THE
       9/       0 :                     ; LATEST BUGFIXES AND CHANGES WITHOUT INTERFERING YOUR GAME CODE
      10/       0 :                     ; ===========================================================================
      11/       0 :                     
      12/       0 :                     ; ====================================================================
      13/       0 :                     ; ----------------------------------------------------------------
      14/       0 :                     ; NIKONA SETTINGS
      15/       0 :                     ; ----------------------------------------------------------------
      16/       0 :                     
      17/       0 : =$0                  SET_FIRSTSCRN	equ 0		; Starting screen mode number on boot
      18/       0 :                     
      19/       0 :                     ; ====================================================================
      20/       0 :                     ; ----------------------------------------------------------------
      21/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      22/       0 :                     ; ----------------------------------------------------------------
      23/       0 :                     
      24/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      25/       0 : =$2000               MAX_ScrnBuff	equ $2000	; Current Screen's buffer
      26/       0 :                     
      27/       0 :                     ; ----------------------------------------------------
      28/       0 :                     ; SCD, 32X and CD32X ONLY
      29/       0 :                     ;
      30/       0 :                     ; These sections are unused/free on Genesis/Pico
      31/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      32/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      33/       0 :                     
      34/       0 :                     ; ====================================================================
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     ; AS Assembler starting settings
      37/       0 :                     ; ----------------------------------------------------------------
      38/       0 :                     
      39/       0 :                     		cpu 		68000		; Starting CPU is 68000
      40/       0 :                     		padding		off		; Don't pad dc.b
      41/       0 :                     		listing 	purecode
      42/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      43/       0 :                     		page 		0
      44/       0 :                     
      45/       0 :                     ; ====================================================================
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     ; Includes
      48/       0 :                     ; ----------------------------------------------------------------
      49/       0 :                     
      50/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; ** DO NOT CHANGE THE SIZE OF THE STRINGS **
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; or this will NOT boot on hardware
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY: Volume and System(SDK/Engine) name
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Note:
(1)   25/       0 :                     ; Leave the names as is if you haven't modified
(1)   26/       0 :                     ; any of the Nikona SDK files (/nikona folder)
(1)   27/       0 :                     ; --------------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   30/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   31/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   32/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   33/       0 :                     
(1)   34/       0 :                     ; --------------------------------------------------------
(1)   35/       0 :                     ; Release date
(1)   36/       0 :                     ;
(1)   37/       0 :                     ; "(C)NAME year.month"
(1)   38/       0 :                     ; --------------------------------------------------------
(1)   39/       0 :                     
(1)   40/       0 : ="(C)GF64 2024.???"  HTAG_DATEINFO	equ "(C)GF64 2024.???"
(1)   41/       0 :                     
(1)   42/       0 :                     ; --------------------------------------------------------
(1)   43/       0 :                     ; "Domestic" Name: Your game's name in Japan
(1)   44/       0 :                     ; (or in your language)
(1)   45/       0 :                     ; --------------------------------------------------------
(1)   46/       0 :                     
(1)   47/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   48/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   49/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   50/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   51/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   52/       0 :                     
(1)   53/       0 :                     ; --------------------------------------------------------
(1)   54/       0 :                     ; "Overseas" Name: Your game's name in english
(1)   55/       0 :                     ; --------------------------------------------------------
(1)   56/       0 :                     
(1)   57/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   58/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   59/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   60/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   61/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   62/       0 :                     
(1)   63/       0 :                     ; --------------------------------------------------------
(1)   64/       0 :                     ; Serial number
(1)   65/       0 :                     ;
(1)   66/       0 :                     ; "id anything-vv"
(1)   67/       0 :                     ;
(1)   68/       0 :                     ; id:
(1)   69/       0 :                     ; GM - Game
(1)   70/       0 :                     ; AI - Educative
(1)   71/       0 :                     ;
(1)   72/       0 :                     ; anything:
(1)   73/       0 :                     ; Your own serial format, there's no standard for this.
(1)   74/       0 :                     ;
(1)   75/       0 :                     ; vv:
(1)   76/       0 :                     ; Version number: 00 to 99
(1)   77/       0 :                     ; --------------------------------------------------------
(1)   78/       0 :                     
(1)   79/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   80/       0 :                     
(1)   81/       0 :                     ; --------------------------------------------------------
(1)   82/       0 :                     ; Regions supported
(1)   83/       0 :                     ; --------------------------------------------------------
(1)   84/       0 :                     
(1)   85/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   86/       0 :                     
(1)   87/       0 :                     ; --------------------------------------------------------
(1)   88/       0 :                     ; Save data settings, applies to both
(1)   89/       0 :                     ; Cartridge and CD
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; For compatibility the size must be in sizes of $40
(1)   92/       0 :                     ; (or $20 w/BRAM's protection)
(1)   93/       0 :                     ; Size also affects the save copy stored on RAM
(1)   94/       0 :                     ;
(1)   95/       0 :                     ; BRAM name note: Only UPPERCASE and _ are allowed.
(1)   96/       0 :                     ; --------------------------------------------------------
(1)   97/       0 :                     
(1)   98/       0 : =$1                  SET_ENBLSAVE	equ True		; Disable/Enable saving support
(1)   99/       0 : =$200                SET_SRAMSIZE	equ $200		; SRAM/BRAM filesize
(1)  100/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SCD internal save name
(1)  101/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name
(1)  102/       0 :                     
      51/       0 :                     		include	"nikona/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : =$3F800              MAX_WramBank	equ $3F800	; Maxium WRAM available to use + filler $120
(1)    9/       0 :                     
(1)   10/       0 :                     ; ====================================================================
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     ; AS Functions
(1)   13/       0 :                     ; ------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $11112222
(1)   16/       0 :                     
(1)   17/       0 :                     ; Common functions
(1)   18/       0 :                     cell_num	function a,(a<<5)					; Value in VDP cells
(1)   19/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   20/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   21/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reserve
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1				; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory 			; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2025-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2025-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ====================================================================
(1)  155/       0 :                     ; ------------------------------------------------------------
(1)  156/       0 :                     ; Nikona macros
(1)  157/       0 :                     ; ------------------------------------------------------------
(1)  158/       0 :                     
(1)  159/       0 :                     ; --------------------------------------------
(1)  160/       0 :                     ; Screen mode code
(1)  161/       0 :                     ;
(1)  162/       0 :                     ; code_bank START_LABEL,END_LABEL,CODE_PATH
(1)  163/       0 :                     ; --------------------------------------------
(1)  164/       0 :                     
(1)  165/       0 :                     code_bank macro lblstart,lblend,path
(1)  166/       0 :                     	if MCD|MARSCD
(1)  167/       0 :                     		align $800		; SCD/CD32X sector align
(1)  168/       0 :                     	elseif MARS
(1)  169/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  170/       0 :                     		align 4
(1)  171/       0 :                     	endif
(1)  172/       0 :                     lblstart label *			; Register start label
(1)  173/       0 :                     	if MARS
(1)  174/       0 :                     		dephase			; 32X dephase
(1)  175/       0 :                     	endif
(1)  176/       0 :                     mctopscrn:
(1)  177/       0 :                     	if MARS|MCD|MARSCD
(1)  178/       0 :                     		phase RAM_UserCode	; Phase code to RAM area
(1)  179/       0 :                     	endif
(1)  180/       0 :                     mcscrn_s:
(1)  181/       0 :                     	include path;"game/screenX/code.asm"
(1)  182/       0 :                     mcscrn_e:
(1)  183/       0 :                     	if MARS
(1)  184/       0 :                     		dephase			; dephase RAM section
(1)  185/       0 :                     	elseif MCD|MARSCD
(1)  186/       0 :                     		dephase
(1)  187/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)	; Add the used bytes
(1)  188/       0 :                     		align $800
(1)  189/       0 :                     	endif
(1)  190/       0 :                     lblend label *
(1)  191/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  192/       0 :                     	endm
(1)  193/       0 :                     
(1)  194/       0 :                     ; --------------------------------------------
(1)  195/       0 :                     ; Data bank START
(1)  196/       0 :                     ; --------------------------------------------
(1)  197/       0 :                     
(1)  198/       0 :                     data_bank macro startlbl
(1)  199/       0 :                     	if MCD|MARSCD
(1)  200/       0 :                     		align $800		; Sector alignment
(1)  201/       0 :                     	elseif MARS
(1)  202/       0 :                     		align 4			; 32X alignment
(1)  203/       0 :                     	endif
(1)  204/       0 :                     startlbl label *			; Register label
(1)  205/       0 :                     	if MCD|MARSCD			; Set PHASE
(1)  206/       0 :                     		phase sysmcd_wram
(1)  207/       0 :                     	elseif MARS
(1)  208/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  209/       0 :                     	endif
(1)  210/       0 :                     GLBL_MDATA_ST := *			; Save current pos globally
(1)  211/       0 :                     	endm
(1)  212/       0 :                     
(1)  213/       0 :                     ; --------------------------------------------
(1)  214/       0 :                     ; Data bank END
(1)  215/       0 :                     ; --------------------------------------------
(1)  216/       0 :                     
(1)  217/       0 :                     dend_bank macro endlbl
(1)  218/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; Get used size to report
(1)  219/       0 :                     
(1)  220/       0 :                     	; Set 32X bank end
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		if GLBL_MDATA_RP >= $900000+$100000
(1)  223/       0 :                     			error "32X: RAN OUT OF MEMORY FOR A SINGLE 1MB BANK"
(1)  224/       0 :                     		endif
(1)  225/       0 :                     		dephase			; Dephase $900000
(1)  226/       0 :                     
(1)  227/       0 :                     	; Set MCD/CD32X data end
(1)  228/       0 :                     	elseif MCD|MARSCD
(1)  229/       0 :                     		dephase			; Dephase WRAM
(1)  230/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  231/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800	; Fill sectors
(1)  232/       0 :                     		rompad mpadlbl
(1)  233/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  234/       0 :                     
(1)  235/       0 :                     		if GLBL_MDATA_RP > MAX_WramBank
(1)  236/       0 :                     			error "SCD/CD32X: DATA BANK IS TOO LARGE: $\{GLBL_MDATA_RP} of $\{MAX_WramBank}"
(1)  237/       0 :                     		endif
(1)  238/       0 :                     	endif
(1)  239/       0 :                     	endm
(1)  240/       0 :                     
(1)  241/       0 :                     ; --------------------------------------------
(1)  242/       0 :                     ; SCD Stamp Start/End
(1)  243/       0 :                     ; --------------------------------------------
(1)  244/       0 :                     
(1)  245/       0 :                     mcdStampData	macro
(1)  246/       0 :                     		phase 0
(1)  247/       0 :                     		ds.b $80
(1)  248/       0 :                     		endm
(1)  249/       0 :                     
(1)  250/       0 :                     mcdStampDEnd	macro
(1)  251/       0 :                     		align 2
(1)  252/       0 :                     .end:
(1)  253/       0 :                     		erreport "This SCD Stamp data",.end,$3F800
(1)  254/       0 :                     		dephase
(1)  255/       0 :                     		endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; --------------------------------------------
(1)  258/       0 :                     ; 32X graphics data Start/End
(1)  259/       0 :                     ; --------------------------------------------
(1)  260/       0 :                     
(1)  261/       0 :                     marsVramData	macro
(1)  262/       0 :                     		phase 0
(1)  263/       0 :                     		endm
(1)  264/       0 :                     
(1)  265/       0 :                     marsVramDEnd	macro
(1)  266/       0 :                     		align 8
(1)  267/       0 :                     .end:
(1)  268/       0 :                     		erreport "This 32X graphics data",.end,$18000
(1)  269/       0 :                     		dephase
(1)  270/       0 :                     		endm
(1)  271/       0 :                     
(1)  272/       0 :                     ; --------------------------------------------
(1)  273/       0 :                     ; Fill CD sectors
(1)  274/       0 :                     ; --------------------------------------------
(1)  275/       0 :                     
(1)  276/       0 :                     fillSectors macro num
(1)  277/       0 :                     	rept num
(1)  278/       0 :                     		align $800-1
(1)  279/       0 :                     		dc.b 0
(1)  280/       0 :                     	endm
(1)  281/       0 :                     	endm
(1)  282/       0 :                     
(1)  283/       0 :                     ; --------------------------------------------
(1)  284/       0 :                     ; binclude VDP graphics
(1)  285/       0 :                     ; --------------------------------------------
(1)  286/       0 :                     
(1)  287/       0 :                     binclude_dma	macro lblstart,file
(1)  288/       0 :                     	; 32X: Temporally show ROM position
(1)  289/       0 :                     	if MARS
(1)  290/       0 :                     GLBL_LASTPHDMA	set *
(1)  291/       0 :                     	dephase
(1)  292/       0 :                     GLBL_PHASEDMA	set *
(1)  293/       0 :                     		endif
(1)  294/       0 :                     
(1)  295/       0 :                     		align 2
(1)  296/       0 :                     lblstart	label *
(1)  297/       0 :                     		binclude file
(1)  298/       0 :                     		align 2
(1)  299/       0 :                     	; 32X: Return to last phase
(1)  300/       0 :                     	if MARS
(1)  301/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  302/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  303/       0 :                     	endif
(1)  304/       0 :                     		endm
(1)  305/       0 :                     
(1)  306/       0 :                     ; --------------------------------------------
(1)  307/       0 :                     ; binclude VDP graphics w/End label
(1)  308/       0 :                     ; --------------------------------------------
(1)  309/       0 :                     
(1)  310/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  311/       0 :                     	; 32X: Temporally show ROM position
(1)  312/       0 :                     	if MARS
(1)  313/       0 :                     GLBL_LASTPHDMA	set *
(1)  314/       0 :                     	dephase
(1)  315/       0 :                     GLBL_PHASEDMA	set *
(1)  316/       0 :                     		endif
(1)  317/       0 :                     		align 2
(1)  318/       0 :                     lblstart	label *
(1)  319/       0 :                     		binclude file
(1)  320/       0 :                     lblend		label *
(1)  321/       0 :                     		align 2
(1)  322/       0 :                     	; 32X: Return to last phase
(1)  323/       0 :                     	if MARS
(1)  324/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  325/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  326/       0 :                     	endif
(1)  327/       0 :                     		endm
(1)  328/       0 :                     
(1)  329/       0 :                     ; ====================================================================
(1)  330/       0 :                     ; ------------------------------------------------------------
(1)  331/       0 :                     ; Nikona CODE macros
(1)  332/       0 :                     ; ------------------------------------------------------------
(1)  333/       0 :                     
(1)  334/       0 :                     ; --------------------------------------------
(1)  335/       0 :                     ; VDP color debug
(1)  336/       0 :                     ; --------------------------------------------
(1)  337/       0 :                     
(1)  338/       0 :                     vdp_showme	macro color
(1)  339/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  340/       0 :                     		move.w	#color,(vdp_data).l
(1)  341/       0 :                     		endm
(1)  342/       0 :                     
      52/       0 :                     		include	"nikona/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      53/       0 :                     		include	"nikona/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      54/       0 :                     		include	"nikona/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM, Normal or Save data
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (write 9 times)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; VDP data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; VDP control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      55/       0 :                     		include	"nikona/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Used RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Used by Boot ROM *
(1)    7/       0 :                     ; $FFFC00-$FFFD00 | Boot ROM's stack area a7
(1)    8/       0 :                     ; $FFFD00-$FFFDB3 | RESERVED for the Sega CD Vector jumps
(1)    9/       0 :                     ; $FFFDB4-$FFFFFF | Used by Boot ROM *
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; * Free on Cartridge
(1)   12/       0 :                     ; ----------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : =$FFFC00             SET_RAMLIMIT		equ $00FFFC00
(1)   15/       0 :                     
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     ; MAIN USER RAM
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 : (MACRO)              			memory $FFFF0000
(1)   20/       0 : =$0                  GLBL_LASTPC     := *
(1)   20/       0 :                                     dephase
(1)   20/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   20/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   21/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   22/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFFB000 :                     .end:
(1)   24/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   24/    B000 :                     .here:          dephase
(1)   24/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   24/       0 :                                     phase GLBL_LASTPC
(1)   28/       0 :                     
(1)   29/       0 :                     ; ------------------------------------------------
(1)   30/       0 :                     ; Nikona .w section of RAM
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; MUST BE AFTER $FF8000
(1)   33/       0 :                     ; ------------------------------------------------
(1)   34/       0 :                     
(1)   35/       0 : (MACRO)              			memory $FFFFB000
(1)   35/       0 : =$0                  GLBL_LASTPC     := *
(1)   35/       0 :                                     dephase
(1)   35/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   35/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   36/FFFFFFFFFFFFB000 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   37/FFFFFFFFFFFFD000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFD800 :                     
(1)   39/FFFFFFFFFFFFD800 :                     ; ----------------------------------------
(1)   40/FFFFFFFFFFFFD800 :                     ; * FIRST PASS LABELS *
(1)   49/FFFFFFFFFFFFD800 :                     ; ----------------------------------------
(1)   50/FFFFFFFFFFFFD800 :                     ; * AUTOMATIC SIZES *
(1)   52/FFFFFFFFFFFFD800 :                     RAM_MdMisc		ds.b sizeof_mdmisc-RAM_MdMisc
(1)   54/FFFFFFFFFFFFDC1E :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   55/FFFFFFFFFFFFEC18 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   56/FFFFFFFFFFFFEE82 :                     sizeof_MdRam		ds.l 0
(1)   58/FFFFFFFFFFFFEE88 :                     ; ------------------------------------------------
(1)   59/FFFFFFFFFFFFEE88 : (MACRO)              			endmemory
(1)   59/    3E88 :                     .here:          dephase
(1)   59/    3E88 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   59/       0 :                                     phase GLBL_LASTPC
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; SCD and 32X special section
(1)   66/       0 :                     ; --------------------------------------------------------
(1)   67/       0 :                     
(1)   69/       0 : (MACRO)              			memory RAM_MdMisc
(1)   69/       0 : =$0                  GLBL_LASTPC     := *
(1)   69/       0 :                                     dephase
(1)   69/FFFFFFFFFFFFD800 :                                     phase RAM_MDMISC
(1)   69/FFFFFFFFFFFFD800 : =$FFFFFFFFFFFFD800   GLBL_LASTORG    := *
(1)   70/FFFFFFFFFFFFD800 :                     ; ----------------------------------------
(1)   71/FFFFFFFFFFFFD800 :                     ; * FIRST PASS LABELS *
(1)   80/FFFFFFFFFFFFD800 :                     ; ----------------------------------------
(1)   81/FFFFFFFFFFFFD800 :                     ; * AUTOMATIC SIZES *
(1)   83/FFFFFFFFFFFFD800 :                     RAM_MdMcd_Stamps	ds.b $20*MAX_MCDSTAMPS		; SCD Stamps
(1)   84/FFFFFFFFFFFFDC00 :                     RAM_MdMcd_StampSett	ds.b mdstmp_len			; SCD Stamp dot-screen control
(1)   92/FFFFFFFFFFFFDC1E :                     sizeof_mdmisc		ds.l 0
(1)   93/FFFFFFFFFFFFDC24 :                     ; ----------------------------------------
(1)   95/FFFFFFFFFFFFDC24 : (MACRO)              			endmemory
(1)   95/     424 :                     .here:          dephase
(1)   95/     424 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   95/       0 :                                     phase GLBL_LASTPC
(1)   97/       0 :                     
(1)   98/       0 :                     ; --------------------------------------------------------
(1)   99/       0 :                     ; Fixed areas
(1)  100/       0 :                     ; --------------------------------------------------------
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  103/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  104/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  105/       0 :                     
      56/       0 :                     		include	"nikona/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   12/       0 :                     
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     ; Settings
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 : =$20                 MAX_MCDSTAMPS	equ 32		; !! Maximum SCD Stamps
(1)   18/       0 :                     
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Structs
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; Stamp data buffer
(1)   24/       0 :                     ; Fixed size of $20 bytes
(1)   25/       0 :                     
(1)   26/       0 :                     cdstamp		struct
(1)   27/       0 :                     flags		ds.b 1		; Flags
(1)   28/       1 :                     map		ds.b 1		; Map slot index (in WRAM_MdStampList)
(1)   29/       2 :                     cx		ds.w 1		; Center Texture X
(1)   30/       4 :                     cy		ds.w 1		; Center Texture Y
(1)   31/       6 :                     x		ds.w 1		; Stamp X position
(1)   32/       8 :                     y		ds.w 1		; Stamp Y position
(1)   33/       A :                     wdth		ds.w 1		; Stamp width
(1)   34/       C :                     hght		ds.w 1		; Stamp height
(1)   35/       E :                     scale		ds.w 1
(1)   36/      10 :                     rot		ds.w 1
(1)   37/      12 :                     		ds.w 1
(1)   38/      14 :                     		ds.w 1
(1)   39/      16 :                     		ds.w 1
(1)   40/      18 :                     		ds.w 1
(1)   41/      1A :                     		ds.w 1
(1)   42/      1C :                     		ds.w 1
(1)   43/      1E :                     		ds.w 1
(1)   44/      20 :                     ; len		ds.l 0
(1)   45/       0 : =$20                 		endstruct
(1)   46/       0 :                     
(1)   47/       0 :                     ; ============================================================
(1)   48/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)  242/       0 :                     
      57/       0 :                     
      58/       0 :                     ; ====================================================================
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     ; GLOBAL variables
      61/       0 :                     ; ----------------------------------------------------------------
      62/       0 :                     
      63/       0 : (MACRO)              		memory RAM_MdGlobal
      63/       0 : =$0                  GLBL_LASTPC     := *
      63/       0 :                                     dephase
      63/FFFFFFFFFFFFD000 :                                     phase RAM_MDGLOBAL
      63/FFFFFFFFFFFFD000 : =$FFFFFFFFFFFFD000   GLBL_LASTORG    := *
      64/FFFFFFFFFFFFD000 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFD000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFD000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFD000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFD000 :                     ; USER GLOBAL settings and variables at RAM_Global
(1)    4/FFFFFFFFFFFFD000 :                     ;
(1)    5/FFFFFFFFFFFFD000 :                     ; Maximum size: $800 (MAX_Globals at main.asm)
(1)    6/FFFFFFFFFFFFD000 :                     ; ----------------------------------------------------------------
(1)    7/FFFFFFFFFFFFD000 :                     
(1)    8/FFFFFFFFFFFFD000 :                     ; ------------------------------------------------------------
(1)    9/FFFFFFFFFFFFD000 :                     ; Your Score, Lives, Level number, etc. go here.
(1)   10/FFFFFFFFFFFFD000 :                     ; These will remain after changing screens, for temporal
(1)   11/FFFFFFFFFFFFD000 :                     ; buffers use RAM_ScrnBuff (Max. $1000, MAX_ScrnBuff)
(1)   12/FFFFFFFFFFFFD000 :                     ;
(1)   13/FFFFFFFFFFFFD000 :                     ; You can use any name you want but be careful with any
(1)   14/FFFFFFFFFFFFD000 :                     ; conflicting names used by the Nikona code
(1)   15/FFFFFFFFFFFFD000 :                     ; "equ" es permanent, "set" is rewritable during build
(1)   16/FFFFFFFFFFFFD000 :                     ;
(1)   17/FFFFFFFFFFFFD000 :                     ; Example variables:
(1)   18/FFFFFFFFFFFFD000 :                     ;
(1)   19/FFFFFFFFFFFFD000 :                     ; example_value		equ $1234
(1)   20/FFFFFFFFFFFFD000 :                     ; example_bool		equ True
(1)   21/FFFFFFFFFFFFD000 :                     ; example_string	equ "NIKONA"
(1)   22/FFFFFFFFFFFFD000 :                     ;
(1)   23/FFFFFFFFFFFFD000 :                     ; Example RAM labels:
(1)   24/FFFFFFFFFFFFD000 :                     ;
(1)   25/FFFFFFFFFFFFD000 :                     ; RAM_YourName		ds.X N ; X: size b, w, l
(1)   26/FFFFFFFFFFFFD000 :                     ;                              ; N: number of items
(1)   27/FFFFFFFFFFFFD000 :                     ;                              ;
(1)   28/FFFFFFFFFFFFD000 :                     ; RAM_Glbl_ExL		ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   29/FFFFFFFFFFFFD000 :                     ; RAM_Glbl_ExW		ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   30/FFFFFFFFFFFFD000 :                     ; RAM_Glbl_ExB		ds.b 6 ; Reserve 6 BYTES
(1)   31/FFFFFFFFFFFFD000 :                     ;
(1)   32/FFFFFFFFFFFFD000 :                     ; Be careful with the aligment or you will get an
(1)   33/FFFFFFFFFFFFD000 :                     ; ADDRESS ERROR on real hardware
(1)   34/FFFFFFFFFFFFD000 :                     ; ------------------------------------------------------------
(1)   35/FFFFFFFFFFFFD000 :                     
(1)   36/FFFFFFFFFFFFD000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   37/FFFFFFFFFFFFD004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   38/FFFFFFFFFFFFD006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   39/FFFFFFFFFFFFD007 :                     
      66/FFFFFFFFFFFFD007 :                     		align 2
      67/FFFFFFFFFFFFD008 :                     	; ------------------------------------------------
      68/FFFFFFFFFFFFD008 :                     sizeof_MdGlbl	ds.l 0
      72/FFFFFFFFFFFFD00C : (MACRO)              		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      73/FFFFFFFFFFFFD00C : (MACRO)              		endmemory
      73/       C :                     .here:          dephase
      73/       C :                                     ds.b -(.here-GLBL_LASTORG)
      73/       0 :                                     phase GLBL_LASTPC
      74/       0 :                     
      75/       0 :                     ; ====================================================================
      76/       0 :                     ; ----------------------------------------------------------------
      77/       0 :                     ; SAVE data structure
      78/       0 :                     ; ----------------------------------------------------------------
      79/       0 :                     
      80/       0 : (MACRO)              		memory RAM_SaveData
      80/       0 : =$0                  GLBL_LASTPC     := *
      80/       0 :                                     dephase
      80/FFFFFFFFFFFFEC18 :                                     phase RAM_SAVEDATA
      80/FFFFFFFFFFFFEC18 : =$FFFFFFFFFFFFEC18   GLBL_LASTORG    := *
      81/FFFFFFFFFFFFEC18 :                     	; ------------------------------------------------
      82/FFFFFFFFFFFFEC18 :                     		include "game/savestruct.asm"
(1)    1/FFFFFFFFFFFFEC18 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFEC18 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFEC18 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFEC18 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFEC18 :                     
(1)    6/FFFFFFFFFFFFEC18 :                     RAM_Save_TAG		ds.b 4		; ** DO NOT REMOVE
(1)    7/FFFFFFFFFFFFEC1C :                     RAM_Save_Counter	ds.l 1		; Temporal counter
(1)    8/FFFFFFFFFFFFEC20 :                     
      83/FFFFFFFFFFFFEC20 :                     		align 2
      84/FFFFFFFFFFFFEC22 :                     	; ------------------------------------------------
      85/FFFFFFFFFFFFEC22 :                     sizeof_SaveInfo	ds.l 0
      89/FFFFFFFFFFFFEC28 :                     ; 		erreport "SAVE struct",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      90/FFFFFFFFFFFFEC28 : (MACRO)              		endmemory
      90/      10 :                     .here:          dephase
      90/      10 :                                     ds.b -(.here-GLBL_LASTORG)
      90/       0 :                                     phase GLBL_LASTPC
      91/       0 :                     
      92/       0 :                     ; ====================================================================
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     ; Init procedures for all systems
      95/       0 :                     ; ----------------------------------------------------------------
      96/       0 :                     
      97/       0 :                     		!org 0						; Start at 0
      98/       0 :                     
      99/       0 :                     ; ---------------------------------------------
     100/       0 :                     ; SEGA 32X
     101/       0 :                     ; ---------------------------------------------
     102/       0 :                     
     122/       0 :                     		include	"nikona/head_mcd.asm"			; Sega CD header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Header shared for both CD and CD32X
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 5345 4741 4449      		dc.b "SEGADISCSYSTEM  "			; Disc Type (Must be SEGADISCSYSTEM)
                6 : 5343 5359 5354 
                C : 454D 2020          
(1)   12/      10 : 4E49 4B4F 4E41      		dc.b HTAG_DISCID,0			; Volume Name
               16 : 4344 2020 2000    
(1)   14/      1C : 0102                		dc.w HTAG_CDVER				; Volume Version
(1)   15/      1E : 0001                		dc.w $0001				; Volume Type
(1)   16/      20 : 4E49 4B4F 4E41      		dc.b HTAG_SYSNAME,0			; System Name
               26 : 2D53 444B 2000    
(1)   17/      2C : 0000                		dc.w 0					; System Version, Type
(1)   18/      2E : 0000                		dc.w 0
(1)   19/      30 : 0000 0200           		dc.l IP_Start
(1)   20/      34 : 0000 0800           		dc.l IP_End
(1)   21/      38 : 0000 0000           		dc.l 0
(1)   22/      3C : 0000 0000           		dc.l 0
(1)   23/      40 : 0000 1000           		dc.l SP_Start
(1)   24/      44 : 0000 2180           		dc.l SP_End
(1)   25/      48 : 0000 0000           		dc.l 0
(1)   26/      4C : 0000 0000           		dc.l 0
(1)   27/      50 :                     		align $100
(1)   28/     100 : 5345 4741 2047      		dc.b HTAG_SYS_MCD;"SEGA GENESIS    "			; Stays same as Genesis
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   29/     110 : 2843 2947 4636      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   34/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_MCD;"Nikona MCD                                      "
              126 : 204D 4344 2020 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   35/     150 : 4E69 6B6F 6E61                      dc.b HTAG_NOV_MCD;"Nikona SCD                                      "
              156 : 2053 4344 2020 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   37/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02  "
              186 : 4542 5245 572D 
              18C : 3032             
(1)   38/     18E : 4A36 4D20 2020      		dc.b "J6M             "
              194 : 2020 2020 2020 
              19A : 2020 2020          
(1)   39/     19E :                     		align $1F0
(1)   40/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   41/     200 :                     
(1)   42/     200 :                     ; ====================================================================
(1)   43/     200 :                     ; ----------------------------------------------------------------
(1)   44/     200 :                     ; IP
(1)   45/     200 :                     ; ----------------------------------------------------------------
(1)   46/     200 :                     
(1)   47/     200 :                     IP_Start:
(1)   51/     200 :                     		binclude "nikona/mcd/region/eur.bin"
(1)   55/     76E : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              774 : 1100             
(1)   56/     776 : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              77C : 1200             
(1)   57/     77E :                     .wait:
(1)   58/     77E : 0839 0000 00A1      		btst	#0,(z80_bus).l
              784 : 1100             
(1)   59/     786 : 66F6                		bne.s	.wait
(1)   60/     788 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1)   61/     78E : 302E 0004           .wait_vint:	move.w	4(a6),d0
(1)   62/     792 : 0800 0003           		btst	#3,d0
(1)   63/     796 : 67F6                		beq.s	.wait_vint
(1)   64/     798 : 13FC 0000 00A1      		move.b	#0,(sysmcd_reg+mcd_comm_m).l	; Clear MAIN comm
              79E : 200E             
(1)   65/     7A0 : 33FC FD0C 00A1      		move.w	#$FD0C,(sysmcd_reg+mcd_hint).l	; Relocate HBlank jump
              7A6 : 2006             
(1)   66/     7A8 : 4EF9 00FF 2E00      		jmp	($FF0600+MCD_Main).l
(1)   67/     7AE :                     		align $800
(1)   68/     800 :                     IP_End:
(1)   69/     800 :                     		ds.b $260				; Filler
(1)   70/     A60 :                     
(1)   71/     A60 :                     ; ====================================================================
(1)   72/     A60 :                     ; ----------------------------------------------------------------
(1)   73/     A60 :                     ; SP
(1)   74/     A60 :                     ; ----------------------------------------------------------------
(1)   75/     A60 :                     
(1)   76/     A60 :                     		align $800
(1)   77/    1000 :                     SP_Start:
(1)   78/    1000 :                     		include "nikona/mcd/subcpu.asm"
(2)    1/    1000 :                     ; ===========================================================================
(2)    2/    1000 :                     ; -------------------------------------------------------------------
(2)    3/    1000 :                     ; SegaCD SUB-CPU
(2)    4/    1000 :                     ;
(2)    5/    1000 :                     ; Loaded on BOOT
(2)    6/    1000 :                     ; -------------------------------------------------------------------
(2)    7/    1000 :                     
(2)    8/    1000 : =$100                SET_PCMBLK		equ $100	; $100 or $80
(2)    9/    1000 : =$F00                SET_PCMLAST		equ $F00	;
(2)   10/    1000 : =$100                SET_STAMPPOV		equ 256
(2)   11/    1000 :                     ; MAX_MCDSTAMPS		equ 64		; see shared.asm
(2)   12/    1000 :                     
(2)   13/    1000 :                     ; Dot output size: (WIDTH/8)*(HEIGHT/8)*$20
(2)   14/    1000 :                     ; Map slots: $4000 bytes
(2)   15/    1000 :                     ; Trace data: $2000 ($800 bytes * 4)
(2)   16/    1000 :                     ; Stamp list: ($20*MAX_MCDSTAMPS)
(2)   17/    1000 :                     ; Dot-screen: $9600 320x240 max
(2)   18/    1000 : =$20000              WRAM_DotOutput_0	equ $20000
(2)   19/    1000 : =$28000              WRAM_DotOutput_1	equ $28000
(2)   20/    1000 : =$30000              WRAM_MdMapTable		equ $30000
(2)   21/    1000 : =$3A000              WRAM_MdStampList	equ $3A000
(2)   22/    1000 : =$3B000              WRAM_TraceBuff		equ $3B000	; Size $780*2 ($F00)
(2)   23/    1000 : =$3BFFC              WRAM_StampsDone		equ $3BFFC
(2)   24/    1000 : =$3BFFE              WRAM_StampCurrFlip	equ $3BFFE
(2)   25/    1000 :                     
(2)   26/    1000 :                     ; ====================================================================
(2)   27/    1000 :                     ; ----------------------------------------------------------------
(2)   28/    1000 :                     ; Variables
(2)   29/    1000 :                     ; ----------------------------------------------------------------
(2)   30/    1000 :                     
(2)   31/    1000 : =$80000              SCPU_wram	equ $00080000
(2)   32/    1000 : =$FFFE8000           SCPU_bram	equ $FFFE8000
(2)   33/    1000 : =$FFFF0000           SCPU_pcm	equ $FFFF0000
(2)   34/    1000 :                     ; SCPU_pcmram	equ $FFFF2001
(2)   35/    1000 : =$FFFF8000           SCPU_reg	equ $FFFF8000
(2)   36/    1000 :                     
(2)   37/    1000 : =$0                  PCM		equ $00
(2)   38/    1000 : =$1                  ENV		equ $01		; Envelope (Volume)
(2)   39/    1000 : =$3                  PAN		equ $03		; Panning (%bbbbaaaa, aaaa = left, bbbb = right)
(2)   40/    1000 : =$5                  FDL		equ $05		; Sample rate $00xx
(2)   41/    1000 : =$7                  FDH		equ $07		; Sample rate $xx00
(2)   42/    1000 : =$9                  LSL		equ $09		; Loop address $xx00
(2)   43/    1000 : =$B                  LSH		equ $0B		; Loop address $00xx
(2)   44/    1000 : =$D                  ST		equ $0D		; Start address (only $x0, $x000)
(2)   45/    1000 : =$F                  CTREG		equ $0F		; Control register ($80 - Bank select, $C0 - Channel select)
(2)   46/    1000 : =$11                 ONREG		equ $11		; Channel On/Off (BITS: 1 - off, 0 - on)
(2)   47/    1000 :                     
(2)   48/    1000 :                     ; ====================================================================
(2)   49/    1000 :                     ; ----------------------------------------------------------------
(2)   50/    1000 :                     ; Structs
(2)   51/    1000 :                     ; ----------------------------------------------------------------
(2)   52/    1000 :                     
(2)   53/       0 :                     cdpcm		struct
(2)   54/       0 :                     status		ds.b 1		; Status bits
(2)   55/       1 :                     flags		ds.b 1		; Playback flags: %0000000L
(2)   56/       2 :                     start		ds.l 1
(2)   57/       6 :                     length		ds.l 1
(2)   58/       A :                     loop		ds.l 1
(2)   59/       E :                     clen		ds.l 1
(2)   60/      12 :                     cread		ds.l 1
(2)   61/      16 :                     strmhalf	ds.w 1		; Halfway MSB $00/$04/$08/$0C
(2)   62/      18 :                     pitch		ds.w 1
(2)   63/      1A :                     cblk		ds.w 1
(2)   64/      1C :                     cout		ds.w 1
(2)   65/      1E :                     pan		ds.b 1
(2)   66/      1F :                     env		ds.b 1
(2)   67/      20 :                     ; len		ds.l 0
(2)   68/    1000 : =$20                 		endstruct
(2)   69/    1000 :                     
(2)   70/       0 :                     stmpc		struct
(2)   71/       0 :                     XC		ds.w 1
(2)   72/       2 :                     YC		ds.w 1
(2)   73/       4 :                     X		ds.l 1
(2)   74/       8 :                     Y		ds.l 1
(2)   75/       C :                     DX		ds.l 1
(2)   76/      10 :                     DY		ds.l 1
(2)   77/      14 :                     TX		ds.l 1
(2)   78/      18 :                     TY		ds.l 1
(2)   79/      1C :                     xmul		ds.w 1
(2)   80/      1E :                     zmul		ds.w 1
(2)   81/      20 :                     zmul_sin	ds.w 1
(2)   82/      22 :                     zmul_cos	ds.w 1
(2)   83/      24 :                     rot_sin		ds.w 1
(2)   84/      26 :                     rot_cos		ds.w 1
(2)   85/      28 :                     ; len		ds.l 0
(2)   86/    1000 : =$28                 		endstruct
(2)   87/    1000 :                     
(2)   88/       0 :                     stmpi		struct
(2)   89/       0 :                     map		ds.w 1
(2)   90/       2 :                     x		ds.w 1
(2)   91/       4 :                     y		ds.w 1
(2)   92/       6 :                     xr		ds.w 1
(2)   93/       8 :                     yd		ds.w 1
(2)   94/       A :                     flags		ds.w 1
(2)   95/       C :                     ; len		ds.l 0
(2)   96/    1000 : =$C                  		endstruct
(2)   97/    1000 :                     
(2)   98/    1000 :                     ; ====================================================================
(2)   99/    1000 :                     ; ----------------------------------------------------------------
(2)  100/    1000 :                     ; Includes
(2)  101/    1000 :                     ; ----------------------------------------------------------------
(2)  102/    1000 :                     
(2)  103/    1000 :                     		include "nikona/mcd/cdbios.asm"
(3)    1/    1000 :                     ; ===========================================================================
(3)    2/    1000 :                     ; -------------------------------------------------------------------
(3)    3/    1000 :                     ; CD BIOS VARIABLES
(3)    4/    1000 :                     ; -------------------------------------------------------------------
(3)    5/    1000 :                     
(3)    6/    1000 : =$2                  MSCSTOP           equ	$0002
(3)    7/    1000 : =$3                  MSCPAUSEON        equ	$0003
(3)    8/    1000 : =$4                  MSCPAUSEOFF       equ	$0004
(3)    9/    1000 : =$5                  MSCSCANFF         equ	$0005
(3)   10/    1000 : =$6                  MSCSCANFR         equ	$0006
(3)   11/    1000 : =$7                  MSCSCANOFF        equ	$0007
(3)   12/    1000 : =$8                  ROMPAUSEON        equ	$0008
(3)   13/    1000 : =$9                  ROMPAUSEOFF       equ	$0009
(3)   14/    1000 : =$A                  DRVOPEN           equ	$000A
(3)   15/    1000 :                     
(3)   16/    1000 : =$10                 DRVINIT           equ	$0010
(3)   17/    1000 : =$11                 MSCPLAY           equ	$0011
(3)   18/    1000 : =$12                 MSCPLAY1          equ	$0012
(3)   19/    1000 : =$13                 MSCPLAYR          equ	$0013
(3)   20/    1000 : =$14                 MSCPLAYT          equ	$0014
(3)   21/    1000 : =$15                 MSCSEEK           equ	$0015
(3)   22/    1000 : =$16                 MSCSEEKT          equ	$0016
(3)   23/    1000 : =$17                 ROMREAD           equ	$0017
(3)   24/    1000 : =$18                 ROMSEEK           equ	$0018
(3)   25/    1000 : =$19                 MSCSEEK1          equ	$0019
(3)   26/    1000 :                     
(3)   27/    1000 : =$1E                 TESTENTRY         equ	$001E
(3)   28/    1000 : =$1F                 TESTENTRYLOOP     equ	$001F
(3)   29/    1000 : =$20                 ROMREADN          equ	$0020
(3)   30/    1000 : =$21                 ROMREADE          equ	$0021
(3)   31/    1000 :                     
(3)   32/    1000 : =$80                 CDBCHK            equ	$0080
(3)   33/    1000 : =$81                 CDBSTAT           equ	$0081
(3)   34/    1000 : =$82                 CDBTOCWRITE       equ	$0082
(3)   35/    1000 : =$83                 CDBTOCREAD        equ	$0083
(3)   36/    1000 : =$84                 CDBPAUSE          equ	$0084
(3)   37/    1000 : =$85                 FDRSET            equ	$0085
(3)   38/    1000 : =$86                 FDRCHG            equ	$0086
(3)   39/    1000 : =$87                 CDCSTART          equ	$0087
(3)   40/    1000 : =$88                 CDCSTARTP         equ	$0088
(3)   41/    1000 : =$89                 CDCSTOP           equ	$0089
(3)   42/    1000 : =$8A                 CDCSTAT           equ	$008A
(3)   43/    1000 : =$8B                 CDCREAD           equ	$008B
(3)   44/    1000 : =$8C                 CDCTRN            equ	$008C
(3)   45/    1000 : =$8D                 CDCACK            equ	$008D
(3)   46/    1000 : =$8E                 SCDINIT           equ	$008E
(3)   47/    1000 : =$8F                 SCDSTART          equ	$008F
(3)   48/    1000 : =$90                 SCDSTOP           equ	$0090
(3)   49/    1000 : =$91                 SCDSTAT           equ	$0091
(3)   50/    1000 : =$92                 SCDREAD           equ	$0092
(3)   51/    1000 : =$93                 SCDPQ             equ	$0093
(3)   52/    1000 : =$94                 SCDPQL            equ	$0094
(3)   53/    1000 : =$95                 LEDSET            equ	$0095
(3)   54/    1000 : =$96                 CDCSETMODE        equ	$0096
(3)   55/    1000 : =$97                 WONDERREQ         equ	$0097
(3)   56/    1000 : =$98                 WONDERCHK         equ	$0098
(3)   57/    1000 :                     
(3)   58/    1000 : =$0                  CBTINIT           equ	$0000
(3)   59/    1000 : =$1                  CBTINT            equ	$0001
(3)   60/    1000 : =$2                  CBTOPENDISC       equ	$0002
(3)   61/    1000 : =$3                  CBTOPENSTAT       equ	$0003
(3)   62/    1000 : =$4                  CBTCHKDISC        equ	$0004
(3)   63/    1000 : =$5                  CBTCHKSTAT        equ	$0005
(3)   64/    1000 : =$6                  CBTIPDISC         equ	$0006
(3)   65/    1000 : =$7                  CBTIPSTAT         equ	$0007
(3)   66/    1000 : =$8                  CBTSPDISC         equ	$0008
(3)   67/    1000 : =$9                  CBTSPSTAT         equ	$0009
(3)   68/    1000 :                     
(3)   69/    1000 : =$0                  BRMINIT           equ	$0000
(3)   70/    1000 : =$1                  BRMSTAT           equ	$0001
(3)   71/    1000 : =$2                  BRMSERCH          equ	$0002
(3)   72/    1000 : =$3                  BRMREAD           equ	$0003
(3)   73/    1000 : =$4                  BRMWRITE          equ	$0004
(3)   74/    1000 : =$5                  BRMDEL            equ	$0005
(3)   75/    1000 : =$6                  BRMFORMAT         equ	$0006
(3)   76/    1000 : =$7                  BRMDIR            equ	$0007
(3)   77/    1000 : =$8                  BRMVERIFY         equ	$0008
(3)   78/    1000 :                     
(3)   79/    1000 :                     ;-----------------------------------------------------------------------
(3)   80/    1000 :                     ; BIOS ENTRY POINTS
(3)   81/    1000 :                     ;-----------------------------------------------------------------------
(3)   82/    1000 :                     
(3)   83/    1000 : =$5F40               _ADRERR           equ	$00005F40
(3)   84/    1000 : =$5EA0               _BOOTSTAT         equ	$00005EA0
(3)   85/    1000 : =$5F16               _BURAM            equ	$00005F16
(3)   86/    1000 : =$5F22               _CDBIOS           equ	$00005F22
(3)   87/    1000 : =$5F1C               _CDBOOT           equ	$00005F1C
(3)   88/    1000 : =$5E80               _CDSTAT           equ	$00005E80
(3)   89/    1000 : =$5F52               _CHKERR           equ	$00005F52
(3)   90/    1000 : =$5F46               _CODERR           equ	$00005F46
(3)   91/    1000 : =$5F4C               _DEVERR           equ	$00005F4C
(3)   92/    1000 : =$5F76               _LEVEL1           equ	$00005F76
(3)   93/    1000 : =$5F7C               _LEVEL2           equ	$00005F7C
(3)   94/    1000 : =$5F82               _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
(3)   95/    1000 : =$5F88               _LEVEL4           equ	$00005F88
(3)   96/    1000 : =$5F8E               _LEVEL5           equ	$00005F8E
(3)   97/    1000 : =$5F94               _LEVEL6           equ	$00005F94
(3)   98/    1000 : =$5F9A               _LEVEL7           equ	$00005F9A
(3)   99/    1000 : =$5F6A               _NOCOD0           equ	$00005F6A
(3)  100/    1000 : =$5F70               _NOCOD1           equ	$00005F70
(3)  101/    1000 : =$5F0A               _SETJMPTBL        equ	$00005F0A
(3)  102/    1000 : =$5F5E               _SPVERR           equ	$00005F5E
(3)  103/    1000 : =$5F64               _TRACE            equ	$00005F64
(3)  104/    1000 : =$5FA0               _TRAP00           equ	$00005FA0
(3)  105/    1000 : =$5FA6               _TRAP01           equ	$00005FA6
(3)  106/    1000 : =$5FAC               _TRAP02           equ	$00005FAC
(3)  107/    1000 : =$5FB2               _TRAP03           equ	$00005FB2
(3)  108/    1000 : =$5FB8               _TRAP04           equ	$00005FB8
(3)  109/    1000 : =$5FBE               _TRAP05           equ	$00005FBE
(3)  110/    1000 : =$5FC4               _TRAP06           equ	$00005FC4
(3)  111/    1000 : =$5FCA               _TRAP07           equ	$00005FCA
(3)  112/    1000 : =$5FD0               _TRAP08           equ	$00005FD0
(3)  113/    1000 : =$5FD6               _TRAP09           equ	$00005FD6
(3)  114/    1000 : =$5FDC               _TRAP10           equ	$00005FDC
(3)  115/    1000 : =$5FE2               _TRAP11           equ	$00005FE2
(3)  116/    1000 : =$5FE8               _TRAP12           equ	$00005FE8
(3)  117/    1000 : =$5FEE               _TRAP13           equ	$00005FEE
(3)  118/    1000 : =$5FF4               _TRAP14           equ	$00005FF4
(3)  119/    1000 : =$5FFA               _TRAP15           equ	$00005FFA
(3)  120/    1000 : =$5F58               _TRPERR           equ	$00005F58
(3)  121/    1000 : =$5F28               _USERCALL0        equ	$00005F28 ;INIT
(3)  122/    1000 : =$5F2E               _USERCALL1        equ	$00005F2E ;MAIN
(3)  123/    1000 : =$5F34               _USERCALL2        equ	$00005F34 ;VINT
(3)  124/    1000 : =$5F3A               _USERCALL3        equ	$00005F3A ;NOT DEFINED
(3)  125/    1000 : =$5EA6               _USERMODE         equ	$00005EA6
(3)  126/    1000 : =$5F10               _WAITVSYNC        equ	$00005F10
(3)  127/    1000 :                     
(2)  104/    1000 :                     
(2)  105/    1000 :                     ; ====================================================================
(2)  106/    1000 :                     ; ----------------------------------------------------------------
(2)  107/    1000 :                     ; MAIN CODE
(2)  108/    1000 :                     ; ----------------------------------------------------------------
(2)  109/    1000 :                     
(2)  110/    6000 :                     		phase $6000
(2)  111/    6000 : 4D41 494E 2D4E      		dc.b "MAIN-NIKONA",0
             6006 : 494B 4F4E 4100    
(2)  112/    600C : 0100 0000           		dc.w $0100,0
(2)  113/    6010 : 0000 0000           		dc.l 0
(2)  114/    6014 : 0000 0000           		dc.l 0
(2)  115/    6018 : 0000 0020           		dc.l $20
(2)  116/    601C : 0000 0000           		dc.l 0
(2)  117/    6020 :                     .table:
(2)  118/    6020 : 000A                		dc.w SCPU_Init-.table
(2)  119/    6022 : 00AE                		dc.w SCPU_Main-.table
(2)  120/    6024 : 008A                		dc.w SCPU_IRQ-.table
(2)  121/    6026 : 00AC                		dc.w SCPU_User-.table
(2)  122/    6028 : 0000                		dc.w 0
(2)  123/    602A :                     
(2)  124/    602A :                     ; ====================================================================
(2)  125/    602A :                     ; ----------------------------------------------------------------
(2)  126/    602A :                     ; Init
(2)  127/    602A :                     ; ----------------------------------------------------------------
(2)  128/    602A :                     
(2)  129/    602A :                     SCPU_Init:
(2)  130/    602A : 08B8 0003 8033      		bclr	#3,(SCPU_reg+$33).w		; Disable Timer interrupt
(2)  131/    6030 : 11FC 0030 8031      		move.b	#$30,(SCPU_reg+$31).w		; Set timer value
(2)  132/    6036 : 23FC 0000 60CA      		move.l	#SCPU_Timer,(_LEVEL3+2).l	; Write LEVEL 3 jump
             603C : 0000 5F84          
(2)  133/    6040 : 23FC 0000 60A4      		move.l	#SCPU_Stamp,(_LEVEL1+2).l	; Write LEVEL 1 jump
             6046 : 0000 5F78          
(2)  134/    604A : 6100 03DC           		bsr	spCdda_ResetVolume		; Reset CDDA Volume
(2)  135/    604E : 6100 0C2E           		bsr	CdSub_PCM_Init			; Init PCM
(2)  136/    6052 : 13FC 0000 FFFF      		move.b	#0,(SCPU_reg+mcd_memory).l	; Reset Memory mode
             6058 : 8003             
(2)  137/    605A : 41F8 7180           		lea	(SCPU_RAM),a0
(2)  138/    605E : 7000                		moveq	#0,d0
(2)  139/    6060 : 323C 3FFF           		move.w	#($10000/4)-1,d1
(2)  140/    6064 : 30C0                .clr_ram:	move.w	d0,(a0)+
(2)  141/    6066 : 51C9 FFFC           		dbf	d1,.clr_ram
(2)  142/    606A : 41FA 0028           		lea	.drv_init(pc),a0
(2)  143/    606E : 303C 0010           		move.w	#DRVINIT,d0
(2)  144/    6072 : 4EB8 5F22           		jsr	_CDBIOS
(2)  145/    6076 : 6100 04BE           		bsr	spInitFS			; Init ISO Filenikona
(2)  146/    607A : 41FA 001A           		lea	.sub_file(pc),a0		; Search and load the PCM samples
(2)  147/    607E : 6100 04F2           		bsr	spSearchFile
(2)  148/    6082 : 41F9 0004 0000      		lea	(SCPU_DATA),a0
(2)  149/    6088 : 6100 0424           		bsr	spReadSectorsN
(2)  150/    608C : 11FC 0000 800F      		move.b	#0,(SCPU_reg+mcd_comm_s).w	; Report we are free.
(2)  151/    6092 :                     ; 		bset	#3,(SCPU_reg+$33).w		; Enable Timer interrupt
(2)  152/    6092 : 4E75                		rts
(2)  153/    6094 :                     
(2)  154/    6094 :                     ; --------------------------------------------------------
(2)  155/    6094 :                     
(2)  156/    6094 : 01FF                .drv_init:	dc.b $01,$FF
(2)  157/    6096 :                     		align 2
(2)  158/    6096 : 4E4B 4E41 5F53      .sub_file:	dc.b "NKNA_SUB.BIN",0
             609C : 5542 2E42 494E 00 
(2)  159/    60A3 :                     		align 2
(2)  160/    60A4 :                     
(2)  161/    60A4 :                     ; =====================================================================
(2)  162/    60A4 :                     ; ----------------------------------------------------------------
(2)  163/    60A4 :                     ; Level 1 IRQ
(2)  164/    60A4 :                     ; ----------------------------------------------------------------
(2)  165/    60A4 :                     
(2)  166/    60A4 :                     SCPU_Stamp:
(2)  167/    60A4 : 4278 7188           		clr.w	(RAM_CdSub_StampBusy).w
(2)  168/    60A8 : 4E73                		rte
(2)  169/    60AA :                     
(2)  170/    60AA :                     ; =====================================================================
(2)  171/    60AA :                     ; ----------------------------------------------------------------
(2)  172/    60AA :                     ; Level 2 IRQ
(2)  173/    60AA :                     ;
(2)  174/    60AA :                     ; WARNING:
(2)  175/    60AA :                     ; The SEGA screen calls this on every frame
(2)  176/    60AA :                     ; ----------------------------------------------------------------
(2)  177/    60AA :                     
(2)  178/    60AA :                     SCPU_IRQ:
(2)  179/    60AA : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Read MAIN comm
(2)  180/    60AE : 0240 00C0           		andi.w	#$C0,d0
(2)  181/    60B2 : 0C40 00C0           		cmpi.w	#$C0,d0
(2)  182/    60B6 : 6606                		bne	.not_sound
(2)  183/    60B8 : 5238 719B           		addq.b	#1,(RAM_CdSub_PcmReqUpd).w
(2)  184/    60BC : 4E75                		rts
(2)  185/    60BE :                     .not_sound:
(2)  186/    60BE : 0C40 0080           		cmpi.w	#$80,d0
(2)  187/    60C2 : 6604                		bne.s	.not_req
(2)  188/    60C4 : 50F8 719C           		st.b	(RAM_CdSub_StampReqUpd).w
(2)  189/    60C8 :                     .not_req:
(2)  190/    60C8 : 4E75                		rts
(2)  191/    60CA :                     
(2)  192/    60CA :                     ; =====================================================================
(2)  193/    60CA :                     ; ----------------------------------------------------------------
(2)  194/    60CA :                     ; Level 3 IRQ
(2)  195/    60CA :                     ; ----------------------------------------------------------------
(2)  196/    60CA :                     
(2)  197/    60CA :                     SCPU_Timer:
(2)  198/    60CA : 4E73                		rte
(2)  199/    60CC :                     
(2)  200/    60CC :                     ; =====================================================================
(2)  201/    60CC :                     ; ----------------------------------------------------------------
(2)  202/    60CC :                     ; User interrupt
(2)  203/    60CC :                     ; ----------------------------------------------------------------
(2)  204/    60CC :                     
(2)  205/    60CC :                     SCPU_User:
(2)  206/    60CC : 4E75                		rts
(2)  207/    60CE :                     
(2)  208/    60CE :                     ; ====================================================================
(2)  209/    60CE :                     ; ----------------------------------------------------------------
(2)  210/    60CE :                     ; Main
(2)  211/    60CE :                     ;
(2)  212/    60CE :                     ; mcd_comm_m READ ONLY: %BBlpiiii
(2)  213/    60CE :                     ; BB | %01 Busy/Lock bit
(2)  214/    60CE :                     ;      %11 GEMA driver: table transfer request from Z80
(2)  215/    60CE :                     ; l  | If BB == %11: transfer LOCK bit
(2)  216/    60CE :                     ; p  | If BB == %11: transfer PASS bit, else: one extra bit for i
(2)  217/    60CE :                     ; i  | Current Sub-Task
(2)  218/    60CE :                     ;
(2)  219/    60CE :                     ; mcd_comm_s READ/WRITE: %Bbsseeee
(2)  220/    60CE :                     ; B | Sub-CPU is busy
(2)  221/    60CE :                     ; b | IRQ entrance
(2)  222/    60CE :                     ; s | Misc. status bits
(2)  223/    60CE :                     ; e | Error flag
(2)  224/    60CE :                     ;
(2)  225/    60CE :                     ; Uses:
(2)  226/    60CE :                     ; ALL
(2)  227/    60CE :                     ; ----------------------------------------------------------------
(2)  228/    60CE :                     
(2)  229/    60CE :                     SCPU_Main:
(2)  230/    60CE : 6100 0C08           		bsr	CdSub_PCM_Process
(2)  231/    60D2 : 6100 04F2           		bsr	CdSub_StampRender
(2)  232/    60D6 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0	; Read MAIN comm
(2)  233/    60DA : 1200                		move.b	d0,d1
(2)  234/    60DC : 0241 00C0           		andi.w	#$C0,d1
(2)  235/    60E0 : 0C01 00C0           		cmpi.b	#$C0,d1				; Middle of IRQ task?
(2)  236/    60E4 : 67E8                		beq.s	SCPU_Main
(2)  237/    60E6 : 0240 001F           		andi.w	#%00011111,d0
(2)  238/    60EA : 67E2                		beq.s	SCPU_Main
(2)  239/    60EC : 08F8 0007 800F      		bset	#7,(SCPU_reg+mcd_comm_s).w	; Tell MAIN we are BUSY
(2)  240/    60F2 : D040                		add.w	d0,d0				; Task index*2
(2)  241/    60F4 : 323B 000E           		move.w	SCPU_cmdlist(pc,d0.w),d1
(2)  242/    60F8 : 4EBB 100A           		jsr	SCPU_cmdlist(pc,d1.w)
(2)  243/    60FC : 08B8 0007 800F      		bclr	#7,(SCPU_reg+mcd_comm_s).w	; Tell MAIN we are done
(2)  244/    6102 : 60CA                		bra	SCPU_Main
(2)  245/    6104 :                     
(2)  246/    6104 :                     ; =====================================================================
(2)  247/    6104 :                     ; ----------------------------------------------------------------
(2)  248/    6104 :                     ; Commands list
(2)  249/    6104 :                     ; ----------------------------------------------------------------
(2)  250/    6104 :                     
(2)  251/    6104 :                     ; Struct
(2)  252/    6104 :                     ; $01-$07: Common data tasks
(2)  253/    6104 :                     ; $08-$0F: BRAM tasks
(2)  254/    6104 :                     ; $10-$17: CDDA Playback control
(2)  255/    6104 :                     ; $18-$1F: Stamps
(2)  256/    6104 :                     
(2)  257/    6104 :                     SCPU_cmdlist:
(2)  258/    6104 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $00 | **INVALID**
(2)  259/    6106 : 0042                		dc.w SubTask_cmnd01-SCPU_cmdlist	; $01 | Read file from disc, copy data through mcd_dcomm_s
(2)  260/    6108 : 00B4                		dc.w SubTask_cmnd02-SCPU_cmdlist	; $02 | Read file from disc, outputs to WORD-RAM
(2)  261/    610A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $03
(2)  262/    610C : 00F4                		dc.w SubTask_cmnd04-SCPU_cmdlist	; $04
(2)  263/    610E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $05
(2)  264/    6110 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $06
(2)  265/    6112 : 0164                		dc.w SubTask_cmnd07-SCPU_cmdlist	; $07 | Set 2M WORD-RAM permission to MAIN
(2)  266/    6114 :                     
(2)  267/    6114 : 0170                		dc.w SubTask_cmnd08-SCPU_cmdlist	; $08 | BRAM support Initialize (MUST CALL FIRST)
(2)  268/    6116 : 01D2                		dc.w SubTask_cmnd09-SCPU_cmdlist	; $09 | BRAM Read data
(2)  269/    6118 : 024A                		dc.w SubTask_cmnd0A-SCPU_cmdlist	; $0A | BRAM Save data
(2)  270/    611A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0B
(2)  271/    611C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0C
(2)  272/    611E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0D
(2)  273/    6120 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0E
(2)  274/    6122 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0F
(2)  275/    6124 :                     
(2)  276/    6124 : 02E0                		dc.w SubTask_cmnd10-SCPU_cmdlist	; $10 | Play CDDA once
(2)  277/    6126 : 02F6                		dc.w SubTask_cmnd11-SCPU_cmdlist	; $11 | Play CDDA and loop
(2)  278/    6128 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $12 |
(2)  279/    612A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $13 |
(2)  280/    612C : 030C                		dc.w SubTask_cmnd14-SCPU_cmdlist	; $14 | Stop CDDA
(2)  281/    612E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $15 |
(2)  282/    6130 : 0316                		dc.w SubTask_cmnd16-SCPU_cmdlist	; $16 | CDDA fade-out
(2)  283/    6132 : 0324                		dc.w SubTask_cmnd17-SCPU_cmdlist	; $17 | CDDA Reset volumes
(2)  284/    6134 :                     
(2)  285/    6134 : 0346                		dc.w SubTask_cmnd18-SCPU_cmdlist	; $18 | Enable Stamps
(2)  286/    6136 : 037A                		dc.w SubTask_cmnd19-SCPU_cmdlist	; $19 | Disable Stamps
(2)  287/    6138 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1A |
(2)  288/    613A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1B |
(2)  289/    613C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1C |
(2)  290/    613E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1D |
(2)  291/    6140 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1E |
(2)  292/    6142 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1F |
(2)  293/    6144 :                     
(2)  294/    6144 :                     ; =====================================================================
(2)  295/    6144 :                     ; ----------------------------------------------------------------
(2)  296/    6144 :                     ; Commands $01-$0F
(2)  297/    6144 :                     ;
(2)  298/    6144 :                     ; General purpose data transfering
(2)  299/    6144 :                     ; ----------------------------------------------------------------
(2)  300/    6144 :                     
(2)  301/    6144 :                     ; --------------------------------------------------------
(2)  302/    6144 :                     ; NULL COMMAND
(2)  303/    6144 :                     ; --------------------------------------------------------
(2)  304/    6144 :                     
(2)  305/    6144 :                     SubTask_cmnd00:
(2)  306/    6144 : 4E75                		rts
(2)  307/    6146 :                     
(2)  308/    6146 :                     ; --------------------------------------------------------
(2)  309/    6146 :                     ; Command $01
(2)  310/    6146 :                     ;
(2)  311/    6146 :                     ; Read data from disc and transfer the output data
(2)  312/    6146 :                     ; through mcd_dcomm_s as packets of $10 bytes.
(2)  313/    6146 :                     ;
(2)  314/    6146 :                     ; Input:
(2)  315/    6146 :                     ; mcd_comm_m  | %lp------
(2)  316/    6146 :                     ;               l - LOCK bit set by MAIN-CPU
(2)  317/    6146 :                     ;               p - PASS bit
(2)  318/    6146 :                     ; mcd_dcomm_m | "FILENAME.BIN",0
(2)  319/    6146 :                     ;               Filename string 8.3 zero terminated
(2)  320/    6146 :                     ;
(2)  321/    6146 :                     ; Returns:
(2)  322/    6146 :                     ; mcd_comm_s  | %--ep----
(2)  323/    6146 :                     ;               p - SUB-CPU reports that data passed
(2)  324/    6146 :                     ;               e - Flag: 0 - Found file
(2)  325/    6146 :                     ;                         1 - File NOT found
(2)  326/    6146 :                     ; mcd_dcomm_s | $00-$10
(2)  327/    6146 :                     ;               Current data packet.
(2)  328/    6146 :                     ; --------------------------------------------------------
(2)  329/    6146 :                     
(2)  330/    6146 :                     SubTask_cmnd01:
(2)  331/    6146 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - Filename
(2)  332/    614A : 6100 0426           		bsr	spSearchFile
(2)  333/    614E : 6500 028C           		bcs	SubTask_RetErr_NoFile
(2)  334/    6152 : 4A81                		tst.l	d1
(2)  335/    6154 : 6700 0286           		beq	SubTask_RetErr_NoFile
(2)  336/    6158 : 41F9 0000 BC12      		lea	(RAM_CdSub_GotData).l,a0		; Temporal OUTPUT location
(2)  337/    615E : 2F08                		move.l	a0,-(sp)
(2)  338/    6160 : 6100 034C           		bsr	spReadSectorsN
(2)  339/    6164 : 205F                		move.l	(sp)+,a0			; a0 - Read temporal location
(2)  340/    6166 : 45F8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a2	; a1 - Output data packets
(2)  341/    616A :                     .next_packet:
(2)  342/    616A : 224A                		move.l	a2,a1
(2)  343/    616C :                     	rept $10/2
(2)  344/    616C :                     		move.w	(a0)+,(a1)+			; WORD writes
(2)  345/    616C :                     	endm
(2)  344/    616C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    616E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6170 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6172 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6174 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6176 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6178 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    617A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  346/    617C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Sub PASS the data.
(2)  347/    6180 : 08C7 0004           		bset	#4,d7
(2)  348/    6184 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  349/    6188 : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Read MAIN comm
(2)  350/    618C : 0807 0007           		btst	#7,d7				; Locked?
(2)  351/    6190 : 671E                		beq.s	.exit_now
(2)  352/    6192 : 0807 0006           		btst	#6,d7				; MAIN got the data?
(2)  353/    6196 : 67F0                		beq.s	.wait_main
(2)  354/    6198 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Clear Sub PASS bit.
(2)  355/    619C : 0887 0004           		bclr	#4,d7
(2)  356/    61A0 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  357/    61A4 : 1E38 800E           .wait_main_o:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN response
(2)  358/    61A8 : 0807 0006           		btst	#6,d7
(2)  359/    61AC : 66F6                		bne.s	.wait_main_o
(2)  360/    61AE : 60BA                		bra.s	.next_packet
(2)  361/    61B0 :                     ; Finished:
(2)  362/    61B0 :                     .exit_now:
(2)  363/    61B0 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2)  364/    61B6 : 4E75                		rts
(2)  365/    61B8 :                     
(2)  366/    61B8 :                     ; --------------------------------------------------------
(2)  367/    61B8 :                     ; Command $02
(2)  368/    61B8 :                     ;
(2)  369/    61B8 :                     ; Read data from disc directly to WORD-RAM,
(2)  370/    61B8 :                     ; REQUIRES THE DMNA BIT TO BE SET BY MAIN-CPU
(2)  371/    61B8 :                     ;
(2)  372/    61B8 :                     ; Input:
(2)  373/    61B8 :                     ; mcd_dcomm_m | $00-$0C - "FILENAME.BIN",0
(2)  374/    61B8 :                     ;             |           Filename string 8.3 incl. zero
(2)  375/    61B8 :                     ;             |
(2)  376/    61B8 :                     ;             | $0D - Destination increment * $800
(2)  377/    61B8 :                     ;             | $0E -
(2)  378/    61B8 :                     ;             | $0F -
(2)  379/    61B8 :                     ;
(2)  380/    61B8 :                     ; Note:
(2)  381/    61B8 :                     ; DO NOT CALL THIS IF STAMPS ARE IN THE MIDDLE
(2)  382/    61B8 :                     ; OF RENDERING
(2)  383/    61B8 :                     ; --------------------------------------------------------
(2)  384/    61B8 :                     
(2)  385/    61B8 :                     SubTask_cmnd02:
(2)  386/    61B8 : 1E39 FFFF 8003      		move.b	(SCPU_reg+mcd_memory).l,d7	; Wait until MAIN sets Word-RAM to SUB. (DMNA)
(2)  387/    61BE : 0807 0001           		btst	#1,d7
(2)  388/    61C2 : 67F4                		beq.s	SubTask_cmnd02
(2)  389/    61C4 :                     
(2)  390/    61C4 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  391/    61C8 : 6100 03A8           		bsr	spSearchFile
(2)  392/    61CC : 6500 020E           		bcs	SubTask_RetErr_NoFile
(2)  393/    61D0 : 4A81                		tst.l	d1
(2)  394/    61D2 : 6700 0208           		beq	SubTask_RetErr_NoFile
(2)  395/    61D6 : 41F9 0008 0000      		lea	(SCPU_wram),a0
(2)  396/    61DC : 7E00                		moveq	#0,d7
(2)  397/    61DE : 1E38 801D           		move.b	(SCPU_reg+mcd_dcomm_m+$0D).w,d7
(2)  398/    61E2 : E14F                		lsl.w	#8,d7
(2)  399/    61E4 : E74F                		lsl.w	#3,d7
(2)  400/    61E6 : D1C7                		add.l	d7,a0
(2)  401/    61E8 : 6100 02C4           		bsr	spReadSectorsN
(2)  402/    61EC : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN (RET=1)
             61F2 : 8003             
(2)  403/    61F4 : 67F6                		beq.s	.wait_ret
(2)  404/    61F6 : 4E75                		rts
(2)  405/    61F8 :                     
(2)  406/    61F8 :                     ; --------------------------------------------------------
(2)  407/    61F8 :                     ; Command $04
(2)  408/    61F8 :                     ;
(2)  409/    61F8 :                     ; Transfer memory from MAIN-CPU to SUB-CPU in
(2)  410/    61F8 :                     ; packets of 10-bytes.
(2)  411/    61F8 :                     ;
(2)  412/    61F8 :                     ; Input:
(2)  413/    61F8 :                     ; mcd_comm_m  | %lp------
(2)  414/    61F8 :                     ;               l - LOCK bit
(2)  415/    61F8 :                     ;               p - PASS bit
(2)  416/    61F8 :                     ; mcd_dcomm_m | BEFORE mcd_comm_s returns first PASS:
(2)  417/    61F8 :                     ;               $00-$03    - Output Destination in Sub-CPU
(2)  418/    61F8 :                     ;                         area
(2)  419/    61F8 :                     ;               AFTER mcd_comm_s returns first PASS:
(2)  420/    61F8 :                     ;               $00-$08 - Data packet
(2)  421/    61F8 :                     ;
(2)  422/    61F8 :                     ; Returns:
(2)  423/    61F8 :                     ; mcd_comm_s  | %-------p
(2)  424/    61F8 :                     ;               p - SUB-CPU got the data packet
(2)  425/    61F8 :                     ; --------------------------------------------------------
(2)  426/    61F8 :                     
(2)  427/    61F8 :                     SubTask_cmnd04:
(2)  428/    61F8 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  429/    61FC : 08C7 0004           		bset	#4,d7
(2)  430/    6200 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  431/    6204 :                     .wait_enter:
(2)  432/    6204 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait for MAIN
(2)  433/    6208 : 0807 0007           		btst	#7,d7
(2)  434/    620C : 67F6                		beq.s	.wait_enter
(2)  435/    620E : 45F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a2
(2)  436/    6212 : 3E12                		move.w	(a2),d7				; a1 - Destination
(2)  437/    6214 : 4847                		swap	d7
(2)  438/    6216 : 3E2A 0002           		move.w	2(a2),d7
(2)  439/    621A : 2247                		move.l	d7,a1
(2)  440/    621C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  441/    6220 : 0887 0004           		bclr	#4,d7
(2)  442/    6224 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  443/    6228 :                     .next_packet:
(2)  444/    6228 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7
(2)  445/    622C : 0807 0007           		btst	#7,d7
(2)  446/    6230 : 6734                		beq.s	.exit_now
(2)  447/    6232 : 0807 0006           		btst	#6,d7
(2)  448/    6236 : 67F0                		beq.s	.next_packet
(2)  449/    6238 : 204A                		move.l	a2,a0
(2)  450/    623A :                     	rept 8/2
(2)  451/    623A :                     		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  452/    623A :                     	endm
(2)  451/    623A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  451/    623C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  451/    623E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  451/    6240 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  453/    6242 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  454/    6246 : 08C7 0004           		bset	#4,d7
(2)  455/    624A : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  456/    624E : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN
(2)  457/    6252 : 0807 0006           		btst	#6,d7
(2)  458/    6256 : 66F6                		bne.s	.wait_main
(2)  459/    6258 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  460/    625C : 0887 0004           		bclr	#4,d7
(2)  461/    6260 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  462/    6264 : 60C2                		bra	.next_packet
(2)  463/    6266 :                     .exit_now:
(2)  464/    6266 : 4E75                		rts
(2)  465/    6268 :                     
(2)  466/    6268 :                     ; --------------------------------------------------------
(2)  467/    6268 :                     ; Command $07
(2)  468/    6268 :                     ;
(2)  469/    6268 :                     ; Set Word-RAM permission to MAIN-CPU
(2)  470/    6268 :                     ; --------------------------------------------------------
(2)  471/    6268 :                     
(2)  472/    6268 :                     SubTask_cmnd07:
(2)  473/    6268 : 08F9 0000 FFFF      		bset	#0,(SCPU_reg+mcd_memory).l	; Set WORD-RAM to MAIN, RET=1
             626E : 8003             
(2)  474/    6270 : 67F6                		beq.s	SubTask_cmnd07
(2)  475/    6272 : 4E75                		rts
(2)  476/    6274 :                     
(2)  477/    6274 :                     ; =====================================================================
(2)  478/    6274 :                     ; ----------------------------------------------------------------
(2)  479/    6274 :                     ; Commands $08-$0F
(2)  480/    6274 :                     ;
(2)  481/    6274 :                     ; BRAM Management
(2)  482/    6274 :                     ;
(2)  483/    6274 :                     ; IF using CD32X: RV MUST BE ENABLED
(2)  484/    6274 :                     ; ----------------------------------------------------------------
(2)  485/    6274 :                     
(2)  486/    6274 :                     ; --------------------------------------------------------
(2)  487/    6274 :                     ; Command $08
(2)  488/    6274 :                     ;
(2)  489/    6274 :                     ; Init or check if SAVE file exists
(2)  490/    6274 :                     ;
(2)  491/    6274 :                     ; Input:
(2)  492/    6274 :                     ; mcd_dcomm_m | $00-$0B: dc.b "STR_SAVEDAT",0
(2)  493/    6274 :                     ;             |     $0C: Save Size / $40
(2)  494/    6274 :                     ;             |     $0E: Flags
(2)  495/    6274 :                     ;
(2)  496/    6274 :                     ; Returns:
(2)  497/    6274 :                     ; mcd_dcomm_s | $00.w:  0 | OK
(2)  498/    6274 :                     ;             |        -1 | File not found
(2)  499/    6274 :                     ;             |        -2 | Format error or
(2)  500/    6274 :                     ;             |             No enough space
(2)  501/    6274 :                     ;             | $02.w: Back-up size
(2)  502/    6274 :                     ;             | $04.w: Flags
(2)  503/    6274 :                     ; --------------------------------------------------------
(2)  504/    6274 :                     
(2)  505/    6274 :                     SubTask_cmnd08:
(2)  506/    6274 : 6100 014C           		bsr	SubTsk_BramCall
(2)  507/    6278 : 654E                		bcs	.big_fail
(2)  508/    627A : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; Copy Info
(2)  509/    627E : 43F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a1
(2)  510/    6284 : 7E07                		moveq	#($10/2)-1,d7
(2)  511/    6286 :                     .copy_paste:
(2)  512/    6286 : 32D8                		move.w	(a0)+,(a1)+
(2)  513/    6288 : 51CF FFFC           		dbf	d7,.copy_paste
(2)  514/    628C : 43F9 0001 4AE2      		lea	(RAM_CdSub_BramStrings).l,a1	; Get string data
(2)  515/    6292 : 7001                		moveq	#BRMSTAT,d0
(2)  516/    6294 : 4EB8 5F16           		jsr	_BURAM
(2)  517/    6298 : 3E38 801C           		move.w	(SCPU_reg+mcd_dcomm_m+$0C).w,d7
(2)  518/    629C : B047                		cmp.w	d7,d0				; Enough space to save in BRAM?
(2)  519/    629E : 6D28                		blt.s	.big_fail
(2)  520/    62A0 : 41F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  521/    62A6 : 303C 0002           		move.w	#BRMSERCH,d0			; Search our file ("SERCH")
(2)  522/    62AA : 4EB8 5F16           		jsr	_BURAM
(2)  523/    62AE : 6500 0124           		bcs	SubTsk_ReturnFail		; If not found return -1
(2)  524/    62B2 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  525/    62B6 : 0241 00FF           		andi.w	#$FF,d1
(2)  526/    62BA : 3CBC 0000           		move.w	#0,(a6)				; Report OK
(2)  527/    62BE : 3D40 0002           		move.w	d0,2(a6)			; Number of blocks of this save
(2)  528/    62C2 : 3D41 0004           		move.w	d1,4(a6)			; Mode: 0=normal -1=Protected
(2)  529/    62C6 : 4E75                		rts
(2)  530/    62C8 :                     
(2)  531/    62C8 :                     ; No RAM / No Format
(2)  532/    62C8 :                     .big_fail:
(2)  533/    62C8 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  534/    62CC : 3CBC FFFE           		move.w	#-2,(a6)			; Report FAIL
(2)  535/    62D0 : 3D40 0002           		move.w	d0,2(a6)			; Number of block of this save
(2)  536/    62D4 : 4E75                		rts
(2)  537/    62D6 :                     
(2)  538/    62D6 :                     ; --------------------------------------------------------
(2)  539/    62D6 :                     ; Command $09
(2)  540/    62D6 :                     ;
(2)  541/    62D6 :                     ; READ Save data
(2)  542/    62D6 :                     ;
(2)  543/    62D6 :                     ; Uses:
(2)  544/    62D6 :                     ; mcd_comm_m  | bits 7 and 4
(2)  545/    62D6 :                     ; mcd_comm_s  | bit 4
(2)  546/    62D6 :                     ; mcd_dcomm_s | Data packets to send
(2)  547/    62D6 :                     ;
(2)  548/    62D6 :                     ; Returns:
(2)  549/    62D6 :                     ; mcd_dcomm_s | $00.w:
(2)  550/    62D6 :                     ;             |  0 - OK
(2)  551/    62D6 :                     ;             | -1 - Not found / Fatal error
(2)  552/    62D6 :                     ;             | ** Overwriten later on
(2)  553/    62D6 :                     ; --------------------------------------------------------
(2)  554/    62D6 :                     
(2)  555/    62D6 :                     SubTask_cmnd09:
(2)  556/    62D6 : 31FC 0000 8020      		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  557/    62DC : 6100 00E4           		bsr	SubTsk_BramCall
(2)  558/    62E0 : 6500 00F2           		bcs	SubTsk_ReturnFail
(2)  559/    62E4 : 41F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  560/    62EA : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  561/    62F0 : 7200                		moveq	#0,d1
(2)  562/    62F2 : 303C 0003           		move.w	#BRMREAD,d0
(2)  563/    62F6 : 4EB8 5F16           		jsr	_BURAM
(2)  564/    62FA : 6500 00D8           		bcs	SubTsk_ReturnFail
(2)  565/    62FE : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w	; Clear SIGNAL
(2)  566/    6304 : 0838 0004 800E      .wait_lock:	btst	#4,(SCPU_reg+mcd_comm_m).w	; Wait LOCK
(2)  567/    630A : 66F8                		bne.s	.wait_lock
(2)  568/    630C : 41F8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a0
(2)  569/    6310 : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  570/    6316 : 303C 001F           		move.w	#(SET_SRAMSIZE/$10)-1,d0
(2)  571/    631A : 2448                .send_data:	move.l	a0,a2
(2)  572/    631C : 34D9                		move.w	(a1)+,(a2)+
(2)  573/    631E : 34D9                		move.w	(a1)+,(a2)+
(2)  574/    6320 : 34D9                		move.w	(a1)+,(a2)+
(2)  575/    6322 : 34D9                		move.w	(a1)+,(a2)+
(2)  576/    6324 : 34D9                		move.w	(a1)+,(a2)+
(2)  577/    6326 : 34D9                		move.w	(a1)+,(a2)+
(2)  578/    6328 : 34D9                		move.w	(a1)+,(a2)+
(2)  579/    632A : 34D9                		move.w	(a1)+,(a2)+
(2)  580/    632C : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w
(2)  581/    6332 : 0838 0004 800E      .wait_signi:	btst	#4,(SCPU_reg+mcd_comm_m).w
(2)  582/    6338 : 67F8                		beq.s	.wait_signi
(2)  583/    633A : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2)  584/    6340 : 0838 0004 800E      .wait_signo:	btst	#4,(SCPU_reg+mcd_comm_m).w
(2)  585/    6346 : 66F8                		bne.s	.wait_signo
(2)  586/    6348 : 51C8 FFD0           		dbf	d0,.send_data
(2)  587/    634C : 4E75                		rts
(2)  588/    634E :                     
(2)  589/    634E :                     ; --------------------------------------------------------
(2)  590/    634E :                     ; Command $0A
(2)  591/    634E :                     ;
(2)  592/    634E :                     ; WRITE Save data
(2)  593/    634E :                     ;
(2)  594/    634E :                     ; Uses:
(2)  595/    634E :                     ; mcd_comm_m  | bits 7 and 4
(2)  596/    634E :                     ; mcd_comm_s  | bit 4
(2)  597/    634E :                     ; mcd_dcomm_m | Data packets to recieve
(2)  598/    634E :                     ;
(2)  599/    634E :                     ; Returns:
(2)  600/    634E :                     ; mcd_dcomm_s | $00.w:
(2)  601/    634E :                     ;             |  0 - OK
(2)  602/    634E :                     ;             | -1 - Not found
(2)  603/    634E :                     ; --------------------------------------------------------
(2)  604/    634E :                     
(2)  605/    634E :                     SubTask_cmnd0A:
(2)  606/    634E : 31FC 0000 8020      		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  607/    6354 : 616C                		bsr	SubTsk_BramCall
(2)  608/    6356 : 657C                		bcs	SubTsk_ReturnFail
(2)  609/    6358 :                     
(2)  610/    6358 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w	; Clean SIGNAL
(2)  611/    635E : 0838 0007 800E      .wait_lock:	btst	#7,(SCPU_reg+mcd_comm_m).w	; Wait LOCK
(2)  612/    6364 : 67F8                		beq.s	.wait_lock
(2)  613/    6366 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  614/    636A : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  615/    6370 : 0838 0007 800E      .main_loop:	btst	#7,(SCPU_reg+mcd_comm_m).w	; LOCKED?
(2)  616/    6376 : 6730                		beq.s	.exit_now
(2)  617/    6378 : 0838 0004 800E      		btst	#4,(SCPU_reg+mcd_comm_m).w	; PASS?
(2)  618/    637E : 67F0                		beq.s	.main_loop
(2)  619/    6380 : 2448                		move.l	a0,a2
(2)  620/    6382 : 32DA                		move.w	(a2)+,(a1)+
(2)  621/    6384 : 32DA                		move.w	(a2)+,(a1)+
(2)  622/    6386 : 32DA                		move.w	(a2)+,(a1)+
(2)  623/    6388 : 32DA                		move.w	(a2)+,(a1)+
(2)  624/    638A : 32DA                		move.w	(a2)+,(a1)+
(2)  625/    638C : 32DA                		move.w	(a2)+,(a1)+
(2)  626/    638E : 32DA                		move.w	(a2)+,(a1)+
(2)  627/    6390 : 32DA                		move.w	(a2)+,(a1)+
(2)  628/    6392 : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w	; Set SIGNAL
(2)  629/    6398 : 0838 0004 800E      .wait_pass:	btst	#4,(SCPU_reg+mcd_comm_m).w	; Wait PASS clear
(2)  630/    639E : 66F8                		bne.s	.wait_pass
(2)  631/    63A0 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w	; Clear SIGNAL
(2)  632/    63A6 : 60C8                		bra.s	.main_loop
(2)  633/    63A8 :                     .exit_now:
(2)  634/    63A8 : 41F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  635/    63AE : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  636/    63B4 : 7200                		moveq	#0,d1
(2)  637/    63B6 : 303C 0004           		move.w	#BRMWRITE,d0
(2)  638/    63BA : 4EB8 5F16           		jsr	_BURAM
(2)  639/    63BE : 6514                		bcs	SubTsk_ReturnFail
(2)  640/    63C0 : 4E75                		rts
(2)  641/    63C2 :                     
(2)  642/    63C2 :                     ; --------------------------------------------------------
(2)  643/    63C2 :                     
(2)  644/    63C2 :                     SubTsk_BramCall:
(2)  645/    63C2 : 41F9 0001 44A2      		lea	(RAM_CdSub_BramWork).l,a0
(2)  646/    63C8 : 43F9 0001 4AE2      		lea	(RAM_CdSub_BramStrings).l,a1
(2)  647/    63CE : 7000                		moveq	#BRMINIT,d0
(2)  648/    63D0 : 4EF8 5F16           		jmp	_BURAM
(2)  649/    63D4 :                     
(2)  650/    63D4 :                     SubTsk_ReturnFail:
(2)  651/    63D4 : 31FC FFFF 8020      		move.w	#-1,(SCPU_reg+mcd_dcomm_s).w
(2)  652/    63DA : 4E75                		rts
(2)  653/    63DC :                     ; SubTsk_ReturnOk:
(2)  654/    63DC :                     ; 		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  655/    63DC :                     ; 		rts
(2)  656/    63DC :                     
(2)  657/    63DC :                     SubTask_RetErr_NoFile:
(2)  658/    63DC : 11FC 0001 800F      		move.b	#%00000001,(SCPU_reg+mcd_comm_s).w	; SET ERROR %0001
(2)  659/    63E2 :                     ; 	; *** REMOVE THIS ON RELEASE ***
(2)  660/    63E2 :                     ; 		move.w	#4,d1					; READY off | ACCESS blink
(2)  661/    63E2 :                     ; 		move.w	#LEDSET,d0
(2)  662/    63E2 :                     ; 		jmp	(_CDBIOS).w
(2)  663/    63E2 :                     ; 	; ***
(2)  664/    63E2 : 4E75                		rts
(2)  665/    63E4 :                     
(2)  666/    63E4 :                     ; =====================================================================
(2)  667/    63E4 :                     ; ----------------------------------------------------------------
(2)  668/    63E4 :                     ; Commands $10-$17
(2)  669/    63E4 :                     ;
(2)  670/    63E4 :                     ; CDDA
(2)  671/    63E4 :                     ; ----------------------------------------------------------------
(2)  672/    63E4 :                     
(2)  673/    63E4 :                     ; --------------------------------------------------------
(2)  674/    63E4 :                     ; Command $10
(2)  675/    63E4 :                     ;
(2)  676/    63E4 :                     ; Play CDDA Track, stops on finish.
(2)  677/    63E4 :                     ;
(2)  678/    63E4 :                     ; Input:
(2)  679/    63E4 :                     ; mcd_dcomm_m | dc.w track_num
(2)  680/    63E4 :                     ;               - DO NOT USE TRACK 1
(2)  681/    63E4 :                     ;               - TRACK 0 IS INVALID
(2)  682/    63E4 :                     ; --------------------------------------------------------
(2)  683/    63E4 :                     
(2)  684/    63E4 :                     SubTask_cmnd10:
(2)  685/    63E4 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  686/    63E8 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  687/    63EC : 613A                		bsr	spCdda_ResetVolume
(2)  688/    63EE : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  689/    63F2 : 303C 0012           		move.w	#MSCPLAY1,d0
(2)  690/    63F6 : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  691/    63FA :                     
(2)  692/    63FA :                     ; --------------------------------------------------------
(2)  693/    63FA :                     ; Command $11
(2)  694/    63FA :                     ;
(2)  695/    63FA :                     ; Play CDDA Track, loops indefiniely.
(2)  696/    63FA :                     ;
(2)  697/    63FA :                     ; Input:
(2)  698/    63FA :                     ; mcd_dcomm_m | dc.w track_num
(2)  699/    63FA :                     ;               - DO NOT USE TRACK 1
(2)  700/    63FA :                     ;               - TRACK 0 IS INVALID
(2)  701/    63FA :                     ; --------------------------------------------------------
(2)  702/    63FA :                     
(2)  703/    63FA :                     SubTask_cmnd11:
(2)  704/    63FA : 303C 0002           		move.w	#MSCSTOP,d0
(2)  705/    63FE : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  706/    6402 : 6124                		bsr	spCdda_ResetVolume
(2)  707/    6404 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  708/    6408 : 303C 0013           		move.w	#MSCPLAYR,d0
(2)  709/    640C : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  710/    6410 :                     
(2)  711/    6410 :                     ; --------------------------------------------------------
(2)  712/    6410 :                     ; Command $14
(2)  713/    6410 :                     ;
(2)  714/    6410 :                     ; Stop CDDA Track
(2)  715/    6410 :                     ; --------------------------------------------------------
(2)  716/    6410 :                     
(2)  717/    6410 :                     SubTask_cmnd14:
(2)  718/    6410 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  719/    6414 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  720/    6418 : 600E                		bra	spCdda_ResetVolume
(2)  721/    641A :                     
(2)  722/    641A :                     ; --------------------------------------------------------
(2)  723/    641A :                     ; Command $16
(2)  724/    641A :                     ;
(2)  725/    641A :                     ; Fade-out/Fade-in CD Volume
(2)  726/    641A :                     ;
(2)  727/    641A :                     ; Input:
(2)  728/    641A :                     ; mcd_dcomm_m | dc.w target_vol,fade_speed
(2)  729/    641A :                     ;               - Target volume: $000-$400 Max-Min
(2)  730/    641A :                     ;               - Fade Speed:    $001-$200 Slow-Fast
(2)  731/    641A :                     ;                                     $400 Set once
(2)  732/    641A :                     ; --------------------------------------------------------
(2)  733/    641A :                     
(2)  734/    641A :                     SubTask_cmnd16:
(2)  735/    641A : 2238 8010           		move.l	(SCPU_reg+mcd_dcomm_m).w,d1
(2)  736/    641E : 303C 0086           		move.w	#FDRCHG,d0
(2)  737/    6422 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  738/    6426 : 4E75                		rts
(2)  739/    6428 :                     
(2)  740/    6428 :                     ; --------------------------------------------------------
(2)  741/    6428 :                     ; Command $17
(2)  742/    6428 :                     ;
(2)  743/    6428 :                     ; CDDA Fade-out
(2)  744/    6428 :                     ; --------------------------------------------------------
(2)  745/    6428 :                     
(2)  746/    6428 :                     SubTask_cmnd17:
(2)  747/    6428 :                     ; 		move.l	#$0380,d1
(2)  748/    6428 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  749/    6428 :                     ; 		jsr	(_CDBIOS).w
(2)  750/    6428 :                     ; 		move.l	#$0380|$8000,d1
(2)  751/    6428 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  752/    6428 :                     ; 		jsr	(_CDBIOS).w
(2)  753/    6428 :                     ; 		rts
(2)  754/    6428 :                     
(2)  755/    6428 :                     ; --------------------------------------------------------
(2)  756/    6428 :                     ; CDDA subroutines:
(2)  757/    6428 :                     
(2)  758/    6428 :                     spCdda_ResetVolume:
(2)  759/    6428 : 48E7 C0C0           		movem.l	d0-d1/a0-a1,-(sp)
(2)  760/    642C : 323C 0400           		move.w	#$0400,d1
(2)  761/    6430 : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  762/    6434 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  763/    6438 : 323C 8400           		move.w	#$0400|$8000,d1
(2)  764/    643C : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  765/    6440 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  766/    6444 : 4CDF 0303           		movem.l	(sp)+,d0-d1/a0-a1
(2)  767/    6448 : 4E75                		rts
(2)  768/    644A :                     
(2)  769/    644A :                     ; =====================================================================
(2)  770/    644A :                     ; ----------------------------------------------------------------
(2)  771/    644A :                     ; Commands $18-$1F
(2)  772/    644A :                     ;
(2)  773/    644A :                     ; Stamp rendering
(2)  774/    644A :                     ; ----------------------------------------------------------------
(2)  775/    644A :                     
(2)  776/    644A :                     ; --------------------------------------------------------
(2)  777/    644A :                     ; Command $18
(2)  778/    644A :                     ;
(2)  779/    644A :                     ; Init/Enable Stamps
(2)  780/    644A :                     ;
(2)  781/    644A :                     ; Input:
(2)  782/    644A :                     ; mcd_dcomm_m | dc.w width,height
(2)  783/    644A :                     ;               - Stamp Dot-Screen Width
(2)  784/    644A :                     ;               - Stamp Dot-Screen Height
(2)  785/    644A :                     ; --------------------------------------------------------
(2)  786/    644A :                     
(2)  787/    644A :                     SubTask_cmnd18:
(2)  788/    644A : 43F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a1
(2)  789/    644E : 3011                		move.w	(a1),d0
(2)  790/    6450 : 3229 0002           		move.w	2(a1),d1
(2)  791/    6454 : 31C0 7182           		move.w	d0,(RAM_CdSub_StampW).w
(2)  792/    6458 : 31C1 7184           		move.w	d1,(RAM_CdSub_StampH).w
(2)  793/    645C : 31FC 0000 718A      		move.w	#%000,(RAM_CdSub_StampSize).w	; Stamp type/size: 1x1 screen | 16x16 dot | RPT
(2)  794/    6462 : 6100 07F4           		bsr	CdSub_StampResetVcell
(2)  795/    6466 : 6100 07FC           		bsr	CdSub_StampDefaults
(2)  796/    646A : 31FC FFFF 7194      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  797/    6470 : 31FC 0001 7186      		move.w	#1,(RAM_CdSub_StampEnbl).w	; Enable Stamp rendering
(2)  798/    6476 : 08F8 0001 8033      		bset	#1,(SCPU_reg+$33).w
(2)  799/    647C : 4E75                		rts
(2)  800/    647E :                     
(2)  801/    647E :                     ; --------------------------------------------------------
(2)  802/    647E :                     ; Command $19
(2)  803/    647E :                     ;
(2)  804/    647E :                     ; Disable Stamps, DMNA must bet set.
(2)  805/    647E :                     ; --------------------------------------------------------
(2)  806/    647E :                     
(2)  807/    647E :                     SubTask_cmnd19:
(2)  808/    647E : 08B8 0001 8033      		bclr	#1,(SCPU_reg+$33).w
(2)  809/    6484 : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2)  810/    6488 : 0207 0007            		andi.b	#%00111,d7
(2)  811/    648C : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w		; Restore WRAM write mode
(2)  812/    6490 : 33FC 0000 000B      		move.w	#0,(SCPU_wram+WRAM_StampCurrFlip).l
             6496 : BFFE             
(2)  813/    6498 : 31FC 0000 7186      		move.w	#0,(RAM_CdSub_StampEnbl).w		; Disable Stamp rendering
(2)  814/    649E : 31FC FFFF 7194      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  815/    64A4 : 08F8 0000 8003      .set_ret:	bset	#0,(SCPU_reg+mcd_memory).w
(2)  816/    64AA : 67F8                		beq.s	.set_ret
(2)  817/    64AC : 4E75                		rts
(2)  818/    64AE :                     
(2)  819/    64AE :                     ; =====================================================================
(2)  820/    64AE :                     ; ----------------------------------------------------------------
(2)  821/    64AE :                     ; Subroutines
(2)  822/    64AE :                     ; ----------------------------------------------------------------
(2)  823/    64AE :                     
(2)  824/    64AE :                     ; --------------------------------------------------------
(2)  825/    64AE :                     ; CD-ROM data
(2)  826/    64AE :                     ; --------------------------------------------------------
(2)  827/    64AE :                     
(2)  828/    64AE :                     ; ------------------------------------------------
(2)  829/    64AE :                     ; spReadSectorsN
(2)  830/    64AE :                     ;
(2)  831/    64AE :                     ; Input:
(2)  832/    64AE :                     ; a0 - Destination
(2)  833/    64AE :                     ; d0 - Sector start
(2)  834/    64AE :                     ; d1 - Number of sectors
(2)  835/    64AE :                     ; ------------------------------------------------
(2)  836/    64AE :                     
(2)  837/    64AE :                     spReadSectorsN:
(2)  838/    64AE : 4BF9 0001 4412      		lea	(RAM_CdSub_FsBuff).l,a5
(2)  839/    64B4 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(2)  840/    64BA : 0281 0000 FFFF      		andi.l	#$FFFF,d1
(2)  841/    64C0 : 2A80                		move.l	d0,(a5)
(2)  842/    64C2 : 2B41 0004           		move.l	d1,4(a5)
(2)  843/    64C6 : 2B48 0008           		move.l	a0,8(a5)
(2)  844/    64CA : 11FC 0003 8004      		move.b	#%011,(SCPU_reg+4).w		; Set CDC device to "Sub CPU"
(2)  845/    64D0 : 303C 0089           		move.w	#CDCSTOP,d0			; Stop CDC
(2)  846/    64D4 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  847/    64D8 : 204D                		move.l	a5,a0
(2)  848/    64DA : 303C 0020           		move.w	#ROMREADN,d0			; Read sector by count
(2)  849/    64DE : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  850/    64E2 :                     .wait_STAT:
(2)  851/    64E2 : 2F0D                		move.l	a5,-(sp)
(2)  852/    64E4 : 6100 07F2           		bsr	CdSub_PCM_Process
(2)  853/    64E8 : 2A5F                		move.l	(sp)+,a5
(2)  854/    64EA : 303C 008A           		move.w	#CDCSTAT,d0			; Get CDC Status
(2)  855/    64EE : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  856/    64F2 : 65EE                 		bcs.s	.wait_STAT
(2)  857/    64F4 :                     .wait_READ:
(2)  858/    64F4 : 2F0D                		move.l	a5,-(sp)
(2)  859/    64F6 : 6100 07E0           		bsr	CdSub_PCM_Process
(2)  860/    64FA : 2A5F                		move.l	(sp)+,a5
(2)  861/    64FC : 303C 008B           		move.w	#CDCREAD,d0			; CDC Read mode
(2)  862/    6500 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  863/    6504 : 65EE                		bcs.s	.wait_READ
(2)  864/    6506 : 2B40 0010           		move.l	d0,$10(a5)
(2)  865/    650A :                     .WaitTransfer:
(2)  866/    650A : 206D 0008           		movea.l	8(a5),a0			; a0 - DATA Destination
(2)  867/    650E : 43ED 0010           		lea	$10(a5),a1			; a1 - HEADER out
(2)  868/    6512 : 303C 008C           		move.w	#CDCTRN,d0			; CDC Transfer data
(2)  869/    6516 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  870/    651A : 65EE                		bcs.s	.waitTransfer
(2)  871/    651C : 303C 008D           		move.w	#CDCACK,d0			; Finish read
(2)  872/    6520 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  873/    6524 : 06AD 0000 0800      		addi.l	#$800,8(a5)
             652A : 0008             
(2)  874/    652C : 5295                		addq.l	#1,(a5)
(2)  875/    652E : 53AD 0004           		subq.l	#1,4(a5)
(2)  876/    6532 : 66AE                		bne.s	.wait_STAT
(2)  877/    6534 : 4E75                		rts
(2)  878/    6536 :                     
(2)  879/    6536 :                     ; ------------------------------------------------
(2)  880/    6536 :                     ; ISO9660 Driver
(2)  881/    6536 :                     ; ------------------------------------------------
(2)  882/    6536 :                     
(2)  883/    6536 :                     spInitFS:
(2)  884/    6536 : 48E7 FFFE           		movem.l	d0-d7/a0-a6,-(a7)
(2)  885/    653A : 7010                		moveq	#$10,d0			; Read sector number $10 (At $8000)
(2)  886/    653C : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  887/    653E : 41F9 0000 7412      		lea	(RAM_CdSub_IsoFiles).l,a0
(2)  888/    6544 : 2F08                		move.l	a0,-(sp)
(2)  889/    6546 : 6100 FF66           		bsr	spReadSectorsN
(2)  890/    654A : 205F                		move.l	(sp)+,a0		; Now use the actual output
(2)  891/    654C : 43E8 009C           		lea	$9C(a0),a1
(2)  892/    6550 : 1029 0006           		move.b	6(a1),d0		; Read sector where filelist is located.
(2)  893/    6554 : E188                		lsl.l	#8,d0
(2)  894/    6556 : 1029 0007           		move.b	7(a1),d0
(2)  895/    655A : E188                		lsl.l	#8,d0
(2)  896/    655C : 1029 0008           		move.b	8(a1),d0
(2)  897/    6560 : E188                		lsl.l	#8,d0
(2)  898/    6562 : 1029 0009           		move.b	9(a1),d0
(2)  899/    6566 : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  900/    6568 : 6100 FF44           		bsr	spReadSectorsN
(2)  901/    656C : 4CDF 7FFF           		movem.l	(a7)+,d0-d7/a0-a6
(2)  902/    6570 : 4E75                		rts
(2)  903/    6572 :                     
(2)  904/    6572 :                     ; --------------------------------------------------------
(2)  905/    6572 :                     ; spSearchFile
(2)  906/    6572 :                     ;
(2)  907/    6572 :                     ; Search a file on the disc
(2)  908/    6572 :                     ; FILELIST MUST BE LOADED WITH spInitFS ON INIT.
(2)  909/    6572 :                     ;
(2)  910/    6572 :                     ; Input:
(2)  911/    6572 :                     ; a0   | Filename string with zero termination
(2)  912/    6572 :                     ;
(2)  913/    6572 :                     ; Returns:
(2)  914/    6572 :                     ; bcs  | File NOT found / error
(2)  915/    6572 :                     ; bcc  | File found
(2)  916/    6572 :                     ;
(2)  917/    6572 :                     ; bcc:
(2)  918/    6572 :                     ; d0.l | Start sector
(2)  919/    6572 :                     ; d1.l | Number of sectors
(2)  920/    6572 :                     ; d2.l | Filesize
(2)  921/    6572 :                     ;
(2)  922/    6572 :                     ; Breaks:
(2)  923/    6572 :                     ; d4-d7,a6
(2)  924/    6572 :                     ; --------------------------------------------------------
(2)  925/    6572 :                     
(2)  926/    6572 :                     spSearchFile:
(2)  927/    6572 : 49F9 0000 7412      		lea	(RAM_CdSub_IsoFiles).l,a4	; a4 - Root filelist
(2)  928/    6578 : 7000                		moveq	#0,d0
(2)  929/    657A : 7200                		moveq	#0,d1
(2)  930/    657C : 7400                		moveq	#0,d2
(2)  931/    657E :                     .next_file:
(2)  932/    657E : 1E14                		move.b	(a4),d7			; d7 - Block size
(2)  933/    6580 : 673E                		beq.s	.failed_srch
(2)  934/    6582 : 0247 00FF           		andi.w	#$FF,d7
(2)  935/    6586 : 264C                		move.l	a4,a3			; a3 - Current file block
(2)  936/    6588 : D6FC 0019           		adda	#$19,a3			; Go to flags
(2)  937/    658C : 1C13                		move.b	(a3),d6
(2)  938/    658E : 6618                		bne.s	.non_file		; $00: iso_file, non-Zero: iso_setfs
(2)  939/    6590 : D6FC 0007           		adda	#$07,a3			; Go to Filename string
(2)  940/    6594 : 7C00                		moveq	#0,d6
(2)  941/    6596 : 1C1B                		move.b	(a3)+,d6
(2)  942/    6598 : 5946                		subq.w	#3+1,d6
(2)  943/    659A : 2448                		move.l	a0,a2			; a2 - string to seach for
(2)  944/    659C :                     .chk_str:
(2)  945/    659C : 1A1B                		move.b	(a3)+,d5
(2)  946/    659E : BA1A                		cmp.b	(a2)+,d5
(2)  947/    65A0 : 6606                		bne.s	.non_file
(2)  948/    65A2 : 51CE FFF8           		dbf	d6,.chk_str
(2)  949/    65A6 : 6004                		bra.s	.found_file
(2)  950/    65A8 :                     .non_file:
(2)  951/    65A8 : D8C7                		adda	d7,a4			; Next block
(2)  952/    65AA : 60D2                		bra.s	.next_file
(2)  953/    65AC :                     .found_file:
(2)  954/    65AC : 202C 0006           		move.l	$06(a4),d0		; d0 - Sector position
(2)  955/    65B0 : 222C 000E           		move.l	$0E(a4),d1		; d1 - Number of sectors
(2)  956/    65B4 : 2401                		move.l	d1,d2			; d2 - ORIGINAL filesize
(2)  957/    65B6 : E089                		lsr.l	#8,d1			; bitshift d1
(2)  958/    65B8 : E689                		lsr.l	#3,d1
(2)  959/    65BA : 44FC 0000           		move	#0,ccr
(2)  960/    65BE : 4E75                		rts
(2)  961/    65C0 :                     .failed_srch:
(2)  962/    65C0 : 44FC 0001           		move	#1,ccr
(2)  963/    65C4 : 4E75                		rts
(2)  964/    65C6 :                     
(2)  965/    65C6 :                     ; =====================================================================
(2)  966/    65C6 :                     ; ----------------------------------------------------------------
(2)  967/    65C6 :                     ; Stamps rendering
(2)  968/    65C6 :                     ; ----------------------------------------------------------------
(2)  969/    65C6 :                     
(2)  970/    65C6 :                     CdSub_StampRender:
(2)  971/    65C6 : 3E38 7186           		move.w	(RAM_CdSub_StampEnbl).w,d7	; Stamp rendering enabled?
(2)  972/    65CA : 6700 00AA           		beq	.exit_render
(2)  973/    65CE : 0839 0001 FFFF      		btst	#1,(SCPU_reg+mcd_memory).l	; Word-RAM allowed (DMNA)?
             65D4 : 8003             
(2)  974/    65D6 : 6700 009E           		beq	.exit_render
(2)  975/    65DA :                     ; 		bset	#7,(SCPU_reg+mcd_comm_s).w
(2)  976/    65DA : 4A38 719C           		tst.b	(RAM_CdSub_StampReqUpd).w	; MAIN wants WRAM?
(2)  977/    65DE : 671A                		beq	.no_break
(2)  978/    65E0 : 4238 719C           		clr.b	(RAM_CdSub_StampReqUpd).w
(2)  979/    65E4 :                     .wait_done:
(2)  980/    65E4 : 6100 06F2           		bsr	CdSub_PCM_Process
(2)  981/    65E8 : 1E38 8058           		move.b	($FFFF8058).w,d7
(2)  982/    65EC : 6BF6                		bmi.s	.wait_done
(2)  983/    65EE :                     ; 		bset	#3,(SCPU_reg+mcd_comm_s).w
(2)  984/    65EE :                     ; 		tst.b	(RAM_CdSub_StampBusy).w
(2)  985/    65EE :                     ; 		bne.s	.wait_done
(2)  986/    65EE : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN
             65F4 : 8003             
(2)  987/    65F6 : 67F6                		beq.s	.wait_ret
(2)  988/    65F8 : 607C                		bra	.exit_render			; Exit
(2)  989/    65FA :                     .no_break:
(2)  990/    65FA :                     
(2)  991/    65FA :                     ; ----------------------------------------
(2)  992/    65FA :                     ; Genesis request
(2)  993/    65FA :                     ; ----------------------------------------
(2)  994/    65FA :                     
(2)  995/    65FA : 3E39 000B BFFE      		move.w	(SCPU_wram+WRAM_StampCurrFlip).l,d7
(2)  996/    6600 : 3C38 7194           		move.w	(RAM_CdSub_StampCBuff).w,d6
(2)  997/    6604 : BE46                		cmp.w	d6,d7
(2)  998/    6606 : 6726                		beq	.flip_turn
(2)  999/    6608 : 31C7 7194           		move.w	d7,(RAM_CdSub_StampCBuff).w
(2) 1000/    660C :                     ; 		move.w	#0,(SCPU_wram+WRAM_StampsDone).l
(2) 1001/    660C :                     ; 		bclr	#3,(SCPU_reg+mcd_comm_s).w
(2) 1002/    660C : 6100 06CA           		bsr	CdSub_PCM_Process
(2) 1003/    6610 : 6168                		bsr	.make_list
(2) 1004/    6612 : 6100 06C4           		bsr	CdSub_PCM_Process
(2) 1005/    6616 : 6100 00BE           		bsr	.trace_blank
(2) 1006/    661A : 31FC 0000 718E      		move.w	#0,(RAM_CdSub_StampNextRd).w		; Start the engine
(2) 1007/    6620 : 31FC 0780 718C      		move.w	#$780,(RAM_CdSub_StampNextWr).w
(2) 1008/    6626 : 50F8 7190           		st.b	(RAM_CdSub_DotClearFlag).w
(2) 1009/    662A : 6100 06AC           		bsr	CdSub_PCM_Process
(2) 1010/    662E :                     .flip_turn:
(2) 1011/    662E :                     
(2) 1012/    662E :                     ; ----------------------------------------
(2) 1013/    662E :                     ; Main engine
(2) 1014/    662E :                     ; ----------------------------------------
(2) 1015/    662E :                     
(2) 1016/    662E :                     ; 		move.w	(SCPU_wram+WRAM_StampsDone).l,d7
(2) 1017/    662E : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2) 1018/    6632 : 0807 0003           		btst	#3,d7
(2) 1019/    6636 : 6620                		bne	.return_ret
(2) 1020/    6638 :                     ; 		move.b	($FFFF8058).w,d7
(2) 1021/    6638 :                     ; 		bmi.s	.exit_render
(2) 1022/    6638 : 4A38 7188           		tst.b	(RAM_CdSub_StampBusy).w			; Check if current Stamp finished
(2) 1023/    663C : 6638                		bne	.exit_render
(2) 1024/    663E : 6100 0698           		bsr	CdSub_PCM_Process
(2) 1025/    6642 : 6100 03C6           		bsr	.process_trace
(2) 1026/    6646 : 0A78 0780 718E      		eori.w	#$780,(RAM_CdSub_StampNextRd).w
(2) 1027/    664C : 6100 068A           		bsr	CdSub_PCM_Process
(2) 1028/    6650 : 614E                		bsr	.make_stamp
(2) 1029/    6652 : 4A78 7180           		tst.w	(RAM_CdSub_StampNum).w
(2) 1030/    6656 : 661E                		bne	.exit_render
(2) 1031/    6658 :                     ; 		move.w	#1,(SCPU_wram+WRAM_StampsDone).l
(2) 1032/    6658 :                     
(2) 1033/    6658 :                     ; ------------------------------------------------
(2) 1034/    6658 :                     ; All stamps are checked
(2) 1035/    6658 :                     ; ------------------------------------------------
(2) 1036/    6658 :                     
(2) 1037/    6658 :                     .return_ret:
(2) 1038/    6658 :                     ; 		move.b	($FFFF8058).w,d7
(2) 1039/    6658 :                     ; 		bmi.s	.return_ret
(2) 1040/    6658 : 6100 067E           		bsr	CdSub_PCM_Process
(2) 1041/    665C : 4A38 7188           		tst.b	(RAM_CdSub_StampBusy).w
(2) 1042/    6660 : 66F6                		bne	.return_ret
(2) 1043/    6662 : 6100 0600           		bsr	CdSub_StampDefaults
(2) 1044/    6666 :                     ; 		bclr	#7,(SCPU_reg+mcd_comm_s).w
(2) 1045/    6666 : 31FC FFFF 7194      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2) 1046/    666C : 08F9 0000 FFFF      .wait_rete:	bset	#0,(SCPU_reg+mcd_memory).l		; Set RET
             6672 : 8003             
(2) 1047/    6674 : 67F6                		beq.s	.wait_rete
(2) 1048/    6676 :                     ; 		bset	#3,(SCPU_reg+mcd_comm_s).w
(2) 1049/    6676 :                     
(2) 1050/    6676 :                     ; ------------------------------------------------
(2) 1051/    6676 :                     ; Exit
(2) 1052/    6676 :                     ; ------------------------------------------------
(2) 1053/    6676 :                     
(2) 1054/    6676 :                     .exit_render:
(2) 1055/    6676 : 6000 0660           		bra	CdSub_PCM_Process
(2) 1056/    667A :                     
(2) 1057/    667A :                     ; =====================================================================
(2) 1058/    667A :                     ; ------------------------------------------------
(2) 1059/    667A :                     ; Make a list of available stamps to use
(2) 1060/    667A :                     ; ------------------------------------------------
(2) 1061/    667A :                     
(2) 1062/    667A :                     .make_list:
(2) 1063/    667A : 41F9 000B A000      		lea	(SCPU_wram+WRAM_MdStampList).l,a0
(2) 1064/    6680 : 43F9 0000 71D2      		lea	(RAM_CdSub_StampList).l,a1
(2) 1065/    6686 : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(2) 1066/    6688 :                     .loop_list:
(2) 1067/    6688 : 1C10                		move.b	cdstamp_flags(a0),d6		; %Et00000R
(2) 1068/    668A : 0806 0007           		btst	#7,d6
(2) 1069/    668E : 6706                		beq.s	.no_stamp
(2) 1070/    6690 : 2288                		move.l	a0,(a1)
(2) 1071/    6692 : D2FC 0008           		adda	#8,a1
(2) 1072/    6696 :                     .no_stamp:
(2) 1073/    6696 : D0FC 0020           		adda	#$20,a0
(2) 1074/    669A : 51CF FFEC           		dbf	d7,.loop_list
(2) 1075/    669E : 4E75                		rts
(2) 1076/    66A0 :                     
(2) 1077/    66A0 :                     ; ------------------------------------------------
(2) 1078/    66A0 :                     ; Make stamp from the generated list
(2) 1079/    66A0 :                     ; ------------------------------------------------
(2) 1080/    66A0 :                     
(2) 1081/    66A0 :                     .make_stamp:
(2) 1082/    66A0 : 4278 7180           		clr.w	(RAM_CdSub_StampNum).w
(2) 1083/    66A4 :                     .retry:
(2) 1084/    66A4 : 7E00                		moveq	#0,d7
(2) 1085/    66A6 : 3E38 7192           		move.w	(RAM_CdSub_StampIndxW).w,d7
(2) 1086/    66AA : 5278 7192           		addq.w	#1,(RAM_CdSub_StampIndxW).w
(2) 1087/    66AE : 3C07                		move.w	d7,d6
(2) 1088/    66B0 : E74F                		lsl.w	#3,d7
(2) 1089/    66B2 : 41F9 0000 71D2      		lea	(RAM_CdSub_StampList).l,a0
(2) 1090/    66B8 : 2030 7000           		move.l	(a0,d7.w),d0
(2) 1091/    66BC : 6716                		beq.s	.exit_last
(2) 1092/    66BE : 42B0 7000           		clr.l	(a0,d7.w)
(2) 1093/    66C2 : 2040                		move.l	d0,a0
(2) 1094/    66C4 : 6100 00DE           		bsr	.make_trace
(2) 1095/    66C8 : 65DA                		bcs	.retry
(2) 1096/    66CA : 5278 7180           		addq.w	#1,(RAM_CdSub_StampNum).w
(2) 1097/    66CE : 0A78 0780 718C      		eori.w	#$780,(RAM_CdSub_StampNextWr).w
(2) 1098/    66D4 :                     .exit_last:
(2) 1099/    66D4 : 4E75                		rts
(2) 1100/    66D6 :                     
(2) 1101/    66D6 :                     ; =====================================================================
(2) 1102/    66D6 :                     ; ------------------------------------------------
(2) 1103/    66D6 :                     ; Clear all the dot-screen
(2) 1104/    66D6 :                     ;
(2) 1105/    66D6 :                     ; Uses:
(2) 1106/    66D6 :                     ; a1,d0
(2) 1107/    66D6 :                     ; ------------------------------------------------
(2) 1108/    66D6 :                     
(2) 1109/    66D6 :                     .trace_blank:
(2) 1110/    66D6 : 41F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a0
(2) 1111/    66DC : 700F                		moveq	#(256/16)-1,d0
(2) 1112/    66DE :                     .reset_out:
(2) 1113/    66DE :                     	rept 16
(2) 1114/    66DE :                     		move.l	#$FFF8,(a0)+
(2) 1115/    66DE :                     		move.l	#0,(a0)+
(2) 1116/    66DE :                     	endm
(2) 1114/    66DE : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    66E4 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    66EA : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    66F0 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    66F6 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    66FC : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6702 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6708 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    670E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6714 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    671A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6720 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6726 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    672C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6732 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6738 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    673E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6744 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    674A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6750 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6756 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    675C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6762 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6768 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    676E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6774 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    677A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6780 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6786 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    678C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6792 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6798 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1117/    679E : 51C8 FF3E           		dbf	d0,.reset_out
(2) 1118/    67A2 : 4E75                		rts
(2) 1119/    67A4 :                     
(2) 1120/    67A4 :                     ; =====================================================================
(2) 1121/    67A4 :                     ; ------------------------------------------------
(2) 1122/    67A4 :                     ; Make the trace data
(2) 1123/    67A4 :                     ;
(2) 1124/    67A4 :                     ; Input:
(2) 1125/    67A4 :                     ; a0 - Current stamp
(2) 1126/    67A4 :                     ; a1 - Output trace location
(2) 1127/    67A4 :                     ; a6 - Stamp math buffer
(2) 1128/    67A4 :                     ; d1.w - Center X
(2) 1129/    67A4 :                     ; d2.w - Center Y
(2) 1130/    67A4 :                     ; ------------------------------------------------
(2) 1131/    67A4 :                     
(2) 1132/    67A4 :                     .make_trace:
(2) 1133/    67A4 : 4DF9 0000 719E      		lea	(RAM_CdSub_StampProc).l,a6
(2) 1134/    67AA : 4BF8 71C6           		lea	(RAM_CdSub_StampOutBox).w,a5
(2) 1135/    67AE : 7E00                		moveq	#0,d7
(2) 1136/    67B0 : 1E28 0001           		move.b	cdstamp_map(a0),d7
(2) 1137/    67B4 : E18F                		lsl.l	#8,d7
(2) 1138/    67B6 : E78F                		lsl.l	#3,d7
(2) 1139/    67B8 : DEBC 0003 0000      		add.l	#WRAM_MdMapTable,d7
(2) 1140/    67BE : E48F                		lsr.l	#2,d7
(2) 1141/    67C0 : 3A87                		move.w	d7,stmpi_map(a5)
(2) 1142/    67C2 : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1143/    67C6 : BC7C FC00           		cmp.w	#-$400,d6
(2) 1144/    67CA : 6D00 0162           		blt	.invalid
(2) 1145/    67CE : BC7C 0100           		cmp.w	#$100,d6
(2) 1146/    67D2 : 6C00 015A           		bge	.invalid
(2) 1147/    67D6 :                     
(2) 1148/    67D6 :                     	; ------------------------------------------------
(2) 1149/    67D6 :                     	; Trace texture
(2) 1150/    67D6 : 7200                		moveq	#0,d1
(2) 1151/    67D8 : 7400                		moveq	#0,d2
(2) 1152/    67DA : 3228 000A           		move.w	cdstamp_wdth(a0),d1
(2) 1153/    67DE : 3428 000C           		move.w	cdstamp_hght(a0),d2
(2) 1154/    67E2 : 3628 000E           		move.w	cdstamp_scale(a0),d3
(2) 1155/    67E6 : 3803                		move.w	d3,d4
(2) 1156/    67E8 : C7FC 0100           		muls.w	#SET_STAMPPOV,d3
(2) 1157/    67EC : E083                		asr.l	#8,d3
(2) 1158/    67EE : 4A43                		tst.w	d3
(2) 1159/    67F0 : 6A02                		bpl.s	.splusv
(2) 1160/    67F2 : E683                		asr.l	#3,d3
(2) 1161/    67F4 :                     .splusv:
(2) 1162/    67F4 : 0641 0030           		addi.w	#48,d1
(2) 1163/    67F8 : 0642 0030           		addi.w	#48,d2
(2) 1164/    67FC : D243                		add.w	d3,d1
(2) 1165/    67FE : D443                		add.w	d3,d2
(2) 1166/    6800 : 3638 7182           		move.w	(RAM_CdSub_StampW).w,d3
(2) 1167/    6804 : 3838 7184           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1168/    6808 : E249                		lsr.w	#1,d1
(2) 1169/    680A : E24A                		lsr.w	#1,d2
(2) 1170/    680C : E24B                		lsr.w	#1,d3
(2) 1171/    680E : E24C                		lsr.w	#1,d4
(2) 1172/    6810 : 4443                		neg.w	d3
(2) 1173/    6812 : 4444                		neg.w	d4
(2) 1174/    6814 : 3E28 0006           		move.w	cdstamp_x(a0),d7
(2) 1175/    6818 : 3C28 0008           		move.w	cdstamp_y(a0),d6
(2) 1176/    681C : 9E41                		sub.w	d1,d7
(2) 1177/    681E : 9C42                		sub.w	d2,d6
(2) 1178/    6820 : BE43                		cmp.w	d3,d7
(2) 1179/    6822 : 6C04                		bge.s	.no_xl
(2) 1180/    6824 : 9E43                		sub.w	d3,d7
(2) 1181/    6826 : D247                		add.w	d7,d1
(2) 1182/    6828 :                     .no_xl:
(2) 1183/    6828 : BC44                		cmp.w	d4,d6
(2) 1184/    682A : 6C04                		bge.s	.no_yl
(2) 1185/    682C : 9C44                		sub.w	d4,d6
(2) 1186/    682E : D446                		add.w	d6,d2
(2) 1187/    6830 :                     .no_yl:
(2) 1188/    6830 :                     ; 		addi.w	#8,d1
(2) 1189/    6830 :                     ; 		addi.w	#8,d2
(2) 1190/    6830 :                     ; 		move.w	#SET_STAMPPOV,d7
(2) 1191/    6830 :                     ; 		add.w	cdstamp_scale(a0),d7
(2) 1192/    6830 :                     ; 		muls.w	d7,d2
(2) 1193/    6830 :                     ; 		muls.w	d7,d1
(2) 1194/    6830 :                     ; 		asr.l	#8,d2
(2) 1195/    6830 :                     ; 		asr.l	#8,d1
(2) 1196/    6830 :                     
(2) 1197/    6830 : 4441                		neg.w	d1
(2) 1198/    6832 : 4442                		neg.w	d2
(2) 1199/    6834 : 6100 00FE           		bsr	.mk_vars
(2) 1200/    6838 : 49F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a4
(2) 1201/    683E : 3C38 718C           		move.w	(RAM_CdSub_StampNextWr).w,d6
(2) 1202/    6842 : D8C6                		adda	d6,a4
(2) 1203/    6844 : 3E38 7184           		move.w	(RAM_CdSub_StampH).w,d7
(2) 1204/    6848 : 5347                		subq.w	#1,d7
(2) 1205/    684A :                     .next_line:
(2) 1206/    684A : 3C16                		move.w	stmpc_XC(a6),d6
(2) 1207/    684C : CDC2                		muls.w	d2,d6
(2) 1208/    684E : DCAE 0004           		add.l	stmpc_X(a6),d6
(2) 1209/    6852 : EA86                		asr.l	#5,d6
(2) 1210/    6854 : 38C6                		move.w	d6,(a4)+			; X pos
(2) 1211/    6856 : 3C2E 0002           		move.w	stmpc_YC(a6),d6
(2) 1212/    685A : CDC2                		muls.w	d2,d6
(2) 1213/    685C : 9CAE 0008           		sub.l	stmpc_Y(a6),d6
(2) 1214/    6860 : EA86                		asr.l	#5,d6
(2) 1215/    6862 : 38C6                		move.w	d6,(a4)+			; Y pos
(2) 1216/    6864 : 2C2E 0014           		move.l	stmpc_TX(a6),d6
(2) 1217/    6868 : EA86                		asr.l	#5,d6
(2) 1218/    686A : 38C6                		move.w	d6,(a4)+			; X Delta
(2) 1219/    686C : 2C2E 0018           		move.l	stmpc_TY(a6),d6
(2) 1220/    6870 : EA86                		asr.l	#5,d6
(2) 1221/    6872 : 38C6                		move.w	d6,(a4)+			; Y Delta
(2) 1222/    6874 :                     
(2) 1223/    6874 : 5242                		addq.w	#1,d2
(2) 1224/    6876 : 51CF FFD2           		dbf	d7,.next_line
(2) 1225/    687A :                     
(2) 1226/    687A :                     	; ------------------------------------------------
(2) 1227/    687A :                     	; Expand out size
(2) 1228/    687A : 3E28 000A           		move.w	cdstamp_wdth(a0),d7
(2) 1229/    687E : 3C28 000C           		move.w	cdstamp_hght(a0),d6
(2) 1230/    6882 : 0647 0030           		addi.w	#48,d7
(2) 1231/    6886 : 0646 0030           		addi.w	#48,d6
(2) 1232/    688A : 3A28 000E           		move.w	cdstamp_scale(a0),d5
(2) 1233/    688E : 3805                		move.w	d5,d4
(2) 1234/    6890 : CBFC 0100           		muls.w	#SET_STAMPPOV,d5
(2) 1235/    6894 : E085                		asr.l	#8,d5
(2) 1236/    6896 : 4A44                		tst.w	d4
(2) 1237/    6898 : 6A02                		bpl.s	.splus
(2) 1238/    689A : E685                		asr.l	#3,d5
(2) 1239/    689C :                     .splus:
(2) 1240/    689C : DE45                		add.w	d5,d7
(2) 1241/    689E : DC45                		add.w	d5,d6
(2) 1242/    68A0 : 3A07                		move.w	d7,d5
(2) 1243/    68A2 : 3806                		move.w	d6,d4
(2) 1244/    68A4 : 3028 0006           		move.w	cdstamp_x(a0),d0
(2) 1245/    68A8 : 3228 0008           		move.w	cdstamp_y(a0),d1
(2) 1246/    68AC : E24D                		lsr.w	#1,d5
(2) 1247/    68AE : E24C                		lsr.w	#1,d4
(2) 1248/    68B0 : 9045                		sub.w	d5,d0
(2) 1249/    68B2 : 9244                		sub.w	d4,d1
(2) 1250/    68B4 : 3400                		move.w	d0,d2
(2) 1251/    68B6 : 3601                		move.w	d1,d3
(2) 1252/    68B8 : D447                		add.w	d7,d2
(2) 1253/    68BA : D646                		add.w	d6,d3
(2) 1254/    68BC : 3838 7182           		move.w	(RAM_CdSub_StampW).w,d4		; Add center
(2) 1255/    68C0 : 3A38 7184           		move.w	(RAM_CdSub_StampH).w,d5
(2) 1256/    68C4 : 3E04                		move.w	d4,d7
(2) 1257/    68C6 : 3C05                		move.w	d5,d6
(2) 1258/    68C8 : E24F                		lsr.w	#1,d7
(2) 1259/    68CA : E24E                		lsr.w	#1,d6
(2) 1260/    68CC : D047                		add.w	d7,d0
(2) 1261/    68CE : D246                		add.w	d6,d1
(2) 1262/    68D0 : D447                		add.w	d7,d2
(2) 1263/    68D2 : D646                		add.w	d6,d3
(2) 1264/    68D4 :                     
(2) 1265/    68D4 :                     
(2) 1266/    68D4 :                     ; 		muls.w	d5,d2
(2) 1267/    68D4 :                     ; 		muls.w	d5,d3
(2) 1268/    68D4 :                     ; 		asr.l	#8,d2
(2) 1269/    68D4 :                     ; 		asr.l	#8,d3
(2) 1270/    68D4 :                     
(2) 1271/    68D4 :                     	; d0 - X Left
(2) 1272/    68D4 :                     	; d1 - Y top
(2) 1273/    68D4 :                     	; d2 - X right
(2) 1274/    68D4 :                     	; d3 - Y down
(2) 1275/    68D4 :                     ; 		move.w	(RAM_CdSub_StampW).w,d4
(2) 1276/    68D4 :                     ; 		move.w	(RAM_CdSub_StampH).w,d5
(2) 1277/    68D4 : 0444 0010           		subi.w	#16,d4
(2) 1278/    68D8 : 0445 0010           		subi.w	#16,d5
(2) 1279/    68DC : 3E02                		move.w	d2,d7
(2) 1280/    68DE : 0447 0010           		subi.w	#16,d7
(2) 1281/    68E2 : 4A47                		tst.w	d7
(2) 1282/    68E4 : 6B48                		bmi.s	.invalid
(2) 1283/    68E6 : 3E03                		move.w	d3,d7
(2) 1284/    68E8 : 0447 0010           		subi.w	#16,d7
(2) 1285/    68EC : 4A47                		tst.w	d7
(2) 1286/    68EE : 6B3E                		bmi.s	.invalid
(2) 1287/    68F0 : B044                		cmp.w	d4,d0
(2) 1288/    68F2 : 6C3A                		bge.s	.invalid
(2) 1289/    68F4 : B245                		cmp.w	d5,d1
(2) 1290/    68F6 : 6C36                		bge.s	.invalid
(2) 1291/    68F8 : 0644 0010           		addi.w	#16,d4
(2) 1292/    68FC : 0645 0010           		addi.w	#16,d5
(2) 1293/    6900 : 4A40                		tst.w	d0
(2) 1294/    6902 : 6A02                		bpl.s	.xl_p
(2) 1295/    6904 : 4240                		clr.w	d0
(2) 1296/    6906 : 4A41                .xl_p:		tst.w	d1
(2) 1297/    6908 : 6A02                		bpl.s	.yl_p
(2) 1298/    690A : 4241                		clr.w	d1
(2) 1299/    690C : B444                .yl_p:		cmp.w	d4,d2
(2) 1300/    690E : 6D02                		blt.s	.xr_p
(2) 1301/    6910 : 3404                		move.w	d4,d2
(2) 1302/    6912 : B645                .xr_p:		cmp.w	d5,d3
(2) 1303/    6914 : 6D02                		blt.s	.yr_p
(2) 1304/    6916 : 3605                		move.w	d5,d3
(2) 1305/    6918 :                     .yr_p:
(2) 1306/    6918 : 3B40 0002           		move.w	d0,stmpi_x(a5)
(2) 1307/    691C : 3B41 0004           		move.w	d1,stmpi_y(a5)
(2) 1308/    6920 : 3B42 0006           		move.w	d2,stmpi_xr(a5)
(2) 1309/    6924 : 3B43 0008           		move.w	d3,stmpi_yd(a5)
(2) 1310/    6928 : 023C 001E           		and	#%11110,ccr
(2) 1311/    692C : 4E75                		rts
(2) 1312/    692E :                     
(2) 1313/    692E :                     .invalid:
(2) 1314/    692E : 003C 0001           		or	#1,ccr
(2) 1315/    6932 : 4E75                		rts
(2) 1316/    6934 :                     
(2) 1317/    6934 :                     ; ------------------------------------------------
(2) 1318/    6934 :                     
(2) 1319/    6934 :                     .mk_vars:
(2) 1320/    6934 : 3E28 0010           		move.w	cdstamp_rot(a0),d7
(2) 1321/    6938 : 3A07                		move.w	d7,d5
(2) 1322/    693A : 6100 01F4           		bsr	CdSub_SineWave
(2) 1323/    693E : 3C07                		move.w	d7,d6
(2) 1324/    6940 : 3E05                		move.w	d5,d7
(2) 1325/    6942 : 6100 01E8           		bsr	CdSub_SineWave_Cos
(2) 1326/    6946 : 3D46 0024           		move.w	d6,stmpc_rot_sin(a6)
(2) 1327/    694A : 3D47 0026           		move.w	d7,stmpc_rot_cos(a6)
(2) 1328/    694E :                     
(2) 1329/    694E : 383C 0000           		move.w	#0,d4
(2) 1330/    6952 : 3A3C 0000           		move.w	#0,d5
(2) 1331/    6956 : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1332/    695A : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1333/    695E : 9E46                		sub.w	d6,d7
(2) 1334/    6960 : 3D47 001E           		move.w	d7,stmpc_zmul(a6)	; Z multi
(2) 1335/    6964 :                     ; 		move.w	d4,d7
(2) 1336/    6964 :                     ; 		move.w	d7,stmpc_xmul(a6)	; X multi
(2) 1337/    6964 : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1338/    6968 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1339/    696C : E087                		asr.l	#8,d7
(2) 1340/    696E : 3D47 0022           		move.w	d7,stmpc_zmul_cos(a6)
(2) 1341/    6972 : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1342/    6976 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1343/    697A : E087                		asr.l	#8,d7
(2) 1344/    697C : 3D47 0020           		move.w	d7,stmpc_zmul_sin(a6)
(2) 1345/    6980 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1346/    6984 : 9E46                		sub.w	d6,d7
(2) 1347/    6986 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1348/    698A : E087                		asr.l	#8,d7
(2) 1349/    698C : 3C87                		move.w	d7,stmpc_XC(a6)
(2) 1350/    698E : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1351/    6992 : 9E46                		sub.w	d6,d7
(2) 1352/    6994 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1353/    6998 : E087                		asr.l	#8,d7
(2) 1354/    699A : 3D47 0002           		move.w	d7,stmpc_YC(a6)
(2) 1355/    699E :                     
(2) 1356/    699E : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1357/    69A2 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1358/    69A6 : 3C05                		move.w	d5,d6
(2) 1359/    69A8 : CDEE 0024           		muls.w	stmpc_rot_sin(a6),d6
(2) 1360/    69AC : DE86                		add.l	d6,d7
(2) 1361/    69AE : 7C00                		moveq	#0,d6
(2) 1362/    69B0 : 3C28 0002           		move.w	cdstamp_cx(a0),d6
(2) 1363/    69B4 : E18E                		lsl.l	#8,d6
(2) 1364/    69B6 : DE86                		add.l	d6,d7
(2) 1365/    69B8 : 2D47 0004           		move.l	d7,stmpc_X(a6)
(2) 1366/    69BC : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1367/    69C0 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1368/    69C4 : 3C05                		move.w	d5,d6
(2) 1369/    69C6 : CDEE 0026           		muls.w	stmpc_rot_cos(a6),d6
(2) 1370/    69CA : 9E86                		sub.l	d6,d7
(2) 1371/    69CC : 7C00                		moveq	#0,d6
(2) 1372/    69CE : 3C28 0004           		move.w	cdstamp_cy(a0),d6
(2) 1373/    69D2 : E18E                		lsl.l	#8,d6
(2) 1374/    69D4 : 9E86                		sub.l	d6,d7
(2) 1375/    69D6 : 2D47 0008           		move.l	d7,stmpc_Y(a6)
(2) 1376/    69DA :                     
(2) 1377/    69DA : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1378/    69DE : CFC1                		muls.w	d1,d7
(2) 1379/    69E0 : DFAE 0004           		add.l	d7,stmpc_X(a6)
(2) 1380/    69E4 : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1381/    69E8 : CFC1                		muls.w	d1,d7
(2) 1382/    69EA : DFAE 0008           		add.l	d7,stmpc_Y(a6)
(2) 1383/    69EE :                     
(2) 1384/    69EE : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1385/    69F2 : 48C7                		ext.l	d7
(2) 1386/    69F4 : E187                		asl.l	#8,d7
(2) 1387/    69F6 : 2D47 0014           		move.l	d7,stmpc_TX(a6)
(2) 1388/    69FA : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1389/    69FE : 4447                		neg.w	d7
(2) 1390/    6A00 : 48C7                		ext.l	d7
(2) 1391/    6A02 : E187                		asl.l	#8,d7
(2) 1392/    6A04 : 2D47 0018           		move.l	d7,stmpc_TY(a6)
(2) 1393/    6A08 : 4E75                		rts
(2) 1394/    6A0A :                     
(2) 1395/    6A0A :                     ; =====================================================================
(2) 1396/    6A0A :                     ; ------------------------------------------------
(2) 1397/    6A0A :                     ; Send trace to ASIC
(2) 1398/    6A0A :                     ;
(2) 1399/    6A0A :                     ; Input:
(2) 1400/    6A0A :                     ; d0.w | Map location / 2
(2) 1401/    6A0A :                     ; d1.w | X pos
(2) 1402/    6A0A :                     ; d2.w | Y pos
(2) 1403/    6A0A :                     ; d3.w | Width
(2) 1404/    6A0A :                     ; d4.w | Height
(2) 1405/    6A0A :                     ;
(2) 1406/    6A0A :                     ; Uses:
(2) 1407/    6A0A :                     ; d5-d7
(2) 1408/    6A0A :                     ; ------------------------------------------------
(2) 1409/    6A0A :                     
(2) 1410/    6A0A :                     .process_trace:
(2) 1411/    6A0A : 6100 02CC           		bsr	CdSub_PCM_Process
(2) 1412/    6A0E : 08B8 0000 7190      		bclr	#0,(RAM_CdSub_DotClearFlag).w	; Clear dotscreen flag?
(2) 1413/    6A14 : 6600 00B2           		bne	.clear_frame
(2) 1414/    6A18 : 41F8 71C6           		lea	(RAM_CdSub_StampOutBox).w,a0
(2) 1415/    6A1C : 3010                		move.w	stmpi_map(a0),d0
(2) 1416/    6A1E : 3228 0002           		move.w	stmpi_x(a0),d1			; X left
(2) 1417/    6A22 : 3428 0004           		move.w	stmpi_y(a0),d2			; Y top
(2) 1418/    6A26 : 3628 0006           		move.w  stmpi_xr(a0),d3			; X right
(2) 1419/    6A2A : 3828 0008           		move.w  stmpi_yd(a0),d4			; Y bottom
(2) 1420/    6A2E : 9641                		sub.w	d1,d3				; XR-XL
(2) 1421/    6A30 : 9842                		sub.w	d2,d4				; YB-YT
(2) 1422/    6A32 : 7C02                		moveq	#%10,d6				; Overwrite mode
(2) 1423/    6A34 : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1424/    6A38 : 0207 0007            		andi.b	#%00111,d7
(2) 1425/    6A3C : 0246 0003            		andi.w	#%11,d6
(2) 1426/    6A40 : E74E                 		lsl.w	#3,d6
(2) 1427/    6A42 : 8E46                 		or.w	d6,d7
(2) 1428/    6A44 : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1429/    6A48 : 7C00                 		moveq	#0,d6				; RPT bit
(2) 1430/    6A4A : 3E38 718A            		move.w	(RAM_CdSub_StampSize).w,d7
(2) 1431/    6A4E : 0247 0006            		andi.w	#%110,d7
(2) 1432/    6A52 : 0246 0001            		andi.w	#%001,d6
(2) 1433/    6A56 : 8E46                 		or.w	d6,d7
(2) 1434/    6A58 : 31C7 8058           		move.w	d7,($FFFF8058).w		; Stamp data size
(2) 1435/    6A5C : 31C0 805A           		move.w  d0,($FFFF805A).w		; d0 - Stamp map location
(2) 1436/    6A60 :                     
(2) 1437/    6A60 :                     	; X,Y,W,H
(2) 1438/    6A60 : 2E3C 0002 0000      		move.l	#WRAM_DotOutput_0,d7
(2) 1439/    6A66 : 4A78 7194           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1440/    6A6A : 6706                		beq.s	.dot_0
(2) 1441/    6A6C : 2E3C 0002 8000      		move.l	#WRAM_DotOutput_1,d7
(2) 1442/    6A72 :                     .dot_0:
(2) 1443/    6A72 : 7C00                		moveq	#0,d6
(2) 1444/    6A74 : 3A01                		move.w	d1,d5
(2) 1445/    6A76 : E645                		asr.w	#3,d5
(2) 1446/    6A78 : 3C38 7184           		move.w	(RAM_CdSub_StampH).w,d6
(2) 1447/    6A7C : CDC5                		muls.w	d5,d6
(2) 1448/    6A7E : E586                		asl.l	#2,d6
(2) 1449/    6A80 : DE86                		add.l	d6,d7
(2) 1450/    6A82 : 2A02                		move.l	d2,d5
(2) 1451/    6A84 : 0245 FFF8           		andi.w	#-8,d5
(2) 1452/    6A88 : E58D                		lsl.l	#2,d5
(2) 1453/    6A8A : DE85                		add.l	d5,d7
(2) 1454/    6A8C : 0281 0000 0007      		andi.l	#%111,d1
(2) 1455/    6A92 : 0282 0000 0007      		andi.l	#%111,d2
(2) 1456/    6A98 : E74A                		lsl.w	#3,d2
(2) 1457/    6A9A : 8242                		or.w	d2,d1
(2) 1458/    6A9C : E48F                		lsr.l	#2,d7
(2) 1459/    6A9E : 31C1 8060           		move.w  d1,($FFFF8060).w		; Output image buffer offset
(2) 1460/    6AA2 : 31C7 805E           		move.w  d7,($FFFF805E).w		; Output image buffer start address
(2) 1461/    6AA6 : 31C3 8062           		move.w	d3,($FFFF8062).w		; Image buffer H dot
(2) 1462/    6AAA : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1463/    6AAE : 7E00                		moveq	#0,d7
(2) 1464/    6AB0 : 3E38 718E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1465/    6AB4 : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1466/    6ABA : E48F                		lsr.l	#2,d7
(2) 1467/    6ABC : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1468/    6AC0 : 50F8 7188           		st.b	(RAM_CdSub_StampBusy).w
(2) 1469/    6AC4 : 6000 0212           		bra	CdSub_PCM_Process
(2) 1470/    6AC8 :                     
(2) 1471/    6AC8 :                     ; ----------------------------------------------------------------
(2) 1472/    6AC8 :                     ; FIRST FRAME ONLY
(2) 1473/    6AC8 :                     
(2) 1474/    6AC8 :                     .clear_frame:
(2) 1475/    6AC8 : 6100 020E           		bsr	CdSub_PCM_Process
(2) 1476/    6ACC : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1477/    6AD0 : 0207 0007            		andi.b	#%00111,d7
(2) 1478/    6AD4 : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1479/    6AD8 : 31FC 0000 8058      		move.w	#0,($FFFF8058).w		; Stamp data size
(2) 1480/    6ADE : 31FC 0000 805A      		move.w  #0,($FFFF805A).w		; d0 - Stamp map location
(2) 1481/    6AE4 : 2C3C 0002 0000      		move.l	#WRAM_DotOutput_0,d6
(2) 1482/    6AEA : 4A78 7194           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1483/    6AEE : 6706                		beq.s	.dotc_0
(2) 1484/    6AF0 : 2C3C 0002 8000      		move.l	#WRAM_DotOutput_1,d6
(2) 1485/    6AF6 :                     .dotc_0:
(2) 1486/    6AF6 : E48E                		lsr.l	#2,d6
(2) 1487/    6AF8 : 31C6 805E           		move.w  d6,($FFFF805E).w		; Output image buffer start address
(2) 1488/    6AFC : 31FC 0000 8060      		move.w  #0,($FFFF8060).w		; Output image buffer offset
(2) 1489/    6B02 : 3A38 7182           		move.w	(RAM_CdSub_StampW).w,d5
(2) 1490/    6B06 : 3838 7184           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1491/    6B0A : 31C5 8062           		move.w	d5,($FFFF8062).w		; Image buffer H dot
(2) 1492/    6B0E : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1493/    6B12 : 7E00                		moveq	#0,d7
(2) 1494/    6B14 : 3E38 718E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1495/    6B18 : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1496/    6B1E : E48F                		lsr.l	#2,d7
(2) 1497/    6B20 : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1498/    6B24 : 50F8 7188           		st.b	(RAM_CdSub_StampBusy).w
(2) 1499/    6B28 : 6000 01AE           		bra	CdSub_PCM_Process
(2) 1500/    6B2C :                     
(2) 1501/    6B2C :                     ; =====================================================================
(2) 1502/    6B2C :                     ; ----------------------------------------------------------------
(2) 1503/    6B2C :                     ;
(2) 1504/    6B2C :                     ; ----------------------------------------------------------------
(2) 1505/    6B2C :                     
(2) 1506/    6B2C :                     CdSub_SineWave_Cos:
(2) 1507/    6B2C : 0647 0080           		addi.w  #$80,d7
(2) 1508/    6B30 :                     CdSub_SineWave:
(2) 1509/    6B30 : 2F06                		move.l	d6,-(sp)
(2) 1510/    6B32 : 0247 01FF           		andi.w	#$1FF,d7
(2) 1511/    6B36 : 3C07                		move.w	d7,d6
(2) 1512/    6B38 : 0807 0007           		btst	#7,d7
(2) 1513/    6B3C : 6702                		beq.s	.loc_7EFA
(2) 1514/    6B3E : 4646                		not.w	d6
(2) 1515/    6B40 :                     .loc_7EFA:
(2) 1516/    6B40 : 0246 007F           		andi.w  #$7F,d6
(2) 1517/    6B44 : E34E                		lsl.w   #1,d6
(2) 1518/    6B46 : 3C3B 6010           		move.w  .sine_data(pc,d6.w),d6
(2) 1519/    6B4A : 0807 0008           		btst    #8,d7
(2) 1520/    6B4E : 6702                		beq.s   .loc_7F0C
(2) 1521/    6B50 : 4446                		neg.w   d6
(2) 1522/    6B52 :                     .loc_7F0C:
(2) 1523/    6B52 : 3E06                		move.w  d6,d7
(2) 1524/    6B54 : 2C1F                		move.l  (sp)+,d6
(2) 1525/    6B56 : 4E75                		rts
(2) 1526/    6B58 :                     
(2) 1527/    6B58 :                     ; ------------------------------------------------
(2) 1528/    6B58 :                     
(2) 1529/    6B58 :                     .sine_data:
(2) 1530/    6B58 :                     		binclude "nikona/md/data/sine_data.bin"
(2) 1531/    6C58 :                     		align 2
(2) 1532/    6C58 :                     
(2) 1533/    6C58 :                     ; =====================================================================
(2) 1534/    6C58 :                     ; ------------------------------------------------
(2) 1535/    6C58 :                     ; Flip output Dotscreen
(2) 1536/    6C58 :                     ; ------------------------------------------------
(2) 1537/    6C58 :                     
(2) 1538/    6C58 :                     CdSub_StampResetVcell:
(2) 1539/    6C58 : 3C38 7184           		move.w  (RAM_CdSub_StampH).w,d6		; Image V cell size
(2) 1540/    6C5C : E64E                		lsr.w	#3,d6
(2) 1541/    6C5E : 5346                		subq.w	#1,d6
(2) 1542/    6C60 : 31C6 805C           		move.w  d6,($FFFF805C).w
(2) 1543/    6C64 :                     CdSub_StampDefaults:
(2) 1544/    6C64 : 4278 7192           		clr.w	(RAM_CdSub_StampIndxW).w
(2) 1545/    6C68 : 4278 718C           		clr.w	(RAM_CdSub_StampNextWr).w
(2) 1546/    6C6C : 4278 718E           		clr.w	(RAM_CdSub_StampNextRd).w
(2) 1547/    6C70 : 4278 7190           		clr.w	(RAM_CdSub_DotClearFlag).w
(2) 1548/    6C74 : 4278 7188           		clr.w	(RAM_CdSub_StampBusy).w
(2) 1549/    6C78 : 4278 7180           		clr.w	(RAM_CdSub_StampNum).w
(2) 1550/    6C7C : 4E75                		rts
(2) 1551/    6C7E :                     
(2) 1552/    6C7E :                     ; =====================================================================
(2) 1553/    6C7E :                     ; ----------------------------------------------------------------
(2) 1554/    6C7E :                     ; PCM sound
(2) 1555/    6C7E :                     ; ----------------------------------------------------------------
(2) 1556/    6C7E :                     
(2) 1557/    6C7E :                     ; --------------------------------------------------------
(2) 1558/    6C7E :                     ; CdSub_PCM_Init
(2) 1559/    6C7E :                     ; --------------------------------------------------------
(2) 1560/    6C7E :                     
(2) 1561/    6C7E :                     ; PCM WAVE RAM setup:
(2) 1562/    6C7E :                     ; $0000-$7FFF | Streaming data blocks, $1000 each
(2) 1563/    6C7E :                     ; $8000-$8FFF | Silence block "emergency stop"
(2) 1564/    6C7E :                     
(2) 1565/    6C7E :                     CdSub_PCM_Init:
(2) 1566/    6C7E : 4DF9 FFFF 0000      		lea	(SCPU_pcm),a6		; a6 - PCM registers
(2) 1567/    6C84 : 1D7C 00FF 0011      		move.b	#-1,ONREG(a6)
(2) 1568/    6C8A : 7000                		moveq	#0,d0			; d0 - BLANK byte
(2) 1569/    6C8C : 72FF                		moveq	#-1,d1			; d1 - LOOP byte
(2) 1570/    6C8E : 343C 0080           		move.w	#$80,d2			; d2 - Current BANK
(2) 1571/    6C92 : 7E10                		moveq	#$0F+1,d7		; $0000-$9FFF
(2) 1572/    6C94 : 4BEE 2000           		lea	$2000(a6),a5		; a5 - WAVE RAM
(2) 1573/    6C98 :                     .clr_pwm:
(2) 1574/    6C98 : 1D42 000F           		move.b	d2,CTREG(a6)
(2) 1575/    6C9C : 4E71                		nop
(2) 1576/    6C9E : 4E71                		nop
(2) 1577/    6CA0 : 284D                		move.l	a5,a4
(2) 1578/    6CA2 : 3C3C 0FEF           		move.w	#$0FF0-1,d6
(2) 1579/    6CA6 : 38C0                .wr_end:	move.w	d0,(a4)+
(2) 1580/    6CA8 : 51CE FFFC           		dbf	d6,.wr_end
(2) 1581/    6CAC :                     	rept $10
(2) 1582/    6CAC :                     		move.w	d1,(a4)+
(2) 1583/    6CAC :                     	endm
(2) 1582/    6CAC : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CAE : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB0 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB2 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB4 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB6 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB8 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CBA : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CBC : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CBE : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC0 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC2 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC4 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC6 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC8 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CCA : 38C1                		move.w	d1,(a4)+
(2) 1584/    6CCC : 5202                		addq.b	#$01,d2
(2) 1585/    6CCE : 51CF FFC8           		dbf	d7,.clr_pwm
(2) 1586/    6CD2 : 50F8 719A           		st.b	(RAM_CdSub_PcmEnbl).w
(2) 1587/    6CD6 : 4E75                		rts
(2) 1588/    6CD8 :                     
(2) 1589/    6CD8 :                     ; ============================================================
(2) 1590/    6CD8 :                     ; --------------------------------------------------------
(2) 1591/    6CD8 :                     ; CdSub_PCM_Process
(2) 1592/    6CD8 :                     ;
(2) 1593/    6CD8 :                     ; Checks for playback changes
(2) 1594/    6CD8 :                     ; --------------------------------------------------------
(2) 1595/    6CD8 :                     
(2) 1596/    6CD8 :                     CdSub_PCM_Process:
(2) 1597/    6CD8 : 6100 0280           		bsr	CdSub_PCM_Stream
(2) 1598/    6CDC : 4A38 719B           		tst.b	(RAM_CdSub_PcmReqUpd).w
(2) 1599/    6CE0 : 6726                		beq.s	.no_req
(2) 1600/    6CE2 : 6126                		bsr	.get_table
(2) 1601/    6CE4 : 6100 0274           		bsr	CdSub_PCM_Stream
(2) 1602/    6CE8 : 6100 00A4           		bsr	CdSub_PCM_ReadTable
(2) 1603/    6CEC : 6100 026C           		bsr	CdSub_PCM_Stream
(2) 1604/    6CF0 : 6100 0268           		bsr	CdSub_PCM_Stream
(2) 1605/    6CF4 : 6100 0264           		bsr	CdSub_PCM_Stream
(2) 1606/    6CF8 : 13F8 719A FFFF      		move.b	(RAM_CdSub_PcmEnbl).w,(SCPU_pcm+ONREG).l
             6CFE : 0011             
(2) 1607/    6D00 : 617A                		bsr	CdSub_PCM_Wait
(2) 1608/    6D02 : 5338 719B           		subq.b	#1,(RAM_CdSub_PcmReqUpd).w
(2) 1609/    6D06 : 60D0                		bra	CdSub_PCM_Process
(2) 1610/    6D08 :                     .no_req:
(2) 1611/    6D08 : 4E75                		rts
(2) 1612/    6D0A :                     
(2) 1613/    6D0A :                     ; ------------------------------------------------
(2) 1614/    6D0A :                     ; Get PCM table from Z80
(2) 1615/    6D0A :                     ; ------------------------------------------------
(2) 1616/    6D0A :                     
(2) 1617/    6D0A :                     .get_table:
(2) 1618/    6D0A : 43F9 0000 73D2      		lea	(RAM_CdSub_PcmTable).l,a1		; a1 - PCM Table output
(2) 1619/    6D10 : 45F8 8018           		lea	(SCPU_reg+mcd_dcomm_m+8).w,a2		; a2 - Data input
(2) 1620/    6D14 :                     .trnsfr_mode:
(2) 1621/    6D14 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0		; Tell Z80 we are here.
(2) 1622/    6D18 : 0240 000F           		andi.w	#%00001111,d0				; Flag $Cx
(2) 1623/    6D1C : 803C 00C0           		or.b	#%11000000,d0
(2) 1624/    6D20 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1625/    6D24 :                     .wait_start:
(2) 1626/    6D24 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Z80 lock bit set?
(2) 1627/    6D28 : 0800 0005           		btst	#5,d0
(2) 1628/    6D2C : 67F6                		beq.s	.wait_start
(2) 1629/    6D2E : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1630/    6D32 : 0240 00C0           		andi.w	#%11000000,d0
(2) 1631/    6D36 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1632/    6D3A :                     .next_packet:
(2) 1633/    6D3A : 1039 FFFF 800E      		move.b	(SCPU_reg+mcd_comm_m).l,d0		; Read MAIN comm
(2) 1634/    6D40 : 0800 0005           		btst	#5,d0					; Still LOCKed?
(2) 1635/    6D44 : 6728                		beq.s	.exit_now				; If not, finish.
(2) 1636/    6D46 : 0800 0004           		btst	#4,d0					; PASS bit set?
(2) 1637/    6D4A : 67EE                		beq.s	.next_packet
(2) 1638/    6D4C : 204A                		move.l	a2,a0
(2) 1639/    6D4E :                     	rept $08/2
(2) 1640/    6D4E :                     		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1641/    6D4E :                     	endm
(2) 1640/    6D4E : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1640/    6D50 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1640/    6D52 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1640/    6D54 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1642/    6D56 : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w
(2) 1643/    6D5C :                     .wait_main:
(2) 1644/    6D5C : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; PASS bit cleared?
(2) 1645/    6D60 : 0800 0004           		btst	#4,d0
(2) 1646/    6D64 : 66F6                		bne.s	.wait_main
(2) 1647/    6D66 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2) 1648/    6D6C : 60CC                		bra	.next_packet
(2) 1649/    6D6E :                     .exit_now:
(2) 1650/    6D6E : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1651/    6D72 : 0240 000F           		andi.w	#%00001111,d0
(2) 1652/    6D76 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1653/    6D7A :                     .not_now:
(2) 1654/    6D7A : 4E75                		rts
(2) 1655/    6D7C :                     
(2) 1656/    6D7C :                     ; --------------------------------------------------------
(2) 1657/    6D7C :                     ; CdSub_PCM_Wait
(2) 1658/    6D7C :                     ;
(2) 1659/    6D7C :                     ; Call this after writing to the PCM's register
(2) 1660/    6D7C :                     ; (NOT required for FF2001+ memory writes)
(2) 1661/    6D7C :                     ; --------------------------------------------------------
(2) 1662/    6D7C :                     
(2) 1663/    6D7C :                     CdSub_PCM_Wait:
(2) 1664/    6D7C : 48E7 FFFE           		movem.l d0-a6,-(sp)
(2) 1665/    6D80 : 4CDF 7FFF           		movem.l (sp)+,d0-a6
(2) 1666/    6D84 : 48E7 F800           		movem.l d0-d4,-(sp)
(2) 1667/    6D88 : 4CDF 001F           		movem.l (sp)+,d0-d4
(2) 1668/    6D8C : 4E75                		rts
(2) 1669/    6D8E :                     
(2) 1670/    6D8E :                     ; --------------------------------------------------------
(2) 1671/    6D8E :                     ; CdSub_PCM_ReadTable
(2) 1672/    6D8E :                     ; --------------------------------------------------------
(2) 1673/    6D8E :                     
(2) 1674/    6D8E :                     CdSub_PCM_ReadTable:
(2) 1675/    6D8E : 4DF9 0000 72D2      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1676/    6D94 : 4BF9 0000 73D2      		lea	(RAM_CdSub_PcmTable).l,a5
(2) 1677/    6D9A : 49F9 FFFF 0000      		lea	(SCPU_pcm),a4
(2) 1678/    6DA0 : 7E07                		moveq	#8-1,d7				; 8 channels
(2) 1679/    6DA2 : 7C00                		moveq	#0,d6				; Starting channel number
(2) 1680/    6DA4 :                     .get_tbl:
(2) 1681/    6DA4 : 1A15                		move.b	(a5),d5
(2) 1682/    6DA6 : 0885 0003           		bclr	#3,d5				; Update only?
(2) 1683/    6DAA : 6708                		beq.s	.no_updset
(2) 1684/    6DAC : 6100 014C           		bsr	.get_chnlset
(2) 1685/    6DB0 : 6100 016A           		bsr	.update_set
(2) 1686/    6DB4 :                     .no_updset:
(2) 1687/    6DB4 : 0885 0002           		bclr	#2,d5				; Key-cut?
(2) 1688/    6DB8 : 6704                		beq.s	.no_keyoff
(2) 1689/    6DBA : 6100 00E6           		bsr	.cdcom_keycut
(2) 1690/    6DBE :                     .no_keyoff:
(2) 1691/    6DBE : 0885 0001           		bclr	#1,d5				; Key-off?
(2) 1692/    6DC2 : 6704                		beq.s	.no_keycut
(2) 1693/    6DC4 : 6100 00DC           		bsr	.cdcom_keyoff
(2) 1694/    6DC8 :                     .no_keycut:
(2) 1695/    6DC8 : 0885 0000           		bclr	#0,d5				; Key-on?
(2) 1696/    6DCC : 6702                		beq.s	.no_comm
(2) 1697/    6DCE : 6110                		bsr	.cdcom_keyon
(2) 1698/    6DD0 :                     .no_comm:
(2) 1699/    6DD0 : 1AFC 0000           		move.b	#0,(a5)+
(2) 1700/    6DD4 : DCFC 0020           		adda	#cdpcm_len,a6			; Next PCM buffer
(2) 1701/    6DD8 : 5246                		addq.w	#1,d6
(2) 1702/    6DDA : 51CF FFC8           		dbf	d7,.get_tbl
(2) 1703/    6DDE : 4E75                		rts
(2) 1704/    6DE0 :                     
(2) 1705/    6DE0 :                     ; --------------------------------------------------------
(2) 1706/    6DE0 :                     ; pcmcom:b
(2) 1707/    6DE0 :                     ; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
(2) 1708/    6DE0 :                     ; 8 - Pitch MSB
(2) 1709/    6DE0 :                     ; 16 - Pitch LSB
(2) 1710/    6DE0 :                     ; 24 - Volume
(2) 1711/    6DE0 :                     ; 32 - Panning %RRRRLLLL
(2) 1712/    6DE0 :                     ; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
(2) 1713/    6DE0 :                     ; 48
(2) 1714/    6DE0 :                     ; 56
(2) 1715/    6DE0 :                     ;
(2) 1716/    6DE0 :                     ; a0 - table
(2) 1717/    6DE0 :                     
(2) 1718/    6DE0 :                     .cdcom_keyon:
(2) 1719/    6DE0 : 6100 00C0           		bsr	.cdcom_keycut
(2) 1720/    6DE4 : 6100 0114           		bsr	.get_chnlset
(2) 1721/    6DE8 : 7000                		moveq	#0,d0
(2) 1722/    6DEA : 1028 0028           		move.b	40(a0),d0		; 40
(2) 1723/    6DEE : 1600                		move.b	d0,d3
(2) 1724/    6DF0 : 0240 007F           		andi.w	#$7F,d0
(2) 1725/    6DF4 : 4840                		swap	d0
(2) 1726/    6DF6 : 1028 0030           		move.b	48(a0),d0		; 48
(2) 1727/    6DFA : E148                		lsl.w	#8,d0
(2) 1728/    6DFC : 1028 0038           		move.b	56(a0),d0		; 56
(2) 1729/    6E00 : 2440                		move.l	d0,a2
(2) 1730/    6E02 : 7000                		moveq	#0,d0
(2) 1731/    6E04 : 7200                		moveq	#0,d1			; Read LEN
(2) 1732/    6E06 : 101A                		move.b	(a2)+,d0
(2) 1733/    6E08 : E158                		rol.w	#8,d0
(2) 1734/    6E0A : 101A                		move.b	(a2)+,d0
(2) 1735/    6E0C : E058                		ror.w	#8,d0
(2) 1736/    6E0E : 121A                		move.b	(a2)+,d1
(2) 1737/    6E10 : 4841                		swap	d1
(2) 1738/    6E12 : 8081                		or.l	d1,d0
(2) 1739/    6E14 : 2D40 0006           		move.l	d0,cdpcm_length(a6)
(2) 1740/    6E18 : 7200                		moveq	#0,d1
(2) 1741/    6E1A : 7000                		moveq	#0,d0
(2) 1742/    6E1C : 101A                		move.b	(a2)+,d0
(2) 1743/    6E1E : E158                		rol.w	#8,d0
(2) 1744/    6E20 : 101A                		move.b	(a2)+,d0
(2) 1745/    6E22 : E058                		ror.w	#8,d0
(2) 1746/    6E24 : 121A                		move.b	(a2)+,d1
(2) 1747/    6E26 : 4841                		swap	d1
(2) 1748/    6E28 : 8081                		or.l	d1,d0
(2) 1749/    6E2A : 2D40 000A           		move.l	d0,cdpcm_loop(a6)
(2) 1750/    6E2E : 2D4A 0002           		move.l	a2,cdpcm_start(a6)
(2) 1751/    6E32 : E31B                		rol.b	#1,d3
(2) 1752/    6E34 : 0203 0001           		andi.b	#1,d3
(2) 1753/    6E38 : 1D43 0001           		move.b	d3,cdpcm_flags(a6)
(2) 1754/    6E3C :                     
(2) 1755/    6E3C :                     	; Setup stream
(2) 1756/    6E3C : 2D6E 0002 0012      		move.l	cdpcm_start(a6),cdpcm_cread(a6)
(2) 1757/    6E42 : 2D6E 0006 000E      		move.l	cdpcm_length(a6),cdpcm_clen(a6)
(2) 1758/    6E48 : 3D7C 0000 001C      		move.w	#0,cdpcm_cout(a6)
(2) 1759/    6E4E : 3D7C 0010 001A      		move.w	#($1000/SET_PCMBLK),cdpcm_cblk(a6)
(2) 1760/    6E54 : 6100 00C6           		bsr	.update_set
(2) 1761/    6E58 :                     	; Start/End
(2) 1762/    6E58 : 7000                		moveq	#0,d0
(2) 1763/    6E5A : 1006                		move.b	d6,d0
(2) 1764/    6E5C : E948                		lsl.w	#4,d0
(2) 1765/    6E5E : 1940 000D           		move.b	d0,ST(a4)
(2) 1766/    6E62 : E148                		lsl.w	#8,d0
(2) 1767/    6E64 : 0CAE 0000 0FF0      		cmp.l	#$1000-$10,cdpcm_length(a6)
             6E6A : 0006             
(2) 1768/    6E6C : 6506                		bcs.s	.small_sampl
(2) 1769/    6E6E : 08D6 0006           		bset	#6,cdpcm_status(a6)
(2) 1770/    6E72 : 601A                		bra.s	.cont_tloop
(2) 1771/    6E74 :                     .small_sampl:
(2) 1772/    6E74 : 0896 0006           		bclr	#6,cdpcm_status(a6)
(2) 1773/    6E78 : 7200                		moveq	#0,d1
(2) 1774/    6E7A : 3200                		move.w	d0,d1
(2) 1775/    6E7C : 303C 8000           		move.w	#$8000,d0
(2) 1776/    6E80 : 082E 0000 0001      		btst	#0,cdpcm_flags(a6)
(2) 1777/    6E86 : 6706                		beq.s	.cont_tloop
(2) 1778/    6E88 : 202E 000A           		move.l	cdpcm_loop(a6),d0
(2) 1779/    6E8C : D081                		add.l	d1,d0
(2) 1780/    6E8E :                     .cont_tloop:
(2) 1781/    6E8E : 1940 0009           		move.b	d0,LSL(a4)
(2) 1782/    6E92 : E048                		lsr.w	#8,d0
(2) 1783/    6E94 : 1940 000B           		move.b	d0,LSH(a4)
(2) 1784/    6E98 : 0DB8 719A           		bclr	d6,(RAM_CdSub_PcmEnbl).w
(2) 1785/    6E9C : 08D6 0007           		bset	#7,cdpcm_status(a6)
(2) 1786/    6EA0 : 4E75                		rts
(2) 1787/    6EA2 :                     .cdcom_keyoff:
(2) 1788/    6EA2 :                     ; 		bset	d6,(RAM_CdSub_PcmEnbl).w
(2) 1789/    6EA2 :                     ; 		move.b	(RAM_CdSub_PcmEnbl).w,ONREG(a4)
(2) 1790/    6EA2 :                     ; 		rts
(2) 1791/    6EA2 :                     .cdcom_keycut:
(2) 1792/    6EA2 : 426E 001A           		clr.w	cdpcm_cblk(a6)
(2) 1793/    6EA6 : 4216                		clr.b	cdpcm_status(a6)
(2) 1794/    6EA8 : 0DF8 719A           		bset	d6,(RAM_CdSub_PcmEnbl).w
(2) 1795/    6EAC : 1978 719A 0011      		move.b	(RAM_CdSub_PcmEnbl).w,ONREG(a4)
(2) 1796/    6EB2 : 1006                		move.b	d6,d0			; Set PCM to control mode
(2) 1797/    6EB4 : 803C 00C0           		or.b	#$C0,d0
(2) 1798/    6EB8 : 1940 000F           		move.b	d0,CTREG(a4)
(2) 1799/    6EBC : 6100 FEBE           		bsr	CdSub_PCM_Wait
(2) 1800/    6EC0 : 197C 0080 000D      		move.b	#$80,ST(a4)
(2) 1801/    6EC6 : 6100 FEB4           		bsr	CdSub_PCM_Wait
(2) 1802/    6ECA : 303C 8000           		move.w	#$8000,d0
(2) 1803/    6ECE : 1940 0009           		move.b	d0,LSL(a4)
(2) 1804/    6ED2 : 6100 FEA8           		bsr	CdSub_PCM_Wait
(2) 1805/    6ED6 : E048                		lsr.w	#8,d0
(2) 1806/    6ED8 : 1940 000B           		move.b	d0,LSH(a4)
(2) 1807/    6EDC : 6100 FE9E           		bsr	CdSub_PCM_Wait
(2) 1808/    6EE0 : 3D7C 0010 001A      		move.w	#$1000/SET_PCMBLK,cdpcm_cblk(a6)
(2) 1809/    6EE6 : 3D7C 0000 001C      		move.w	#0,cdpcm_cout(a6)
(2) 1810/    6EEC : 2D7C 0000 0000      		move.l	#0,cdpcm_clen(a6)
             6EF2 : 000E             
(2) 1811/    6EF4 : 08D6 0007           		bset	#7,cdpcm_status(a6)
(2) 1812/    6EF8 : 4E75                		rts
(2) 1813/    6EFA :                     .get_chnlset:
(2) 1814/    6EFA : 204D                		move.l	a5,a0
(2) 1815/    6EFC : 1028 0008           		move.b	8(a0),d0		; 8 - Pitch MSB
(2) 1816/    6F00 : E148                		lsl.w	#8,d0
(2) 1817/    6F02 : 1028 0010           		move.b	16(a0),d0		; 16 - Pitch LSB
(2) 1818/    6F06 : 1228 0018           		move.b	24(a0),d1		; 24 - Volume
(2) 1819/    6F0A : 1428 0020           		move.b	32(a0),d2		; 32 - Panning
(2) 1820/    6F0E : 3D40 0018           		move.w	d0,cdpcm_pitch(a6)
(2) 1821/    6F12 : 1D41 001F           		move.b	d1,cdpcm_env(a6)
(2) 1822/    6F16 : 1D42 001E           		move.b	d2,cdpcm_pan(a6)
(2) 1823/    6F1A : 4E75                		rts
(2) 1824/    6F1C :                     
(2) 1825/    6F1C :                     ; ------------------------------------------------
(2) 1826/    6F1C :                     ; Channel changes
(2) 1827/    6F1C :                     ;
(2) 1828/    6F1C :                     ; *DISABLE TIMER INTERRUPT*
(2) 1829/    6F1C :                     ; ------------------------------------------------
(2) 1830/    6F1C :                     
(2) 1831/    6F1C :                     .update_set:
(2) 1832/    6F1C : 1006                		move.b	d6,d0			; Set PCM to control mode
(2) 1833/    6F1E : 803C 00C0           		or.b	#$C0,d0
(2) 1834/    6F22 : 1940 000F           		move.b	d0,CTREG(a4)
(2) 1835/    6F26 : 6100 FE54           		bsr	CdSub_PCM_Wait
(2) 1836/    6F2A : 302E 0018           		move.w	cdpcm_pitch(a6),d0	; Write frequency
(2) 1837/    6F2E : 1940 0005           		move.b	d0,FDL(a4)
(2) 1838/    6F32 : 6100 FE48           		bsr	CdSub_PCM_Wait
(2) 1839/    6F36 : E048                		lsr.w	#8,d0
(2) 1840/    6F38 : 1940 0007           		move.b	d0,FDH(a4)
(2) 1841/    6F3C : 6100 FE3E           		bsr	CdSub_PCM_Wait
(2) 1842/    6F40 : 102E 001E           		move.b	cdpcm_pan(a6),d0	; Panning
(2) 1843/    6F44 : 1940 0003           		move.b	d0,PAN(a4)
(2) 1844/    6F48 : 6100 FE32           		bsr	CdSub_PCM_Wait
(2) 1845/    6F4C : 102E 001F           		move.b	cdpcm_env(a6),d0	; Envelope
(2) 1846/    6F50 : 1940 0001           		move.b	d0,ENV(a4)
(2) 1847/    6F54 : 6100 FE26           		bsr	CdSub_PCM_Wait
(2) 1848/    6F58 : 4E75                		rts
(2) 1849/    6F5A :                     
(2) 1850/    6F5A :                     ; ============================================================
(2) 1851/    6F5A :                     ; --------------------------------------------------------
(2) 1852/    6F5A :                     ; CdSub_PCM_Stream
(2) 1853/    6F5A :                     ; --------------------------------------------------------
(2) 1854/    6F5A :                     
(2) 1855/    6F5A :                     CdSub_PCM_Stream:
(2) 1856/    6F5A : 4DF9 0000 72D2      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1857/    6F60 : 4BF9 FFFF 0000      		lea	(SCPU_pcm),a5
(2) 1858/    6F66 : 49ED 0021           		lea	$21(a5),a4
(2) 1859/    6F6A : 7E07                		moveq	#8-1,d7					; 8 channels
(2) 1860/    6F6C : 7C00                		moveq	#0,d6					; Starting channel number
(2) 1861/    6F6E :                     .pick_stream:
(2) 1862/    6F6E : 4A16                		tst.b	cdpcm_status(a6)			; Streaming enabled?
(2) 1863/    6F70 : 6A6A                		bpl	.no_strm
(2) 1864/    6F72 : 4A6E 001A           		tst.w	cdpcm_cblk(a6)				; Blocks counter
(2) 1865/    6F76 : 6626                		bne.s	.mid_blocks
(2) 1866/    6F78 : 0816 0006           		btst	#6,cdpcm_status(a6)			; Larger sample?
(2) 1867/    6F7C : 675E                		beq	.no_strm				; Finish now then.
(2) 1868/    6F7E : 102C 0002           		move.b	2(a4),d0				; d0 - PCM current position
(2) 1869/    6F82 : 1214                		move.b	(a4),d1
(2) 1870/    6F84 : E148                		lsl.w	#8,d0
(2) 1871/    6F86 : 1001                		move.b	d1,d0
(2) 1872/    6F88 : 322E 001C           		move.w	cdpcm_cout(a6),d1			; d1 - Buffer's pos
(2) 1873/    6F8C : 343C 0800           		move.w	#$1000/2,d2				; Only check halfs
(2) 1874/    6F90 : C042                		and.w	d2,d0
(2) 1875/    6F92 : C242                		and.w	d2,d1
(2) 1876/    6F94 : B141                		eor.w	d0,d1					; Check if halfs changed
(2) 1877/    6F96 : 6744                		beq.s	.no_strm
(2) 1878/    6F98 : 3D7C 0008 001A      		move.w	#($1000/SET_PCMBLK)/2,cdpcm_cblk(a6)	; Make new blocks, half.
(2) 1879/    6F9E :                     .mid_blocks:
(2) 1880/    6F9E : 046E 0001 001A      		subi.w	#1,cdpcm_cblk(a6)			; Count 1 block
(2) 1881/    6FA4 : 363C 00FF           		move.w	#SET_PCMBLK-1,d3			; d3 - Block size
(2) 1882/    6FA8 : 382E 001C           		move.w	cdpcm_cout(a6),d4			; d4 - Current buffer output
(2) 1883/    6FAC : B87C 0F00           		cmp.w	#SET_PCMLAST,d4				; Are we in the last block?
(2) 1884/    6FB0 : 6604                		bne.s	.not_last
(2) 1885/    6FB2 : 0443 0010           		subi.w	#$10,d3					; Skip loop bytes
(2) 1886/    6FB6 :                     .not_last:
(2) 1887/    6FB6 : 206E 0012           		move.l	cdpcm_cread(a6),a0			; a0 - Current Wave data to read
(2) 1888/    6FBA : 222E 000E           		move.l	cdpcm_clen(a6),d1			; d1 - Current wave size
(2) 1889/    6FBE : 612C                		bsr	.make_block
(2) 1890/    6FC0 : 2D41 000E           		move.l	d1,cdpcm_clen(a6)			; Save next wave size
(2) 1891/    6FC4 : 2D48 0012           		move.l	a0,cdpcm_cread(a6)			; Save next wave pos
(2) 1892/    6FC8 : 4A81                		tst.l	d1					; Size is zero? (non-looping only)
(2) 1893/    6FCA : 6604                		bne.s	.next_one
(2) 1894/    6FCC : 08D6 0005           		bset	#5,cdpcm_status(a6)			; Report as finished
(2) 1895/    6FD0 :                     .next_one:
(2) 1896/    6FD0 : 066E 0100 001C      		add.w	#SET_PCMBLK,cdpcm_cout(a6)		; Next output block
(2) 1897/    6FD6 : 026E 0FFF 001C      		andi.w	#$0FFF,cdpcm_cout(a6)			; w/Limit
(2) 1898/    6FDC :                     .no_strm:
(2) 1899/    6FDC : DCFC 0020           		adda	#cdpcm_len,a6				; Next PCM buffer
(2) 1900/    6FE0 : 5246                		addq.w	#1,d6					; Next PCM channel number
(2) 1901/    6FE2 : D8FC 0004           		adda	#4,a4					; Next PCM read
(2) 1902/    6FE6 : 51CF FF86           		dbf	d7,.pick_stream
(2) 1903/    6FEA : 4E75                		rts
(2) 1904/    6FEC :                     
(2) 1905/    6FEC :                     ; --------------------------------------------------------
(2) 1906/    6FEC :                     ; Fill wave block
(2) 1907/    6FEC :                     ;
(2) 1908/    6FEC :                     ; Input:
(2) 1909/    6FEC :                     ; a6 - Current channel buffer
(2) 1910/    6FEC :                     ; a5 - PCM chip
(2) 1911/    6FEC :                     ; a0 - wave data to write
(2) 1912/    6FEC :                     ; d1 - channel current length
(2) 1913/    6FEC :                     ; d3 - block size - 1
(2) 1914/    6FEC :                     ; d4 - output location in wave ram & $0FFF
(2) 1915/    6FEC :                     ; d6 - current channel
(2) 1916/    6FEC :                     ; --------------------------------------------------------
(2) 1917/    6FEC :                     
(2) 1918/    6FEC :                     .make_block:
(2) 1919/    6FEC : 1006                		move.b	d6,d0			; Set PCM memory mode + current channel
(2) 1920/    6FEE : 803C 0080           		or.b	#$80,d0
(2) 1921/    6FF2 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1922/    6FF6 : 6100 FD84           		bsr	CdSub_PCM_Wait
(2) 1923/    6FFA : 43ED 2000           		lea	$2000(a5),a1		; a1 - WAVE RAM output
(2) 1924/    6FFE : D844                		add.w	d4,d4			; Pos * 2
(2) 1925/    7000 : D2C4                		adda	d4,a1			; add to a1
(2) 1926/    7002 : 3803                		move.w	d3,d4			; d4 - block size - 1
(2) 1927/    7004 : 7000                		moveq	#0,d0
(2) 1928/    7006 : 4A81                		tst.l	d1
(2) 1929/    7008 : 673C                		beq.s	.last_bytes
(2) 1930/    700A : 082E 0000 0001      		btst	#0,cdpcm_flags(a6)	; Looping enabled?
(2) 1931/    7010 : 6722                		beq	.end_point
(2) 1932/    7012 :                     
(2) 1933/    7012 :                     ; ----------------------------------------
(2) 1934/    7012 :                     ; Wave loops
(2) 1935/    7012 :                     ; ----------------------------------------
(2) 1936/    7012 :                     
(2) 1937/    7012 :                     .loop_point:
(2) 1938/    7012 : 5381                		subq.l	#1,d1			; Decrement current len
(2) 1939/    7014 : 6610                		bne.s	.strlen_it
(2) 1940/    7016 : 206E 0002           		movea.l	cdpcm_start(a6),a0	; a2 - WAVE start
(2) 1941/    701A : 242E 000A           		move.l	cdpcm_loop(a6),d2	; d0 - Loop start point
(2) 1942/    701E : D1C2                		add.l	d2,a0
(2) 1943/    7020 : 222E 0006           		move.l	cdpcm_length(a6),d1	; d2 - NEW length to set
(2) 1944/    7024 : 9282                		sub.l	d2,d1
(2) 1945/    7026 :                     .strlen_it:
(2) 1946/    7026 : 1018                		move.b	(a0)+,d0		; Write wave data and
(2) 1947/    7028 : 103B 0024           		move.b	.wave_list(pc,d0.w),d0
(2) 1948/    702C : 32C0                		move.w	d0,(a1)+
(2) 1949/    702E : 51CC FFE2           		dbf	d4,.loop_point
(2) 1950/    7032 : 4E75                		rts
(2) 1951/    7034 :                     
(2) 1952/    7034 :                     ; ----------------------------------------
(2) 1953/    7034 :                     ; Wave doesn't loop
(2) 1954/    7034 :                     ; ----------------------------------------
(2) 1955/    7034 :                     
(2) 1956/    7034 :                     .end_point:
(2) 1957/    7034 : 5381                		subq.l	#1,d1			; Count length
(2) 1958/    7036 : 670E                		beq.s	.last_bytes		; If == 0, finished
(2) 1959/    7038 : 1018                		move.b	(a0)+,d0
(2) 1960/    703A : 103B 0012           		move.b	.wave_list(pc,d0.w),d0
(2) 1961/    703E : 32C0                		move.w	d0,(a1)+
(2) 1962/    7040 : 51CC FFF2           		dbf	d4,.end_point
(2) 1963/    7044 : 4E75                		rts
(2) 1964/    7046 :                     .last_bytes:
(2) 1965/    7046 : 32C0                		move.w	d0,(a1)+
(2) 1966/    7048 : 51CC FFFC           		dbf	d4,.last_bytes
(2) 1967/    704C : 4E75                		rts
(2) 1968/    704E :                     
(2) 1969/    704E :                     ; =====================================================================
(2) 1970/    704E :                     ; ----------------------------------------------------------------
(2) 1971/    704E :                     ; WAV to PCM table conversion
(2) 1972/    704E :                     ; ----------------------------------------------------------------
(2) 1973/    704E :                     
(2) 1974/    704E :                     .wave_list:
(2) 1975/    704E : FEFE FDFC FBFA      	dc.b $FE,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0
             7054 : F9F8 F7F6 F5F4 
             705A : F3F2 F1F0          
(2) 1976/    705E : EFEE EDEC EBEA      	dc.b $EF,$EE,$ED,$EC,$EB,$EA,$E9,$E8,$E7,$E6,$E5,$E4,$E3,$E2,$E1,$E0
             7064 : E9E8 E7E6 E5E4 
             706A : E3E2 E1E0          
(2) 1977/    706E : DFDE DDDC DBDA      	dc.b $DF,$DE,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D6,$D5,$D4,$D3,$D2,$D1,$D0
             7074 : D9D8 D7D6 D5D4 
             707A : D3D2 D1D0          
(2) 1978/    707E : CFCE CDCC CBCA      	dc.b $CF,$CE,$CD,$CC,$CB,$CA,$C9,$C8,$C7,$C6,$C5,$C4,$C3,$C2,$C1,$C0
             7084 : C9C8 C7C6 C5C4 
             708A : C3C2 C1C0          
(2) 1979/    708E : BFBE BDBC BBBA      	dc.b $BF,$BE,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2,$B1,$B0
             7094 : B9B8 B7B6 B5B4 
             709A : B3B2 B1B0          
(2) 1980/    709E : AFAE ADAC ABAA      	dc.b $AF,$AE,$AD,$AC,$AB,$AA,$A9,$A8,$A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
             70A4 : A9A8 A7A6 A5A4 
             70AA : A3A2 A1A0          
(2) 1981/    70AE : 9F9E 9D9C 9B9A      	dc.b $9F,$9E,$9D,$9C,$9B,$9A,$99,$98,$97,$96,$95,$94,$93,$92,$91,$90
             70B4 : 9998 9796 9594 
             70BA : 9392 9190          
(2) 1982/    70BE : 8F8E 8D8C 8B8A      	dc.b $8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$85,$84,$83,$82,$81,$80
             70C4 : 8988 8786 8584 
             70CA : 8382 8180          
(2) 1983/    70CE : 0001 0203 0405      	dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
             70D4 : 0607 0809 0A0B 
             70DA : 0C0D 0E0F          
(2) 1984/    70DE : 1011 1213 1415      	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
             70E4 : 1617 1819 1A1B 
             70EA : 1C1D 1E1F          
(2) 1985/    70EE : 2021 2223 2425      	dc.b $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
             70F4 : 2627 2829 2A2B 
             70FA : 2C2D 2E2F          
(2) 1986/    70FE : 3031 3233 3435      	dc.b $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
             7104 : 3637 3839 3A3B 
             710A : 3C3D 3E3F          
(2) 1987/    710E : 4041 4243 4445      	dc.b $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
             7114 : 4647 4849 4A4B 
             711A : 4C4D 4E4F          
(2) 1988/    711E : 5051 5253 5455      	dc.b $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
             7124 : 5657 5859 5A5B 
             712A : 5C5D 5E5F          
(2) 1989/    712E : 6061 6263 6465      	dc.b $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
             7134 : 6667 6869 6A6B 
             713A : 6C6D 6E6F          
(2) 1990/    713E : 7071 7273 7475      	dc.b $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
             7144 : 7677 7879 7A7B 
             714A : 7C7D 7E7F          
(2) 1991/    714E :                     	align 2
(2) 1992/    714E :                     
(2) 1993/    714E :                     ; ====================================================================
(2) 1994/    714E :                     ; ----------------------------------------------------------------
(2) 1995/    714E :                     ; Short .w variables
(2) 1996/    714E :                     ; ----------------------------------------------------------------
(2) 1997/    714E :                     
(2) 1998/    714E :                     			align $80
(2) 1999/    7180 :                     SCPU_RAM:
(2) 2000/    7180 : (MACRO)              			memory SCPU_RAM
(2) 2000/    7180 : =$7180               GLBL_LASTPC     := *
(2) 2000/    2180 :                                     dephase
(2) 2000/    7180 :                                     phase SCPU_RAM
(2) 2000/    7180 : =$7180               GLBL_LASTORG    := *
(2) 2001/    7180 :                     RAM_CdSub_StampNum	ds.w 1
(2) 2002/    7182 :                     RAM_CdSub_StampW	ds.w 1				; Safer W/H reads
(2) 2003/    7184 :                     RAM_CdSub_StampH	ds.w 1				; ''
(2) 2004/    7186 :                     RAM_CdSub_StampEnbl	ds.w 1				; Flag to Disable/Enable Stamp rendering *IMPORTANT*
(2) 2005/    7188 :                     RAM_CdSub_StampBusy	ds.w 1				; Stamp is busy drawing, Level 1 clears this
(2) 2006/    718A :                     RAM_CdSub_StampSize	ds.w 1				; %msr m-Map size: 1x1/16x16 s-Stamp 16x16/32x32 r-Repeat No/Yes
(2) 2007/    718C :                     RAM_CdSub_StampNextWr	ds.w 1
(2) 2008/    718E :                     RAM_CdSub_StampNextRd	ds.w 1
(2) 2009/    7190 :                     RAM_CdSub_DotClearFlag	ds.w 1
(2) 2010/    7192 :                     RAM_CdSub_StampIndxW	ds.w 1
(2) 2011/    7194 :                     RAM_CdSub_StampCBuff	ds.w 1
(2) 2012/    7196 :                     RAM_CdSub_StampPending	ds.w 1
(2) 2013/    7198 :                     RAM_CdSub_IrqIndex	ds.w 1
(2) 2014/    719A :                     RAM_CdSub_PcmEnbl	ds.b 1				; PCM Enable bits
(2) 2015/    719B :                     RAM_CdSub_PcmReqUpd	ds.b 1				; PCM new data request
(2) 2016/    719C :                     RAM_CdSub_StampReqUpd	ds.b 1
(2) 2017/    719D :                     RAM_CdSub_PcmMkNew	ds.b 1
(2) 2018/    719E :                     			align 2
(2) 2019/    719E :                     
(2) 2020/    719E :                     ; ----------------------------------------------------------------
(2) 2021/    719E :                     ; Buffers after $8000
(2) 2022/    719E :                     
(2) 2023/    719E :                     RAM_CdSub_StampProc	ds.b stmpc_len
(2) 2024/    71C6 :                     RAM_CdSub_StampOutBox	ds.b stmpi_len
(2) 2025/    71D2 :                     RAM_CdSub_StampList	ds.l 2*MAX_MCDSTAMPS		; Location and Z sort pos
(2) 2026/    72D2 :                     RAM_CdSub_PcmBuff	ds.b 8*cdpcm_len		; PCM Streaming buffer
(2) 2027/    73D2 :                     RAM_CdSub_PcmTable	ds.b 8*8			; PCM table recieved from Z80
(2) 2028/    7412 :                     RAM_CdSub_IsoFiles	ds.b $800*(8+1)			; 8 sectors + dummy $120
(2) 2029/    BC12 :                     RAM_CdSub_GotData	ds.b $800*($10+1)		; 10 sectors + dummy $120
(2) 2030/   14412 :                     
(2) 2031/   14412 :                     ; ====================================================================
(2) 2032/   14412 :                     ; ----------------------------------------------------------------
(2) 2033/   14412 :                     ; BIOS call input/output buffers
(2) 2034/   14412 :                     ; ----------------------------------------------------------------
(2) 2035/   14412 :                     
(2) 2036/   14412 :                     RAM_CdSub_FsBuff	ds.l $20
(2) 2037/   14492 :                     RAM_CdSub_CurrSaveInfo	ds.b $10
(2) 2038/   144A2 :                     RAM_CdSub_BramWork	ds.b $640
(2) 2039/   14AE2 :                     RAM_CdSub_BramStrings	ds.b $C
(2) 2040/   14AEE :                     RAM_CdSub_SramCopy	ds.b SET_SRAMSIZE
(2) 2041/   14CEE :                     sizeof_subcpu		ds.l 0
(2) 2042/   14CF0 : (MACRO)              			endmemory
(2) 2042/    FCF0 :                     .here:          dephase
(2) 2042/    FCF0 :                                     ds.b -(.here-GLBL_LASTORG)
(2) 2042/    7180 :                                     phase GLBL_LASTPC
(2) 2043/    7180 : (MACRO)              			erreport "SUB-CPU IP",sizeof_subcpu,$20000
(2) 2044/    7180 :                     
(2) 2045/    7180 :                     ; ====================================================================
(2) 2046/    7180 :                     ; ----------------------------------------------------------------
(2) 2047/    7180 :                     ; SUB-CPU data
(2) 2048/    7180 :                     ; ----------------------------------------------------------------
(2) 2049/    7180 :                     
(2) 2050/    2180 :                     			dephase
(2) 2051/   40000 :                     			phase $40000		; <-- MANUAL location on Sub-CPU area
(2) 2052/   40000 :                     SCPU_DATA:
(2) 2053/    2180 :                     			dephase
(2) 2054/    2180 :                     			dephase
(2) 2055/    2180 :                     
(1)   79/    2180 :                     SP_End:
(1)   80/    2180 :                     		align 2
(1)   81/    2180 :                     
(1)   82/    2180 :                     ; ====================================================================
(1)   83/    2180 :                     ; ----------------------------------------------------------------
(1)   84/    2180 :                     ; Super-jump
(1)   85/    2180 :                     ; ----------------------------------------------------------------
(1)   86/    2180 :                     
(1)   87/    2180 :                     		align $2800
(1)   88/    2800 :                     MCD_Main:
(1)   89/    2800 :                     	; --------------------------------
(1)   90/    2800 :                     	; Quick fade-out
(1)   91/    2800 :                     	; --------------------------------
(1)   92/    2800 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)   93/    2806 : 2D7C 0000 0020      		move.l	#$00000020,4(a6)	; Copy ALL palette colors
             280C : 0004             
(1)   94/    280E : 4BF8 FF80           		lea	($FFFFFF80).w,a5
(1)   95/    2812 : 204D                		move.l	a5,a0
(1)   96/    2814 : 323C 003F           		move.w	#64-1,d1
(1)   97/    2818 :                     .copy_colors:
(1)   98/    2818 : 30D6                		move.w	(a6),(a0)+
(1)   99/    281A : 51C9 FFFC           		dbf	d1,.copy_colors
(1)  100/    281E :                     .fade_out:
(1)  101/    281E : 302E 0004           		move.w	4(a6),d0		; Wait VBlank
(1)  102/    2822 : 0800 0003           		btst	#3,d0
(1)  103/    2826 : 67F6                		beq.s	.fade_out
(1)  104/    2828 : 204D                		move.l	a5,a0
(1)  105/    282A : 3C3C 003F           		move.w	#64-1,d6		; Check all 64 colors
(1)  106/    282E : 7E00                		moveq	#0,d7			; Exit flag
(1)  107/    2830 :                     .next_color:
(1)  108/    2830 : 3010                		move.w	(a0),d0
(1)  109/    2832 : 673C                		beq.s	.nothing
(1)  110/    2834 : 3200                		move.w	d0,d1
(1)  111/    2836 : 0240 0EE0           		andi.w	#$EE0,d0
(1)  112/    283A : 0241 000E           		andi.w	#$00E,d1
(1)  113/    283E : 6704                		beq.s	.no_red
(1)  114/    2840 : 5541                		subq.w	#2,d1
(1)  115/    2842 : 5247                		addq.w	#1,d7
(1)  116/    2844 :                     .no_red:
(1)  117/    2844 : 8041                		or.w	d1,d0
(1)  118/    2846 : 3200                		move.w	d0,d1
(1)  119/    2848 : 0240 0E0E           		andi.w	#$E0E,d0
(1)  120/    284C : 0241 00E0           		andi.w	#$0E0,d1
(1)  121/    2850 : 6706                		beq.s	.no_green
(1)  122/    2852 : 0441 0020           		subi.w	#$020,d1
(1)  123/    2856 : 5247                		addq.w	#1,d7
(1)  124/    2858 :                     .no_green:
(1)  125/    2858 : 8041                		or.w	d1,d0
(1)  126/    285A : 3200                		move.w	d0,d1
(1)  127/    285C : 0240 00EE           		andi.w	#$0EE,d0
(1)  128/    2860 : 0241 0E00           		andi.w	#$E00,d1
(1)  129/    2864 : 6706                		beq.s	.no_blue
(1)  130/    2866 : 0441 0200           		subi.w	#$200,d1
(1)  131/    286A : 5247                		addq.w	#1,d7
(1)  132/    286C :                     .no_blue:
(1)  133/    286C : 8041                		or.w	d1,d0
(1)  134/    286E : 3080                		move.w	d0,(a0)
(1)  135/    2870 :                     .nothing:
(1)  136/    2870 : D0FC 0002           		adda	#2,a0
(1)  137/    2874 : 51CE FFBA           		dbf	d6,.next_color
(1)  138/    2878 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)
             287E : 0004             
(1)  139/    2880 : 3C3C 003F           		move.w	#64-1,d6
(1)  140/    2884 : 204D                		move.l	a5,a0
(1)  141/    2886 :                     .copy_new:
(1)  142/    2886 : 3C98                		move.w	(a0)+,(a6)
(1)  143/    2888 : 51CE FFFC           		dbf	d6,.copy_new
(1)  144/    288C :                     .wait_next:
(1)  145/    288C : 302E 0004           		move.w	4(a6),d0
(1)  146/    2890 : 0800 0003           		btst	#3,d0
(1)  147/    2894 : 66F6                		bne.s	.wait_next
(1)  148/    2896 :                     	; --------------------------------
(1)  149/    2896 : 4A47                		tst.w	d7
(1)  150/    2898 : 6684                		bne.s	.fade_out
(1)  151/    289A : 204D                		move.l	a5,a0
(1)  152/    289C : 7C00                		moveq	#0,d6
(1)  153/    289E : 7E3F                		moveq	#64-1,d7
(1)  154/    28A0 :                     .cleanup:
(1)  155/    28A0 : 30C6                		move.w	d6,(a0)+
(1)  156/    28A2 : 51CF FFFC           		dbf	d7,.cleanup
(1)  157/    28A6 : 41F8 F700           		lea	($FFFFF700).w,a0
(1)  158/    28AA : 3E3C 027F           		move.w	#($500/2)-1,d7
(1)  159/    28AE :                     .lil_clnup:
(1)  160/    28AE : 30C6                		move.w	d6,(a0)+
(1)  161/    28B0 : 51CF FFFC           		dbf	d7,.lil_clnup
(1)  162/    28B4 : 4FF8 FD00           		lea	(RAM_Stack),sp
(1)  163/    28B8 :                     
     123/    28B8 : 41FA 006E           		lea	Md_SysCode(pc),a0			; Copy NIKONA code to RAM
     124/    28BC : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     125/    28C2 : 303C 2573           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     126/    28C6 :                     .copy_code:
     127/    28C6 : 12D8                		move.b	(a0)+,(a1)+
     128/    28C8 : 51C8 FFFC           		dbf	d0,.copy_code
     129/    28CC :                     	; ** CD32X boot code **
     135/    28CC : 41FA 003E           		lea	filen_z80file(pc),a0			; Load Z80 data to Word-RAM
     136/    28D0 : 4EB9 FFFF 20B8      		jsr	(System_MdMcd_RdFile_WRAM).l		; Sound_Init will read from there.
     137/    28D6 : 41F8 DC1E           		lea	(RAM_MdVideo).w,a0			; Clean our "work" RAM starting from here
     138/    28DA : 223C FFFF EE82      		move.l	#sizeof_mdram,d1
     139/    28E0 : 7000                		moveq	#0,d0
     140/    28E2 : 30C0                .loop_ram:	move.w	d0,(a0)+
     141/    28E4 : B1C1                		cmp.l	d1,a0
     142/    28E6 : 65FA                		bcs.s	.loop_ram
     143/    28E8 : 4EB9 FFFF 1F8C      		jsr	(System_MdMcd_SubWait).l		; Wait until Sub-CPU finishes
     144/    28EE : 4EB9 FFFF 19BE      		jsr	(Sound_Init).l				; Init Sound driver (FIRST)
     145/    28F4 : 4EB9 FFFF 0296      		jsr	(Video_Init).l				; Init Video
     146/    28FA : 4EB9 FFFF 18C4      		jsr	(System_Init).l				; Init System
     147/    2900 : 31FC 0000 EE7C      		move.w	#SET_FIRSTSCRN,(RAM_ScreenMode).w	; Reset screen mode
     148/    2906 : 4EF9 FFFF 249C      		jmp	(Md_ReadModes).l			; Go to SCREEN LOAD section
     149/    290C : 4745 4D41 5F5A      filen_z80file:	dc.b "GEMA_Z80.BIN",0
             2912 : 3830 2E42 494E 00 
     150/    2919 :                     		align 2
     151/    291A : 4E4B 4E41 4D41      filen_marscode:	dc.b "NKNAMARS.BIN",0
             2920 : 5253 2E42 494E 00 
     152/    2927 :                     		align 2
     153/    2928 :                     
     154/    2928 :                     ; ---------------------------------------------
     155/    2928 :                     ; SEGA PICO
     156/    2928 :                     ; ---------------------------------------------
     178/    2928 :                     
     179/    2928 :                     ; ====================================================================
     180/    2928 :                     ; --------------------------------------------------------
     181/    2928 :                     ; SYSTEM routines
     182/    2928 :                     ;
     183/    2928 :                     ; MD/PICO:  Normal ROM locations
     184/    2928 :                     ; 32X:      Loaded into RAM to prevent problems with SH2
     185/    2928 :                     ; CD/CD32X: Loaded into RAM normally
     186/    2928 :                     ; --------------------------------------------------------
     187/    2928 :                     
     189/    2928 :                     Md_SysCode:
     190/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     192/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     193/FFFFFFFFFFFF0000 :                     
     194/FFFFFFFFFFFF0000 :                     		include	"sound/drv/gema_macros.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA MACROS
(1)    4/FFFFFFFFFFFF0000 :                     ;
(1)    5/FFFFFFFFFFFF0000 :                     ; Variables used:
(1)    6/FFFFFFFFFFFF0000 :                     ; MCD, MARS, MARSCD
(1)    7/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    8/FFFFFFFFFFFF0000 :                     
(1)    9/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   10/FFFFFFFFFFFF0000 :                     ; gSmplData - Special include for .wav files,
(1)   11/FFFFFFFFFFFF0000 :                     ;
(1)   12/FFFFFFFFFFFF0000 :                     ; labl | Label for this sample
(1)   13/FFFFFFFFFFFF0000 :                     ; file | WAV file location
(1)   14/FFFFFFFFFFFF0000 :                     ; loop | Loop start point
(1)   15/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   16/FFFFFFFFFFFF0000 :                     
(1)   17/FFFFFFFFFFFF0000 :                     gSmplData macro labl,file,loop
(1)   18/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   19/FFFFFFFFFFFF0000 :                     		align 4
(1)   20/FFFFFFFFFFFF0000 :                     	endif
(1)   21/FFFFFFFFFFFF0000 :                     labl	label *
(1)   22/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   23/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   24/FFFFFFFFFFFF0000 :                     labl_s:
(1)   25/FFFFFFFFFFFF0000 :                     	binclude file,$2C	; dc.b (data)
(1)   26/FFFFFFFFFFFF0000 :                     labl_e:
(1)   27/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   28/FFFFFFFFFFFF0000 :                     		align 4
(1)   29/FFFFFFFFFFFF0000 :                     	endif
(1)   30/FFFFFFFFFFFF0000 :                     	endm
(1)   31/FFFFFFFFFFFF0000 :                     
(1)   32/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   33/FFFFFFFFFFFF0000 :                     ; gSmplRaw - Special include for raw files
(1)   34/FFFFFFFFFFFF0000 :                     ;
(1)   35/FFFFFFFFFFFF0000 :                     ; labl | Label for this sample
(1)   36/FFFFFFFFFFFF0000 :                     ; file | RAW file location
(1)   37/FFFFFFFFFFFF0000 :                     ; loop | Loop start point
(1)   38/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   39/FFFFFFFFFFFF0000 :                     
(1)   40/FFFFFFFFFFFF0000 :                     gSmplRaw macro labl,file,loop
(1)   41/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   42/FFFFFFFFFFFF0000 :                     		align 4
(1)   43/FFFFFFFFFFFF0000 :                     	endif
(1)   44/FFFFFFFFFFFF0000 :                     labl	label *
(1)   45/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   46/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   47/FFFFFFFFFFFF0000 :                     labl_s:
(1)   48/FFFFFFFFFFFF0000 :                     	binclude file		; dc.b (data)
(1)   49/FFFFFFFFFFFF0000 :                     labl_e:
(1)   50/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   51/FFFFFFFFFFFF0000 :                     		align 4
(1)   52/FFFFFFFFFFFF0000 :                     	endif
(1)   53/FFFFFFFFFFFF0000 :                     	endm
(1)   54/FFFFFFFFFFFF0000 :                     
(1)   55/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   56/FFFFFFFFFFFF0000 :                     ; gemaTrk - Sequence entry in the current master
(1)   57/FFFFFFFFFFFF0000 :                     ;           list
(1)   58/FFFFFFFFFFFF0000 :                     ;
(1)   59/FFFFFFFFFFFF0000 :                     ; enblt | Disable/Enable global beats on this Sequence:
(1)   60/FFFFFFFFFFFF0000 :                     ;         0 - Don't use beats
(1)   61/FFFFFFFFFFFF0000 :                     ;         1 - Use beats
(1)   62/FFFFFFFFFFFF0000 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   63/FFFFFFFFFFFF0000 :                     ;   loc | Direct 24-bit location of the sequence data
(1)   64/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   65/FFFFFFFFFFFF0000 :                     
(1)   66/FFFFFFFFFFFF0000 :                     gemaTrk macro enblt,ticks,loc
(1)   67/FFFFFFFFFFFF0000 :                     	dc.l ((enblt&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   68/FFFFFFFFFFFF0000 :                     	endm
(1)   69/FFFFFFFFFFFF0000 :                     
(1)   70/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   71/FFFFFFFFFFFF0000 :                     ; gemaHead - Sequence data header
(1)   72/FFFFFFFFFFFF0000 :                     ;
(1)   73/FFFFFFFFFFFF0000 :                     ; blk_data  | Block data pointer
(1)   74/FFFFFFFFFFFF0000 :                     ; patt_data | Pattern data pointer
(1)   75/FFFFFFFFFFFF0000 :                     ; ins_list  | instrument list pointer
(1)   76/FFFFFFFFFFFF0000 :                     ; num_chnls | Number of channels used in the seq
(1)   77/FFFFFFFFFFFF0000 :                     ;             If 0: Read ALL channels
(1)   78/FFFFFFFFFFFF0000 :                     ;                   (NOT recommended, UNSTABLE)
(1)   79/FFFFFFFFFFFF0000 :                     ;
(1)   80/FFFFFFFFFFFF0000 :                     ; Note:
(1)   81/FFFFFFFFFFFF0000 :                     ; Pointers are in 68k map area
(1)   82/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   83/FFFFFFFFFFFF0000 :                     
(1)   84/FFFFFFFFFFFF0000 :                     gemaHead macro blk,pat,ins,num
(1)   85/FFFFFFFFFFFF0000 :                     	dc.w num
(1)   86/FFFFFFFFFFFF0000 :                     	dc.l blk
(1)   87/FFFFFFFFFFFF0000 :                     	dc.l pat
(1)   88/FFFFFFFFFFFF0000 :                     	dc.l ins
(1)   89/FFFFFFFFFFFF0000 :                     	endm
(1)   90/FFFFFFFFFFFF0000 :                     
(1)   91/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   92/FFFFFFFFFFFF0000 :                     ; Instrument macros, instrument_num-1
(1)   93/FFFFFFFFFFFF0000 :                     ; (ex. Instrument 1 is 0 here)
(1)   94/FFFFFFFFFFFF0000 :                     ;
(1)   95/FFFFFFFFFFFF0000 :                     ; Note:
(1)   96/FFFFFFFFFFFF0000 :                     ; UNUSED instruments MUST use gInsNull or
(1)   97/FFFFFFFFFFFF0000 :                     ; the Z80 gets unexpected results and probably crash.
(1)   98/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   99/FFFFFFFFFFFF0000 :                     
(1)  100/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  101/FFFFFFFFFFFF0000 :                     ; gInsNull - Null instrument
(1)  102/FFFFFFFFFFFF0000 :                     ;
(1)  103/FFFFFFFFFFFF0000 :                     ; You MUST use this on unused instruments.
(1)  104/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  105/FFFFFFFFFFFF0000 :                     
(1)  106/FFFFFFFFFFFF0000 :                     gInsNull macro
(1)  107/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  108/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  109/FFFFFFFFFFFF0000 :                     	endm
(1)  110/FFFFFFFFFFFF0000 :                     
(1)  111/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  112/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG tone
(1)  113/FFFFFFFFFFFF0000 :                     ;
(1)  114/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  115/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  116/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  117/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  118/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  119/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  120/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, reserved for vibrato
(1)  121/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  122/FFFFFFFFFFFF0000 :                     
(1)  123/FFFFFFFFFFFF0000 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  124/FFFFFFFFFFFF0000 :                     	dc.b $80,pitch,alv,atk
(1)  125/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  126/FFFFFFFFFFFF0000 :                     	endm
(1)  127/FFFFFFFFFFFF0000 :                     
(1)  128/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  129/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG noise
(1)  130/FFFFFFFFFFFF0000 :                     ;
(1)  131/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  132/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  133/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  134/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  135/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  136/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  137/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, reserved for vibrato
(1)  138/FFFFFFFFFFFF0000 :                     ; mode  | Noise mode: %tmm
(1)  139/FFFFFFFFFFFF0000 :                     ;         t - Bass(0)|Noise(1)
(1)  140/FFFFFFFFFFFF0000 :                     ;         m - Clock(00)|Clock/2(01)|Clock/4(10)|Tone3(11)
(1)  141/FFFFFFFFFFFF0000 :                     ;
(1)  142/FFFFFFFFFFFF0000 :                     ; Note:
(1)  143/FFFFFFFFFFFF0000 :                     ; Using Tone3 will turn OFF channel 3.
(1)  144/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  145/FFFFFFFFFFFF0000 :                     
(1)  146/FFFFFFFFFFFF0000 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  147/FFFFFFFFFFFF0000 :                     	dc.b $90|mode,pitch,alv,atk
(1)  148/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  149/FFFFFFFFFFFF0000 :                     	endm
(1)  150/FFFFFFFFFFFF0000 :                     
(1)  151/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  152/FFFFFFFFFFFF0000 :                     ; gInsFm - YM2612 FM normal instrument/patch
(1)  153/FFFFFFFFFFFF0000 :                     ;
(1)  154/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  155/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  156/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  157/FFFFFFFFFFFF0000 :                     
(1)  158/FFFFFFFFFFFF0000 :                     gInsFm macro pitch,fmins
(1)  159/FFFFFFFFFFFF0000 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  160/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  161/FFFFFFFFFFFF0000 :                     	endm
(1)  162/FFFFFFFFFFFF0000 :                     
(1)  163/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  164/FFFFFFFFFFFF0000 :                     ; gInsFm - YM2612 FM special instrument/patch
(1)  165/FFFFFFFFFFFF0000 :                     ;
(1)  166/FFFFFFFFFFFF0000 :                     ; pitch | UNUSED, value ignored (set to 0)
(1)  167/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  168/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  169/FFFFFFFFFFFF0000 :                     
(1)  170/FFFFFFFFFFFF0000 :                     gInsFm3	macro pitch,fmins
(1)  171/FFFFFFFFFFFF0000 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  172/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  173/FFFFFFFFFFFF0000 :                     	endm
(1)  174/FFFFFFFFFFFF0000 :                     
(1)  175/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  176/FFFFFFFFFFFF0000 :                     ; gInsDac - DAC instrument
(1)  177/FFFFFFFFFFFF0000 :                     ;
(1)  178/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  179/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer
(1)  180/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  181/FFFFFFFFFFFF0000 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  182/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  183/FFFFFFFFFFFF0000 :                     
(1)  184/FFFFFFFFFFFF0000 :                     gInsDac	macro pitch,start,flags
(1)  185/FFFFFFFFFFFF0000 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  186/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  187/FFFFFFFFFFFF0000 :                     	endm
(1)  188/FFFFFFFFFFFF0000 :                     
(1)  189/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  190/FFFFFFFFFFFF0000 :                     ; gInsPcm - RF5C164 PCM Sample (SEGA CD)
(1)  191/FFFFFFFFFFFF0000 :                     ;
(1)  192/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  193/FFFFFFFFFFFF0000 :                     ; start | 24-bit direct pointer to
(1)  194/FFFFFFFFFFFF0000 :                     ;         Sub-CPU's memory area.
(1)  195/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  196/FFFFFFFFFFFF0000 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  197/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  198/FFFFFFFFFFFF0000 :                     
(1)  199/FFFFFFFFFFFF0000 :                     gInsPcm	macro pitch,start,flags
(1)  200/FFFFFFFFFFFF0000 :                      if MCD|MARSCD
(1)  201/FFFFFFFFFFFF0000 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  202/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  203/FFFFFFFFFFFF0000 :                      else
(1)  204/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  205/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  206/FFFFFFFFFFFF0000 :                      endif
(1)  207/FFFFFFFFFFFF0000 :                     	endm
(1)  208/FFFFFFFFFFFF0000 :                     
(1)  209/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  210/FFFFFFFFFFFF0000 :                     ; gInsPwm - PWM Sample (SEGA 32X)
(1)  211/FFFFFFFFFFFF0000 :                     ;
(1)  212/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  213/FFFFFFFFFFFF0000 :                     ; start | 32-bit pointer to
(1)  214/FFFFFFFFFFFF0000 :                     ;         SH2's map view: CS1(ROM) or CS3(SDRAM)
(1)  215/FFFFFFFFFFFF0000 :                     ; flags | Flags: %000000sl
(1)  216/FFFFFFFFFFFF0000 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  217/FFFFFFFFFFFF0000 :                     ;         | s - Sample data is in Stereo: No(0)/Yes(1)
(1)  218/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  219/FFFFFFFFFFFF0000 :                     
(1)  220/FFFFFFFFFFFF0000 :                     gInsPwm	macro pitch,start,flags
(1)  221/FFFFFFFFFFFF0000 :                      if MARS|MARSCD
(1)  222/FFFFFFFFFFFF0000 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  223/FFFFFFFFFFFF0000 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  224/FFFFFFFFFFFF0000 :                      else
(1)  225/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  226/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  227/FFFFFFFFFFFF0000 :                      endif
(1)  228/FFFFFFFFFFFF0000 :                     	endm
(1)  229/FFFFFFFFFFFF0000 :                     
     195/FFFFFFFFFFFF0000 :                     		include	"sound/drv/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/FFFFFFFFFFFF0000 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    6/FFFFFFFFFFFF0000 :                     
(1)    7/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)    8/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)    9/FFFFFFFFFFFF0000 :                     ; Variables
(1)   10/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   11/FFFFFFFFFFFF0000 :                     
(1)   12/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000			; Z80 CPU area
(1)   13/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100			; only read bit 0 (bit 8 as WORD)
(1)   14/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200			; WRITE only: $0000 reset/$0100 cancel
(1)   15/FFFFFFFFFFFF0000 : =$1F60               zDrvFifo	equ $1F60;commZfifo		; FIFO command storage
(1)   16/FFFFFFFFFFFF0000 : =$1F80               zDrvFWrt	equ $1F80;commZWrite		; FIFO command index
(1)   17/FFFFFFFFFFFF0000 : =$1F81               zDrvRomBlk	equ $1F81;commZRomBlk		; ROM block flag
(1)   18/FFFFFFFFFFFF0000 : =$1F86               zDrvRamSrc	equ $1F82+4;cdRamSrcB		; !! RAM-read source+dest pointers
(1)   19/FFFFFFFFFFFF0000 : =$1F87               zDrvRamLen	equ $1F87;cdRamLen		; RAM-read length + flag
(1)   20/FFFFFFFFFFFF0000 : =$1F88               zDrvPalMode	equ $1F88;palMode		; PAL speed flag
(1)   21/FFFFFFFFFFFF0000 : =$1F89               zDrvMarsBlk	equ $1F89;marsBlock		; Flag to disable 32X's PWM
(1)   22/FFFFFFFFFFFF0000 : =$1F8A               zDrvMcdBlk	equ $1F8A;mcdBlock		; Flag to disable SegaCD's PCM
(1)   23/FFFFFFFFFFFF0000 : =$20                 zDrvMaxCmnd	equ $20;MAX_ZCMND		; Command fifo size
(1)   24/FFFFFFFFFFFF0000 :                     
(1)   25/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   26/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   27/FFFFFFFFFFFF0000 :                     ; Labels
(1)   28/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   29/FFFFFFFFFFFF0000 :                     
(1)   30/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlagD	equ RAM_SoundBuff			; transferRom flag shared with Z80
(1)   31/FFFFFFFFFFFF0000 :                     
(1)   32/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   33/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   34/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   35/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   36/FFFFFFFFFFFF0000 :                     
(1)   37/FFFFFFFFFFFF0000 :                     gemaInit:
(1)   42/FFFFFFFFFFFF0000 : 41F9 0020 0000      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   43/FFFFFFFFFFFF0006 : 303C 1F8B           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   44/FFFFFFFFFFFF000A : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 stop
         FFFFFFFFFFFF0010 : 1100             
(1)   45/FFFFFFFFFFFF0012 : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0018 : 1200             
(1)   46/FFFFFFFFFFFF001A :                     .wait:
(1)   47/FFFFFFFFFFFF001A : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Did it stop?
         FFFFFFFFFFFF0020 : 1100             
(1)   48/FFFFFFFFFFFF0022 : 66F6                		bne.s	.wait
(1)   49/FFFFFFFFFFFF0024 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - output Z80 memory
(1)   50/FFFFFFFFFFFF002A : 383C 1FFF           		move.w	#$2000-1,d4
(1)   51/FFFFFFFFFFFF002E :                     .copy_drvr:
(1)   52/FFFFFFFFFFFF002E : 12D8                		move.b	(a0)+,(a1)+
(1)   53/FFFFFFFFFFFF0030 : 5344                		subq.w	#1,d4
(1)   54/FFFFFFFFFFFF0032 : 51C8 FFFA           		dbf	d0,.copy_drvr			; Pass 1: copy data
(1)   55/FFFFFFFFFFFF0036 : 5240                		addq.w	#1,d0
(1)   56/FFFFFFFFFFFF0038 : 12C0                .clear_rest:	move.b	d0,(a1)+
(1)   57/FFFFFFFFFFFF003A : 51CC FFFC           		dbf	d4,.clear_rest			; Pass 2: clear remains
(1)   58/FFFFFFFFFFFF003E : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset Z80 again
         FFFFFFFFFFFF0044 : 1200             
(1)   59/FFFFFFFFFFFF0046 :                     
(1)   60/FFFFFFFFFFFF0046 : 4238 FF00           		clr.b	(RAM_ZCdFlagD).w		; Clear ramRead flag here
(1)   61/FFFFFFFFFFFF004A : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Check for PAL speed
(1)   62/FFFFFFFFFFFF0050 : 0800 0006           		btst	#6,d0
(1)   63/FFFFFFFFFFFF0054 : 6708                		beq.s	.not_pal
(1)   64/FFFFFFFFFFFF0056 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvPalMode).l	; Tell Z80 we are running slower
         FFFFFFFFFFFF005C : 1F88             
(1)   65/FFFFFFFFFFFF005E :                     .not_pal:
(1)   66/FFFFFFFFFFFF005E : 4E71                		nop
(1)   67/FFFFFFFFFFFF0060 : 4E71                		nop
(1)   68/FFFFFFFFFFFF0062 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF0068 : 1200             
(1)   69/FFFFFFFFFFFF006A : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0070 : 1100             
(1)   71/FFFFFFFFFFFF0072 :                     
(1)   72/FFFFFFFFFFFF0072 :                     ; ====================================================================
(1)   73/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)   74/FFFFFFFFFFFF0072 :                     ; gemaReset
(1)   75/FFFFFFFFFFFF0072 :                     ;
(1)   76/FFFFFFFFFFFF0072 :                     ; Reset ALL sound to defaults
(1)   77/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)   78/FFFFFFFFFFFF0072 :                     
(1)   79/FFFFFFFFFFFF0072 :                     gemaReset:
(1)   80/FFFFFFFFFFFF0072 : 6100 01B8           		bsr	gemaStopAll
(1)   81/FFFFFFFFFFFF0076 : 41F9 0020 0000      		lea	(MainGemaSeqList),a0
(1)   82/FFFFFFFFFFFF007C : 6100 0140           		bsr	gemaSetMasterList
(1)   83/FFFFFFFFFFFF0080 : 7E08                		moveq	#8,d7				; Make sure it finishes.
(1)   84/FFFFFFFFFFFF0082 : 51CF FFFE           		dbf	d7,*
(1)   85/FFFFFFFFFFFF0086 : 4E75                		rts
(1)   86/FFFFFFFFFFFF0088 :                     
(1)   87/FFFFFFFFFFFF0088 :                     ; ====================================================================
(1)   88/FFFFFFFFFFFF0088 :                     ; ------------------------------------------------
(1)   89/FFFFFFFFFFFF0088 :                     ; sndLockZ80
(1)   90/FFFFFFFFFFFF0088 :                     ;
(1)   91/FFFFFFFFFFFF0088 :                     ; Stop Z80, unlocks bus
(1)   92/FFFFFFFFFFFF0088 :                     ; ------------------------------------------------
(1)   93/FFFFFFFFFFFF0088 :                     
(1)   94/FFFFFFFFFFFF0088 :                     sndLockZ80:
(1)   96/FFFFFFFFFFFF0088 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF008E : 1100             
(1)   97/FFFFFFFFFFFF0090 :                     .wait:
(1)   98/FFFFFFFFFFFF0090 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF0096 : 1100             
(1)   99/FFFFFFFFFFFF0098 : 66F6                		bne.s	.wait
(1)  101/FFFFFFFFFFFF009A : 4E75                		rts
(1)  102/FFFFFFFFFFFF009C :                     
(1)  103/FFFFFFFFFFFF009C :                     ; ------------------------------------------------
(1)  104/FFFFFFFFFFFF009C :                     ; sndUnlockZ80
(1)  105/FFFFFFFFFFFF009C :                     ;
(1)  106/FFFFFFFFFFFF009C :                     ; Resume Z80, locks bus
(1)  107/FFFFFFFFFFFF009C :                     ; ------------------------------------------------
(1)  108/FFFFFFFFFFFF009C :                     
(1)  109/FFFFFFFFFFFF009C :                     sndUnlockZ80:
(1)  111/FFFFFFFFFFFF009C : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00A2 : 1100             
(1)  113/FFFFFFFFFFFF00A4 : 4E75                		rts
(1)  114/FFFFFFFFFFFF00A6 :                     
(1)  115/FFFFFFFFFFFF00A6 :                     ; ====================================================================
(1)  116/FFFFFFFFFFFF00A6 :                     ; ----------------------------------------------------------------
(1)  117/FFFFFFFFFFFF00A6 :                     ; gemaSendRam
(1)  118/FFFFFFFFFFFF00A6 :                     ;
(1)  119/FFFFFFFFFFFF00A6 :                     ; If you are reading data from 68000's RAM you MUST call
(1)  120/FFFFFFFFFFFF00A6 :                     ; this a lot during display, commonly during the VBlank waiting
(1)  121/FFFFFFFFFFFF00A6 :                     ; loop.
(1)  122/FFFFFFFFFFFF00A6 :                     ;
(1)  123/FFFFFFFFFFFF00A6 :                     ; This checks if the Z80 wants to read from RAM, then here
(1)  124/FFFFFFFFFFFF00A6 :                     ; we manually write the bytes to the Z80
(1)  125/FFFFFFFFFFFF00A6 :                     ;
(1)  126/FFFFFFFFFFFF00A6 :                     ; SCD/CD32X:
(1)  127/FFFFFFFFFFFF00A6 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  128/FFFFFFFFFFFF00A6 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  129/FFFFFFFFFFFF00A6 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  130/FFFFFFFFFFFF00A6 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set.
(1)  131/FFFFFFFFFFFF00A6 :                     ; ----------------------------------------------------------------
(1)  132/FFFFFFFFFFFF00A6 :                     
(1)  133/FFFFFFFFFFFF00A6 :                     gemaSendRam:
(1)  134/FFFFFFFFFFFF00A6 : 4A38 FF00           		tst.b	(RAM_ZCdFlagD).w		; Z80 WROTE the flag?
(1)  135/FFFFFFFFFFFF00AA : 674C                		beq.s	.no_task
(1)  136/FFFFFFFFFFFF00AC : 4238 FF00           		clr.b	(RAM_ZCdFlagD).w		; Clear flag here
(1)  137/FFFFFFFFFFFF00B0 : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  138/FFFFFFFFFFFF00B4 : 61D2                		bsr	sndLockZ80
(1)  139/FFFFFFFFFFFF00B6 : 7E00                		moveq	#0,d7
(1)  140/FFFFFFFFFFFF00B8 : 1E39 00A0 1F87      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Len == 0?
(1)  141/FFFFFFFFFFFF00BE : 6732                		beq.s	.no_size			; Invalid size, do nothing
(1)  142/FFFFFFFFFFFF00C0 : 5347                		subq.w	#1,d7				; dbf -1
(1)  143/FFFFFFFFFFFF00C2 : 4DF9 00A0 1F87      		lea	(z80_cpu+(zDrvRamSrc+1)),a6	; a6 - SRC location and DST, backwards
(1)  144/FFFFFFFFFFFF00C8 : 4BF9 00A0 0000      		lea	(z80_cpu),a5			; a5 - Z80 area
(1)  145/FFFFFFFFFFFF00CE : 1C26                		move.b	-(a6),d6			; d6 - Source in 68K area
(1)  146/FFFFFFFFFFFF00D0 : 4846                		swap	d6
(1)  147/FFFFFFFFFFFF00D2 : 1C26                		move.b	-(a6),d6
(1)  148/FFFFFFFFFFFF00D4 : E14E                		lsl.w	#8,d6
(1)  149/FFFFFFFFFFFF00D6 : 1C26                		move.b	-(a6),d6
(1)  150/FFFFFFFFFFFF00D8 : 7A00                		moveq	#0,d5
(1)  151/FFFFFFFFFFFF00DA : 1A26                		move.b	-(a6),d5			; d5 - Destination in Z80 area
(1)  152/FFFFFFFFFFFF00DC : E14D                		lsl.w	#8,d5
(1)  153/FFFFFFFFFFFF00DE : 1A26                		move.b	-(a6),d5
(1)  154/FFFFFFFFFFFF00E0 : DBC5                		add.l	d5,a5				; Add base to destination
(1)  155/FFFFFFFFFFFF00E2 : 2846                		move.l	d6,a4
(1)  156/FFFFFFFFFFFF00E4 :                     .copy_bytes:
(1)  157/FFFFFFFFFFFF00E4 : 1ADC                		move.b	(a4)+,(a5)+
(1)  158/FFFFFFFFFFFF00E6 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  159/FFFFFFFFFFFF00EA : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; clear LEN and Z80 resumes
         FFFFFFFFFFFF00F0 : 1F87             
(1)  160/FFFFFFFFFFFF00F2 :                     .no_size:
(1)  161/FFFFFFFFFFFF00F2 : 61A8                		bsr	sndUnlockZ80
(1)  162/FFFFFFFFFFFF00F4 : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  163/FFFFFFFFFFFF00F8 :                     .no_task:
(1)  164/FFFFFFFFFFFF00F8 : 4E75                		rts
(1)  165/FFFFFFFFFFFF00FA :                     
(1)  166/FFFFFFFFFFFF00FA :                     ; ====================================================================
(1)  167/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  168/FFFFFFFFFFFF00FA :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  169/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  170/FFFFFFFFFFFF00FA :                     
(1)  171/FFFFFFFFFFFF00FA :                     sndReq_Enter:
(1)  173/FFFFFFFFFFFF00FA : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF0100 : 1100             
(1)  175/FFFFFFFFFFFF0102 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  176/FFFFFFFFFFFF0106 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  177/FFFFFFFFFFFF010A : 40E7                		move.w	sr,-(sp)			; and sr too
(1)  178/FFFFFFFFFFFF010C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  179/FFFFFFFFFFFF0110 : DEFC 0016           		adda	#(4*4)+2+4,sp			; Go back to the RTS jump
(1)  180/FFFFFFFFFFFF0114 : 4BF9 00A0 1F80      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  181/FFFFFFFFFFFF011A : 4DF9 00A0 1F60      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  182/FFFFFFFFFFFF0120 :                     .wait:
(1)  184/FFFFFFFFFFFF0120 : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0126 : 1100             
(1)  185/FFFFFFFFFFFF0128 : 66F6                		bne.s	.wait
(1)  187/FFFFFFFFFFFF012A : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  188/FFFFFFFFFFFF012C : 4886                		ext.w	d6				; extend to 16 bits
(1)  189/FFFFFFFFFFFF012E : 4E75                		rts
(1)  190/FFFFFFFFFFFF0130 :                     ; JUMP ONLY
(1)  191/FFFFFFFFFFFF0130 :                     sndReq_Exit:
(1)  193/FFFFFFFFFFFF0130 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0136 : 1100             
(1)  195/FFFFFFFFFFFF0138 : 9EFC 001A           		suba	#8+2+(4*4),sp
(1)  196/FFFFFFFFFFFF013C : 46DF                		move.w	(sp)+,sr
(1)  197/FFFFFFFFFFFF013E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  198/FFFFFFFFFFFF0142 : DEFC 0008           		adda	#8,sp
(1)  199/FFFFFFFFFFFF0146 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  200/FFFFFFFFFFFF014A : 4E75                		rts
(1)  201/FFFFFFFFFFFF014C :                     
(1)  202/FFFFFFFFFFFF014C :                     ; ------------------------------------------------
(1)  203/FFFFFFFFFFFF014C :                     ; Send request id and arguments
(1)  204/FFFFFFFFFFFF014C :                     ;
(1)  205/FFFFFFFFFFFF014C :                     ; Input:
(1)  206/FFFFFFFFFFFF014C :                     ; d7 - byte to write
(1)  207/FFFFFFFFFFFF014C :                     ; d6 - index pointer
(1)  208/FFFFFFFFFFFF014C :                     ; a5 - commZWrite, update index
(1)  209/FFFFFFFFFFFF014C :                     ; a6 - commZfifo command list
(1)  210/FFFFFFFFFFFF014C :                     ;
(1)  211/FFFFFFFFFFFF014C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  212/FFFFFFFFFFFF014C :                     ; ------------------------------------------------
(1)  213/FFFFFFFFFFFF014C :                     
(1)  214/FFFFFFFFFFFF014C :                     sndReq_scmd:
(1)  215/FFFFFFFFFFFF014C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; Command-start flag
(1)  216/FFFFFFFFFFFF0152 : 5206                		addq.b	#1,d6				; Next fifo position
(1)  217/FFFFFFFFFFFF0154 : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  218/FFFFFFFFFFFF0158 : 600C                		bra.s	sndReq_sbyte
(1)  219/FFFFFFFFFFFF015A :                     sndReq_slong:
(1)  220/FFFFFFFFFFFF015A : 610A                		bsr	sndReq_sbyte
(1)  221/FFFFFFFFFFFF015C : E09F                		ror.l	#8,d7
(1)  222/FFFFFFFFFFFF015E :                     ; 24-bit address
(1)  223/FFFFFFFFFFFF015E :                     sndReq_saddr:
(1)  224/FFFFFFFFFFFF015E : 6106                		bsr	sndReq_sbyte
(1)  225/FFFFFFFFFFFF0160 : E09F                		ror.l	#8,d7
(1)  226/FFFFFFFFFFFF0162 :                     sndReq_sword:
(1)  227/FFFFFFFFFFFF0162 : 6102                		bsr	sndReq_sbyte
(1)  228/FFFFFFFFFFFF0164 : E09F                		ror.l	#8,d7
(1)  229/FFFFFFFFFFFF0166 :                     sndReq_sbyte:
(1)  230/FFFFFFFFFFFF0166 : 1D87 6000           		move.b	d7,(a6,d6.w)			; Write byte
(1)  231/FFFFFFFFFFFF016A : 5206                		addq.b	#1,d6				; Next fifo pos
(1)  232/FFFFFFFFFFFF016C : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  233/FFFFFFFFFFFF0170 : 1A86                		move.b	d6,(a5)				; Update commZWrite
(1)  234/FFFFFFFFFFFF0172 : 4E75                		rts
(1)  235/FFFFFFFFFFFF0174 :                     
(1)  236/FFFFFFFFFFFF0174 :                     ; ====================================================================
(1)  237/FFFFFFFFFFFF0174 :                     ; ------------------------------------------------
(1)  238/FFFFFFFFFFFF0174 :                     ; USER calls area
(1)  239/FFFFFFFFFFFF0174 :                     ; ------------------------------------------------
(1)  240/FFFFFFFFFFFF0174 :                     
(1)  241/FFFFFFFFFFFF0174 :                     ; --------------------------------------------------------
(1)  242/FFFFFFFFFFFF0174 :                     ; gemaDmaPause
(1)  243/FFFFFFFFFFFF0174 :                     ;
(1)  244/FFFFFFFFFFFF0174 :                     ; Call this BEFORE doing any DMA transfer
(1)  245/FFFFFFFFFFFF0174 :                     ;
(1)  246/FFFFFFFFFFFF0174 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  247/FFFFFFFFFFFF0174 :                     ; --------------------------------------------------------
(1)  248/FFFFFFFFFFFF0174 :                     
(1)  249/FFFFFFFFFFFF0174 :                     gemaDmaPause:
(1)  251/FFFFFFFFFFFF0174 : 2F07                		move.l	d7,-(sp)
(1)  252/FFFFFFFFFFFF0176 : 6100 FF10           		bsr	sndLockZ80
(1)  253/FFFFFFFFFFFF017A : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk).l	; Set ROM-busy flag
         FFFFFFFFFFFF0180 : 1F81             
(1)  254/FFFFFFFFFFFF0182 : 6100 FF18           		bsr	sndUnlockZ80
(1)  255/FFFFFFFFFFFF0186 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  256/FFFFFFFFFFFF018A : 51CF FFFE           		dbf	d7,*
(1)  257/FFFFFFFFFFFF018E : 2E1F                		move.l	(sp)+,d7
(1)  259/FFFFFFFFFFFF0190 : 4E75                		rts
(1)  260/FFFFFFFFFFFF0192 :                     
(1)  261/FFFFFFFFFFFF0192 :                     ; --------------------------------------------------------
(1)  262/FFFFFFFFFFFF0192 :                     ; gemaDmaResume
(1)  263/FFFFFFFFFFFF0192 :                     ;
(1)  264/FFFFFFFFFFFF0192 :                     ; Call this AFTER finishing DMA transfer
(1)  265/FFFFFFFFFFFF0192 :                     ;
(1)  266/FFFFFFFFFFFF0192 :                     ; 32X: Reset the RV bit manually BEFORE calling this.
(1)  267/FFFFFFFFFFFF0192 :                     ; --------------------------------------------------------
(1)  268/FFFFFFFFFFFF0192 :                     
(1)  269/FFFFFFFFFFFF0192 :                     gemaDmaResume:
(1)  271/FFFFFFFFFFFF0192 : 2F07                		move.l	d7,-(sp)
(1)  272/FFFFFFFFFFFF0194 : 6100 FEF2           		bsr	sndLockZ80
(1)  273/FFFFFFFFFFFF0198 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk).l	; Clear ROM-busy flag
         FFFFFFFFFFFF019E : 1F81             
(1)  274/FFFFFFFFFFFF01A0 : 6100 FEFA           		bsr	sndUnlockZ80
(1)  275/FFFFFFFFFFFF01A4 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  276/FFFFFFFFFFFF01A8 : 51CF FFFE           		dbf	d7,*
(1)  277/FFFFFFFFFFFF01AC : 2E1F                		move.l	(sp)+,d7
(1)  279/FFFFFFFFFFFF01AE : 4E75                		rts
(1)  280/FFFFFFFFFFFF01B0 :                     
(1)  281/FFFFFFFFFFFF01B0 :                     ; --------------------------------------------------------
(1)  282/FFFFFFFFFFFF01B0 :                     ; gemaTest
(1)  283/FFFFFFFFFFFF01B0 :                     ;
(1)  284/FFFFFFFFFFFF01B0 :                     ; For TESTING only
(1)  285/FFFFFFFFFFFF01B0 :                     ; --------------------------------------------------------
(1)  286/FFFFFFFFFFFF01B0 :                     
(1)  287/FFFFFFFFFFFF01B0 :                     gemaTest:
(1)  288/FFFFFFFFFFFF01B0 : 6100 FF48           		bsr	sndReq_Enter
(1)  289/FFFFFFFFFFFF01B4 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  290/FFFFFFFFFFFF01B8 : 6192                		bsr	sndReq_scmd
(1)  291/FFFFFFFFFFFF01BA : 6000 FF74           		bra 	sndReq_Exit
(1)  292/FFFFFFFFFFFF01BE :                     
(1)  293/FFFFFFFFFFFF01BE :                     ; --------------------------------------------------------
(1)  294/FFFFFFFFFFFF01BE :                     ; gemaSetMasterList
(1)  295/FFFFFFFFFFFF01BE :                     ;
(1)  296/FFFFFFFFFFFF01BE :                     ; Sets the master sequence list
(1)  297/FFFFFFFFFFFF01BE :                     ;
(1)  298/FFFFFFFFFFFF01BE :                     ; Input:
(1)  299/FFFFFFFFFFFF01BE :                     ; a0 | 68k pointer
(1)  300/FFFFFFFFFFFF01BE :                     ;
(1)  301/FFFFFFFFFFFF01BE :                     ; Notes:
(1)  302/FFFFFFFFFFFF01BE :                     ; - ALL TRACKS MUST BE STOPPED, CALL gemaStopAll FIRST
(1)  303/FFFFFFFFFFFF01BE :                     ; with a separate delay
(1)  304/FFFFFFFFFFFF01BE :                     ; --------------------------------------------------------
(1)  305/FFFFFFFFFFFF01BE :                     
(1)  306/FFFFFFFFFFFF01BE :                     gemaSetMasterList:
(1)  307/FFFFFFFFFFFF01BE : 6100 FF3A           		bsr	sndReq_Enter
(1)  308/FFFFFFFFFFFF01C2 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  309/FFFFFFFFFFFF01C6 : 6184                		bsr	sndReq_scmd
(1)  310/FFFFFFFFFFFF01C8 : 2E08                		move.l	a0,d7
(1)  311/FFFFFFFFFFFF01CA : 618E                		bsr	sndReq_slong
(1)  312/FFFFFFFFFFFF01CC : 6000 FF62           		bra 	sndReq_Exit
(1)  313/FFFFFFFFFFFF01D0 :                     
(1)  314/FFFFFFFFFFFF01D0 :                     ; --------------------------------------------------------
(1)  315/FFFFFFFFFFFF01D0 :                     ; gemaPlaySeq
(1)  316/FFFFFFFFFFFF01D0 :                     ;
(1)  317/FFFFFFFFFFFF01D0 :                     ; Play a sequence
(1)  318/FFFFFFFFFFFF01D0 :                     ;
(1)  319/FFFFFFFFFFFF01D0 :                     ; Input:
(1)  320/FFFFFFFFFFFF01D0 :                     ; d0.b | Sequence number
(1)  321/FFFFFFFFFFFF01D0 :                     ; d1.b | Starting block
(1)  322/FFFFFFFFFFFF01D0 :                     ; d2.b | Playback slot number: 0-2
(1)  323/FFFFFFFFFFFF01D0 :                     ;        If set to -1:
(1)  324/FFFFFFFFFFFF01D0 :                     ;        Auto-search free slot (same as gemaPlaySeqAuto)
(1)  325/FFFFFFFFFFFF01D0 :                     ; --------------------------------------------------------
(1)  326/FFFFFFFFFFFF01D0 :                     
(1)  327/FFFFFFFFFFFF01D0 :                     gemaPlaySeq:
(1)  328/FFFFFFFFFFFF01D0 : 6100 FF28           		bsr	sndReq_Enter
(1)  329/FFFFFFFFFFFF01D4 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  330/FFFFFFFFFFFF01D8 : 6100 FF72           		bsr	sndReq_scmd
(1)  331/FFFFFFFFFFFF01DC : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  332/FFFFFFFFFFFF01DE : 6186                		bsr	sndReq_sbyte
(1)  333/FFFFFFFFFFFF01E0 : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  334/FFFFFFFFFFFF01E2 : 6182                		bsr	sndReq_sbyte
(1)  335/FFFFFFFFFFFF01E4 : 1E02                		move.b	d2,d7		; d2.b Slot
(1)  336/FFFFFFFFFFFF01E6 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  337/FFFFFFFFFFFF01EA : 6000 FF44           		bra 	sndReq_Exit
(1)  338/FFFFFFFFFFFF01EE :                     
(1)  339/FFFFFFFFFFFF01EE :                     ; --------------------------------------------------------
(1)  340/FFFFFFFFFFFF01EE :                     ; gemaPlaySeqAuto
(1)  341/FFFFFFFFFFFF01EE :                     ;
(1)  342/FFFFFFFFFFFF01EE :                     ; Play a sequence into a free slot, if all get full
(1)  343/FFFFFFFFFFFF01EE :                     ; it will overwrite the last one.
(1)  344/FFFFFFFFFFFF01EE :                     ;
(1)  345/FFFFFFFFFFFF01EE :                     ; Input:
(1)  346/FFFFFFFFFFFF01EE :                     ; d0.b | Sequence number
(1)  347/FFFFFFFFFFFF01EE :                     ; d1.b | Starting block
(1)  348/FFFFFFFFFFFF01EE :                     ; --------------------------------------------------------
(1)  349/FFFFFFFFFFFF01EE :                     
(1)  350/FFFFFFFFFFFF01EE :                     gemaPlaySeqAuto:
(1)  351/FFFFFFFFFFFF01EE : 6100 FF0A           		bsr	sndReq_Enter
(1)  352/FFFFFFFFFFFF01F2 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  353/FFFFFFFFFFFF01F6 : 6100 FF54           		bsr	sndReq_scmd
(1)  354/FFFFFFFFFFFF01FA : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  355/FFFFFFFFFFFF01FC : 6100 FF68           		bsr	sndReq_sbyte
(1)  356/FFFFFFFFFFFF0200 : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  357/FFFFFFFFFFFF0202 : 6100 FF62           		bsr	sndReq_sbyte
(1)  358/FFFFFFFFFFFF0206 : 7EFF                		moveq	#-1,d7		; d2.b Slot
(1)  359/FFFFFFFFFFFF0208 : 6100 FF5C           		bsr	sndReq_sbyte
(1)  360/FFFFFFFFFFFF020C : 6000 FF22           		bra 	sndReq_Exit
(1)  361/FFFFFFFFFFFF0210 :                     
(1)  362/FFFFFFFFFFFF0210 :                     ; --------------------------------------------------------
(1)  363/FFFFFFFFFFFF0210 :                     ; gemaStopSeq
(1)  364/FFFFFFFFFFFF0210 :                     ;
(1)  365/FFFFFFFFFFFF0210 :                     ; Stops tracks with the same sequence number
(1)  366/FFFFFFFFFFFF0210 :                     ;
(1)  367/FFFFFFFFFFFF0210 :                     ; Input:
(1)  368/FFFFFFFFFFFF0210 :                     ; d0.b | Sequence number to search
(1)  369/FFFFFFFFFFFF0210 :                     ;        If -1: Stop all tracks with any sequence
(1)  370/FFFFFFFFFFFF0210 :                     ; d1.b | Playback slot number
(1)  371/FFFFFFFFFFFF0210 :                     ;        If -1: Stop all slots
(1)  372/FFFFFFFFFFFF0210 :                     ;
(1)  373/FFFFFFFFFFFF0210 :                     ; If both d0 and d1 are -1 it acts like gemaStopAll
(1)  374/FFFFFFFFFFFF0210 :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF0210 :                     
(1)  376/FFFFFFFFFFFF0210 :                     gemaStopSeq:
(1)  377/FFFFFFFFFFFF0210 : 6100 FEE8           		bsr	sndReq_Enter
(1)  378/FFFFFFFFFFFF0214 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  379/FFFFFFFFFFFF0218 : 6100 FF32           		bsr	sndReq_scmd
(1)  380/FFFFFFFFFFFF021C : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  381/FFFFFFFFFFFF021E : 6100 FF46           		bsr	sndReq_sbyte
(1)  382/FFFFFFFFFFFF0222 : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  383/FFFFFFFFFFFF0224 : 6100 FF40           		bsr	sndReq_sbyte
(1)  384/FFFFFFFFFFFF0228 : 6000 FF06           		bra 	sndReq_Exit
(1)  385/FFFFFFFFFFFF022C :                     
(1)  386/FFFFFFFFFFFF022C :                     ; --------------------------------------------------------
(1)  387/FFFFFFFFFFFF022C :                     ; gemaStopAll
(1)  388/FFFFFFFFFFFF022C :                     ;
(1)  389/FFFFFFFFFFFF022C :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  390/FFFFFFFFFFFF022C :                     ; --------------------------------------------------------
(1)  391/FFFFFFFFFFFF022C :                     
(1)  392/FFFFFFFFFFFF022C :                     gemaStopAll:
(1)  393/FFFFFFFFFFFF022C : 6100 FECC           		bsr	sndReq_Enter
(1)  394/FFFFFFFFFFFF0230 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  395/FFFFFFFFFFFF0234 : 6100 FF16           		bsr	sndReq_scmd
(1)  396/FFFFFFFFFFFF0238 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  397/FFFFFFFFFFFF023A : 6100 FF2A           		bsr	sndReq_sbyte
(1)  398/FFFFFFFFFFFF023E : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  399/FFFFFFFFFFFF0240 : 6100 FF24           		bsr	sndReq_sbyte
(1)  400/FFFFFFFFFFFF0244 : 6000 FEEA           		bra 	sndReq_Exit
(1)  401/FFFFFFFFFFFF0248 :                     
(1)  402/FFFFFFFFFFFF0248 :                     ; --------------------------------------------------------
(1)  403/FFFFFFFFFFFF0248 :                     ; gemaFadeSeq
(1)  404/FFFFFFFFFFFF0248 :                     ;
(1)  405/FFFFFFFFFFFF0248 :                     ; Set Master volume to a track slot.
(1)  406/FFFFFFFFFFFF0248 :                     ;
(1)  407/FFFFFFFFFFFF0248 :                     ; Input:
(1)  408/FFFFFFFFFFFF0248 :                     ; d0.b | Target volume
(1)  409/FFFFFFFFFFFF0248 :                     ; d1.b | Playback slot number
(1)  410/FFFFFFFFFFFF0248 :                     ;        If -1: Apply to all slots
(1)  411/FFFFFFFFFFFF0248 :                     ;
(1)  412/FFFFFFFFFFFF0248 :                     ; Notes:
(1)  413/FFFFFFFFFFFF0248 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  414/FFFFFFFFFFFF0248 :                     ; - v1.0: This only works on (re)start
(1)  415/FFFFFFFFFFFF0248 :                     ;   or during new notes on playback.
(1)  416/FFFFFFFFFFFF0248 :                     ; --------------------------------------------------------
(1)  417/FFFFFFFFFFFF0248 :                     
(1)  418/FFFFFFFFFFFF0248 :                     gemaFadeSeq:
(1)  419/FFFFFFFFFFFF0248 : 6100 FEB0           		bsr	sndReq_Enter
(1)  420/FFFFFFFFFFFF024C : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  421/FFFFFFFFFFFF0250 : 6100 FEFA           		bsr	sndReq_scmd
(1)  422/FFFFFFFFFFFF0254 : 1E00                		move.b	d0,d7		; d0.b Target volume
(1)  423/FFFFFFFFFFFF0256 : 6100 FF0E           		bsr	sndReq_sbyte
(1)  424/FFFFFFFFFFFF025A : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  425/FFFFFFFFFFFF025C : 6100 FF08           		bsr	sndReq_sbyte
(1)  426/FFFFFFFFFFFF0260 : 6000 FECE           		bra 	sndReq_Exit
(1)  427/FFFFFFFFFFFF0264 :                     
(1)  428/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)  429/FFFFFFFFFFFF0264 :                     ; gemaSetSeqVol
(1)  430/FFFFFFFFFFFF0264 :                     ;
(1)  431/FFFFFFFFFFFF0264 :                     ; Set Master volume to a Seq slot.
(1)  432/FFFFFFFFFFFF0264 :                     ;
(1)  433/FFFFFFFFFFFF0264 :                     ; Input:
(1)  434/FFFFFFFFFFFF0264 :                     ; d0.b | Master volume: $00-max $40-min
(1)  435/FFFFFFFFFFFF0264 :                     ; d1.b | Playback slot number
(1)  436/FFFFFFFFFFFF0264 :                     ;        If -1: Set to all slots
(1)  437/FFFFFFFFFFFF0264 :                     ;
(1)  438/FFFFFFFFFFFF0264 :                     ; Notes:
(1)  439/FFFFFFFFFFFF0264 :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  440/FFFFFFFFFFFF0264 :                     ; - v1.0: This only works on (re)start
(1)  441/FFFFFFFFFFFF0264 :                     ;   or during new notes on playback.
(1)  442/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)  443/FFFFFFFFFFFF0264 :                     
(1)  444/FFFFFFFFFFFF0264 :                     gemaSetSeqVol:
(1)  445/FFFFFFFFFFFF0264 : 6100 FE94           		bsr	sndReq_Enter
(1)  446/FFFFFFFFFFFF0268 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  447/FFFFFFFFFFFF026C : 6100 FEDE           		bsr	sndReq_scmd
(1)  448/FFFFFFFFFFFF0270 : 1E00                		move.b	d0,d7		; d1.b Volume data <--
(1)  449/FFFFFFFFFFFF0272 : 6100 FEF2           		bsr	sndReq_sbyte
(1)  450/FFFFFFFFFFFF0276 : 1E01                		move.b	d1,d7		; d0.b Slot
(1)  451/FFFFFFFFFFFF0278 : 6100 FEEC           		bsr	sndReq_sbyte
(1)  452/FFFFFFFFFFFF027C : 6000 FEB2           		bra 	sndReq_Exit
(1)  453/FFFFFFFFFFFF0280 :                     
(1)  454/FFFFFFFFFFFF0280 :                     ; --------------------------------------------------------
(1)  455/FFFFFFFFFFFF0280 :                     ; gemaSetBeats
(1)  456/FFFFFFFFFFFF0280 :                     ;
(1)  457/FFFFFFFFFFFF0280 :                     ; Set global sub-beats
(1)  458/FFFFFFFFFFFF0280 :                     ;
(1)  459/FFFFFFFFFFFF0280 :                     ; Input:
(1)  460/FFFFFFFFFFFF0280 :                     ; d0.w | Sub-beats value
(1)  461/FFFFFFFFFFFF0280 :                     ;
(1)  462/FFFFFFFFFFFF0280 :                     ; Note:
(1)  463/FFFFFFFFFFFF0280 :                     ; If the Z80 is running in PAL mode the number will
(1)  464/FFFFFFFFFFFF0280 :                     ; change inside the Z80 to match the PAL's speed.
(1)  465/FFFFFFFFFFFF0280 :                     ; --------------------------------------------------------
(1)  466/FFFFFFFFFFFF0280 :                     
(1)  467/FFFFFFFFFFFF0280 :                     gemaSetBeats:
(1)  468/FFFFFFFFFFFF0280 : 6100 FE78           		bsr	sndReq_Enter
(1)  469/FFFFFFFFFFFF0284 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  470/FFFFFFFFFFFF0288 : 6100 FEC2           		bsr	sndReq_scmd
(1)  471/FFFFFFFFFFFF028C : 3E00                		move.w	d0,d7		; d0.w Sub-beat value
(1)  472/FFFFFFFFFFFF028E : 6100 FED2           		bsr	sndReq_sword
(1)  473/FFFFFFFFFFFF0292 : 6000 FE9C           		bra 	sndReq_Exit
(1)  474/FFFFFFFFFFFF0296 :                     
     196/FFFFFFFFFFFF0296 :                     		include	"nikona/md/video.asm"
(1)    1/FFFFFFFFFFFF0296 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0296 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0296 :                     
(1)    6/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0296 :                     ; Settings
(1)    9/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0296 :                     
(1)   11/FFFFFFFFFFFF0296 : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/FFFFFFFFFFFF0296 : =$18                 MAX_MDMAPSPR		equ 24		; VDP sprites with map data
(1)   13/FFFFFFFFFFFF0296 : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/FFFFFFFFFFFF0296 :                     
(1)   15/FFFFFFFFFFFF0296 : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/FFFFFFFFFFFF0296 : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/FFFFFFFFFFFF0296 : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/FFFFFFFFFFFF0296 : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/FFFFFFFFFFFF0296 : =$6000               DEF_PrintPal		equ $6000
(1)   20/FFFFFFFFFFFF0296 :                     
(1)   21/FFFFFFFFFFFF0296 : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/FFFFFFFFFFFF0296 :                     
(1)   23/FFFFFFFFFFFF0296 :                     ; ===================================================================
(1)   24/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)   25/FFFFFFFFFFFF0296 :                     ; Variables
(1)   26/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)   27/FFFFFFFFFFFF0296 :                     
(1)   28/FFFFFFFFFFFF0296 :                     ; VATTR_PAL0		equ $0000
(1)   29/FFFFFFFFFFFF0296 : =$800                VATTR_FLIPH		equ $0800
(1)   30/FFFFFFFFFFFF0296 : =$1000               VATTR_FLIPV		equ $1000
(1)   31/FFFFFFFFFFFF0296 : =$2000               VATTR_PAL1		equ $2000
(1)   32/FFFFFFFFFFFF0296 : =$4000               VATTR_PAL2		equ $4000
(1)   33/FFFFFFFFFFFF0296 : =$6000               VATTR_PAL3		equ $6000
(1)   34/FFFFFFFFFFFF0296 : =$8000               VATTR_HI		equ $8000
(1)   35/FFFFFFFFFFFF0296 :                     
(1)   36/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   37/FFFFFFFFFFFF0296 :                     ; Use these if you are not planning changing
(1)   38/FFFFFFFFFFFF0296 :                     ; the VRAM locations of the scrolling area(s)
(1)   39/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   40/FFFFFFFFFFFF0296 : =$C000               DEF_VRAM_FG		equ $C000
(1)   41/FFFFFFFFFFFF0296 : =$E000               DEF_VRAM_BG		equ $E000
(1)   42/FFFFFFFFFFFF0296 : =$D000               DEF_VRAM_WD		equ $D000
(1)   43/FFFFFFFFFFFF0296 : =$F800               DEF_VRAM_SPR		equ $F800
(1)   44/FFFFFFFFFFFF0296 : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   45/FFFFFFFFFFFF0296 :                     
(1)   46/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   47/FFFFFFFFFFFF0296 :                     ; H sizes for the current layer
(1)   48/FFFFFFFFFFFF0296 :                     ;
(1)   49/FFFFFFFFFFFF0296 :                     ; Note:
(1)   50/FFFFFFFFFFFF0296 :                     ; WINDOW's width changes between H32 and H40
(1)   51/FFFFFFFFFFFF0296 :                     ; resolution modes.
(1)   52/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   53/FFFFFFFFFFFF0296 : =$40                 DEF_HSIZE_32		equ $040
(1)   54/FFFFFFFFFFFF0296 : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   55/FFFFFFFFFFFF0296 : =$100                DEF_HSIZE_128		equ $100
(1)   56/FFFFFFFFFFFF0296 :                     
(1)   57/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   58/FFFFFFFFFFFF0296 :                     ; VDP registers
(1)   59/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFF0296 :                     ; $80
(1)   61/FFFFFFFFFFFF0296 : =$2                  HVStop			equ $02
(1)   62/FFFFFFFFFFFF0296 : =$10                 HintEnbl		equ $10
(1)   63/FFFFFFFFFFFF0296 : =$1                  bitHVStop		equ 1
(1)   64/FFFFFFFFFFFF0296 : =$4                  bitHintEnbl		equ 4
(1)   65/FFFFFFFFFFFF0296 :                     ; $81
(1)   66/FFFFFFFFFFFF0296 : =$40                 DispEnbl 		equ $40
(1)   67/FFFFFFFFFFFF0296 : =$20                 VintEnbl 		equ $20
(1)   68/FFFFFFFFFFFF0296 : =$10                 DmaEnbl			equ $10
(1)   69/FFFFFFFFFFFF0296 : =$6                  bitDispEnbl		equ 6
(1)   70/FFFFFFFFFFFF0296 : =$5                  bitVintEnbl		equ 5
(1)   71/FFFFFFFFFFFF0296 : =$4                  bitDmaEnbl		equ 4
(1)   72/FFFFFFFFFFFF0296 : =$3                  bitV30			equ 3
(1)   73/FFFFFFFFFFFF0296 :                     
(1)   74/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   75/FFFFFFFFFFFF0296 :                     ; VDP VRAM bits
(1)   76/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF0296 :                     ; BYTE read:
(1)   78/FFFFFFFFFFFF0296 : =$7                  bitAttrPrio		equ 7
(1)   79/FFFFFFFFFFFF0296 : =$4                  bitAttrV		equ 4
(1)   80/FFFFFFFFFFFF0296 : =$3                  bitAttrH		equ 3
(1)   81/FFFFFFFFFFFF0296 :                     ; WORD read:
(1)   82/FFFFFFFFFFFF0296 : =$8000               AttrPrio		equ $8000
(1)   83/FFFFFFFFFFFF0296 : =$1000               AttrV			equ $1000
(1)   84/FFFFFFFFFFFF0296 : =$800                AttrH			equ $0800
(1)   85/FFFFFFFFFFFF0296 :                     
(1)   86/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   87/FFFFFFFFFFFF0296 :                     ; vdp_ctrl READ bits
(1)   88/FFFFFFFFFFFF0296 :                     ; Read as WORD
(1)   89/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   90/FFFFFFFFFFFF0296 : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   91/FFFFFFFFFFFF0296 : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   92/FFFFFFFFFFFF0296 : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   93/FFFFFFFFFFFF0296 : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   94/FFFFFFFFFFFF0296 : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   95/FFFFFFFFFFFF0296 : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   96/FFFFFFFFFFFF0296 : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   97/FFFFFFFFFFFF0296 : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   98/FFFFFFFFFFFF0296 : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   99/FFFFFFFFFFFF0296 : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)  100/FFFFFFFFFFFF0296 :                     
(1)  101/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)  102/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  103/FFFFFFFFFFFF0296 :                     ; Structs
(1)  104/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  105/FFFFFFFFFFFF0296 :                     
(1)  106/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)  107/FFFFFFFFFFFF0296 :                     ; RAM_PalFadeList
(1)  108/       0 :                     palfd			struct
(1)  109/       0 :                     req			ds.b 1
(1)  110/       1 :                     delay			ds.b 1
(1)  111/       2 :                     start			ds.b 1
(1)  112/       3 :                     incr			ds.b 1
(1)  113/       4 :                     target			ds.b 1
(1)  114/       5 :                     timer			ds.b 1
(1)  115/       6 :                     num			ds.w 1
(1)  116/       8 :                     ; len			ds.l 0
(1)  117/FFFFFFFFFFFF0296 : =$8                  			endstruct
(1)  118/FFFFFFFFFFFF0296 :                     
(1)  119/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)  120/FFFFFFFFFFFF0296 :                     ; RAM_MdMcd_Stamps
(1)  121/FFFFFFFFFFFF0296 :                     
(1)  122/       0 :                     mdstmp			struct
(1)  123/       0 :                     flags			ds.w 1		; Flags settings/status
(1)  124/       2 :                     vramMain		ds.w 1		; Main VRAM output *full*
(1)  125/       4 :                     vramSec			ds.w 1		; Secondary VRAM output *full*
(1)  126/       6 :                     vramSize		ds.w 1
(1)  127/       8 :                     vramLen			ds.w 1		; temporals
(1)  128/       A :                     vramIncr		ds.w 1		; ''
(1)  129/       C :                     stmpoutb		ds.w 1
(1)  130/       E :                     currOutFlip		ds.w 1
(1)  131/      10 :                     fdrop			ds.w 1
(1)  132/      12 :                     cellstorage		ds.l 1
(1)  133/      16 :                     dotIncr			ds.l 1
(1)  134/      1A :                     buffIncr		ds.l 1
(1)  135/      1E :                     ; len			ds.l 0
(1)  136/FFFFFFFFFFFF0296 : =$1E                 			endstruct
(1)  137/FFFFFFFFFFFF0296 :                     
(1)  138/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)  139/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  140/FFFFFFFFFFFF0296 :                     ; RAM section
(1)  141/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  142/FFFFFFFFFFFF0296 :                     ; Some 32X labels are in system/shared.asm
(1)  143/FFFFFFFFFFFF0296 :                     
(1)  144/FFFFFFFFFFFF0296 : (MACRO)              			memory RAM_MdVideo
(1)  144/FFFFFFFFFFFF0296 : =$FFFFFFFFFFFF0296   GLBL_LASTPC     := *
(1)  144/    2BBE :                                     dephase
(1)  144/FFFFFFFFFFFFDC1E :                                     phase RAM_MDVIDEO
(1)  144/FFFFFFFFFFFFDC1E : =$FFFFFFFFFFFFDC1E   GLBL_LASTORG    := *
(1)  145/FFFFFFFFFFFFDC1E :                     	; *** Variables cleared when changing screen modes ***
(1)  146/FFFFFFFFFFFFDC1E :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  147/FFFFFFFFFFFFDC5E :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  148/FFFFFFFFFFFFDDDE :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  149/FFFFFFFFFFFFE05E :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  150/FFFFFFFFFFFFE41E :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  151/FFFFFFFFFFFFE46E :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  152/FFFFFFFFFFFFE96E :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  153/FFFFFFFFFFFFE9EE :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  154/FFFFFFFFFFFFEA6E :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  155/FFFFFFFFFFFFEA70 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  156/FFFFFFFFFFFFEA72 :                     RAM_SprOffsetX		ds.w 1				; X spriteset position
(1)  157/FFFFFFFFFFFFEA74 :                     RAM_SprOffsetY		ds.w 1				; Y spriteset position
(1)  158/FFFFFFFFFFFFEA76 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  159/FFFFFFFFFFFFEA7C :                     	; *** Variables kept when changing screen modes ***
(1)  160/FFFFFFFFFFFFEA7C :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  161/FFFFFFFFFFFFEBFC :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  162/FFFFFFFFFFFFEC00 :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  163/FFFFFFFFFFFFEC02 :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  164/FFFFFFFFFFFFEC04 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  165/FFFFFFFFFFFFEC06 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  166/FFFFFFFFFFFFEC08 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  167/FFFFFFFFFFFFEC0A :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  168/FFFFFFFFFFFFEC0C :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  169/FFFFFFFFFFFFEC0E :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  170/FFFFFFFFFFFFEC10 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  171/FFFFFFFFFFFFEC12 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  172/FFFFFFFFFFFFEC14 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  173/FFFFFFFFFFFFEC16 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  174/FFFFFFFFFFFFEC18 :                     sizeof_mdvid		ds.l 0
(1)  175/FFFFFFFFFFFFEC1C : (MACRO)              			endmemory
(1)  175/    3BBC :                     .here:          dephase
(1)  175/    3BBC :                                     ds.b -(.here-GLBL_LASTORG)
(1)  175/FFFFFFFFFFFF0296 :                                     phase GLBL_LASTPC
(1)  176/FFFFFFFFFFFF0296 :                     
(1)  177/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)  178/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  179/FFFFFFFFFFFF0296 :                     ; Video_Init
(1)  180/FFFFFFFFFFFF0296 :                     ;
(1)  181/FFFFFFFFFFFF0296 :                     ; Initialize Genesis video
(1)  182/FFFFFFFFFFFF0296 :                     ;
(1)  183/FFFFFFFFFFFF0296 :                     ; Uses:
(1)  184/FFFFFFFFFFFF0296 :                     ; d5-d7/a5-a6
(1)  185/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  186/FFFFFFFFFFFF0296 :                     
(1)  187/FFFFFFFFFFFF0296 :                     Video_Init:
(1)  188/FFFFFFFFFFFF0296 : 4DF8 DC1E           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  189/FFFFFFFFFFFF029A : 7C00                		moveq	#0,d6
(1)  190/FFFFFFFFFFFF029C : 3E3C 0FF9           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  191/FFFFFFFFFFFF02A0 :                     .clr_ram:
(1)  192/FFFFFFFFFFFF02A0 : 1CC6                		move.b	d6,(a6)+
(1)  193/FFFFFFFFFFFF02A2 : 51CF FFFC           		dbf	d7,.clr_ram
(1)  194/FFFFFFFFFFFF02A6 : 4DF8 EA7C           		lea	(RAM_VdpDmaList).w,a6			; Write base DMA registers
(1)  195/FFFFFFFFFFFF02AA : 4BFA 005E           		lea	.dma_entry(pc),a5
(1)  196/FFFFFFFFFFFF02AE : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  197/FFFFFFFFFFFF02B2 :                     .copy_dma:
(1)  198/FFFFFFFFFFFF02B2 : 2CD5                		move.l	(a5),(a6)+
(1)  199/FFFFFFFFFFFF02B4 : 2CED 0004           		move.l	4(a5),(a6)+
(1)  200/FFFFFFFFFFFF02B8 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  201/FFFFFFFFFFFF02BC : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  202/FFFFFFFFFFFF02C0 : 51CF FFF0           		dbf	d7,.copy_dma
(1)  203/FFFFFFFFFFFF02C4 : 4DF8 DC5E           		lea	(RAM_SprMapList).w,a6			; Clear Sprite w/Map entries
(1)  204/FFFFFFFFFFFF02C8 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  205/FFFFFFFFFFFF02CC :                     .clr_d:
(1)  206/FFFFFFFFFFFF02CC : 429E                		clr.l	(a6)+
(1)  207/FFFFFFFFFFFF02CE : 429E                		clr.l	(a6)+
(1)  208/FFFFFFFFFFFF02D0 : 429E                		clr.l	(a6)+
(1)  209/FFFFFFFFFFFF02D2 : 429E                		clr.l	(a6)+
(1)  210/FFFFFFFFFFFF02D4 : 51CF FFF6           		dbf	d7,.clr_d
(1)  211/FFFFFFFFFFFF02D8 : 4278 EC00           		clr.w	(RAM_IndxPalFade).w			; Reset all VDP pal-fade requests
(1)  212/FFFFFFFFFFFF02DC : 4DF8 DC1E           		lea	(RAM_PalFadeList).w,a6
(1)  213/FFFFFFFFFFFF02E0 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  214/FFFFFFFFFFFF02E4 :                     .clr_preq:
(1)  215/FFFFFFFFFFFF02E4 : 429E                		clr.l	(a6)+
(1)  216/FFFFFFFFFFFF02E6 : 429E                		clr.l	(a6)+
(1)  217/FFFFFFFFFFFF02E8 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  227/FFFFFFFFFFFF02EC : 4CBA 000F 002C      		movem.w	.def_regset(pc),d0-d3			; Set default VDP regs $80,$81,$8B,$8C
(1)  228/FFFFFFFFFFFF02F2 : 48B8 000F EC10      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  229/FFFFFFFFFFFF02F8 : 23F8 EC10 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l		; Write VDP regs 80xx-81xx and 8Bxx-8Cxx
         FFFFFFFFFFFF02FE : 0004             
(1)  230/FFFFFFFFFFFF0300 : 23F8 EC14 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
         FFFFFFFFFFFF0306 : 0004             
(1)  231/FFFFFFFFFFFF0308 : 601C                		bra	Video_Default
(1)  232/FFFFFFFFFFFF030A :                     
(1)  233/FFFFFFFFFFFF030A :                     ; --------------------------------------------------------
(1)  234/FFFFFFFFFFFF030A :                     ; DMA blast base entry
(1)  235/FFFFFFFFFFFF030A :                     .dma_entry:
(1)  236/FFFFFFFFFFFF030A : 9400 9300           		dc.w $9400,$9300			; Size
(1)  237/FFFFFFFFFFFF030E : 9600 9500 9700      		dc.w $9600,$9500,$9700			; Source
(1)  238/FFFFFFFFFFFF0314 : 4000 0080           		dc.l $40000080 				; VDP write with DMA
(1)  239/FFFFFFFFFFFF0318 : 0000                		dc.w $0000				; Patch for the first 4 pixels (SCD/CD32X only)
(1)  240/FFFFFFFFFFFF031A :                     		align 2
(1)  241/FFFFFFFFFFFF031C :                     .def_regset:
(1)  242/FFFFFFFFFFFF031C : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
         FFFFFFFFFFFF0322 : 8C00             
(1)  243/FFFFFFFFFFFF0324 :                     		align 2
(1)  244/FFFFFFFFFFFF0326 :                     
(1)  245/FFFFFFFFFFFF0326 :                     ; --------------------------------------------------------
(1)  246/FFFFFFFFFFFF0326 :                     ; Video_Default
(1)  247/FFFFFFFFFFFF0326 :                     ;
(1)  248/FFFFFFFFFFFF0326 :                     ; Reset VDP settings to defaults
(1)  249/FFFFFFFFFFFF0326 :                     ; SCD: Clears ALL Stamps
(1)  250/FFFFFFFFFFFF0326 :                     ; --------------------------------------------------------
(1)  251/FFFFFFFFFFFF0326 :                     
(1)  252/FFFFFFFFFFFF0326 :                     Video_Default:
(1)  253/FFFFFFFFFFFF0326 : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l			; Clear WINDOW
         FFFFFFFFFFFF032C : 00C0 0004          
(1)  254/FFFFFFFFFFFF0330 : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; Default VDP increment $02
         FFFFFFFFFFFF0336 : 0004             
(1)  255/FFFFFFFFFFFF0338 : 31FC C000 EC04      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  256/FFFFFFFFFFFF033E : 31FC E000 EC06      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  257/FFFFFFFFFFFF0344 : 31FC D000 EC08      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  258/FFFFFFFFFFFF034A : 31FC F800 EC0A      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  259/FFFFFFFFFFFF0350 : 31FC FC00 EC0C      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  260/FFFFFFFFFFFF0356 : 6100 044A           		bsr	Video_UpdMapVram
(1)  261/FFFFFFFFFFFF035A : 6100 0498           		bsr	Video_UpdSprHVram
(1)  262/FFFFFFFFFFFF035E : 7001                		moveq	#%0001,d0				; Size H64 V32
(1)  263/FFFFFFFFFFFF0360 : 6100 04CC           		bsr	Video_SetMapSize
(1)  264/FFFFFFFFFFFF0364 : 7001                		moveq	#%0001,d0				; Resolution 320x224
(1)  265/FFFFFFFFFFFF0366 : 6000 03EA           		bra	Video_Resolution
(1)  266/FFFFFFFFFFFF036A :                     
(1)  267/FFFFFFFFFFFF036A :                     ; ====================================================================
(1)  268/FFFFFFFFFFFF036A :                     ; --------------------------------------------------------
(1)  269/FFFFFFFFFFFF036A :                     ; Video_Render
(1)  270/FFFFFFFFFFFF036A :                     ;
(1)  271/FFFFFFFFFFFF036A :                     ; Processes VDP Sprites, H/V Scrolling, Palette
(1)  272/FFFFFFFFFFFF036A :                     ; and process the DMA BLAST list
(1)  273/FFFFFFFFFFFF036A :                     ;
(1)  274/FFFFFFFFFFFF036A :                     ; Uses:
(1)  275/FFFFFFFFFFFF036A :                     ; ALL
(1)  276/FFFFFFFFFFFF036A :                     ;
(1)  277/FFFFFFFFFFFF036A :                     ; Notes:
(1)  278/FFFFFFFFFFFF036A :                     ; VBlank ONLY, already called by System_Render
(1)  279/FFFFFFFFFFFF036A :                     ; --------------------------------------------------------
(1)  280/FFFFFFFFFFFF036A :                     
(1)  281/FFFFFFFFFFFF036A :                     Video_Render:
(1)  282/FFFFFFFFFFFF036A : 6100 0370           		bsr	Video_DmaOn
(1)  283/FFFFFFFFFFFF036E : 6100 1642           		bsr	System_DmaEnter_RAM
(1)  284/FFFFFFFFFFFF0372 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  285/FFFFFFFFFFFF0378 : 3E38 EC0A           		move.w	(RAM_VdpVramSpr).w,d7
(1)  286/FFFFFFFFFFFF037C : 3A38 EC0C           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  287/FFFFFFFFFFFF0380 : 3C07                		move.w	d7,d6
(1)  288/FFFFFFFFFFFF0382 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  289/FFFFFFFFFFFF0386 : 0047 4000           		ori.w	#$4000,d7
(1)  290/FFFFFFFFFFFF038A : E55E                		rol.w	#2,d6
(1)  291/FFFFFFFFFFFF038C : 0246 0003           		andi.w	#%11,d6
(1)  292/FFFFFFFFFFFF0390 : 8C7C 0080           		or.w	#$80,d6
(1)  293/FFFFFFFFFFFF0394 : 3805                		move.w	d5,d4
(1)  294/FFFFFFFFFFFF0396 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  295/FFFFFFFFFFFF039A : 0045 4000           		ori.w	#$4000,d5
(1)  296/FFFFFFFFFFFF039E : E55C                		rol.w	#2,d4
(1)  297/FFFFFFFFFFFF03A0 : 0244 0003           		andi.w	#%11,d4
(1)  298/FFFFFFFFFFFF03A4 : 887C 0080           		or.w	#$80,d4
(1)  299/FFFFFFFFFFFF03A8 : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  300/FFFFFFFFFFFF03AE : 2CBC 96F2 9537      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  301/FFFFFFFFFFFF03B4 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  302/FFFFFFFFFFFF03B8 : 3C87                		move.w	d7,(a6)
(1)  303/FFFFFFFFFFFF03BA : 3F06                		move.w	d6,-(sp)
(1)  304/FFFFFFFFFFFF03BC : 3C9F                		move.w	(sp)+,(a6)
(1)  305/FFFFFFFFFFFF03BE : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  306/FFFFFFFFFFFF03C4 : 2CBC 96F0 952F      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  307/FFFFFFFFFFFF03CA : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  308/FFFFFFFFFFFF03CE : 3C85                		move.w	d5,(a6)
(1)  309/FFFFFFFFFFFF03D0 : 3F04                		move.w	d4,-(sp)
(1)  310/FFFFFFFFFFFF03D2 : 3C9F                		move.w	(sp)+,(a6)
(1)  311/FFFFFFFFFFFF03D4 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  312/FFFFFFFFFFFF03DA : 2CBC 96F2 950F      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  313/FFFFFFFFFFFF03E0 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  314/FFFFFFFFFFFF03E4 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  315/FFFFFFFFFFFF03E8 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  316/FFFFFFFFFFFF03EC : 3C9F                		move.w	(sp)+,(a6)
(1)  317/FFFFFFFFFFFF03EE : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  318/FFFFFFFFFFFF03F4 : 2CBC 96F4 95B7      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  319/FFFFFFFFFFFF03FA : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  320/FFFFFFFFFFFF03FE : 3CBC C000           		move.w	#$C000,(a6)
(1)  321/FFFFFFFFFFFF0402 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  322/FFFFFFFFFFFF0406 : 3C9F                		move.w	(sp)+,(a6)
(1)  323/FFFFFFFFFFFF0408 : 6100 15AC           		bsr	System_DmaExit_RAM
(1)  324/FFFFFFFFFFFF040C : 6100 02DA           		bsr	Video_DmaOff
(1)  325/FFFFFFFFFFFF0410 :                     
(1)  326/FFFFFFFFFFFF0410 :                     ; --------------------------------------------------------
(1)  327/FFFFFFFFFFFF0410 :                     ; Struct:
(1)  328/FFFFFFFFFFFF0410 :                     ; dc.w $94xx,$93xx		; Size
(1)  329/FFFFFFFFFFFF0410 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  330/FFFFFFFFFFFF0410 :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  331/FFFFFFFFFFFF0410 :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  332/FFFFFFFFFFFF0410 : 4A78 EA70           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  333/FFFFFFFFFFFF0414 : 6650                		bne.s	.exit
(1)  334/FFFFFFFFFFFF0416 : 4A78 EA6E           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  335/FFFFFFFFFFFF041A : 674A                		beq.s	.exit
(1)  336/FFFFFFFFFFFF041C : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  337/FFFFFFFFFFFF0422 : 47F8 EA7C           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  338/FFFFFFFFFFFF0426 : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  339/FFFFFFFFFFFF042A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  340/FFFFFFFFFFFF042E : 3887                		move.w	d7,(a4)
(1)  341/FFFFFFFFFFFF0430 : 6100 1546           		bsr	System_DmaEnter_ROM
(1)  342/FFFFFFFFFFFF0434 : 4A78 EA6E           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  343/FFFFFFFFFFFF0438 : 6722                		beq.s	.end
(1)  344/FFFFFFFFFFFF043A : 289B                		move.l	(a3)+,(a4)			; Size
(1)  345/FFFFFFFFFFFF043C : 289B                		move.l	(a3)+,(a4)			; Source
(1)  346/FFFFFFFFFFFF043E : 389B                		move.w	(a3)+,(a4)
(1)  347/FFFFFFFFFFFF0440 :                     	; CD/CD32X
(1)  349/FFFFFFFFFFFF0440 : 361B                		move.w	(a3)+,d3			; Destination
(1)  350/FFFFFFFFFFFF0442 : 341B                		move.w	(a3)+,d2
(1)  351/FFFFFFFFFFFF0444 : 3F02                		move.w	d2,-(sp)			; Use stack for this write
(1)  352/FFFFFFFFFFFF0446 : 3883                		move.w	d3,(a4)
(1)  353/FFFFFFFFFFFF0448 : 389F                		move.w	(sp)+,(a4)			; *** CPU freezes ***
(1)  354/FFFFFFFFFFFF044A : 0242 FF7F           		andi.w	#$FF7F,d2			; Remove DMA bit
(1)  355/FFFFFFFFFFFF044E : 3883                		move.w	d3,(a4)				; Set VDP control normally
(1)  356/FFFFFFFFFFFF0450 : 3882                		move.w	d2,(a4)
(1)  357/FFFFFFFFFFFF0452 : 395B FFFC           		move.w	(a3)+,-4(a4)			; Write the patch data
(1)  358/FFFFFFFFFFFF0456 :                     	; Cartridge
(1)  364/FFFFFFFFFFFF0456 : 5378 EA6E           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  365/FFFFFFFFFFFF045A : 60D8                		bra.s	.next
(1)  366/FFFFFFFFFFFF045C :                     .end:
(1)  367/FFFFFFFFFFFF045C : 6100 151E           		bsr	System_DmaExit_ROM
(1)  368/FFFFFFFFFFFF0460 : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7		; Restore VDP reg $81
(1)  369/FFFFFFFFFFFF0464 : 3887                		move.w	d7,(a4)
(1)  370/FFFFFFFFFFFF0466 :                     .exit:
(1)  371/FFFFFFFFFFFF0466 : 4E75                		rts
(1)  372/FFFFFFFFFFFF0468 :                     
(1)  373/FFFFFFFFFFFF0468 :                     ; ====================================================================
(1)  374/FFFFFFFFFFFF0468 :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF0468 :                     ; Video_BuildSprites
(1)  376/FFFFFFFFFFFF0468 :                     ;
(1)  377/FFFFFFFFFFFF0468 :                     ; Build VDP Sprite pieces and maps, call before VBlank
(1)  378/FFFFFFFFFFFF0468 :                     ; overwrites RAM_Sprites
(1)  379/FFFFFFFFFFFF0468 :                     ;
(1)  380/FFFFFFFFFFFF0468 :                     ; Uses:
(1)  381/FFFFFFFFFFFF0468 :                     ; ALL
(1)  382/FFFFFFFFFFFF0468 :                     ; --------------------------------------------------------
(1)  383/FFFFFFFFFFFF0468 :                     
(1)  384/FFFFFFFFFFFF0468 :                     Video_BuildSprites:
(1)  385/FFFFFFFFFFFF0468 : 31FC 0001 EC02      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  386/FFFFFFFFFFFF046E : 4DF8 E46E           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  387/FFFFFFFFFFFF0472 : 3C38 EC02           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  388/FFFFFFFFFFFF0476 : BC7C 0050           		cmp.w	#80,d6
(1)  389/FFFFFFFFFFFF047A : 6C00 017C           		bge	.stop_all
(1)  390/FFFFFFFFFFFF047E : 3A06                		move.w	d6,d5
(1)  391/FFFFFFFFFFFF0480 : 5345                		subq.w	#1,d5
(1)  392/FFFFFFFFFFFF0482 : 6B04                		bmi	.first_spr
(1)  393/FFFFFFFFFFFF0484 : E74D                		lsl.w	#3,d5
(1)  394/FFFFFFFFFFFF0486 : DCC5                		adda	d5,a6
(1)  395/FFFFFFFFFFFF0488 :                     .first_spr:
(1)  396/FFFFFFFFFFFF0488 : 4BF8 DDDE           		lea	(RAM_SprPzList).w,a5
(1)  397/FFFFFFFFFFFF048C : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  398/FFFFFFFFFFFF0490 :                     .next_pz:
(1)  399/FFFFFFFFFFFF0490 : 0C46 0050           		cmpi.w	#80,d6
(1)  400/FFFFFFFFFFFF0494 : 6E00 0162           		bgt	.stop_all
(1)  401/FFFFFFFFFFFF0498 : 0815 0007           		btst	#7,(a5)
(1)  402/FFFFFFFFFFFF049C : 6722                		beq	.no_slot_s
(1)  403/FFFFFFFFFFFF049E : 3015                		move.w	(a5),d0				; This slot is used?
(1)  404/FFFFFFFFFFFF04A0 : 3200                		move.w	d0,d1
(1)  405/FFFFFFFFFFFF04A2 : 0241 3C00           		andi.w	#$3C00,d1
(1)  406/FFFFFFFFFFFF04A6 : E449                		lsr.w	#2,d1
(1)  407/FFFFFFFFFFFF04A8 : D246                		add.w	d6,d1
(1)  408/FFFFFFFFFFFF04AA : 342D 0004           		move.w	4(a5),d2
(1)  409/FFFFFFFFFFFF04AE : 362D 0002           		move.w	2(a5),d3
(1)  410/FFFFFFFFFFFF04B2 : 0240 03FF           		andi.w	#$03FF,d0
(1)  411/FFFFFFFFFFFF04B6 : 3CC0                		move.w	d0,(a6)+
(1)  412/FFFFFFFFFFFF04B8 : 3CC1                		move.w	d1,(a6)+
(1)  413/FFFFFFFFFFFF04BA : 3CC2                		move.w	d2,(a6)+
(1)  414/FFFFFFFFFFFF04BC : 3CC3                		move.w	d3,(a6)+
(1)  415/FFFFFFFFFFFF04BE : 5246                		addq.w	#1,d6
(1)  416/FFFFFFFFFFFF04C0 :                     .no_slot_s:
(1)  417/FFFFFFFFFFFF04C0 : DAFC 0008           		adda	#$08,a5
(1)  418/FFFFFFFFFFFF04C4 : 51CF FFCA           		dbf	d7,.next_pz
(1)  419/FFFFFFFFFFFF04C8 : 4BF8 DC5E           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  420/FFFFFFFFFFFF04CC : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  421/FFFFFFFFFFFF04D0 :                     .next:
(1)  422/FFFFFFFFFFFF04D0 : 0815 0007           		btst	#7,(a5)
(1)  423/FFFFFFFFFFFF04D4 : 6700 0118           		beq	.no_map
(1)  424/FFFFFFFFFFFF04D8 : 2055                		move.l	(a5),a0
(1)  425/FFFFFFFFFFFF04DA : 4847                		swap	d7
(1)  426/FFFFFFFFFFFF04DC : 7000                		moveq	#0,d0
(1)  427/FFFFFFFFFFFF04DE : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  428/FFFFFFFFFFFF04E2 : D040                		add.w	d0,d0
(1)  429/FFFFFFFFFFFF04E4 : 3030 0000           		move.w	(a0,d0.w),d0
(1)  430/FFFFFFFFFFFF04E8 : 41F0 0000           		lea	(a0,d0.w),a0
(1)  431/FFFFFFFFFFFF04EC : 3A18                		move.w	(a0)+,d5
(1)  432/FFFFFFFFFFFF04EE : 6700 00FE           		beq	.no_map
(1)  433/FFFFFFFFFFFF04F2 : 5345                		subq.w	#1,d5
(1)  434/FFFFFFFFFFFF04F4 :                     .mk_pz:
(1)  435/FFFFFFFFFFFF04F4 : 0C46 0050           		cmpi.w	#80,d6
(1)  436/FFFFFFFFFFFF04F8 : 6E00 00FE           		bgt	.stop_all
(1)  437/FFFFFFFFFFFF04FC : 4845                		swap	d5
(1)  438/FFFFFFFFFFFF04FE : 4846                		swap	d6
(1)  439/FFFFFFFFFFFF0500 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  440/FFFFFFFFFFFF0502 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  441/FFFFFFFFFFFF0504 : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  442/FFFFFFFFFFFF0506 : 0838 0002 EC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  443/FFFFFFFFFFFF050C : 6710                		beq.s	.ex_vram
(1)  444/FFFFFFFFFFFF050E : 3801                		move.w	d1,d4
(1)  445/FFFFFFFFFFFF0510 : 0241 000C           		andi.w	#%1100,d1
(1)  446/FFFFFFFFFFFF0514 : 0244 0003           		andi.w	#%0011,d4
(1)  447/FFFFFFFFFFFF0518 : E24C                		lsr.w	#1,d4
(1)  448/FFFFFFFFFFFF051A : 8244                		or.w	d4,d1
(1)  449/FFFFFFFFFFFF051C : E24A                		lsr.w	#1,d2
(1)  450/FFFFFFFFFFFF051E :                     .ex_vram:
(1)  451/FFFFFFFFFFFF051E : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  452/FFFFFFFFFFFF0522 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  453/FFFFFFFFFFFF0524 : 4880                		ext.w	d0
(1)  454/FFFFFFFFFFFF0526 : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  455/FFFFFFFFFFFF052A : 3805                		move.w	d5,d4
(1)  456/FFFFFFFFFFFF052C : 0838 0002 EC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  457/FFFFFFFFFFFF0532 : 670E                		beq.s	.ex_vrams
(1)  458/FFFFFFFFFFFF0534 : 3805                		move.w	d5,d4
(1)  459/FFFFFFFFFFFF0536 : 0244 F800           		andi.w	#$F800,d4
(1)  460/FFFFFFFFFFFF053A : 0245 07FF           		andi.w	#$07FF,d5
(1)  461/FFFFFFFFFFFF053E : E24D                		lsr.w	#1,d5
(1)  462/FFFFFFFFFFFF0540 : 8A44                		or.w	d4,d5
(1)  463/FFFFFFFFFFFF0542 :                     .ex_vrams:
(1)  464/FFFFFFFFFFFF0542 : 3805                		move.w	d5,d4
(1)  465/FFFFFFFFFFFF0544 : 0244 1000           		andi.w	#$1000,d4
(1)  466/FFFFFFFFFFFF0548 : 6710                		beq.s	.vram_v
(1)  467/FFFFFFFFFFFF054A : 4440                		neg.w	d0
(1)  468/FFFFFFFFFFFF054C : 0440 0008           		subi.w	#8,d0
(1)  469/FFFFFFFFFFFF0550 : 3C01                		move.w	d1,d6
(1)  470/FFFFFFFFFFFF0552 : 0246 0003           		andi.w	#%0011,d6
(1)  471/FFFFFFFFFFFF0556 : E74E                		lsl.w	#3,d6
(1)  472/FFFFFFFFFFFF0558 : 9046                		sub.w	d6,d0
(1)  473/FFFFFFFFFFFF055A :                     .vram_v:
(1)  474/FFFFFFFFFFFF055A : 3805                		move.w	d5,d4
(1)  475/FFFFFFFFFFFF055C : 0244 0800           		andi.w	#$0800,d4
(1)  476/FFFFFFFFFFFF0560 : 6710                		beq.s	.vram_h
(1)  477/FFFFFFFFFFFF0562 : 4443                		neg.w	d3
(1)  478/FFFFFFFFFFFF0564 : 0443 0008           		subi.w	#8,d3
(1)  479/FFFFFFFFFFFF0568 : 3C01                		move.w	d1,d6
(1)  480/FFFFFFFFFFFF056A : 0246 000C           		andi.w	#%1100,d6
(1)  481/FFFFFFFFFFFF056E : DC46                		add.w	d6,d6
(1)  482/FFFFFFFFFFFF0570 : 9646                		sub.w	d6,d3
(1)  483/FFFFFFFFFFFF0572 :                     .vram_h:
(1)  484/FFFFFFFFFFFF0572 : D445                		add.w	d5,d2
(1)  485/FFFFFFFFFFFF0574 : 4845                		swap	d5
(1)  486/FFFFFFFFFFFF0576 : 4846                		swap	d6
(1)  487/FFFFFFFFFFFF0578 : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  488/FFFFFFFFFFFF057C : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  489/FFFFFFFFFFFF0580 : D078 EA74           		add.w	(RAM_SprOffsetY).w,d0
(1)  490/FFFFFFFFFFFF0584 : 9678 EA72           		sub.w	(RAM_SprOffsetX).w,d3
(1)  491/FFFFFFFFFFFF0588 : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  492/FFFFFFFFFFFF058C : 6C5C                		bge.s	.no_pz
(1)  493/FFFFFFFFFFFF058E : 3801                		move.w	d1,d4
(1)  494/FFFFFFFFFFFF0590 : 0244 000C           		andi.w	#%1100,d4
(1)  495/FFFFFFFFFFFF0594 : D844                		add.w	d4,d4
(1)  496/FFFFFFFFFFFF0596 : D87C 0008           		add.w	#8,d4
(1)  497/FFFFFFFFFFFF059A : 3E03                		move.w	d3,d7
(1)  498/FFFFFFFFFFFF059C : DE44                		add.w	d4,d7
(1)  499/FFFFFFFFFFFF059E : 6B4A                		bmi.s	.no_pz
(1)  500/FFFFFFFFFFFF05A0 : 383C 00F0           		move.w	#240,d4
(1)  501/FFFFFFFFFFFF05A4 : 0838 0002 EC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  502/FFFFFFFFFFFF05AA : 6702                		beq.s	.ex_yext
(1)  503/FFFFFFFFFFFF05AC : D844                		add.w	d4,d4
(1)  504/FFFFFFFFFFFF05AE :                     .ex_yext:
(1)  505/FFFFFFFFFFFF05AE : B044                		cmp.w	d4,d0
(1)  506/FFFFFFFFFFFF05B0 : 6C38                		bge.s	.no_pz
(1)  507/FFFFFFFFFFFF05B2 : 3801                		move.w	d1,d4
(1)  508/FFFFFFFFFFFF05B4 : 0244 0003           		andi.w	#%0011,d4
(1)  509/FFFFFFFFFFFF05B8 : E74C                		lsl.w	#3,d4
(1)  510/FFFFFFFFFFFF05BA : D87C 0008           		add.w	#8,d4
(1)  511/FFFFFFFFFFFF05BE : 3E00                		move.w	d0,d7
(1)  512/FFFFFFFFFFFF05C0 : DE44                		add.w	d4,d7
(1)  513/FFFFFFFFFFFF05C2 : 6B26                		bmi.s	.no_pz
(1)  514/FFFFFFFFFFFF05C4 : E149                		lsl.w	#8,d1			; Size + Link
(1)  515/FFFFFFFFFFFF05C6 : 8246                		or.w	d6,d1
(1)  516/FFFFFFFFFFFF05C8 : 0640 0080           		addi.w	#$80,d0
(1)  517/FFFFFFFFFFFF05CC : 3838 EC16           		move.w	(RAM_VdpRegSetC).w,d4
(1)  518/FFFFFFFFFFFF05D0 : 0804 0002           		btst	#2,d4
(1)  519/FFFFFFFFFFFF05D4 : 6704                		beq.s	.dont_add
(1)  520/FFFFFFFFFFFF05D6 : 0640 0080           		addi.w	#$80,d0
(1)  521/FFFFFFFFFFFF05DA :                     .dont_add:
(1)  522/FFFFFFFFFFFF05DA : 0643 0080           		addi.w	#$80,d3
(1)  523/FFFFFFFFFFFF05DE : 3CC0                		move.w	d0,(a6)+
(1)  524/FFFFFFFFFFFF05E0 : 3CC1                		move.w	d1,(a6)+
(1)  525/FFFFFFFFFFFF05E2 : 3CC2                		move.w	d2,(a6)+
(1)  526/FFFFFFFFFFFF05E4 : 3CC3                		move.w	d3,(a6)+
(1)  527/FFFFFFFFFFFF05E6 : DC7C 0001           		add.w	#1,d6
(1)  528/FFFFFFFFFFFF05EA :                     .no_pz:
(1)  529/FFFFFFFFFFFF05EA : 51CD FF08           		dbf	d5,.mk_pz
(1)  530/FFFFFFFFFFFF05EE :                     .no_map:
(1)  531/FFFFFFFFFFFF05EE : DAFC 0010           		adda	#$10,a5
(1)  532/FFFFFFFFFFFF05F2 : 4847                		swap	d7
(1)  533/FFFFFFFFFFFF05F4 :                     .no_slot:
(1)  534/FFFFFFFFFFFF05F4 : 51CF FEDA           		dbf	d7,.next
(1)  535/FFFFFFFFFFFF05F8 :                     .stop_all:
(1)  536/FFFFFFFFFFFF05F8 : 614A                		bsr	vid_CheckLastSpr
(1)  537/FFFFFFFFFFFF05FA : 31C6 EC02           		move.w	d6,(RAM_SprLinkNum).w
(1)  538/FFFFFFFFFFFF05FE :                     	; Reset slots
(1)  539/FFFFFFFFFFFF05FE : 4DF8 DDDE           		lea	(RAM_SprPzList).w,a6
(1)  540/FFFFFFFFFFFF0602 : 7E4F                		moveq	#80-1,d7
(1)  541/FFFFFFFFFFFF0604 : 7C08                		moveq	#$08,d6
(1)  542/FFFFFFFFFFFF0606 :                     .chk_spr_r:
(1)  543/FFFFFFFFFFFF0606 : 1A16                		move.b	(a6),d5
(1)  544/FFFFFFFFFFFF0608 : 0805 0007           		btst	#7,d5
(1)  545/FFFFFFFFFFFF060C : 670C                		beq.s	.no_slot_r
(1)  546/FFFFFFFFFFFF060E : 0805 0006           		btst	#6,d5
(1)  547/FFFFFFFFFFFF0612 : 6706                		beq.s	.no_slot_r
(1)  548/FFFFFFFFFFFF0614 : 4296                		clr.l	(a6)
(1)  549/FFFFFFFFFFFF0616 : 42AE 0004           		clr.l	4(a6)
(1)  550/FFFFFFFFFFFF061A :                     .no_slot_r:
(1)  551/FFFFFFFFFFFF061A : DCC6                		adda	d6,a6
(1)  552/FFFFFFFFFFFF061C : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  553/FFFFFFFFFFFF0620 : 4DF8 DC5E           		lea	(RAM_SprMapList).w,a6
(1)  554/FFFFFFFFFFFF0624 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  555/FFFFFFFFFFFF0626 : 7C10                		moveq	#$10,d6
(1)  556/FFFFFFFFFFFF0628 :                     .chk_spr_mr:
(1)  557/FFFFFFFFFFFF0628 : 1A16                		move.b	(a6),d5
(1)  558/FFFFFFFFFFFF062A : 0805 0007           		btst	#7,d5
(1)  559/FFFFFFFFFFFF062E : 670C                		beq.s	.no_slot_mr
(1)  560/FFFFFFFFFFFF0630 : 0805 0006           		btst	#6,d5
(1)  561/FFFFFFFFFFFF0634 : 6706                		beq.s	.no_slot_mr
(1)  562/FFFFFFFFFFFF0636 : 4296                		clr.l	(a6)
(1)  563/FFFFFFFFFFFF0638 : 42AE 0004           		clr.l	4(a6)
(1)  564/FFFFFFFFFFFF063C :                     .no_slot_mr:
(1)  565/FFFFFFFFFFFF063C : DCC6                		adda	d6,a6
(1)  566/FFFFFFFFFFFF063E : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  567/FFFFFFFFFFFF0642 : 4E75                		rts
(1)  568/FFFFFFFFFFFF0644 :                     
(1)  569/FFFFFFFFFFFF0644 :                     ; --------------------------------------------------------
(1)  570/FFFFFFFFFFFF0644 :                     ; d6 - Current link
(1)  571/FFFFFFFFFFFF0644 :                     vid_CheckLastSpr:
(1)  572/FFFFFFFFFFFF0644 : 4DF8 E46E           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  573/FFFFFFFFFFFF0648 : 0C46 0001           		cmpi.w	#1,d6
(1)  574/FFFFFFFFFFFF064C : 6710                		beq.s	.blnk_first
(1)  575/FFFFFFFFFFFF064E : 0C46 0050           		cmpi.w	#80,d6
(1)  576/FFFFFFFFFFFF0652 : 6E10                		bgt.s	.last_one
(1)  577/FFFFFFFFFFFF0654 : 3E06                		move.w	d6,d7
(1)  578/FFFFFFFFFFFF0656 : 0447 0001           		subi.w	#1,d7
(1)  579/FFFFFFFFFFFF065A : E74F                		lsl.w	#3,d7
(1)  580/FFFFFFFFFFFF065C : DCC7                		adda	d7,a6
(1)  581/FFFFFFFFFFFF065E :                     .blnk_first:
(1)  582/FFFFFFFFFFFF065E : 429E                		clr.l	(a6)+
(1)  583/FFFFFFFFFFFF0660 : 429E                		clr.l	(a6)+
(1)  584/FFFFFFFFFFFF0662 : 6010                		bra.s	.spr_exit
(1)  585/FFFFFFFFFFFF0664 :                     .last_one:
(1)  586/FFFFFFFFFFFF0664 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  587/FFFFFFFFFFFF0668 : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  588/FFFFFFFFFFFF066C : 0247 0F00           		andi.w	#$0F00,d7
(1)  589/FFFFFFFFFFFF0670 : 3D47 0002           		move.w	d7,2(a6)
(1)  590/FFFFFFFFFFFF0674 :                     .spr_exit:
(1)  591/FFFFFFFFFFFF0674 : 4E75                		rts
(1)  592/FFFFFFFFFFFF0676 :                     
(1)  593/FFFFFFFFFFFF0676 :                     ; ====================================================================
(1)  594/FFFFFFFFFFFF0676 :                     ; --------------------------------------------------------
(1)  595/FFFFFFFFFFFF0676 :                     ; Subroutines
(1)  596/FFFFFFFFFFFF0676 :                     ; --------------------------------------------------------
(1)  597/FFFFFFFFFFFF0676 :                     
(1)  598/FFFFFFFFFFFF0676 :                     ; --------------------------------------------------------
(1)  599/FFFFFFFFFFFF0676 :                     ; Video_Clear
(1)  600/FFFFFFFFFFFF0676 :                     ;
(1)  601/FFFFFFFFFFFF0676 :                     ; Clears ALL VDP VRAM and other RAM sections
(1)  602/FFFFFFFFFFFF0676 :                     ;
(1)  603/FFFFFFFFFFFF0676 :                     ; Breaks:
(1)  604/FFFFFFFFFFFF0676 :                     ; ALL
(1)  605/FFFFFFFFFFFF0676 :                     ; --------------------------------------------------------
(1)  606/FFFFFFFFFFFF0676 :                     
(1)  607/FFFFFFFFFFFF0676 :                     Video_Clear:
(1)  616/FFFFFFFFFFFF0676 : 7C00                		moveq	#0,d6
(1)  617/FFFFFFFFFFFF0678 : 4DF8 DC1E           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  618/FFFFFFFFFFFF067C : 3E3C 0E57           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  619/FFFFFFFFFFFF0680 :                     .clr_me:
(1)  620/FFFFFFFFFFFF0680 : 1CC6                		move.b	d6,(a6)+
(1)  621/FFFFFFFFFFFF0682 : 51CF FFFC           		dbf	d7,.clr_me
(1)  622/FFFFFFFFFFFF0686 : 303C 0000           		move.w	#0,d0
(1)  623/FFFFFFFFFFFF068A : 323C 0000           		move.w	#0,d1
(1)  624/FFFFFFFFFFFF068E : 343C FFC0           		move.w	#cell_num($7FE),d2
(1)  625/FFFFFFFFFFFF0692 : 6100 0344           		bsr	Video_Fill
(1)  626/FFFFFFFFFFFF0696 :                     
(1)  627/FFFFFFFFFFFF0696 :                     ; --------------------------------------------------------
(1)  628/FFFFFFFFFFFF0696 :                     ; Video_ClearScreen
(1)  629/FFFFFFFFFFFF0696 :                     ;
(1)  630/FFFFFFFFFFFF0696 :                     ; Clears ALL 3 map layers entirely
(1)  631/FFFFFFFFFFFF0696 :                     ;
(1)  632/FFFFFFFFFFFF0696 :                     ; Uses:
(1)  633/FFFFFFFFFFFF0696 :                     ; ALL
(1)  634/FFFFFFFFFFFF0696 :                     ; --------------------------------------------------------
(1)  635/FFFFFFFFFFFF0696 :                     
(1)  636/FFFFFFFFFFFF0696 :                     Video_ClearScreen:
(1)  637/FFFFFFFFFFFF0696 : 7000                		moveq	#0,d0
(1)  638/FFFFFFFFFFFF0698 : 3238 EC04           		move.w	(RAM_VdpVramFG).w,d1
(1)  639/FFFFFFFFFFFF069C : 3438 EC0E           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  640/FFFFFFFFFFFF06A0 : 6100 0336           		bsr	Video_Fill
(1)  641/FFFFFFFFFFFF06A4 : 3238 EC06           		move.w	(RAM_VdpVramBG).w,d1
(1)  642/FFFFFFFFFFFF06A8 : 6100 032E           		bsr	Video_Fill
(1)  643/FFFFFFFFFFFF06AC : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  644/FFFFFFFFFFFF06B0 : 3E38 EC16           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  645/FFFFFFFFFFFF06B4 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  646/FFFFFFFFFFFF06B8 : 6702                		beq.s	.not_small
(1)  647/FFFFFFFFFFFF06BA : D442                		add.w	d2,d2			; Size $1000
(1)  648/FFFFFFFFFFFF06BC :                     .not_small:
(1)  649/FFFFFFFFFFFF06BC : 3238 EC08           		move.w	(RAM_VdpVramWD).w,d1
(1)  650/FFFFFFFFFFFF06C0 : 6000 0316           		bra	Video_Fill
(1)  651/FFFFFFFFFFFF06C4 :                     
(1)  652/FFFFFFFFFFFF06C4 :                     ; --------------------------------------------------------
(1)  653/FFFFFFFFFFFF06C4 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  654/FFFFFFFFFFFF06C4 :                     ;
(1)  655/FFFFFFFFFFFF06C4 :                     ; Enable or Disable VDP Display
(1)  656/FFFFFFFFFFFF06C4 :                     ; --------------------------------------------------------
(1)  657/FFFFFFFFFFFF06C4 :                     
(1)  658/FFFFFFFFFFFF06C4 :                     Video_DisplayOn:
(1)  659/FFFFFFFFFFFF06C4 : 3F07                		move.w	d7,-(sp)
(1)  660/FFFFFFFFFFFF06C6 : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  661/FFFFFFFFFFFF06CA : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  662/FFFFFFFFFFFF06CE : 6022                		bra.s	vid_WrtReg01
(1)  663/FFFFFFFFFFFF06D0 :                     Video_DisplayOff:
(1)  664/FFFFFFFFFFFF06D0 : 3F07                		move.w	d7,-(sp)
(1)  665/FFFFFFFFFFFF06D2 : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  666/FFFFFFFFFFFF06D6 : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  667/FFFFFFFFFFFF06DA : 6016                		bra.s	vid_WrtReg01
(1)  668/FFFFFFFFFFFF06DC :                     
(1)  669/FFFFFFFFFFFF06DC :                     ; --------------------------------------------------------
(1)  670/FFFFFFFFFFFF06DC :                     ; Video_DmaOn, Video_DmaOff
(1)  671/FFFFFFFFFFFF06DC :                     ;
(1)  672/FFFFFFFFFFFF06DC :                     ; Enable or Disable DMA
(1)  673/FFFFFFFFFFFF06DC :                     ;
(1)  674/FFFFFFFFFFFF06DC :                     ; Note:
(1)  675/FFFFFFFFFFFF06DC :                     ; Various routines that use DMA already call these
(1)  676/FFFFFFFFFFFF06DC :                     ; --------------------------------------------------------
(1)  677/FFFFFFFFFFFF06DC :                     
(1)  678/FFFFFFFFFFFF06DC :                     Video_DmaOn:
(1)  679/FFFFFFFFFFFF06DC : 3F07                		move.w	d7,-(sp)
(1)  680/FFFFFFFFFFFF06DE : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  681/FFFFFFFFFFFF06E2 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  682/FFFFFFFFFFFF06E6 : 600A                		bra.s	vid_WrtReg01
(1)  683/FFFFFFFFFFFF06E8 :                     Video_DmaOff:
(1)  684/FFFFFFFFFFFF06E8 : 3F07                		move.w	d7,-(sp)
(1)  685/FFFFFFFFFFFF06EA : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  686/FFFFFFFFFFFF06EE : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  687/FFFFFFFFFFFF06F2 :                     
(1)  688/FFFFFFFFFFFF06F2 :                     ; ------------------------------------------------
(1)  689/FFFFFFFFFFFF06F2 :                     
(1)  690/FFFFFFFFFFFF06F2 :                     vid_WrtReg01:
(1)  691/FFFFFFFFFFFF06F2 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  692/FFFFFFFFFFFF06F8 : 31C7 EC12           		move.w	d7,(RAM_VdpRegSet1).w
(1)  693/FFFFFFFFFFFF06FC : 3E1F                		move.w	(sp)+,d7
(1)  694/FFFFFFFFFFFF06FE : 4E75                		rts
(1)  695/FFFFFFFFFFFF0700 :                     
(1)  696/FFFFFFFFFFFF0700 :                     ; --------------------------------------------------------
(1)  697/FFFFFFFFFFFF0700 :                     ; Video_IntEnable
(1)  698/FFFFFFFFFFFF0700 :                     ;
(1)  699/FFFFFFFFFFFF0700 :                     ; Enable or Disable VBlank, HBlank and
(1)  700/FFFFFFFFFFFF0700 :                     ; External interrupts
(1)  701/FFFFFFFFFFFF0700 :                     ;
(1)  702/FFFFFFFFFFFF0700 :                     ; Input:
(1)  703/FFFFFFFFFFFF0700 :                     ; d0.b | Enable these interrupts:
(1)  704/FFFFFFFFFFFF0700 :                     ;      | %00000ehv
(1)  705/FFFFFFFFFFFF0700 :                     ;      |     e: External
(1)  706/FFFFFFFFFFFF0700 :                     ;      |     h: HBlank
(1)  707/FFFFFFFFFFFF0700 :                     ;      |     v: VBlank
(1)  708/FFFFFFFFFFFF0700 :                     ;
(1)  709/FFFFFFFFFFFF0700 :                     ; Notes:
(1)  710/FFFFFFFFFFFF0700 :                     ; Set your interrupt locations with System_SetIntJumps
(1)  711/FFFFFFFFFFFF0700 :                     ; --------------------------------------------------------
(1)  712/FFFFFFFFFFFF0700 :                     
(1)  713/FFFFFFFFFFFF0700 :                     Video_IntEnable:
(1)  714/FFFFFFFFFFFF0700 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  715/FFFFFFFFFFFF0704 : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  716/FFFFFFFFFFFF0708 : 3C00                		move.w	d0,d6
(1)  717/FFFFFFFFFFFF070A : 0246 0001           		andi.w	#1,d6			; %--V
(1)  718/FFFFFFFFFFFF070E : EB4E                		lsl.w	#5,d6
(1)  719/FFFFFFFFFFFF0710 : 8E46                		or.w	d6,d7
(1)  720/FFFFFFFFFFFF0712 : 31C7 EC12           		move.w	d7,(RAM_VdpRegSet1).w
(1)  721/FFFFFFFFFFFF0716 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  722/FFFFFFFFFFFF071C : 3E38 EC10           		move.w	(RAM_VdpRegSet0).w,d7
(1)  723/FFFFFFFFFFFF0720 : 3C00                		move.w	d0,d6
(1)  724/FFFFFFFFFFFF0722 : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  725/FFFFFFFFFFFF0726 : E74E                		lsl.w	#3,d6
(1)  726/FFFFFFFFFFFF0728 : 8E46                		or.w	d6,d7
(1)  727/FFFFFFFFFFFF072A : 31C7 EC10           		move.w	d7,(RAM_VdpRegSet0).w
(1)  728/FFFFFFFFFFFF072E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  729/FFFFFFFFFFFF0734 : 3E38 EC14           		move.w	(RAM_VdpRegSetB).w,d7
(1)  730/FFFFFFFFFFFF0738 : 3C00                		move.w	d0,d6			; %E--
(1)  731/FFFFFFFFFFFF073A : 0246 0004           		andi.w	#%100,d6
(1)  732/FFFFFFFFFFFF073E : DC46                		add.w	d6,d6
(1)  733/FFFFFFFFFFFF0740 : 8E46                		or.w	d6,d7
(1)  734/FFFFFFFFFFFF0742 : 31C7 EC14           		move.w	d7,(RAM_VdpRegSetB).w
(1)  735/FFFFFFFFFFFF0746 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  736/FFFFFFFFFFFF074C : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  737/FFFFFFFFFFFF0750 : 4E75                		rts
(1)  738/FFFFFFFFFFFF0752 :                     
(1)  739/FFFFFFFFFFFF0752 :                     ; --------------------------------------------------------
(1)  740/FFFFFFFFFFFF0752 :                     ; Video_Resolution
(1)  741/FFFFFFFFFFFF0752 :                     ;
(1)  742/FFFFFFFFFFFF0752 :                     ; Set VDP Video resolution
(1)  743/FFFFFFFFFFFF0752 :                     ;
(1)  744/FFFFFFFFFFFF0752 :                     ; Input:
(1)  745/FFFFFFFFFFFF0752 :                     ; d0.b | Vertical and Horizontal modes:
(1)  746/FFFFFFFFFFFF0752 :                     ;      | %0000iivh
(1)  747/FFFFFFFFFFFF0752 :                     ;      |     h: Horizontal 256/320
(1)  748/FFFFFFFFFFFF0752 :                     ;      |     v: Vertical 224/240 (PAL ONLY)
(1)  749/FFFFFFFFFFFF0752 :                     ;      |    ii: Interlace mode
(1)  750/FFFFFFFFFFFF0752 :                     ;      | 	%00 - None
(1)  751/FFFFFFFFFFFF0752 :                     ;      | 	%01 - Enable
(1)  752/FFFFFFFFFFFF0752 :                     ;      | 	%10 - INVALID
(1)  753/FFFFFFFFFFFF0752 :                     ;      | 	%11 - Double (Vertical 448/480)
(1)  754/FFFFFFFFFFFF0752 :                     ; --------------------------------------------------------
(1)  755/FFFFFFFFFFFF0752 :                     
(1)  756/FFFFFFFFFFFF0752 :                     Video_Resolution:
(1)  757/FFFFFFFFFFFF0752 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  758/FFFFFFFFFFFF0756 : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  759/FFFFFFFFFFFF075A : 0207 00F7           		andi.b	#%11110111,d7
(1)  760/FFFFFFFFFFFF075E : 3C00                		move.w	d0,d6
(1)  761/FFFFFFFFFFFF0760 : CC7C 0002           		and.w	#%0010,d6
(1)  762/FFFFFFFFFFFF0764 : E54E                		lsl.w	#2,d6
(1)  763/FFFFFFFFFFFF0766 : 8E46                		or.w	d6,d7
(1)  764/FFFFFFFFFFFF0768 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  765/FFFFFFFFFFFF076E : 31C7 EC12           		move.w	d7,(RAM_VdpRegSet1).w
(1)  766/FFFFFFFFFFFF0772 : 3E38 EC16           		move.w	(RAM_VdpRegSetC).w,d7
(1)  767/FFFFFFFFFFFF0776 : 0207 0078           		andi.b	#%01111000,d7
(1)  768/FFFFFFFFFFFF077A : 3C00                		move.w	d0,d6
(1)  769/FFFFFFFFFFFF077C : CC7C 0001           		and.w	#%0001,d6
(1)  770/FFFFFFFFFFFF0780 : 6704                		beq.s	.ex_bit
(1)  771/FFFFFFFFFFFF0782 : 8C7C 0081           		or.w	#%10000001,d6
(1)  772/FFFFFFFFFFFF0786 :                     .ex_bit:
(1)  773/FFFFFFFFFFFF0786 : 8E46                		or.w	d6,d7
(1)  774/FFFFFFFFFFFF0788 : 3C00                		move.w	d0,d6
(1)  775/FFFFFFFFFFFF078A : 0246 000C           		andi.w	#%1100,d6
(1)  776/FFFFFFFFFFFF078E : E24E                		lsr.w	#1,d6
(1)  777/FFFFFFFFFFFF0790 : 8E46                		or.w	d6,d7
(1)  778/FFFFFFFFFFFF0792 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  779/FFFFFFFFFFFF0798 : 31C7 EC16           		move.w	d7,(RAM_VdpRegSetC).w
(1)  780/FFFFFFFFFFFF079C : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  781/FFFFFFFFFFFF07A0 : 4E75                		rts
(1)  782/FFFFFFFFFFFF07A2 :                     
(1)  783/FFFFFFFFFFFF07A2 :                     ; --------------------------------------------------------
(1)  784/FFFFFFFFFFFF07A2 :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  785/FFFFFFFFFFFF07A2 :                     ;
(1)  786/FFFFFFFFFFFF07A2 :                     ; Update VRAM locations for FG, BG, Window and
(1)  787/FFFFFFFFFFFF07A2 :                     ; the Horizontal scroll to VDP
(1)  788/FFFFFFFFFFFF07A2 :                     ; --------------------------------------------------------
(1)  789/FFFFFFFFFFFF07A2 :                     
(1)  790/FFFFFFFFFFFF07A2 :                     Video_UpdMapVram:
(1)  791/FFFFFFFFFFFF07A2 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  792/FFFFFFFFFFFF07A6 : 3E3C 8200           		move.w	#$8200,d7
(1)  793/FFFFFFFFFFFF07AA : 3C38 EC04           		move.w	(RAM_VdpVramFG).w,d6
(1)  794/FFFFFFFFFFFF07AE : E04E                		lsr.w	#8,d6
(1)  795/FFFFFFFFFFFF07B0 : E44E                		lsr.w	#2,d6
(1)  796/FFFFFFFFFFFF07B2 : 0246 0038           		andi.w	#%00111000,d6
(1)  797/FFFFFFFFFFFF07B6 : 8E46                		or.w	d6,d7
(1)  798/FFFFFFFFFFFF07B8 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  799/FFFFFFFFFFFF07BE : 3E3C 8300           		move.w	#$8300,d7
(1)  800/FFFFFFFFFFFF07C2 : 3C38 EC08           		move.w	(RAM_VdpVramWD).w,d6
(1)  801/FFFFFFFFFFFF07C6 : E04E                		lsr.w	#8,d6
(1)  802/FFFFFFFFFFFF07C8 : E44E                		lsr.w	#2,d6
(1)  803/FFFFFFFFFFFF07CA : 0246 003E           		andi.w	#%00111110,d6
(1)  804/FFFFFFFFFFFF07CE : 8E46                		or.w	d6,d7
(1)  805/FFFFFFFFFFFF07D0 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  806/FFFFFFFFFFFF07D6 : 3E3C 8400           		move.w	#$8400,d7
(1)  807/FFFFFFFFFFFF07DA : 3C38 EC06           		move.w	(RAM_VdpVramBG).w,d6
(1)  808/FFFFFFFFFFFF07DE : E04E                		lsr.w	#8,d6
(1)  809/FFFFFFFFFFFF07E0 : EA4E                		lsr.w	#5,d6
(1)  810/FFFFFFFFFFFF07E2 : 0246 0007           		andi.w	#%00000111,d6
(1)  811/FFFFFFFFFFFF07E6 : 8E46                		or.w	d6,d7
(1)  812/FFFFFFFFFFFF07E8 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  813/FFFFFFFFFFFF07EE : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  814/FFFFFFFFFFFF07F2 : 4E75                		rts
(1)  815/FFFFFFFFFFFF07F4 :                     Video_UpdSprHVram:
(1)  816/FFFFFFFFFFFF07F4 : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  817/FFFFFFFFFFFF07F8 : 3E3C 8500           		move.w	#$8500,d7
(1)  818/FFFFFFFFFFFF07FC : 3C38 EC0A           		move.w	(RAM_VdpVramSpr).w,d6
(1)  819/FFFFFFFFFFFF0800 : E04E                		lsr.w	#8,d6
(1)  820/FFFFFFFFFFFF0802 : E24E                		lsr.w	#1,d6
(1)  821/FFFFFFFFFFFF0804 : 0246 007F           		andi.w	#%01111111,d6
(1)  822/FFFFFFFFFFFF0808 : 8E46                		or.w	d6,d7
(1)  823/FFFFFFFFFFFF080A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  824/FFFFFFFFFFFF0810 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  825/FFFFFFFFFFFF0814 : 3C38 EC0C           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  826/FFFFFFFFFFFF0818 : E04E                		lsr.w	#8,d6
(1)  827/FFFFFFFFFFFF081A : E44E                		lsr.w	#2,d6
(1)  828/FFFFFFFFFFFF081C : 0246 003F           		andi.w	#%00111111,d6
(1)  829/FFFFFFFFFFFF0820 : 8E46                		or.w	d6,d7
(1)  830/FFFFFFFFFFFF0822 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  831/FFFFFFFFFFFF0828 : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  832/FFFFFFFFFFFF082C : 4E75                		rts
(1)  833/FFFFFFFFFFFF082E :                     
(1)  834/FFFFFFFFFFFF082E :                     ; --------------------------------------------------------
(1)  835/FFFFFFFFFFFF082E :                     ; Video_SetMapSize
(1)  836/FFFFFFFFFFFF082E :                     ;
(1)  837/FFFFFFFFFFFF082E :                     ; Set MAP size to FG and BG
(1)  838/FFFFFFFFFFFF082E :                     ;
(1)  839/FFFFFFFFFFFF082E :                     ; Input:
(1)  840/FFFFFFFFFFFF082E :                     ; d0.b | Map size:
(1)  841/FFFFFFFFFFFF082E :                     ;      | %0000vvhh
(1)  842/FFFFFFFFFFFF082E :                     ;      |     vv and hh:
(1)  843/FFFFFFFFFFFF082E :                     ;      | 	%00 - 32
(1)  844/FFFFFFFFFFFF082E :                     ;      | 	%01 - 64
(1)  845/FFFFFFFFFFFF082E :                     ;      | 	%10 - INVALID
(1)  846/FFFFFFFFFFFF082E :                     ;      | 	%11 - 128
(1)  847/FFFFFFFFFFFF082E :                     ; --------------------------------------------------------
(1)  848/FFFFFFFFFFFF082E :                     
(1)  849/FFFFFFFFFFFF082E :                     Video_SetMapSize:
(1)  850/FFFFFFFFFFFF082E : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  851/FFFFFFFFFFFF0832 : 3E00                		move.w	d0,d7
(1)  852/FFFFFFFFFFFF0834 : 0247 000F           		andi.w	#%1111,d7
(1)  853/FFFFFFFFFFFF0838 : DE47                		add.w	d7,d7
(1)  854/FFFFFFFFFFFF083A : 3E3B 7026           		move.w	.size_tbl(pc,d7.w),d7
(1)  855/FFFFFFFFFFFF083E : 31C7 EC0E           		move.w	d7,(RAM_VdpMapSize).w
(1)  856/FFFFFFFFFFFF0842 : 3E00                		move.w	d0,d7
(1)  857/FFFFFFFFFFFF0844 : 3C07                		move.w	d7,d6
(1)  858/FFFFFFFFFFFF0846 : 0247 0003           		andi.w	#%0011,d7
(1)  859/FFFFFFFFFFFF084A : 0246 000C           		andi.w	#%1100,d6
(1)  860/FFFFFFFFFFFF084E : E54E                		lsl.w	#2,d6
(1)  861/FFFFFFFFFFFF0850 : 8E7C 9000           		or.w	#$9000,d7
(1)  862/FFFFFFFFFFFF0854 : 8E46                		or.w	d6,d7
(1)  863/FFFFFFFFFFFF0856 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  864/FFFFFFFFFFFF085C : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  865/FFFFFFFFFFFF0860 : 4E75                		rts
(1)  866/FFFFFFFFFFFF0862 :                     .size_tbl:
(1)  867/FFFFFFFFFFFF0862 : 0800 1000 1800      		dc.w $0800,$1000,$1800,$2000
         FFFFFFFFFFFF0868 : 2000             
(1)  868/FFFFFFFFFFFF086A : 1000 2000 3000      		dc.w $1000,$2000,$3000,$4000
         FFFFFFFFFFFF0870 : 4000             
(1)  869/FFFFFFFFFFFF0872 : 1800 3000 4800      		dc.w $1800,$3000,$4800,$6000
         FFFFFFFFFFFF0878 : 6000             
(1)  870/FFFFFFFFFFFF087A : 2000 4000 6000      		dc.w $2000,$4000,$6000,$8000
         FFFFFFFFFFFF0880 : 8000             
(1)  871/FFFFFFFFFFFF0882 :                     
(1)  872/FFFFFFFFFFFF0882 :                     ; --------------------------------------------------------
(1)  873/FFFFFFFFFFFF0882 :                     ; Video_LoadArt
(1)  874/FFFFFFFFFFFF0882 :                     ;
(1)  875/FFFFFFFFFFFF0882 :                     ; Loads VDP graphics using DMA
(1)  876/FFFFFFFFFFFF0882 :                     ;
(1)  877/FFFFFFFFFFFF0882 :                     ; Input:
(1)  878/FFFFFFFFFFFF0882 :                     ; d0.l | Graphics data *NOT a0*
(1)  879/FFFFFFFFFFFF0882 :                     ; d1.w | VRAM location: cell_num(vram_pos)
(1)  880/FFFFFFFFFFFF0882 :                     ; d2.w | Size:          cell_num(size)
(1)  881/FFFFFFFFFFFF0882 :                     ;
(1)  882/FFFFFFFFFFFF0882 :                     ; Notes:
(1)  883/FFFFFFFFFFFF0882 :                     ; - For a faster load: call this during VBlank or
(1)  884/FFFFFFFFFFFF0882 :                     ;   disable VDP Display temporally.
(1)  885/FFFFFFFFFFFF0882 :                     ;
(1)  886/FFFFFFFFFFFF0882 :                     ; * 32X Cartridge ONLY:
(1)  887/FFFFFFFFFFFF0882 :                     ; - This sets RV bit, make sure your code is
(1)  888/FFFFFFFFFFFF0882 :                     ;   running on RAM (already doing here) and the
(1)  889/FFFFFFFFFFFF0882 :                     ;   SH2 is not reading from it's ROM area CS1
(1)  890/FFFFFFFFFFFF0882 :                     ; --------------------------------------------------------
(1)  891/FFFFFFFFFFFF0882 :                     
(1)  892/FFFFFFFFFFFF0882 :                     Video_LoadArt:
(1)  893/FFFFFFFFFFFF0882 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  894/FFFFFFFFFFFF0886 : 2E00                		move.l	d0,d7
(1)  895/FFFFFFFFFFFF0888 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  896/FFFFFFFFFFFF088E : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  897/FFFFFFFFFFFF0894 : 6736                		beq.s	.normal
(1)  898/FFFFFFFFFFFF0896 : 2A00                		move.l	d0,d5
(1)  899/FFFFFFFFFFFF0898 : DA42                		add.w	d2,d5
(1)  900/FFFFFFFFFFFF089A : 6430                		bcc.s	.normal
(1)  901/FFFFFFFFFFFF089C : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  902/FFFFFFFFFFFF089E : 3C01                		move.w	d1,d6
(1)  903/FFFFFFFFFFFF08A0 : 2E05                		move.l	d5,d7		; Top
(1)  904/FFFFFFFFFFFF08A2 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  905/FFFFFFFFFFFF08A8 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  906/FFFFFFFFFFFF08AE : 9E80                		sub.l	d0,d7
(1)  907/FFFFFFFFFFFF08B0 : 6128                		bsr.s	.mk_set
(1)  908/FFFFFFFFFFFF08B2 : 2A00                		move.l	d0,d5		; Bottom
(1)  909/FFFFFFFFFFFF08B4 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  910/FFFFFFFFFFFF08BA : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  911/FFFFFFFFFFFF08C0 : 2C05                		move.l	d5,d6
(1)  912/FFFFFFFFFFFF08C2 : 9C80                		sub.l	d0,d6
(1)  913/FFFFFFFFFFFF08C4 : 3E02                		move.w	d2,d7
(1)  914/FFFFFFFFFFFF08C6 : 9E46                		sub.w	d6,d7
(1)  915/FFFFFFFFFFFF08C8 : DC41                		add.w	d1,d6
(1)  916/FFFFFFFFFFFF08CA : 6006                		bra.s	.last_set
(1)  917/FFFFFFFFFFFF08CC :                     .normal:
(1)  918/FFFFFFFFFFFF08CC : 2A00                		move.l	d0,d5
(1)  919/FFFFFFFFFFFF08CE : 3C01                		move.w	d1,d6
(1)  920/FFFFFFFFFFFF08D0 : 3E02                		move.w	d2,d7
(1)  921/FFFFFFFFFFFF08D2 :                     .last_set:
(1)  922/FFFFFFFFFFFF08D2 : 6106                		bsr.s	.mk_set
(1)  923/FFFFFFFFFFFF08D4 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  924/FFFFFFFFFFFF08D8 : 4E75                		rts
(1)  925/FFFFFFFFFFFF08DA :                     
(1)  926/FFFFFFFFFFFF08DA :                     ; d7 - size
(1)  927/FFFFFFFFFFFF08DA :                     ; d6 - vram
(1)  928/FFFFFFFFFFFF08DA :                     ; d5 - data
(1)  929/FFFFFFFFFFFF08DA :                     .mk_set:
(1)  930/FFFFFFFFFFFF08DA : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  931/FFFFFFFFFFFF08E0 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  932/FFFFFFFFFFFF08E6 : 6778                		beq.s	.bad_size
(1)  933/FFFFFFFFFFFF08E8 : 4846                		swap	d6
(1)  934/FFFFFFFFFFFF08EA : 4845                		swap	d5
(1)  935/FFFFFFFFFFFF08EC : 3C05                		move.w	d5,d6
(1)  936/FFFFFFFFFFFF08EE : 4845                		swap	d5
(1)  938/FFFFFFFFFFFF08F0 : 0246 00F0           		andi.w	#$F0,d6
(1)  939/FFFFFFFFFFFF08F4 : 0C06 0020           		cmpi.b	#$20,d6
(1)  940/FFFFFFFFFFFF08F8 : 660A                		bne.s	.non_wram
(1)  941/FFFFFFFFFFFF08FA : 48E7 0600           		movem.l	d5-d6,-(sp)		; Copy data and vram to stack
(1)  942/FFFFFFFFFFFF08FE : 0685 0000 0002      		addi.l	#2,d5
(1)  943/FFFFFFFFFFFF0904 :                     .non_wram:
(1)  945/FFFFFFFFFFFF0904 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  946/FFFFFFFFFFFF090A : 2F07                		move.l	d7,-(sp)		; <--
(1)  947/FFFFFFFFFFFF090C : 6100 FDCE           		bsr	Video_DmaOn
(1)  948/FFFFFFFFFFFF0910 : 2E1F                		move.l	(sp)+,d7
(1)  949/FFFFFFFFFFFF0912 : 0246 00FF           		andi.w	#$FF,d6
(1)  950/FFFFFFFFFFFF0916 : BC3C 00FF           		cmp.b	#$FF,d6
(1)  951/FFFFFFFFFFFF091A : 6746                		beq.s	.ram_write
(1)  952/FFFFFFFFFFFF091C : 4846                		swap	d6
(1)  953/FFFFFFFFFFFF091E : 6156                		bsr.s	.shared_setup
(1)  954/FFFFFFFFFFFF0920 : 6100 1056           		bsr	System_DmaEnter_ROM
(1)  955/FFFFFFFFFFFF0924 : 3C86                		move.w	d6,(a6)			; First write
(1)  956/FFFFFFFFFFFF0926 : 3C87                		move.w	d7,(a6)			; Second write
(1)  957/FFFFFFFFFFFF0928 : 6100 1052           		bsr	System_DmaExit_ROM
(1)  958/FFFFFFFFFFFF092C : 6100 FDBA           		bsr	Video_DmaOff
(1)  959/FFFFFFFFFFFF0930 :                     	; Word-RAM patch
(1)  961/FFFFFFFFFFFF0930 : 4CDF 0060           		movem.l	(sp)+,d5-d6		; --> Get data as d7
(1)  962/FFFFFFFFFFFF0934 : 0C06 0020           		cmpi.b	#$20,d6			; Word-RAM?
(1)  963/FFFFFFFFFFFF0938 : 6626                		bne.s	.non_wram_l
(1)  964/FFFFFFFFFFFF093A : 4846                		swap	d6
(1)  965/FFFFFFFFFFFF093C : 3E06                		move.w	d6,d7			; Destination
(1)  966/FFFFFFFFFFFF093E : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  967/FFFFFFFFFFFF0944 : 0046 4000           		ori.w	#$4000,d6
(1)  968/FFFFFFFFFFFF0948 : E04F                		lsr.w	#8,d7
(1)  969/FFFFFFFFFFFF094A : EC4F                		lsr.w	#6,d7
(1)  970/FFFFFFFFFFFF094C : 0247 0003           		andi.w	#%11,d7
(1)  971/FFFFFFFFFFFF0950 : 3C86                		move.w	d6,(a6)			; VDP destination
(1)  972/FFFFFFFFFFFF0952 : 3C87                		move.w	d7,(a6)			;
(1)  973/FFFFFFFFFFFF0954 : 2E0E                		move.l	a6,d7
(1)  974/FFFFFFFFFFFF0956 : 2C45                		move.l	d5,a6
(1)  975/FFFFFFFFFFFF0958 : 3C16                		move.w	(a6),d6
(1)  976/FFFFFFFFFFFF095A : 2C47                		move.l	d7,a6
(1)  977/FFFFFFFFFFFF095C : 3D46 FFFC           		move.w	d6,-4(a6)		; DATA port -4
(1)  978/FFFFFFFFFFFF0960 :                     .non_wram_l:
(1)  980/FFFFFFFFFFFF0960 :                     .bad_size:
(1)  981/FFFFFFFFFFFF0960 : 4E75                		rts
(1)  982/FFFFFFFFFFFF0962 :                     
(1)  983/FFFFFFFFFFFF0962 :                     ; --------------------------------------------------------
(1)  984/FFFFFFFFFFFF0962 :                     
(1)  985/FFFFFFFFFFFF0962 :                     .ram_write:
(1)  986/FFFFFFFFFFFF0962 : 4846                		swap	d6
(1)  987/FFFFFFFFFFFF0964 : 6110                		bsr.s	.shared_setup
(1)  988/FFFFFFFFFFFF0966 : 6100 104A           		bsr	System_DmaEnter_RAM
(1)  989/FFFFFFFFFFFF096A : 3C86                		move.w	d6,(a6)			; First write
(1)  990/FFFFFFFFFFFF096C : 3C87                		move.w	d7,(a6)			; Second write
(1)  991/FFFFFFFFFFFF096E : 6100 1046           		bsr	System_DmaExit_RAM
(1)  992/FFFFFFFFFFFF0972 : 6000 FD74           		bra	Video_DmaOff
(1)  993/FFFFFFFFFFFF0976 :                     
(1)  994/FFFFFFFFFFFF0976 :                     ; --------------------------------------------------------
(1)  995/FFFFFFFFFFFF0976 :                     
(1)  996/FFFFFFFFFFFF0976 :                     .shared_setup:
(1)  997/FFFFFFFFFFFF0976 : EF8F                		lsl.l	#7,d7
(1)  998/FFFFFFFFFFFF0978 : E04F                		lsr.w	#8,d7
(1)  999/FFFFFFFFFFFF097A : 0087 9400 9300      		ori.l	#$94009300,d7
(1) 1000/FFFFFFFFFFFF0980 : 2C87                		move.l	d7,(a6)
(1) 1001/FFFFFFFFFFFF0982 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1002/FFFFFFFFFFFF0984 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1) 1003/FFFFFFFFFFFF098A : 1E05                 		move.b	d5,d7
(1) 1004/FFFFFFFFFFFF098C : E08D                 		lsr.l	#8,d5
(1) 1005/FFFFFFFFFFFF098E : 4847                 		swap	d7
(1) 1006/FFFFFFFFFFFF0990 : 1E05                 		move.b	d5,d7
(1) 1007/FFFFFFFFFFFF0992 : 2C87                 		move.l	d7,(a6)
(1) 1008/FFFFFFFFFFFF0994 : 3E3C 9700            		move.w	#$9700,d7
(1) 1009/FFFFFFFFFFFF0998 : E08D                 		lsr.l	#8,d5
(1) 1010/FFFFFFFFFFFF099A : 1E05                 		move.b	d5,d7
(1) 1011/FFFFFFFFFFFF099C : 3C87                 		move.w	d7,(a6)
(1) 1012/FFFFFFFFFFFF099E : 3E06                		move.w	d6,d7			; Destination
(1) 1013/FFFFFFFFFFFF09A0 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1014/FFFFFFFFFFFF09A6 : 0046 4000           		ori.w	#$4000,d6
(1) 1015/FFFFFFFFFFFF09AA : E04F                		lsr.w	#8,d7
(1) 1016/FFFFFFFFFFFF09AC : EC4F                		lsr.w	#6,d7
(1) 1017/FFFFFFFFFFFF09AE : 0247 0003           		andi.w	#%11,d7
(1) 1018/FFFFFFFFFFFF09B2 : 0047 0080           		ori.w	#$80,d7
(1) 1019/FFFFFFFFFFFF09B6 : 4E75                		rts
(1) 1020/FFFFFFFFFFFF09B8 :                     
(1) 1021/FFFFFFFFFFFF09B8 :                     ; --------------------------------------------------------
(1) 1022/FFFFFFFFFFFF09B8 :                     ; Video_LoadArt_List
(1) 1023/FFFFFFFFFFFF09B8 :                     ;
(1) 1024/FFFFFFFFFFFF09B8 :                     ; Loads VDP graphics on bulk
(1) 1025/FFFFFFFFFFFF09B8 :                     ;
(1) 1026/FFFFFFFFFFFF09B8 :                     ; Input:
(1) 1027/FFFFFFFFFFFF09B8 :                     ; a0 | List of graphics to load:
(1) 1028/FFFFFFFFFFFF09B8 :                     ;        dc.w numof_entries
(1) 1029/FFFFFFFFFFFF09B8 :                     ;        dc.l ART_DATA
(1) 1030/FFFFFFFFFFFF09B8 :                     ;        dc.w cell_num(vram_pos)
(1) 1031/FFFFFFFFFFFF09B8 :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_num(size)
(1) 1032/FFFFFFFFFFFF09B8 :                     ;        ; ...more entries
(1) 1033/FFFFFFFFFFFF09B8 :                     ;
(1) 1034/FFFFFFFFFFFF09B8 :                     ; Note:
(1) 1035/FFFFFFFFFFFF09B8 :                     ; CPU heavy.
(1) 1036/FFFFFFFFFFFF09B8 :                     ; --------------------------------------------------------
(1) 1037/FFFFFFFFFFFF09B8 :                     
(1) 1038/FFFFFFFFFFFF09B8 :                     Video_LoadArt_List:
(1) 1039/FFFFFFFFFFFF09B8 : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1040/FFFFFFFFFFFF09BC : 3E18                		move.w	(a0)+,d7
(1) 1041/FFFFFFFFFFFF09BE : 6712                		beq.s	.invalid
(1) 1042/FFFFFFFFFFFF09C0 : 6B10                		bmi.s	.invalid
(1) 1043/FFFFFFFFFFFF09C2 : 5347                		subq.w	#1,d7
(1) 1044/FFFFFFFFFFFF09C4 :                     .next_one:
(1) 1045/FFFFFFFFFFFF09C4 : 2018                		move.l	(a0)+,d0
(1) 1046/FFFFFFFFFFFF09C6 : 3218                		move.w	(a0)+,d1
(1) 1047/FFFFFFFFFFFF09C8 : 3418                		move.w	(a0)+,d2
(1) 1048/FFFFFFFFFFFF09CA : 6100 FEB6           		bsr	Video_LoadArt
(1) 1049/FFFFFFFFFFFF09CE : 51CF FFF4           		dbf	d7,.next_one
(1) 1050/FFFFFFFFFFFF09D2 :                     .invalid:
(1) 1051/FFFFFFFFFFFF09D2 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1052/FFFFFFFFFFFF09D6 : 4E75                		rts
(1) 1053/FFFFFFFFFFFF09D8 :                     
(1) 1054/FFFFFFFFFFFF09D8 :                     ; --------------------------------------------------------
(1) 1055/FFFFFFFFFFFF09D8 :                     ; Video_Fill
(1) 1056/FFFFFFFFFFFF09D8 :                     ;
(1) 1057/FFFFFFFFFFFF09D8 :                     ; Fill data to VRAM
(1) 1058/FFFFFFFFFFFF09D8 :                     ;
(1) 1059/FFFFFFFFFFFF09D8 :                     ; Input:
(1) 1060/FFFFFFFFFFFF09D8 :                     ; d0.b | BYTE to fill
(1) 1061/FFFFFFFFFFFF09D8 :                     ; d1.w | VRAM destination: cell_num(dest)
(1) 1062/FFFFFFFFFFFF09D8 :                     ; d2.w | Size:             cell_num(size)
(1) 1063/FFFFFFFFFFFF09D8 :                     ;
(1) 1064/FFFFFFFFFFFF09D8 :                     ; Notes:
(1) 1065/FFFFFFFFFFFF09D8 :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1066/FFFFFFFFFFFF09D8 :                     ;   invalid.
(1) 1067/FFFFFFFFFFFF09D8 :                     ; --------------------------------------------------------
(1) 1068/FFFFFFFFFFFF09D8 :                     
(1) 1069/FFFFFFFFFFFF09D8 :                     ; Video_Fill_Incr:
(1) 1070/FFFFFFFFFFFF09D8 :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1071/FFFFFFFFFFFF09D8 :                     ; 		move.w	d3,d6
(1) 1072/FFFFFFFFFFFF09D8 :                     ; 		bra.s	vid_FillGo
(1) 1073/FFFFFFFFFFFF09D8 :                     Video_Fill:
(1) 1074/FFFFFFFFFFFF09D8 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1075/FFFFFFFFFFFF09DC : 3C3C 0001           		move.w	#1,d6
(1) 1076/FFFFFFFFFFFF09E0 :                     vid_FillGo:
(1) 1077/FFFFFFFFFFFF09E0 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1078/FFFFFFFFFFFF09E6 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1079/FFFFFFFFFFFF09E8 : 0807 0001           		btst	#bitDma,d7
(1) 1080/FFFFFFFFFFFF09EC : 66F8                		bne.s	.dmaw
(1) 1081/FFFFFFFFFFFF09EE : 6100 FCEC           		bsr	Video_DmaOn
(1) 1082/FFFFFFFFFFFF09F2 : 0246 00FF           		andi.w	#$FF,d6
(1) 1083/FFFFFFFFFFFF09F6 : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1084/FFFFFFFFFFFF09FA : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1085/FFFFFFFFFFFF09FC : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1086/FFFFFFFFFFFF09FE : 0447 0001           		subi.w	#1,d7
(1) 1087/FFFFFFFFFFFF0A02 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1088/FFFFFFFFFFFF0A08 : 1C07                		move.b	d7,d6
(1) 1089/FFFFFFFFFFFF0A0A : 4846                		swap	d6
(1) 1090/FFFFFFFFFFFF0A0C : E04F                		lsr.w	#8,d7
(1) 1091/FFFFFFFFFFFF0A0E : 1C07                		move.b	d7,d6
(1) 1092/FFFFFFFFFFFF0A10 : 4846                		swap	d6
(1) 1093/FFFFFFFFFFFF0A12 : 2C86                		move.l	d6,(a6)
(1) 1094/FFFFFFFFFFFF0A14 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1095/FFFFFFFFFFFF0A18 : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1096/FFFFFFFFFFFF0A1A : 3C01                		move.w	d1,d6
(1) 1097/FFFFFFFFFFFF0A1C : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1098/FFFFFFFFFFFF0A20 : 0046 4000           		ori.w	#$4000,d6
(1) 1099/FFFFFFFFFFFF0A24 : 4846                		swap	d6
(1) 1100/FFFFFFFFFFFF0A26 : 3C07                		move.w	d7,d6
(1) 1101/FFFFFFFFFFFF0A28 : E04E                		lsr.w	#8,d6
(1) 1102/FFFFFFFFFFFF0A2A : EC4E                		lsr.w	#6,d6
(1) 1103/FFFFFFFFFFFF0A2C : 0246 0003           		andi.w	#%11,d6
(1) 1104/FFFFFFFFFFFF0A30 : 0046 0080           		ori.w	#$80,d6
(1) 1105/FFFFFFFFFFFF0A34 : 2C86                		move.l	d6,(a6)
(1) 1106/FFFFFFFFFFFF0A36 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1107/FFFFFFFFFFFF0A3A : 3E16                .dma_w:		move.w	(a6),d7
(1) 1108/FFFFFFFFFFFF0A3C : 0807 0001           		btst	#bitDma,d7
(1) 1109/FFFFFFFFFFFF0A40 : 66F8                		bne.s	.dma_w
(1) 1110/FFFFFFFFFFFF0A42 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1111/FFFFFFFFFFFF0A46 : 6100 FCA0           		bsr	Video_DmaOff
(1) 1112/FFFFFFFFFFFF0A4A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1113/FFFFFFFFFFFF0A4E : 4E75                		rts
(1) 1114/FFFFFFFFFFFF0A50 :                     
(1) 1115/FFFFFFFFFFFF0A50 :                     ; --------------------------------------------------------
(1) 1116/FFFFFFFFFFFF0A50 :                     ; Video_Copy
(1) 1117/FFFFFFFFFFFF0A50 :                     ;
(1) 1118/FFFFFFFFFFFF0A50 :                     ; Copy VRAM data to another location inside VRAM
(1) 1119/FFFFFFFFFFFF0A50 :                     ;
(1) 1120/FFFFFFFFFFFF0A50 :                     ; Input:
(1) 1121/FFFFFFFFFFFF0A50 :                     ; d0.w | VRAM Source: cell_num(src)
(1) 1122/FFFFFFFFFFFF0A50 :                     ; d1.w | VRAM Destination: cell_num(dest)
(1) 1123/FFFFFFFFFFFF0A50 :                     ; d2.w | Size
(1) 1124/FFFFFFFFFFFF0A50 :                     ; --------------------------------------------------------
(1) 1125/FFFFFFFFFFFF0A50 :                     
(1) 1126/FFFFFFFFFFFF0A50 :                     Video_Copy:
(1) 1127/FFFFFFFFFFFF0A50 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1128/FFFFFFFFFFFF0A54 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1129/FFFFFFFFFFFF0A5A : 3E16                .dmaw:		move.w	(a6),d7
(1) 1130/FFFFFFFFFFFF0A5C : 0807 0001           		btst	#bitDma,d7
(1) 1131/FFFFFFFFFFFF0A60 : 66F8                		bne.s	.dmaw
(1) 1132/FFFFFFFFFFFF0A62 : 6100 FC78           		bsr	Video_DmaOn
(1) 1133/FFFFFFFFFFFF0A66 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1134/FFFFFFFFFFFF0A6A : 3E02                		move.w	d2,d7			; SIZE
(1) 1135/FFFFFFFFFFFF0A6C : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1136/FFFFFFFFFFFF0A72 : 1C07                		move.b	d7,d6
(1) 1137/FFFFFFFFFFFF0A74 : 4846                		swap	d6
(1) 1138/FFFFFFFFFFFF0A76 : E04F                		lsr.w	#8,d7
(1) 1139/FFFFFFFFFFFF0A78 : 1C07                		move.b	d7,d6
(1) 1140/FFFFFFFFFFFF0A7A : 4846                		swap	d6
(1) 1141/FFFFFFFFFFFF0A7C : 2C86                		move.l	d6,(a6)
(1) 1142/FFFFFFFFFFFF0A7E : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1143/FFFFFFFFFFFF0A84 : 3E00                		move.w	d0,d7
(1) 1144/FFFFFFFFFFFF0A86 : 1C07                		move.b	d7,d6
(1) 1145/FFFFFFFFFFFF0A88 : 4846                		swap	d6
(1) 1146/FFFFFFFFFFFF0A8A : E04F                		lsr.w	#8,d7
(1) 1147/FFFFFFFFFFFF0A8C : 1C07                		move.b	d7,d6
(1) 1148/FFFFFFFFFFFF0A8E : 2C86                		move.l	d6,(a6)
(1) 1149/FFFFFFFFFFFF0A90 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1150/FFFFFFFFFFFF0A94 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1151/FFFFFFFFFFFF0A96 : 3C07                		move.w	d7,d6
(1) 1152/FFFFFFFFFFFF0A98 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1153/FFFFFFFFFFFF0A9C : 0046 4000           		ori.w	#$4000,d6
(1) 1154/FFFFFFFFFFFF0AA0 : 4846                		swap	d6
(1) 1155/FFFFFFFFFFFF0AA2 : 3C07                		move.w	d7,d6
(1) 1156/FFFFFFFFFFFF0AA4 : E04E                		lsr.w	#8,d6
(1) 1157/FFFFFFFFFFFF0AA6 : EC4E                		lsr.w	#6,d6
(1) 1158/FFFFFFFFFFFF0AA8 : 0246 0003           		andi.w	#%11,d6
(1) 1159/FFFFFFFFFFFF0AAC : 0046 00C0           		ori.w	#$C0,d6
(1) 1160/FFFFFFFFFFFF0AB0 : 2C86                		move.l	d6,(a6)
(1) 1161/FFFFFFFFFFFF0AB2 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1162/FFFFFFFFFFFF0AB6 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1163/FFFFFFFFFFFF0AB8 : 0807 0001           		btst	#bitDma,d7
(1) 1164/FFFFFFFFFFFF0ABC : 66F8                		bne.s	.dma_w
(1) 1165/FFFFFFFFFFFF0ABE : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1166/FFFFFFFFFFFF0AC2 : 6100 FC24           		bsr	Video_DmaOff
(1) 1167/FFFFFFFFFFFF0AC6 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1168/FFFFFFFFFFFF0ACA : 4E75                		rts
(1) 1169/FFFFFFFFFFFF0ACC :                     
(1) 1170/FFFFFFFFFFFF0ACC :                     ; --------------------------------------------------------
(1) 1171/FFFFFFFFFFFF0ACC :                     ; Video_MakeDmaEntry
(1) 1172/FFFFFFFFFFFF0ACC :                     ;
(1) 1173/FFFFFFFFFFFF0ACC :                     ; Makes a new entry to the DMA BLAST list
(1) 1174/FFFFFFFFFFFF0ACC :                     ; to be processed on the next VBlank
(1) 1175/FFFFFFFFFFFF0ACC :                     ;
(1) 1176/FFFFFFFFFFFF0ACC :                     ; Input:
(1) 1177/FFFFFFFFFFFF0ACC :                     ; d0.l | Graphics data location
(1) 1178/FFFFFFFFFFFF0ACC :                     ; d1.w | VRAM location: cell_num(vram_pos)
(1) 1179/FFFFFFFFFFFF0ACC :                     ; d2.w | Size
(1) 1180/FFFFFFFFFFFF0ACC :                     ;
(1) 1181/FFFFFFFFFFFF0ACC :                     ; Notes:
(1) 1182/FFFFFFFFFFFF0ACC :                     ; - Call this during DISPLAY only
(1) 1183/FFFFFFFFFFFF0ACC :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1184/FFFFFFFFFFFF0ACC :                     ;
(1) 1185/FFFFFFFFFFFF0ACC :                     ; * SCD/CD32X ONLY:
(1) 1186/FFFFFFFFFFFF0ACC :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1187/FFFFFFFFFFFF0ACC :                     ;   if not reading from WORD-RAM
(1) 1188/FFFFFFFFFFFF0ACC :                     ; --------------------------------------------------------
(1) 1189/FFFFFFFFFFFF0ACC :                     
(1) 1190/FFFFFFFFFFFF0ACC :                     Video_MakeDmaEntry:
(1) 1191/FFFFFFFFFFFF0ACC : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1192/FFFFFFFFFFFF0AD0 : 2E00                		move.l	d0,d7
(1) 1193/FFFFFFFFFFFF0AD2 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1194/FFFFFFFFFFFF0AD8 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1195/FFFFFFFFFFFF0ADE : 6736                		beq.s	.normal
(1) 1196/FFFFFFFFFFFF0AE0 : 2A00                		move.l	d0,d5
(1) 1197/FFFFFFFFFFFF0AE2 : DA42                		add.w	d2,d5
(1) 1198/FFFFFFFFFFFF0AE4 : 6430                		bcc.s	.normal
(1) 1199/FFFFFFFFFFFF0AE6 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1200/FFFFFFFFFFFF0AE8 : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1201/FFFFFFFFFFFF0AEA : 2E05                		move.l	d5,d7
(1) 1202/FFFFFFFFFFFF0AEC : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1203/FFFFFFFFFFFF0AF2 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1204/FFFFFFFFFFFF0AF8 : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1205/FFFFFFFFFFFF0AFA : 6128                		bsr.s	.mk_set
(1) 1206/FFFFFFFFFFFF0AFC : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1207/FFFFFFFFFFFF0AFE : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1208/FFFFFFFFFFFF0B04 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1209/FFFFFFFFFFFF0B0A : 2C05                		move.l	d5,d6
(1) 1210/FFFFFFFFFFFF0B0C : 9C80                		sub.l	d0,d6
(1) 1211/FFFFFFFFFFFF0B0E : 3E02                		move.w	d2,d7
(1) 1212/FFFFFFFFFFFF0B10 : 9E46                		sub.w	d6,d7
(1) 1213/FFFFFFFFFFFF0B12 : DC41                		add.w	d1,d6
(1) 1214/FFFFFFFFFFFF0B14 : 6006                		bra.s	.last_set
(1) 1215/FFFFFFFFFFFF0B16 :                     .normal:
(1) 1216/FFFFFFFFFFFF0B16 : 2A00                		move.l	d0,d5
(1) 1217/FFFFFFFFFFFF0B18 : 3C01                		move.w	d1,d6
(1) 1218/FFFFFFFFFFFF0B1A : 3E02                		move.w	d2,d7
(1) 1219/FFFFFFFFFFFF0B1C :                     .last_set:
(1) 1220/FFFFFFFFFFFF0B1C : 6106                		bsr.s	.mk_set
(1) 1221/FFFFFFFFFFFF0B1E : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1222/FFFFFFFFFFFF0B22 : 4E75                		rts
(1) 1223/FFFFFFFFFFFF0B24 :                     
(1) 1224/FFFFFFFFFFFF0B24 :                     ; d7 - size
(1) 1225/FFFFFFFFFFFF0B24 :                     ; d6 - vram
(1) 1226/FFFFFFFFFFFF0B24 :                     ; d5 - data
(1) 1227/FFFFFFFFFFFF0B24 :                     .mk_set:
(1) 1228/FFFFFFFFFFFF0B24 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1229/FFFFFFFFFFFF0B2A : 4847                		swap	d7
(1) 1230/FFFFFFFFFFFF0B2C : 3E38 EA6E           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1231/FFFFFFFFFFFF0B30 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1232/FFFFFFFFFFFF0B34 : 6C7A                		bge	.ran_out
(1) 1233/FFFFFFFFFFFF0B36 : E94F                		lsl.w	#4,d7			; Size $10
(1) 1234/FFFFFFFFFFFF0B38 : 4DF8 EA7C           		lea	(RAM_VdpDmaList).w,a6
(1) 1235/FFFFFFFFFFFF0B3C : DCC7                		adda	d7,a6
(1) 1236/FFFFFFFFFFFF0B3E : 4847                		swap	d7
(1) 1237/FFFFFFFFFFFF0B40 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1238/FFFFFFFFFFFF0B46 : 6768                		beq.s	.ran_out		; If == 0, bad
(1) 1239/FFFFFFFFFFFF0B48 : 4A47                		tst.w	d7
(1) 1240/FFFFFFFFFFFF0B4A : 6B64                		bmi.s	.ran_out		; If negative, bad
(1) 1241/FFFFFFFFFFFF0B4C : 31FC 0001 EA70      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1242/FFFFFFFFFFFF0B52 : 5278 EA6E           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1243/FFFFFFFFFFFF0B56 : E24F                		lsr.w	#1,d7
(1) 1244/FFFFFFFFFFFF0B58 : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1246/FFFFFFFFFFFF0B5C : 2F05                  		move.l	d5,-(sp)		; Save TOP point
(1) 1247/FFFFFFFFFFFF0B5E : 2E05                  		move.l	d5,d7
(1) 1248/FFFFFFFFFFFF0B60 : 0287 00F0 0000        		andi.l	#$F00000,d7
(1) 1249/FFFFFFFFFFFF0B66 : 0C87 0020 0000        		cmpi.l	#$200000,d7
(1) 1250/FFFFFFFFFFFF0B6C : 6602                  		bne.s	.not_wram
(1) 1251/FFFFFFFFFFFF0B6E : 5485                  		addq.l	#2,d5			; WORD-RAM patch
(1) 1252/FFFFFFFFFFFF0B70 :                     .not_wram:
(1) 1254/FFFFFFFFFFFF0B70 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1255/FFFFFFFFFFFF0B72 : 2E05                  		move.l	d5,d7
(1) 1256/FFFFFFFFFFFF0B74 : 4847                  		swap	d7
(1) 1257/FFFFFFFFFFFF0B76 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1258/FFFFFFFFFFFF0B7A : 1D47 0009            		move.b	d7,9(a6)
(1) 1259/FFFFFFFFFFFF0B7E : 3E06                		move.w	d6,d7			; Destination
(1) 1260/FFFFFFFFFFFF0B80 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1261/FFFFFFFFFFFF0B86 : 0046 4000           		ori.w	#$4000,d6
(1) 1262/FFFFFFFFFFFF0B8A : E04F                		lsr.w	#8,d7
(1) 1263/FFFFFFFFFFFF0B8C : EC4F                		lsr.w	#6,d7
(1) 1264/FFFFFFFFFFFF0B8E : 0247 0003           		andi.w	#%11,d7
(1) 1265/FFFFFFFFFFFF0B92 : 0047 0080           		ori.w	#$80,d7
(1) 1266/FFFFFFFFFFFF0B96 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1267/FFFFFFFFFFFF0B9A : 3D47 000C           		move.w	d7,$C(a6)
(1) 1269/FFFFFFFFFFFF0B9E : 2E0E                		move.l	a6,d7			; Save a6
(1) 1270/FFFFFFFFFFFF0BA0 : 2C5F                		move.l	(sp)+,a6		; Restore TOP point
(1) 1271/FFFFFFFFFFFF0BA2 : 3C16                		move.w	(a6),d6			; Read the first 4 pixels to d6
(1) 1272/FFFFFFFFFFFF0BA4 : 2C47                		move.l	d7,a6			; Restore a6
(1) 1273/FFFFFFFFFFFF0BA6 : 3D46 000E           		move.w	d6,$E(a6)		; Write pixels copy
(1) 1275/FFFFFFFFFFFF0BAA : 31FC 0000 EA70      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1276/FFFFFFFFFFFF0BB0 :                     .ran_out:
(1) 1277/FFFFFFFFFFFF0BB0 : 4E75                		rts
(1) 1278/FFFFFFFFFFFF0BB2 :                     
(1) 1279/FFFFFFFFFFFF0BB2 :                     ; ====================================================================
(1) 1280/FFFFFFFFFFFF0BB2 :                     ; --------------------------------------------------------
(1) 1281/FFFFFFFFFFFF0BB2 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1282/FFFFFFFFFFFF0BB2 :                     ;
(1) 1283/FFFFFFFFFFFF0BB2 :                     ; Write map data to VDP
(1) 1284/FFFFFFFFFFFF0BB2 :                     ;
(1) 1285/FFFFFFFFFFFF0BB2 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1286/FFFFFFFFFFFF0BB2 :                     ; _LoadMapV: Top to Bottom / Left to Right, double-res safe
(1) 1287/FFFFFFFFFFFF0BB2 :                     ;
(1) 1288/FFFFFFFFFFFF0BB2 :                     ; Input:
(1) 1289/FFFFFFFFFFFF0BB2 :                     ; a0   | Map data
(1) 1290/FFFFFFFFFFFF0BB2 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1291/FFFFFFFFFFFF0BB2 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1292/FFFFFFFFFFFF0BB2 :                     ; d2.l | Screen Width/VRAM location:
(1) 1293/FFFFFFFFFFFF0BB2 :                     ;        splitw(sw_size,vram_map_loc)
(1) 1294/FFFFFFFFFFFF0BB2 :                     ; d3.w | VRAM-cell increment
(1) 1295/FFFFFFFFFFFF0BB2 :                     ;
(1) 1296/FFFFFFFFFFFF0BB2 :                     ; Notes:
(1) 1297/FFFFFFFFFFFF0BB2 :                     ; - Data starts from 0, tile $FFFF(-1) is
(1) 1298/FFFFFFFFFFFF0BB2 :                     ;   used to place the BLANK tile (see SET_NullVram)
(1) 1299/FFFFFFFFFFFF0BB2 :                     ; - SCD/CD32X NOTE:
(1) 1300/FFFFFFFFFFFF0BB2 :                     ;   For making the dot-screen map for
(1) 1301/FFFFFFFFFFFF0BB2 :                     ;   the Stamps use Video_MdMcd_StampDotMap
(1) 1302/FFFFFFFFFFFF0BB2 :                     ; --------------------------------------------------------
(1) 1303/FFFFFFFFFFFF0BB2 :                     
(1) 1304/FFFFFFFFFFFF0BB2 :                     Video_LoadMap:
(1) 1305/FFFFFFFFFFFF0BB2 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1306/FFFFFFFFFFFF0BB6 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1307/FFFFFFFFFFFF0BBC :                     
(1) 1308/FFFFFFFFFFFF0BBC : 2C02                		move.l	d2,d6
(1) 1309/FFFFFFFFFFFF0BBE : 4846                		swap	d6
(1) 1310/FFFFFFFFFFFF0BC0 : 3A00                		move.w	d0,d5
(1) 1311/FFFFFFFFFFFF0BC2 : CAC6                		mulu.w	d6,d5
(1) 1312/FFFFFFFFFFFF0BC4 : 2800                		move.l	d0,d4
(1) 1313/FFFFFFFFFFFF0BC6 : 4844                		swap	d4
(1) 1314/FFFFFFFFFFFF0BC8 : D844                		add.w	d4,d4
(1) 1315/FFFFFFFFFFFF0BCA : DA44                		add.w	d4,d5
(1) 1316/FFFFFFFFFFFF0BCC : 3E02                		move.w	d2,d7
(1) 1317/FFFFFFFFFFFF0BCE : DE45                		add.w	d5,d7
(1) 1318/FFFFFFFFFFFF0BD0 : 7A00                		moveq	#0,d5
(1) 1319/FFFFFFFFFFFF0BD2 : 3A07                		move.w	d7,d5
(1) 1320/FFFFFFFFFFFF0BD4 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1321/FFFFFFFFFFFF0BD8 : 8E7C 4000           		or.w	#$4000,d7
(1) 1322/FFFFFFFFFFFF0BDC : E55D                		rol.w	#2,d5
(1) 1323/FFFFFFFFFFFF0BDE : 0245 0003           		andi.w	#%11,d5
(1) 1324/FFFFFFFFFFFF0BE2 : 4845                		swap	d5
(1) 1325/FFFFFFFFFFFF0BE4 : 2A48                		move.l	a0,a5
(1) 1326/FFFFFFFFFFFF0BE6 : 3801                		move.w	d1,d4
(1) 1327/FFFFFFFFFFFF0BE8 : 5344                		subq.w	#1,d4
(1) 1328/FFFFFFFFFFFF0BEA : 6B36                		bmi.s	.bad_size
(1) 1329/FFFFFFFFFFFF0BEC :                     .y_loop:
(1) 1330/FFFFFFFFFFFF0BEC : 2844                		move.l	d4,a4
(1) 1331/FFFFFFFFFFFF0BEE : 4845                		swap	d5
(1) 1332/FFFFFFFFFFFF0BF0 : 3D47 0004           		move.w	d7,4(a6)
(1) 1333/FFFFFFFFFFFF0BF4 : 3D45 0004           		move.w	d5,4(a6)
(1) 1334/FFFFFFFFFFFF0BF8 : 4845                		swap	d5
(1) 1335/FFFFFFFFFFFF0BFA : 2801                		move.l	d1,d4
(1) 1336/FFFFFFFFFFFF0BFC : 4844                		swap	d4
(1) 1337/FFFFFFFFFFFF0BFE : 5344                		subq.w	#1,d4
(1) 1338/FFFFFFFFFFFF0C00 :                     .x_loop:
(1) 1339/FFFFFFFFFFFF0C00 : 4844                		swap	d4
(1) 1340/FFFFFFFFFFFF0C02 : 381D                		move.w	(a5)+,d4
(1) 1341/FFFFFFFFFFFF0C04 : B87C FFFF           		cmp.w	#-1,d4
(1) 1342/FFFFFFFFFFFF0C08 : 6606                		bne.s	.non_blank
(1) 1343/FFFFFFFFFFFF0C0A : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1344/FFFFFFFFFFFF0C0E : 6002                		bra.s	.mk_cell
(1) 1345/FFFFFFFFFFFF0C10 :                     .non_blank:
(1) 1346/FFFFFFFFFFFF0C10 : D843                		add.w	d3,d4
(1) 1347/FFFFFFFFFFFF0C12 :                     .mk_cell:
(1) 1348/FFFFFFFFFFFF0C12 : 3C84                		move.w	d4,(a6)
(1) 1349/FFFFFFFFFFFF0C14 : 4844                		swap	d4
(1) 1350/FFFFFFFFFFFF0C16 : 51CC FFE8           		dbf	d4,.x_loop
(1) 1351/FFFFFFFFFFFF0C1A : DE46                		add.w	d6,d7
(1) 1352/FFFFFFFFFFFF0C1C : 280C                		move.l	a4,d4
(1) 1353/FFFFFFFFFFFF0C1E : 51CC FFCC           		dbf	d4,.y_loop
(1) 1354/FFFFFFFFFFFF0C22 :                     .bad_size:
(1) 1355/FFFFFFFFFFFF0C22 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1356/FFFFFFFFFFFF0C26 : 4E75                		rts
(1) 1357/FFFFFFFFFFFF0C28 :                     
(1) 1358/FFFFFFFFFFFF0C28 :                     ; ------------------------------------------------
(1) 1359/FFFFFFFFFFFF0C28 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1360/FFFFFFFFFFFF0C28 :                     ; d2.l | Screen Width/VRAM location:
(1) 1361/FFFFFFFFFFFF0C28 :                     ; d3.w | VRAM-cell increment
(1) 1362/FFFFFFFFFFFF0C28 :                     
(1) 1363/FFFFFFFFFFFF0C28 :                     Video_LoadMapV:
(1) 1364/FFFFFFFFFFFF0C28 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1365/FFFFFFFFFFFF0C2C : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1366/FFFFFFFFFFFF0C32 : 2C02                		move.l	d2,d6
(1) 1367/FFFFFFFFFFFF0C34 : 4846                		swap	d6
(1) 1368/FFFFFFFFFFFF0C36 : 3A00                		move.w	d0,d5
(1) 1369/FFFFFFFFFFFF0C38 : CAC6                		mulu.w	d6,d5
(1) 1370/FFFFFFFFFFFF0C3A : 2800                		move.l	d0,d4
(1) 1371/FFFFFFFFFFFF0C3C : 4844                		swap	d4
(1) 1372/FFFFFFFFFFFF0C3E : D844                		add.w	d4,d4
(1) 1373/FFFFFFFFFFFF0C40 : DA44                		add.w	d4,d5
(1) 1374/FFFFFFFFFFFF0C42 : 3E02                		move.w	d2,d7
(1) 1375/FFFFFFFFFFFF0C44 : DE45                		add.w	d5,d7
(1) 1376/FFFFFFFFFFFF0C46 : 7A00                		moveq	#0,d5
(1) 1377/FFFFFFFFFFFF0C48 : 3A07                		move.w	d7,d5
(1) 1378/FFFFFFFFFFFF0C4A : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1379/FFFFFFFFFFFF0C4E : 8E7C 4000           		or.w	#$4000,d7
(1) 1380/FFFFFFFFFFFF0C52 : E55D                		rol.w	#2,d5
(1) 1381/FFFFFFFFFFFF0C54 : 0245 0003           		andi.w	#%11,d5
(1) 1382/FFFFFFFFFFFF0C58 : 4845                		swap	d5
(1) 1383/FFFFFFFFFFFF0C5A : 2A48                		move.l	a0,a5
(1) 1384/FFFFFFFFFFFF0C5C : 0838 0002 EC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1385/FFFFFFFFFFFF0C62 : 664C                		bne.s	.dble_mode
(1) 1386/FFFFFFFFFFFF0C64 : 2801                		move.l	d1,d4
(1) 1387/FFFFFFFFFFFF0C66 : 4844                		swap	d4
(1) 1388/FFFFFFFFFFFF0C68 : 5344                		subq.w	#1,d4
(1) 1389/FFFFFFFFFFFF0C6A : 6B3E                		bmi.s	.bad_size
(1) 1390/FFFFFFFFFFFF0C6C :                     .x_loop:
(1) 1391/FFFFFFFFFFFF0C6C : 2844                		move.l	d4,a4
(1) 1392/FFFFFFFFFFFF0C6E : 3801                		move.w	d1,d4
(1) 1393/FFFFFFFFFFFF0C70 : 5344                		subq.w	#1,d4
(1) 1394/FFFFFFFFFFFF0C72 :                     .y_loop:
(1) 1395/FFFFFFFFFFFF0C72 : 4844                		swap	d4
(1) 1396/FFFFFFFFFFFF0C74 : 3807                		move.w	d7,d4
(1) 1397/FFFFFFFFFFFF0C76 : D845                		add.w	d5,d4
(1) 1398/FFFFFFFFFFFF0C78 : 4845                		swap	d5
(1) 1399/FFFFFFFFFFFF0C7A : 3D44 0004           		move.w	d4,4(a6)
(1) 1400/FFFFFFFFFFFF0C7E : 3D45 0004           		move.w	d5,4(a6)
(1) 1401/FFFFFFFFFFFF0C82 : 4845                		swap	d5
(1) 1402/FFFFFFFFFFFF0C84 : 381D                		move.w	(a5)+,d4
(1) 1403/FFFFFFFFFFFF0C86 : B87C FFFF           		cmp.w	#-1,d4
(1) 1404/FFFFFFFFFFFF0C8A : 6606                		bne.s	.non_blank
(1) 1405/FFFFFFFFFFFF0C8C : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1406/FFFFFFFFFFFF0C90 : 6002                		bra.s	.mk_cell
(1) 1407/FFFFFFFFFFFF0C92 :                     .non_blank:
(1) 1408/FFFFFFFFFFFF0C92 : D843                		add.w	d3,d4
(1) 1409/FFFFFFFFFFFF0C94 :                     .mk_cell:
(1) 1410/FFFFFFFFFFFF0C94 : 3C84                		move.w	d4,(a6)
(1) 1411/FFFFFFFFFFFF0C96 : DA46                		add.w	d6,d5
(1) 1412/FFFFFFFFFFFF0C98 : 4844                		swap	d4
(1) 1413/FFFFFFFFFFFF0C9A : 51CC FFD6           		dbf	d4,.y_loop
(1) 1414/FFFFFFFFFFFF0C9E : DE7C 0002           		add.w	#2,d7
(1) 1415/FFFFFFFFFFFF0CA2 : 4245                		clr.w	d5
(1) 1416/FFFFFFFFFFFF0CA4 : 280C                		move.l	a4,d4
(1) 1417/FFFFFFFFFFFF0CA6 : 51CC FFC4           		dbf	d4,.x_loop
(1) 1418/FFFFFFFFFFFF0CAA :                     .bad_size:
(1) 1419/FFFFFFFFFFFF0CAA : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1420/FFFFFFFFFFFF0CAE : 4E75                		rts
(1) 1421/FFFFFFFFFFFF0CB0 :                     
(1) 1422/FFFFFFFFFFFF0CB0 :                     ; ------------------------------------------------
(1) 1423/FFFFFFFFFFFF0CB0 :                     
(1) 1424/FFFFFFFFFFFF0CB0 :                     .dble_mode:
(1) 1425/FFFFFFFFFFFF0CB0 : 2F01                		move.l	d1,-(sp)
(1) 1426/FFFFFFFFFFFF0CB2 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1427/FFFFFFFFFFFF0CB4 : 3803                		move.w	d3,d4
(1) 1428/FFFFFFFFFFFF0CB6 : 0244 F800           		andi.w	#$F800,d4
(1) 1429/FFFFFFFFFFFF0CBA : 0243 07FF           		andi.w	#$7FF,d3
(1) 1430/FFFFFFFFFFFF0CBE : E24B                		lsr.w	#1,d3
(1) 1431/FFFFFFFFFFFF0CC0 : 8644                		or.w	d4,d3
(1) 1432/FFFFFFFFFFFF0CC2 : 2801                		move.l	d1,d4
(1) 1433/FFFFFFFFFFFF0CC4 : 4844                		swap	d4
(1) 1434/FFFFFFFFFFFF0CC6 : 5344                		subq.w	#1,d4
(1) 1435/FFFFFFFFFFFF0CC8 : 6B48                		bmi.s	.bad_size_d
(1) 1436/FFFFFFFFFFFF0CCA :                     .x_loop_d:
(1) 1437/FFFFFFFFFFFF0CCA : 2844                		move.l	d4,a4
(1) 1438/FFFFFFFFFFFF0CCC : 3801                		move.w	d1,d4
(1) 1439/FFFFFFFFFFFF0CCE : 5344                		subq.w	#1,d4
(1) 1440/FFFFFFFFFFFF0CD0 :                     .y_loop_d:
(1) 1441/FFFFFFFFFFFF0CD0 : 4844                		swap	d4
(1) 1442/FFFFFFFFFFFF0CD2 : 3807                		move.w	d7,d4
(1) 1443/FFFFFFFFFFFF0CD4 : D845                		add.w	d5,d4
(1) 1444/FFFFFFFFFFFF0CD6 : 4845                		swap	d5
(1) 1445/FFFFFFFFFFFF0CD8 : 3D44 0004           		move.w	d4,4(a6)
(1) 1446/FFFFFFFFFFFF0CDC : 3D45 0004           		move.w	d5,4(a6)
(1) 1447/FFFFFFFFFFFF0CE0 : 4845                		swap	d5
(1) 1448/FFFFFFFFFFFF0CE2 : 381D                		move.w	(a5)+,d4
(1) 1449/FFFFFFFFFFFF0CE4 : DAFC 0002           		adda	#2,a5
(1) 1450/FFFFFFFFFFFF0CE8 : B87C FFFF           		cmp.w	#-1,d4
(1) 1451/FFFFFFFFFFFF0CEC : 6606                		bne.s	.non_blank_d
(1) 1452/FFFFFFFFFFFF0CEE : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1453/FFFFFFFFFFFF0CF2 : 6008                		bra.s	.mk_cell_d
(1) 1454/FFFFFFFFFFFF0CF4 :                     .non_blank_d:
(1) 1455/FFFFFFFFFFFF0CF4 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1456/FFFFFFFFFFFF0CF8 : E24C                		lsr.w	#1,d4
(1) 1457/FFFFFFFFFFFF0CFA : D843                		add.w	d3,d4
(1) 1458/FFFFFFFFFFFF0CFC :                     .mk_cell_d:
(1) 1459/FFFFFFFFFFFF0CFC : 3C84                		move.w	d4,(a6)
(1) 1460/FFFFFFFFFFFF0CFE : DA46                		add.w	d6,d5
(1) 1461/FFFFFFFFFFFF0D00 : 4844                		swap	d4
(1) 1462/FFFFFFFFFFFF0D02 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1463/FFFFFFFFFFFF0D06 : DE7C 0002           		add.w	#2,d7
(1) 1464/FFFFFFFFFFFF0D0A : 4245                		clr.w	d5
(1) 1465/FFFFFFFFFFFF0D0C : 280C                		move.l	a4,d4
(1) 1466/FFFFFFFFFFFF0D0E : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1467/FFFFFFFFFFFF0D12 :                     .bad_size_d:
(1) 1468/FFFFFFFFFFFF0D12 : 221F                		move.l	(sp)+,d1
(1) 1469/FFFFFFFFFFFF0D14 : 6094                		bra	.bad_size
(1) 1470/FFFFFFFFFFFF0D16 :                     
(1) 1471/FFFFFFFFFFFF0D16 :                     ; ====================================================================
(1) 1472/FFFFFFFFFFFF0D16 :                     ; ----------------------------------------------------------------
(1) 1473/FFFFFFFFFFFF0D16 :                     ; Palette fading section
(1) 1474/FFFFFFFFFFFF0D16 :                     ; ----------------------------------------------------------------
(1) 1475/FFFFFFFFFFFF0D16 :                     
(1) 1476/FFFFFFFFFFFF0D16 :                     ; --------------------------------------------------------
(1) 1477/FFFFFFFFFFFF0D16 :                     ; Video_RunFade
(1) 1478/FFFFFFFFFFFF0D16 :                     ;
(1) 1479/FFFFFFFFFFFF0D16 :                     ; Process Palette changes (fade and effects)
(1) 1480/FFFFFFFFFFFF0D16 :                     ; --------------------------------------------------------
(1) 1481/FFFFFFFFFFFF0D16 :                     
(1) 1482/FFFFFFFFFFFF0D16 :                     Video_RunFade:
(1) 1483/FFFFFFFFFFFF0D16 : 4DF8 DC1E           		lea	(RAM_PalFadeList).w,a6
(1) 1484/FFFFFFFFFFFF0D1A :                     .next_req:
(1) 1485/FFFFFFFFFFFF0D1A : 1016                		move.b	palfd_req(a6),d0
(1) 1486/FFFFFFFFFFFF0D1C : 6744                		beq.s	.no_req
(1) 1487/FFFFFFFFFFFF0D1E : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1488/FFFFFFFFFFFF0D22 : 6A38                		bpl.s	.busy_timer
(1) 1489/FFFFFFFFFFFF0D24 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1490/FFFFFFFFFFFF0D2A : 4BF8 E96E           		lea	(RAM_Palette).w,a5
(1) 1491/FFFFFFFFFFFF0D2E : 49F8 E9EE           		lea	(RAM_PaletteFade).w,a4
(1) 1492/FFFFFFFFFFFF0D32 : 7E00                		moveq	#0,d7
(1) 1493/FFFFFFFFFFFF0D34 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1494/FFFFFFFFFFFF0D38 : DE47                		add.w	d7,d7
(1) 1495/FFFFFFFFFFFF0D3A : DAC7                		adda	d7,a5
(1) 1496/FFFFFFFFFFFF0D3C : D8C7                		adda	d7,a4
(1) 1497/FFFFFFFFFFFF0D3E : 7C00                		moveq	#0,d6
(1) 1498/FFFFFFFFFFFF0D40 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1499/FFFFFFFFFFFF0D44 : 6716                		beq.s	.busy_timer
(1) 1500/FFFFFFFFFFFF0D46 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1501/FFFFFFFFFFFF0D4A : DC46                		add.w	d6,d6		; * 2
(1) 1502/FFFFFFFFFFFF0D4C : 5347                		subq.w	#1,d7
(1) 1503/FFFFFFFFFFFF0D4E : 0240 00FF           		andi.w	#$FF,d0
(1) 1504/FFFFFFFFFFFF0D52 : D040                		add.w	d0,d0
(1) 1505/FFFFFFFFFFFF0D54 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1506/FFFFFFFFFFFF0D58 : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1507/FFFFFFFFFFFF0D5C :                     .busy_timer:
(1) 1508/FFFFFFFFFFFF0D5C : DCFC 0008           		adda	#palfd_len,a6
(1) 1509/FFFFFFFFFFFF0D60 : 60B8                		bra.s	.next_req
(1) 1510/FFFFFFFFFFFF0D62 :                     .no_req:
(1) 1511/FFFFFFFFFFFF0D62 : 4278 EC00           		clr.w	(RAM_IndxPalFade).w
(1) 1512/FFFFFFFFFFFF0D66 : 4E75                		rts
(1) 1513/FFFFFFFFFFFF0D68 :                     
(1) 1514/FFFFFFFFFFFF0D68 :                     ; ------------------------------------------------
(1) 1515/FFFFFFFFFFFF0D68 :                     
(1) 1516/FFFFFFFFFFFF0D68 :                     .fade_list:
(1) 1517/FFFFFFFFFFFF0D68 : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1518/FFFFFFFFFFFF0D6A : 0018                		dc.w .fade_out-.fade_list
(1) 1519/FFFFFFFFFFFF0D6C : 0088                		dc.w .fade_in-.fade_list
(1) 1520/FFFFFFFFFFFF0D6E : 0010                		dc.w .nothing-.fade_list
(1) 1521/FFFFFFFFFFFF0D70 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1522/FFFFFFFFFFFF0D72 : 0010                		dc.w .nothing-.fade_list
(1) 1523/FFFFFFFFFFFF0D74 : 0010                		dc.w .nothing-.fade_list
(1) 1524/FFFFFFFFFFFF0D76 : 0010                		dc.w .nothing-.fade_list
(1) 1525/FFFFFFFFFFFF0D78 :                     
(1) 1526/FFFFFFFFFFFF0D78 :                     ; ----------------------------------------------------
(1) 1527/FFFFFFFFFFFF0D78 :                     ; Fade request $00: Null/exit.
(1) 1528/FFFFFFFFFFFF0D78 :                     ; ----------------------------------------------------
(1) 1529/FFFFFFFFFFFF0D78 :                     
(1) 1530/FFFFFFFFFFFF0D78 :                     .nothing:
(1) 1531/FFFFFFFFFFFF0D78 :                     .pfade_del:
(1) 1532/FFFFFFFFFFFF0D78 : 4216                		clr.b	palfd_req(a6)
(1) 1533/FFFFFFFFFFFF0D7A : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1534/FFFFFFFFFFFF0D7E : 4E75                		rts
(1) 1535/FFFFFFFFFFFF0D80 :                     
(1) 1536/FFFFFFFFFFFF0D80 :                     ; ----------------------------------------------------
(1) 1537/FFFFFFFFFFFF0D80 :                     ; Fade request $01: fade-out to black
(1) 1538/FFFFFFFFFFFF0D80 :                     ; Quick.
(1) 1539/FFFFFFFFFFFF0D80 :                     ;
(1) 1540/FFFFFFFFFFFF0D80 :                     ; d7 - Num colors
(1) 1541/FFFFFFFFFFFF0D80 :                     ; d6 - Increment*2
(1) 1542/FFFFFFFFFFFF0D80 :                     ; ----------------------------------------------------
(1) 1543/FFFFFFFFFFFF0D80 :                     
(1) 1544/FFFFFFFFFFFF0D80 :                     .fade_out:
(1) 1545/FFFFFFFFFFFF0D80 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1546/FFFFFFFFFFFF0D84 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1547/FFFFFFFFFFFF0D88 : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1548/FFFFFFFFFFFF0D8C : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1549/FFFFFFFFFFFF0D8E :                     .next_color:
(1) 1550/FFFFFFFFFFFF0D8E : 3015                		move.w	(a5),d0
(1) 1551/FFFFFFFFFFFF0D90 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1552/FFFFFFFFFFFF0D92 :                     	rept 3
(1) 1553/FFFFFFFFFFFF0D92 :                     		move.w	d0,d1
(1) 1554/FFFFFFFFFFFF0D92 :                     		and.w	d5,d1			; Filter TARGET
(1) 1555/FFFFFFFFFFFF0D92 :                     		beq.s	.no_chng
(1) 1556/FFFFFFFFFFFF0D92 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1557/FFFFFFFFFFFF0D92 :                     		sub.w	d6,d1
(1) 1558/FFFFFFFFFFFF0D92 :                     		bpl.s	.blck_alrdy
(1) 1559/FFFFFFFFFFFF0D92 :                     		clr.w	d1
(1) 1560/FFFFFFFFFFFF0D92 :                     .blck_alrdy:
(1) 1561/FFFFFFFFFFFF0D92 :                     		addq.w	#1,d3			; Color changed
(1) 1562/FFFFFFFFFFFF0D92 :                     .no_chng:
(1) 1563/FFFFFFFFFFFF0D92 :                     		or.w	d1,d0
(1) 1564/FFFFFFFFFFFF0D92 :                     		rol.w	#4,d6			; next << color
(1) 1565/FFFFFFFFFFFF0D92 :                     		rol.w	#4,d5
(1) 1566/FFFFFFFFFFFF0D92 :                     		rol.w	#4,d4
(1) 1567/FFFFFFFFFFFF0D92 :                     	endm
(1) 1553/FFFFFFFFFFFF0D92 : 3200                		move.w	d0,d1
(1) 1554/FFFFFFFFFFFF0D94 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1555/FFFFFFFFFFFF0D96 : 670A                		beq.s	.no_chng
(1) 1556/FFFFFFFFFFFF0D98 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1557/FFFFFFFFFFFF0D9A : 9246                		sub.w	d6,d1
(1) 1558/FFFFFFFFFFFF0D9C : 6A02                		bpl.s	.blck_alrdy
(1) 1559/FFFFFFFFFFFF0D9E : 4241                		clr.w	d1
(1) 1560/FFFFFFFFFFFF0DA0 :                     .blck_alrdy:
(1) 1561/FFFFFFFFFFFF0DA0 : 5243                		addq.w	#1,d3			; Color changed
(1) 1562/FFFFFFFFFFFF0DA2 :                     .no_chng:
(1) 1563/FFFFFFFFFFFF0DA2 : 8041                		or.w	d1,d0
(1) 1564/FFFFFFFFFFFF0DA4 : E95E                		rol.w	#4,d6			; next << color
(1) 1565/FFFFFFFFFFFF0DA6 : E95D                		rol.w	#4,d5
(1) 1566/FFFFFFFFFFFF0DA8 : E95C                		rol.w	#4,d4
(1) 1553/FFFFFFFFFFFF0DAA : 3200                		move.w	d0,d1
(1) 1554/FFFFFFFFFFFF0DAC : C245                		and.w	d5,d1			; Filter TARGET
(1) 1555/FFFFFFFFFFFF0DAE : 670A                		beq.s	.no_chng
(1) 1556/FFFFFFFFFFFF0DB0 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1557/FFFFFFFFFFFF0DB2 : 9246                		sub.w	d6,d1
(1) 1558/FFFFFFFFFFFF0DB4 : 6A02                		bpl.s	.blck_alrdy
(1) 1559/FFFFFFFFFFFF0DB6 : 4241                		clr.w	d1
(1) 1560/FFFFFFFFFFFF0DB8 :                     .blck_alrdy:
(1) 1561/FFFFFFFFFFFF0DB8 : 5243                		addq.w	#1,d3			; Color changed
(1) 1562/FFFFFFFFFFFF0DBA :                     .no_chng:
(1) 1563/FFFFFFFFFFFF0DBA : 8041                		or.w	d1,d0
(1) 1564/FFFFFFFFFFFF0DBC : E95E                		rol.w	#4,d6			; next << color
(1) 1565/FFFFFFFFFFFF0DBE : E95D                		rol.w	#4,d5
(1) 1566/FFFFFFFFFFFF0DC0 : E95C                		rol.w	#4,d4
(1) 1553/FFFFFFFFFFFF0DC2 : 3200                		move.w	d0,d1
(1) 1554/FFFFFFFFFFFF0DC4 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1555/FFFFFFFFFFFF0DC6 : 670A                		beq.s	.no_chng
(1) 1556/FFFFFFFFFFFF0DC8 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1557/FFFFFFFFFFFF0DCA : 9246                		sub.w	d6,d1
(1) 1558/FFFFFFFFFFFF0DCC : 6A02                		bpl.s	.blck_alrdy
(1) 1559/FFFFFFFFFFFF0DCE : 4241                		clr.w	d1
(1) 1560/FFFFFFFFFFFF0DD0 :                     .blck_alrdy:
(1) 1561/FFFFFFFFFFFF0DD0 : 5243                		addq.w	#1,d3			; Color changed
(1) 1562/FFFFFFFFFFFF0DD2 :                     .no_chng:
(1) 1563/FFFFFFFFFFFF0DD2 : 8041                		or.w	d1,d0
(1) 1564/FFFFFFFFFFFF0DD4 : E95E                		rol.w	#4,d6			; next << color
(1) 1565/FFFFFFFFFFFF0DD6 : E95D                		rol.w	#4,d5
(1) 1566/FFFFFFFFFFFF0DD8 : E95C                		rol.w	#4,d4
(1) 1568/FFFFFFFFFFFF0DDA :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1569/FFFFFFFFFFFF0DDA : E95E                		rol.w	#4,d6
(1) 1570/FFFFFFFFFFFF0DDC : E95D                		rol.w	#4,d5
(1) 1571/FFFFFFFFFFFF0DDE : E95C                		rol.w	#4,d4
(1) 1572/FFFFFFFFFFFF0DE0 : 3A80                		move.w	d0,(a5)
(1) 1573/FFFFFFFFFFFF0DE2 :                     .all_black:
(1) 1574/FFFFFFFFFFFF0DE2 : DAFC 0002           		adda	#2,a5
(1) 1575/FFFFFFFFFFFF0DE6 : 51CF FFA6           		dbf	d7,.next_color
(1) 1576/FFFFFFFFFFFF0DEA : 4A43                		tst.w	d3
(1) 1577/FFFFFFFFFFFF0DEC : 678A                		beq	.pfade_del
(1) 1578/FFFFFFFFFFFF0DEE :                     .fdout_nend:
(1) 1579/FFFFFFFFFFFF0DEE : 4E75                		rts
(1) 1580/FFFFFFFFFFFF0DF0 :                     
(1) 1581/FFFFFFFFFFFF0DF0 :                     ; ----------------------------------------------------
(1) 1582/FFFFFFFFFFFF0DF0 :                     ; Fade request $02
(1) 1583/FFFFFFFFFFFF0DF0 :                     ; Fade-in
(1) 1584/FFFFFFFFFFFF0DF0 :                     ; ----------------------------------------------------
(1) 1585/FFFFFFFFFFFF0DF0 :                     
(1) 1586/FFFFFFFFFFFF0DF0 :                     .fade_in:
(1) 1587/FFFFFFFFFFFF0DF0 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1588/FFFFFFFFFFFF0DF4 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1589/FFFFFFFFFFFF0DF8 : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1590/FFFFFFFFFFFF0DFC :                     .next_in:
(1) 1591/FFFFFFFFFFFF0DFC : 4847                		swap	d7
(1) 1592/FFFFFFFFFFFF0DFE : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1593/FFFFFFFFFFFF0E00 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1594/FFFFFFFFFFFF0E02 : C044                		and.w	d4,d0
(1) 1595/FFFFFFFFFFFF0E04 : C444                		and.w	d4,d2
(1) 1596/FFFFFFFFFFFF0E06 : B042                		cmp.w	d2,d0
(1) 1597/FFFFFFFFFFFF0E08 : 6766                		beq.s	.same_in
(1) 1598/FFFFFFFFFFFF0E0A :                     	rept 3
(1) 1599/FFFFFFFFFFFF0E0A :                     		move.w	d0,d1
(1) 1600/FFFFFFFFFFFF0E0A :                     		move.w	d4,d3
(1) 1601/FFFFFFFFFFFF0E0A :                     		eor.w	d5,d3
(1) 1602/FFFFFFFFFFFF0E0A :                     		and.w	d3,d0
(1) 1603/FFFFFFFFFFFF0E0A :                     		move.w	d2,d3
(1) 1604/FFFFFFFFFFFF0E0A :                     		and.w	d5,d1		; filter CURRENT color
(1) 1605/FFFFFFFFFFFF0E0A :                     		and.w	d5,d3		; filter TARGET color
(1) 1606/FFFFFFFFFFFF0E0A :                     
(1) 1607/FFFFFFFFFFFF0E0A :                     		add.w	d6,d1		; ADD to current
(1) 1608/FFFFFFFFFFFF0E0A :                     		cmp.w	d3,d1
(1) 1609/FFFFFFFFFFFF0E0A :                     		bcs.s	.max_out
(1) 1610/FFFFFFFFFFFF0E0A :                     		move.w	d2,d1
(1) 1611/FFFFFFFFFFFF0E0A :                     		and.w	d5,d1
(1) 1612/FFFFFFFFFFFF0E0A :                     .max_out:
(1) 1613/FFFFFFFFFFFF0E0A :                     		addq.w	#1,d7
(1) 1614/FFFFFFFFFFFF0E0A :                     		or.w	d1,d0
(1) 1615/FFFFFFFFFFFF0E0A :                     		rol.w	#4,d6		; next << color
(1) 1616/FFFFFFFFFFFF0E0A :                     		rol.w	#4,d5
(1) 1617/FFFFFFFFFFFF0E0A :                     	endm
(1) 1599/FFFFFFFFFFFF0E0A : 3200                		move.w	d0,d1
(1) 1600/FFFFFFFFFFFF0E0C : 3604                		move.w	d4,d3
(1) 1601/FFFFFFFFFFFF0E0E : BB43                		eor.w	d5,d3
(1) 1602/FFFFFFFFFFFF0E10 : C043                		and.w	d3,d0
(1) 1603/FFFFFFFFFFFF0E12 : 3602                		move.w	d2,d3
(1) 1604/FFFFFFFFFFFF0E14 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1605/FFFFFFFFFFFF0E16 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1606/FFFFFFFFFFFF0E18 :                     
(1) 1607/FFFFFFFFFFFF0E18 : D246                		add.w	d6,d1		; ADD to current
(1) 1608/FFFFFFFFFFFF0E1A : B243                		cmp.w	d3,d1
(1) 1609/FFFFFFFFFFFF0E1C : 6504                		bcs.s	.max_out
(1) 1610/FFFFFFFFFFFF0E1E : 3202                		move.w	d2,d1
(1) 1611/FFFFFFFFFFFF0E20 : C245                		and.w	d5,d1
(1) 1612/FFFFFFFFFFFF0E22 :                     .max_out:
(1) 1613/FFFFFFFFFFFF0E22 : 5247                		addq.w	#1,d7
(1) 1614/FFFFFFFFFFFF0E24 : 8041                		or.w	d1,d0
(1) 1615/FFFFFFFFFFFF0E26 : E95E                		rol.w	#4,d6		; next << color
(1) 1616/FFFFFFFFFFFF0E28 : E95D                		rol.w	#4,d5
(1) 1599/FFFFFFFFFFFF0E2A : 3200                		move.w	d0,d1
(1) 1600/FFFFFFFFFFFF0E2C : 3604                		move.w	d4,d3
(1) 1601/FFFFFFFFFFFF0E2E : BB43                		eor.w	d5,d3
(1) 1602/FFFFFFFFFFFF0E30 : C043                		and.w	d3,d0
(1) 1603/FFFFFFFFFFFF0E32 : 3602                		move.w	d2,d3
(1) 1604/FFFFFFFFFFFF0E34 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1605/FFFFFFFFFFFF0E36 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1606/FFFFFFFFFFFF0E38 :                     
(1) 1607/FFFFFFFFFFFF0E38 : D246                		add.w	d6,d1		; ADD to current
(1) 1608/FFFFFFFFFFFF0E3A : B243                		cmp.w	d3,d1
(1) 1609/FFFFFFFFFFFF0E3C : 6504                		bcs.s	.max_out
(1) 1610/FFFFFFFFFFFF0E3E : 3202                		move.w	d2,d1
(1) 1611/FFFFFFFFFFFF0E40 : C245                		and.w	d5,d1
(1) 1612/FFFFFFFFFFFF0E42 :                     .max_out:
(1) 1613/FFFFFFFFFFFF0E42 : 5247                		addq.w	#1,d7
(1) 1614/FFFFFFFFFFFF0E44 : 8041                		or.w	d1,d0
(1) 1615/FFFFFFFFFFFF0E46 : E95E                		rol.w	#4,d6		; next << color
(1) 1616/FFFFFFFFFFFF0E48 : E95D                		rol.w	#4,d5
(1) 1599/FFFFFFFFFFFF0E4A : 3200                		move.w	d0,d1
(1) 1600/FFFFFFFFFFFF0E4C : 3604                		move.w	d4,d3
(1) 1601/FFFFFFFFFFFF0E4E : BB43                		eor.w	d5,d3
(1) 1602/FFFFFFFFFFFF0E50 : C043                		and.w	d3,d0
(1) 1603/FFFFFFFFFFFF0E52 : 3602                		move.w	d2,d3
(1) 1604/FFFFFFFFFFFF0E54 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1605/FFFFFFFFFFFF0E56 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1606/FFFFFFFFFFFF0E58 :                     
(1) 1607/FFFFFFFFFFFF0E58 : D246                		add.w	d6,d1		; ADD to current
(1) 1608/FFFFFFFFFFFF0E5A : B243                		cmp.w	d3,d1
(1) 1609/FFFFFFFFFFFF0E5C : 6504                		bcs.s	.max_out
(1) 1610/FFFFFFFFFFFF0E5E : 3202                		move.w	d2,d1
(1) 1611/FFFFFFFFFFFF0E60 : C245                		and.w	d5,d1
(1) 1612/FFFFFFFFFFFF0E62 :                     .max_out:
(1) 1613/FFFFFFFFFFFF0E62 : 5247                		addq.w	#1,d7
(1) 1614/FFFFFFFFFFFF0E64 : 8041                		or.w	d1,d0
(1) 1615/FFFFFFFFFFFF0E66 : E95E                		rol.w	#4,d6		; next << color
(1) 1616/FFFFFFFFFFFF0E68 : E95D                		rol.w	#4,d5
(1) 1618/FFFFFFFFFFFF0E6A : E95E                		rol.w	#4,d6
(1) 1619/FFFFFFFFFFFF0E6C : E95D                		rol.w	#4,d5
(1) 1620/FFFFFFFFFFFF0E6E : 3A80                		move.w	d0,(a5)
(1) 1621/FFFFFFFFFFFF0E70 :                     .same_in:
(1) 1622/FFFFFFFFFFFF0E70 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1623/FFFFFFFFFFFF0E74 : D8FC 0002           		adda	#2,a4
(1) 1624/FFFFFFFFFFFF0E78 : 4847                		swap	d7
(1) 1625/FFFFFFFFFFFF0E7A : 51CF FF80           		dbf	d7,.next_in
(1) 1626/FFFFFFFFFFFF0E7E : 4847                		swap	d7
(1) 1627/FFFFFFFFFFFF0E80 : 4A47                		tst.w	d7
(1) 1628/FFFFFFFFFFFF0E82 : 6700 FEF4           		beq	.pfade_del
(1) 1629/FFFFFFFFFFFF0E86 :                     .fdin_nend:
(1) 1630/FFFFFFFFFFFF0E86 : 4E75                		rts
(1) 1631/FFFFFFFFFFFF0E88 :                     
(1) 1632/FFFFFFFFFFFF0E88 :                     ; --------------------------------------------------------
(1) 1633/FFFFFFFFFFFF0E88 :                     ; Video_WaitFade
(1) 1634/FFFFFFFFFFFF0E88 :                     ;
(1) 1635/FFFFFFFFFFFF0E88 :                     ; CPU-saving version of System_Render when
(1) 1636/FFFFFFFFFFFF0E88 :                     ; waiting for a fade-in/fade-out
(1) 1637/FFFFFFFFFFFF0E88 :                     ;
(1) 1638/FFFFFFFFFFFF0E88 :                     ; THIS IS REQUIRED FOR 32X as
(1) 1639/FFFFFFFFFFFF0E88 :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1640/FFFFFFFFFFFF0E88 :                     ; --------------------------------------------------------
(1) 1641/FFFFFFFFFFFF0E88 :                     
(1) 1642/FFFFFFFFFFFF0E88 :                     Video_WaitFade:
(1) 1643/FFFFFFFFFFFF0E88 :                     .loop:
(1) 1644/FFFFFFFFFFFF0E88 : 6100 0AB2           		bsr	System_Render
(1) 1645/FFFFFFFFFFFF0E8C : 4DF8 DC1E           		lea	(RAM_PalFadeList).w,a6
(1) 1649/FFFFFFFFFFFF0E90 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1650/FFFFFFFFFFFF0E94 : 7C00                		moveq	#0,d6
(1) 1651/FFFFFFFFFFFF0E96 :                     .next_one:
(1) 1652/FFFFFFFFFFFF0E96 : 8C16                		or.b	palfd_req(a6),d6
(1) 1653/FFFFFFFFFFFF0E98 : DCFC 0008           		adda	#palfd_len,a6
(1) 1658/FFFFFFFFFFFF0E9C : 51CF FFF8           		dbf	d7,.next_one
(1) 1659/FFFFFFFFFFFF0EA0 : 4A06                		tst.b	d6
(1) 1660/FFFFFFFFFFFF0EA2 : 66E4                		bne.s	.loop
(1) 1661/FFFFFFFFFFFF0EA4 : 4E75                		rts
(1) 1662/FFFFFFFFFFFF0EA6 :                     
(1) 1663/FFFFFFFFFFFF0EA6 :                     ; --------------------------------------------------------
(1) 1664/FFFFFFFFFFFF0EA6 :                     ; Video_FadeIn_Full
(1) 1665/FFFFFFFFFFFF0EA6 :                     ;
(1) 1666/FFFFFFFFFFFF0EA6 :                     ; Overwrites first entry on each's PalFadeList
(1) 1667/FFFFFFFFFFFF0EA6 :                     ; --------------------------------------------------------
(1) 1668/FFFFFFFFFFFF0EA6 :                     
(1) 1669/FFFFFFFFFFFF0EA6 :                     Video_FadeIn_Full:
(1) 1676/FFFFFFFFFFFF0EA6 : 7002                		moveq	#2,d0
(1) 1677/FFFFFFFFFFFF0EA8 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1678/FFFFFFFFFFFF0EAE : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1679/FFFFFFFFFFFF0EB4 : 6116                		bsr	Video_MakeFade
(1) 1680/FFFFFFFFFFFF0EB6 : 60D0                		bra	Video_WaitFade
(1) 1681/FFFFFFFFFFFF0EB8 :                     
(1) 1682/FFFFFFFFFFFF0EB8 :                     ; --------------------------------------------------------
(1) 1683/FFFFFFFFFFFF0EB8 :                     ; Video_FadeIn_Full
(1) 1684/FFFFFFFFFFFF0EB8 :                     ;
(1) 1685/FFFFFFFFFFFF0EB8 :                     ; Overwrites first entry on each's PalFadeList
(1) 1686/FFFFFFFFFFFF0EB8 :                     ; --------------------------------------------------------
(1) 1687/FFFFFFFFFFFF0EB8 :                     
(1) 1688/FFFFFFFFFFFF0EB8 :                     Video_FadeOut_Full:
(1) 1695/FFFFFFFFFFFF0EB8 : 7001                		moveq	#1,d0
(1) 1696/FFFFFFFFFFFF0EBA : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1697/FFFFFFFFFFFF0EC0 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1698/FFFFFFFFFFFF0EC6 : 6104                		bsr	Video_MakeFade
(1) 1699/FFFFFFFFFFFF0EC8 : 60BE                		bra	Video_WaitFade
(1) 1700/FFFFFFFFFFFF0ECA :                     
(1) 1701/FFFFFFFFFFFF0ECA :                     ; ============================================================
(1) 1702/FFFFFFFFFFFF0ECA :                     ; --------------------------------------------------------
(1) 1703/FFFFFFFFFFFF0ECA :                     ; Subroutines
(1) 1704/FFFFFFFFFFFF0ECA :                     ; --------------------------------------------------------
(1) 1705/FFFFFFFFFFFF0ECA :                     
(1) 1706/FFFFFFFFFFFF0ECA :                     ; --------------------------------------------------------
(1) 1707/FFFFFFFFFFFF0ECA :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1708/FFFFFFFFFFFF0ECA :                     ;
(1) 1709/FFFFFFFFFFFF0ECA :                     ; Make palette Fading (or other) request, for
(1) 1710/FFFFFFFFFFFF0ECA :                     ; both VDP and SVDP
(1) 1711/FFFFFFFFFFFF0ECA :                     ;
(1) 1712/FFFFFFFFFFFF0ECA :                     ; Input:
(1) 1713/FFFFFFFFFFFF0ECA :                     ; d0.w | Task number:
(1) 1714/FFFFFFFFFFFF0ECA :                     ;        0 - Fade-out
(1) 1715/FFFFFFFFFFFF0ECA :                     ;        1 - Fade-in
(1) 1716/FFFFFFFFFFFF0ECA :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1717/FFFFFFFFFFFF0ECA :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1718/FFFFFFFFFFFF0ECA :                     ; --------------------------------------------------------
(1) 1719/FFFFFFFFFFFF0ECA :                     
(1) 1720/FFFFFFFFFFFF0ECA :                     Video_MdMars_MakeFade:
(1) 1729/FFFFFFFFFFFF0ECA : 4E75                		rts
(1) 1730/FFFFFFFFFFFF0ECC :                     Video_MakeFade:
(1) 1731/FFFFFFFFFFFF0ECC : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1732/FFFFFFFFFFFF0ED0 : 4DF8 DC1E           		lea	(RAM_PalFadeList).w,a6
(1) 1733/FFFFFFFFFFFF0ED4 : 3E38 EC00           		move.w	(RAM_IndxPalFade).w,d7
(1) 1734/FFFFFFFFFFFF0ED8 : 5278 EC00           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1735/FFFFFFFFFFFF0EDC : 6106                		bsr	vidMkFade_Go
(1) 1736/FFFFFFFFFFFF0EDE : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1737/FFFFFFFFFFFF0EE2 : 4E75                		rts
(1) 1738/FFFFFFFFFFFF0EE4 :                     vidMkFade_Go:
(1) 1739/FFFFFFFFFFFF0EE4 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1740/FFFFFFFFFFFF0EEA : E74F                		lsl.w	#3,d7			; index * 8
(1) 1741/FFFFFFFFFFFF0EEC : DCC7                		adda	d7,a6
(1) 1742/FFFFFFFFFFFF0EEE : 2E01                		move.l	d1,d7
(1) 1743/FFFFFFFFFFFF0EF0 : 2C02                		move.l	d2,d6
(1) 1744/FFFFFFFFFFFF0EF2 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1745/FFFFFFFFFFFF0EF4 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1746/FFFFFFFFFFFF0EF8 : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1747/FFFFFFFFFFFF0EFC : 4846                		swap	d6
(1) 1748/FFFFFFFFFFFF0EFE : 4847                		swap	d7
(1) 1749/FFFFFFFFFFFF0F00 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1750/FFFFFFFFFFFF0F04 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1751/FFFFFFFFFFFF0F08 : 4E75                		rts
(1) 1752/FFFFFFFFFFFF0F0A :                     
(1) 1753/FFFFFFFFFFFF0F0A :                     ; --------------------------------------------------------
(1) 1754/FFFFFFFFFFFF0F0A :                     ; Video_LoadPal, Video_FadePal
(1) 1755/FFFFFFFFFFFF0F0A :                     ;
(1) 1756/FFFFFFFFFFFF0F0A :                     ; Load VDP palette data, either current or for fading.
(1) 1757/FFFFFFFFFFFF0F0A :                     ;
(1) 1758/FFFFFFFFFFFF0F0A :                     ; Input:
(1) 1759/FFFFFFFFFFFF0F0A :                     ; a0   | Palette data
(1) 1760/FFFFFFFFFFFF0F0A :                     ; d0.w | Starting color index
(1) 1761/FFFFFFFFFFFF0F0A :                     ; d1.w | Number of colors
(1) 1762/FFFFFFFFFFFF0F0A :                     ; --------------------------------------------------------
(1) 1763/FFFFFFFFFFFF0F0A :                     
(1) 1764/FFFFFFFFFFFF0F0A :                     Video_FadePal:
(1) 1765/FFFFFFFFFFFF0F0A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1766/FFFFFFFFFFFF0F0E : 4DF8 E9EE           		lea	(RAM_PaletteFade).w,a6
(1) 1767/FFFFFFFFFFFF0F12 : 6008                		bra.s	vidMd_Pal
(1) 1768/FFFFFFFFFFFF0F14 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1769/FFFFFFFFFFFF0F14 :                     ; 		rts
(1) 1770/FFFFFFFFFFFF0F14 :                     Video_LoadPal:
(1) 1771/FFFFFFFFFFFF0F14 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1772/FFFFFFFFFFFF0F18 : 4DF8 E96E           		lea	(RAM_Palette).w,a6
(1) 1773/FFFFFFFFFFFF0F1C :                     ; 		bsr.s	vidMd_Pal
(1) 1774/FFFFFFFFFFFF0F1C :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1775/FFFFFFFFFFFF0F1C :                     ; 		rts
(1) 1776/FFFFFFFFFFFF0F1C :                     
(1) 1777/FFFFFFFFFFFF0F1C :                     ; --------------------------------------------------------
(1) 1778/FFFFFFFFFFFF0F1C :                     vidMd_Pal:
(1) 1779/FFFFFFFFFFFF0F1C : 2A48                		move.l	a0,a5
(1) 1780/FFFFFFFFFFFF0F1E : 7E00                		moveq	#0,d7
(1) 1781/FFFFFFFFFFFF0F20 : 3E00                		move.w	d0,d7
(1) 1782/FFFFFFFFFFFF0F22 : DE47                		add.w	d7,d7
(1) 1783/FFFFFFFFFFFF0F24 : DCC7                		adda	d7,a6
(1) 1784/FFFFFFFFFFFF0F26 : 3E01                		move.w	d1,d7
(1) 1785/FFFFFFFFFFFF0F28 : 5347                		subq.w	#1,d7
(1) 1786/FFFFFFFFFFFF0F2A : 6B0E                		bmi.s	.bad
(1) 1787/FFFFFFFFFFFF0F2C : 3C02                		move.w	d2,d6
(1) 1788/FFFFFFFFFFFF0F2E : 0246 0001           		andi.w	#1,d6
(1) 1789/FFFFFFFFFFFF0F32 : E25E                		ror.w	#1,d6
(1) 1790/FFFFFFFFFFFF0F34 :                     .loop:
(1) 1791/FFFFFFFFFFFF0F34 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1792/FFFFFFFFFFFF0F36 : 51CF FFFC           		dbf	d7,.loop
(1) 1793/FFFFFFFFFFFF0F3A :                     .bad:
(1) 1794/FFFFFFFFFFFF0F3A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1795/FFFFFFFFFFFF0F3E : 4E75                		rts
(1) 1796/FFFFFFFFFFFF0F40 :                     
(1) 1797/FFFFFFFFFFFF0F40 :                     ; --------------------------------------------------------
(1) 1798/FFFFFFFFFFFF0F40 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1799/FFFFFFFFFFFF0F40 :                     ;
(1) 1800/FFFFFFFFFFFF0F40 :                     ; Loads palettes on bulk with a list
(1) 1801/FFFFFFFFFFFF0F40 :                     ;
(1) 1802/FFFFFFFFFFFF0F40 :                     ; Input:
(1) 1803/FFFFFFFFFFFF0F40 :                     ; a0 | List of graphics to load:
(1) 1804/FFFFFFFFFFFF0F40 :                     ;        dc.w numof_entries
(1) 1805/FFFFFFFFFFFF0F40 :                     ;        dc.l palette_data
(1) 1806/FFFFFFFFFFFF0F40 :                     ;        dc.w start_at
(1) 1807/FFFFFFFFFFFF0F40 :                     ;        dc.w numof_colors
(1) 1808/FFFFFFFFFFFF0F40 :                     ;        ; ...more entries
(1) 1809/FFFFFFFFFFFF0F40 :                     ; --------------------------------------------------------
(1) 1810/FFFFFFFFFFFF0F40 :                     
(1) 1811/FFFFFFFFFFFF0F40 :                     Video_LoadPal_List:
(1) 1812/FFFFFFFFFFFF0F40 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1813/FFFFFFFFFFFF0F44 : 2A48                		move.l	a0,a5
(1) 1814/FFFFFFFFFFFF0F46 : 3E1D                		move.w	(a5)+,d7
(1) 1815/FFFFFFFFFFFF0F48 : 6710                		beq.s	.invalid
(1) 1816/FFFFFFFFFFFF0F4A : 6B0E                		bmi.s	.invalid
(1) 1817/FFFFFFFFFFFF0F4C : 5347                		subq.w	#1,d7
(1) 1818/FFFFFFFFFFFF0F4E :                     .next_one:
(1) 1819/FFFFFFFFFFFF0F4E : 205D                		move.l	(a5)+,a0
(1) 1820/FFFFFFFFFFFF0F50 : 301D                		move.w	(a5)+,d0
(1) 1821/FFFFFFFFFFFF0F52 : 321D                		move.w	(a5)+,d1
(1) 1822/FFFFFFFFFFFF0F54 : 61BE                		bsr	Video_LoadPal
(1) 1823/FFFFFFFFFFFF0F56 : 51CF FFF6           		dbf	d7,.next_one
(1) 1824/FFFFFFFFFFFF0F5A :                     .invalid:
(1) 1825/FFFFFFFFFFFF0F5A : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1826/FFFFFFFFFFFF0F5E : 4E75                		rts
(1) 1827/FFFFFFFFFFFF0F60 :                     
(1) 1828/FFFFFFFFFFFF0F60 :                     Video_FadePal_List:
(1) 1829/FFFFFFFFFFFF0F60 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1830/FFFFFFFFFFFF0F64 : 2A48                		move.l	a0,a5
(1) 1831/FFFFFFFFFFFF0F66 : 3E1D                		move.w	(a5)+,d7
(1) 1832/FFFFFFFFFFFF0F68 : 6710                		beq.s	.invalid
(1) 1833/FFFFFFFFFFFF0F6A : 6B0E                		bmi.s	.invalid
(1) 1834/FFFFFFFFFFFF0F6C : 5347                		subq.w	#1,d7
(1) 1835/FFFFFFFFFFFF0F6E :                     .next_one:
(1) 1836/FFFFFFFFFFFF0F6E : 205D                		move.l	(a5)+,a0
(1) 1837/FFFFFFFFFFFF0F70 : 301D                		move.w	(a5)+,d0
(1) 1838/FFFFFFFFFFFF0F72 : 321D                		move.w	(a5)+,d1
(1) 1839/FFFFFFFFFFFF0F74 : 6194                		bsr	Video_FadePal
(1) 1840/FFFFFFFFFFFF0F76 : 51CF FFF6           		dbf	d7,.next_one
(1) 1841/FFFFFFFFFFFF0F7A :                     .invalid:
(1) 1842/FFFFFFFFFFFF0F7A : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1843/FFFFFFFFFFFF0F7E : 4E75                		rts
(1) 1844/FFFFFFFFFFFF0F80 :                     
(1) 1845/FFFFFFFFFFFF0F80 :                     ; ====================================================================
(1) 1846/FFFFFFFFFFFF0F80 :                     ; ----------------------------------------------------------------
(1) 1847/FFFFFFFFFFFF0F80 :                     ; Text PRINT system.
(1) 1848/FFFFFFFFFFFF0F80 :                     ; ----------------------------------------------------------------
(1) 1849/FFFFFFFFFFFF0F80 :                     
(1) 1850/FFFFFFFFFFFF0F80 :                     ; --------------------------------------------------------
(1) 1851/FFFFFFFFFFFF0F80 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1852/FFFFFFFFFFFF0F80 :                     ;
(1) 1853/FFFFFFFFFFFF0F80 :                     ; Initializes the default Graphics and Palette
(1) 1854/FFFFFFFFFFFF0F80 :                     ; for the font.
(1) 1855/FFFFFFFFFFFF0F80 :                     ;
(1) 1856/FFFFFFFFFFFF0F80 :                     ; Input:
(1) 1857/FFFFFFFFFFFF0F80 :                     ; d0.l | Graphics data
(1) 1858/FFFFFFFFFFFF0F80 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1859/FFFFFFFFFFFF0F80 :                     ;        * Default labels:
(1) 1860/FFFFFFFFFFFF0F80 :                     ;        ASCII_FONT   for 8x8
(1) 1861/FFFFFFFFFFFF0F80 :                     ;        ASCII_FONT_W for 8x16
(1) 1862/FFFFFFFFFFFF0F80 :                     ;
(1) 1863/FFFFFFFFFFFF0F80 :                     ; d1.w | VRAM output location to load and use
(1) 1864/FFFFFFFFFFFF0F80 :                     ;        the ASCII text including attribute
(1) 1865/FFFFFFFFFFFF0F80 :                     ;        settings (Palette and Priority)
(1) 1866/FFFFFFFFFFFF0F80 :                     ;        * Defualt values:
(1) 1867/FFFFFFFFFFFF0F80 :                     ;        DEF_PrintVram  for 8x8
(1) 1868/FFFFFFFFFFFF0F80 :                     ;        DEF_PrintVramW for 8x16
(1) 1869/FFFFFFFFFFFF0F80 :                     ;
(1) 1870/FFFFFFFFFFFF0F80 :                     ; Breaks:
(1) 1871/FFFFFFFFFFFF0F80 :                     ; d0-d3
(1) 1872/FFFFFFFFFFFF0F80 :                     ;
(1) 1873/FFFFFFFFFFFF0F80 :                     ; Notes:
(1) 1874/FFFFFFFFFFFF0F80 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1875/FFFFFFFFFFFF0F80 :                     ; - Write your palette manually after this
(1) 1876/FFFFFFFFFFFF0F80 :                     ; --------------------------------------------------------
(1) 1877/FFFFFFFFFFFF0F80 :                     
(1) 1878/FFFFFFFFFFFF0F80 :                     Video_PrintInitW:
(1) 1879/FFFFFFFFFFFF0F80 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1880/FFFFFFFFFFFF0F84 : 6004                		bra.s	vidPrint_Init
(1) 1881/FFFFFFFFFFFF0F86 :                     Video_PrintInit:
(1) 1882/FFFFFFFFFFFF0F86 : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1883/FFFFFFFFFFFF0F8A :                     vidPrint_Init:
(1) 1884/FFFFFFFFFFFF0F8A : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1885/FFFFFFFFFFFF0F8C : 6000 F8F4           		bra	Video_LoadArt
(1) 1886/FFFFFFFFFFFF0F90 :                     
(1) 1887/FFFFFFFFFFFF0F90 :                     ; --------------------------------------------------------
(1) 1888/FFFFFFFFFFFF0F90 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1889/FFFFFFFFFFFF0F90 :                     ;
(1) 1890/FFFFFFFFFFFF0F90 :                     ; Loads default palette for the font
(1) 1891/FFFFFFFFFFFF0F90 :                     ; --------------------------------------------------------
(1) 1892/FFFFFFFFFFFF0F90 :                     
(1) 1893/FFFFFFFFFFFF0F90 :                     Video_PrintDefPal_Fade:
(1) 1894/FFFFFFFFFFFF0F90 : 2F0E                		move.l	a6,-(sp)
(1) 1895/FFFFFFFFFFFF0F92 : 4DF8 EA4E           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1896/FFFFFFFFFFFF0F96 : 6006                		bra.s	vid_FontDefPal
(1) 1897/FFFFFFFFFFFF0F98 :                     Video_PrintDefPal:
(1) 1898/FFFFFFFFFFFF0F98 : 2F0E                		move.l	a6,-(sp)
(1) 1899/FFFFFFFFFFFF0F9A : 4DF8 E9CE           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1900/FFFFFFFFFFFF0F9E :                     vid_FontDefPal:
(1) 1901/FFFFFFFFFFFF0F9E : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1902/FFFFFFFFFFFF0FA2 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1903/FFFFFFFFFFFF0FA6 : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1904/FFFFFFFFFFFF0FAA : 2C5F                		move.l	(sp)+,a6
(1) 1905/FFFFFFFFFFFF0FAC : 4E75                		rts
(1) 1906/FFFFFFFFFFFF0FAE :                     
(1) 1907/FFFFFFFFFFFF0FAE :                     ; --------------------------------------------------------
(1) 1908/FFFFFFFFFFFF0FAE :                     ; Video_Print, Video_PrintW
(1) 1909/FFFFFFFFFFFF0FAE :                     ;
(1) 1910/FFFFFFFFFFFF0FAE :                     ; Prints a text string, VDP side.
(1) 1911/FFFFFFFFFFFF0FAE :                     ;
(1) 1912/FFFFFFFFFFFF0FAE :                     ; Input:
(1) 1913/FFFFFFFFFFFF0FAE :                     ; a0   | String data
(1) 1914/FFFFFFFFFFFF0FAE :                     ; d0.w | X position
(1) 1915/FFFFFFFFFFFF0FAE :                     ; d1.w | Y position
(1) 1916/FFFFFFFFFFFF0FAE :                     ; d2.w | Font VRAM location
(1) 1917/FFFFFFFFFFFF0FAE :                     ; d3.l | Screen width / Screen VRAM location:
(1) 1918/FFFFFFFFFFFF0FAE :                     ;        splitw(width,vram_out)
(1) 1919/FFFFFFFFFFFF0FAE :                     ;
(1) 1920/FFFFFFFFFFFF0FAE :                     ; * Font VRAM location
(1) 1921/FFFFFFFFFFFF0FAE :                     ; Default 8x8:  DEF_PrintVram
(1) 1922/FFFFFFFFFFFF0FAE :                     ; Default 8x16: DEF_PrintVramW
(1) 1923/FFFFFFFFFFFF0FAE :                     ;
(1) 1924/FFFFFFFFFFFF0FAE :                     ; * Screen VRAM
(1) 1925/FFFFFFFFFFFF0FAE :                     ; Foreground: DEF_VRAM_FG
(1) 1926/FFFFFFFFFFFF0FAE :                     ; Background: DEF_VRAM_BG
(1) 1927/FFFFFFFFFFFF0FAE :                     ; Window:     DEF_VRAM_WD
(1) 1928/FFFFFFFFFFFF0FAE :                     ;
(1) 1929/FFFFFFFFFFFF0FAE :                     ; * Screen Width
(1) 1930/FFFFFFFFFFFF0FAE :                     ; $040 (DEF_HSIZE_32)
(1) 1931/FFFFFFFFFFFF0FAE :                     ; $080 (DEF_HSIZE_64)
(1) 1932/FFFFFFFFFFFF0FAE :                     ; $100 (DEF_HSIZE_128)
(1) 1933/FFFFFFFFFFFF0FAE :                     ;
(1) 1934/FFFFFFFFFFFF0FAE :                     ; Notes:
(1) 1935/FFFFFFFFFFFF0FAE :                     ; - Initialize your graphics and VRAM location
(1) 1936/FFFFFFFFFFFF0FAE :                     ;   with Video_PrintInit
(1) 1937/FFFFFFFFFFFF0FAE :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1938/FFFFFFFFFFFF0FAE :                     ;   mode.
(1) 1939/FFFFFFFFFFFF0FAE :                     ; --------------------------------------------------------
(1) 1940/FFFFFFFFFFFF0FAE :                     
(1) 1941/FFFFFFFFFFFF0FAE :                     ; dc.l pstr(type,ram_location)
(1) 1942/FFFFFFFFFFFF0FAE :                     ;
(1) 1943/FFFFFFFFFFFF0FAE :                     ; type:
(1) 1944/FFFFFFFFFFFF0FAE :                     ; 0 - Byte
(1) 1945/FFFFFFFFFFFF0FAE :                     ; 1 - Word
(1) 1946/FFFFFFFFFFFF0FAE :                     ; 2 - 24-bit
(1) 1947/FFFFFFFFFFFF0FAE :                     ; 3 - Long
(1) 1948/FFFFFFFFFFFF0FAE :                     
(1) 1949/FFFFFFFFFFFF0FAE :                     Video_Print:
(1) 1950/FFFFFFFFFFFF0FAE : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1951/FFFFFFFFFFFF0FB2 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1952/FFFFFFFFFFFF0FB8 : 3E03                		move.w	d3,d7
(1) 1953/FFFFFFFFFFFF0FBA : 3A00                		move.w	d0,d5
(1) 1954/FFFFFFFFFFFF0FBC : DA45                		add.w	d5,d5
(1) 1955/FFFFFFFFFFFF0FBE : 3801                		move.w	d1,d4
(1) 1956/FFFFFFFFFFFF0FC0 : 4843                		swap	d3
(1) 1957/FFFFFFFFFFFF0FC2 : C8C3                		mulu.w	d3,d4
(1) 1958/FFFFFFFFFFFF0FC4 : DA44                		add.w	d4,d5
(1) 1959/FFFFFFFFFFFF0FC6 : DE45                		add.w	d5,d7
(1) 1960/FFFFFFFFFFFF0FC8 : 3C03                		move.w	d3,d6
(1) 1961/FFFFFFFFFFFF0FCA : 4843                		swap	d3
(1) 1962/FFFFFFFFFFFF0FCC : 7A00                		moveq	#0,d5
(1) 1963/FFFFFFFFFFFF0FCE : 3A07                		move.w	d7,d5
(1) 1964/FFFFFFFFFFFF0FD0 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1965/FFFFFFFFFFFF0FD4 : 8E7C 4000           		or.w	#$4000,d7
(1) 1966/FFFFFFFFFFFF0FD8 : E55D                		rol.w	#2,d5
(1) 1967/FFFFFFFFFFFF0FDA : 0245 0003           		andi.w	#%11,d5
(1) 1968/FFFFFFFFFFFF0FDE : 4845                		swap	d5
(1) 1969/FFFFFFFFFFFF0FE0 : 2A48                		move.l	a0,a5
(1) 1970/FFFFFFFFFFFF0FE2 :                     .loop:
(1) 1971/FFFFFFFFFFFF0FE2 : 3806                		move.w	d6,d4
(1) 1972/FFFFFFFFFFFF0FE4 : 5344                		subq.w	#1,d4
(1) 1973/FFFFFFFFFFFF0FE6 : CA44                		and.w	d4,d5
(1) 1974/FFFFFFFFFFFF0FE8 :                     
(1) 1975/FFFFFFFFFFFF0FE8 : 3807                		move.w	d7,d4
(1) 1976/FFFFFFFFFFFF0FEA : D845                		add.w	d5,d4
(1) 1977/FFFFFFFFFFFF0FEC : 4845                		swap	d5
(1) 1978/FFFFFFFFFFFF0FEE : 3D44 0004           		move.w	d4,4(a6)
(1) 1979/FFFFFFFFFFFF0FF2 : 3D45 0004           		move.w	d5,4(a6)
(1) 1980/FFFFFFFFFFFF0FF6 : 4845                		swap	d5
(1) 1981/FFFFFFFFFFFF0FF8 :                     .q_loop:
(1) 1982/FFFFFFFFFFFF0FF8 : 181D                		move.b	(a5)+,d4
(1) 1983/FFFFFFFFFFFF0FFA : 671E                		beq.s	.exit
(1) 1984/FFFFFFFFFFFF0FFC : 6B22                		bmi.s	.special
(1) 1985/FFFFFFFFFFFF0FFE : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1986/FFFFFFFFFFFF1002 : 6710                		beq.s	.next
(1) 1987/FFFFFFFFFFFF1004 :                     ; ------------------------------------------------
(1) 1988/FFFFFFFFFFFF1004 :                     ; Normal text
(1) 1989/FFFFFFFFFFFF1004 : 0244 00FF           		andi.w	#$FF,d4
(1) 1990/FFFFFFFFFFFF1008 :                     ; 		add.w	(RAM_SetPrntVram).w,d4
(1) 1991/FFFFFFFFFFFF1008 : D842                		add.w	d2,d4
(1) 1992/FFFFFFFFFFFF100A : 0444 0020           		subi.w	#$20,d4
(1) 1993/FFFFFFFFFFFF100E : 3C84                		move.w	d4,(a6)
(1) 1994/FFFFFFFFFFFF1010 : 5445                		addq.w	#2,d5
(1) 1995/FFFFFFFFFFFF1012 : 60E4                		bra.s	.q_loop
(1) 1996/FFFFFFFFFFFF1014 :                     .next:
(1) 1997/FFFFFFFFFFFF1014 : 4245                		clr.w	d5
(1) 1998/FFFFFFFFFFFF1016 : DE46                		add.w	d6,d7			; Next line
(1) 1999/FFFFFFFFFFFF1018 : 60C8                		bra.s	.loop
(1) 2000/FFFFFFFFFFFF101A :                     .exit:
(1) 2001/FFFFFFFFFFFF101A : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 2002/FFFFFFFFFFFF101E : 4E75                		rts
(1) 2003/FFFFFFFFFFFF1020 :                     ; ------------------------------------------------
(1) 2004/FFFFFFFFFFFF1020 :                     ; Show value
(1) 2005/FFFFFFFFFFFF1020 :                     ; d4 - $80|flags
(1) 2006/FFFFFFFFFFFF1020 :                     .special:
(1) 2007/FFFFFFFFFFFF1020 : 4846                		swap	d6
(1) 2008/FFFFFFFFFFFF1022 : 1C04                		move.b	d4,d6
(1) 2009/FFFFFFFFFFFF1024 : E19C                		rol.l	#8,d4
(1) 2010/FFFFFFFFFFFF1026 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2011/FFFFFFFFFFFF1028 : E19C                		rol.l	#8,d4
(1) 2012/FFFFFFFFFFFF102A : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2013/FFFFFFFFFFFF102C : E19C                		rol.l	#8,d4
(1) 2014/FFFFFFFFFFFF102E : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2015/FFFFFFFFFFFF1030 : 2844                		move.l	d4,a4
(1) 2016/FFFFFFFFFFFF1032 : 6100 01B6           		bsr	vid_PrintTVal
(1) 2017/FFFFFFFFFFFF1036 : 60AA                		bra	.loop
(1) 2018/FFFFFFFFFFFF1038 :                     
(1) 2019/FFFFFFFFFFFF1038 :                     ; --------------------------------------------------------
(1) 2020/FFFFFFFFFFFF1038 :                     ; 8x16 version
(1) 2021/FFFFFFFFFFFF1038 :                     ; --------------------------------------------------------
(1) 2022/FFFFFFFFFFFF1038 :                     
(1) 2023/FFFFFFFFFFFF1038 :                     Video_PrintW:
(1) 2024/FFFFFFFFFFFF1038 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2025/FFFFFFFFFFFF103C : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2026/FFFFFFFFFFFF1042 :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2027/FFFFFFFFFFFF1042 : 3C02                		move.w	d2,d6
(1) 2028/FFFFFFFFFFFF1044 : 0446 0040           		subi.w	#$20*2,d6
(1) 2029/FFFFFFFFFFFF1048 : 3A38 EC16           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2030/FFFFFFFFFFFF104C : 0805 0002           		btst	#2,d5
(1) 2031/FFFFFFFFFFFF1050 : 670E                		beq.s	.no_dble_y
(1) 2032/FFFFFFFFFFFF1052 : 3E06                		move.w	d6,d7
(1) 2033/FFFFFFFFFFFF1054 : 0247 F800           		andi.w	#$F800,d7
(1) 2034/FFFFFFFFFFFF1058 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2035/FFFFFFFFFFFF105C : E24E                		lsr.w	#1,d6
(1) 2036/FFFFFFFFFFFF105E : 8C47                		or.w	d7,d6
(1) 2037/FFFFFFFFFFFF1060 :                     .no_dble_y:
(1) 2038/FFFFFFFFFFFF1060 : 4846                		swap	d6
(1) 2039/FFFFFFFFFFFF1062 : 3E03                		move.w	d3,d7
(1) 2040/FFFFFFFFFFFF1064 : 3A00                		move.w	d0,d5
(1) 2041/FFFFFFFFFFFF1066 : DA45                		add.w	d5,d5
(1) 2042/FFFFFFFFFFFF1068 : 3801                		move.w	d1,d4
(1) 2043/FFFFFFFFFFFF106A : 4843                		swap	d3
(1) 2044/FFFFFFFFFFFF106C : C8C3                		mulu.w	d3,d4
(1) 2045/FFFFFFFFFFFF106E : DA44                		add.w	d4,d5
(1) 2046/FFFFFFFFFFFF1070 : DE45                		add.w	d5,d7
(1) 2047/FFFFFFFFFFFF1072 : 3C03                		move.w	d3,d6
(1) 2048/FFFFFFFFFFFF1074 : 4843                		swap	d3
(1) 2049/FFFFFFFFFFFF1076 :                     
(1) 2050/FFFFFFFFFFFF1076 : 7A00                		moveq	#0,d5
(1) 2051/FFFFFFFFFFFF1078 : 3A07                		move.w	d7,d5
(1) 2052/FFFFFFFFFFFF107A : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2053/FFFFFFFFFFFF107E : 8E7C 4000           		or.w	#$4000,d7
(1) 2054/FFFFFFFFFFFF1082 : E55D                		rol.w	#2,d5
(1) 2055/FFFFFFFFFFFF1084 : 0245 0003           		andi.w	#%11,d5
(1) 2056/FFFFFFFFFFFF1088 : 4845                		swap	d5
(1) 2057/FFFFFFFFFFFF108A : 2A48                		move.l	a0,a5
(1) 2058/FFFFFFFFFFFF108C :                     	; d7 -      TEMP       | VDP write left
(1) 2059/FFFFFFFFFFFF108C :                     	; d6 -      TEMP       | Y next-line size
(1) 2060/FFFFFFFFFFFF108C :                     	; d5 - VDP write right | X current pos
(1) 2061/FFFFFFFFFFFF108C :                     	; d4 -                 | TEMP
(1) 2062/FFFFFFFFFFFF108C :                     .loop:
(1) 2063/FFFFFFFFFFFF108C : 3806                		move.w	d6,d4
(1) 2064/FFFFFFFFFFFF108E : 5344                		subq.w	#1,d4
(1) 2065/FFFFFFFFFFFF1090 : CA44                		and.w	d4,d5
(1) 2066/FFFFFFFFFFFF1092 : 181D                		move.b	(a5)+,d4
(1) 2067/FFFFFFFFFFFF1094 : 6776                		beq.s	.exit
(1) 2068/FFFFFFFFFFFF1096 : 6B7A                		bmi.s	.special
(1) 2069/FFFFFFFFFFFF1098 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2070/FFFFFFFFFFFF109C : 6766                		beq.s	.next
(1) 2071/FFFFFFFFFFFF109E :                     ; ------------------------------------------------
(1) 2072/FFFFFFFFFFFF109E :                     ; Normal text
(1) 2073/FFFFFFFFFFFF109E : 0244 00FF           		andi.w	#$FF,d4
(1) 2074/FFFFFFFFFFFF10A2 : 4847                		swap	d7
(1) 2075/FFFFFFFFFFFF10A4 : 3E38 EC16           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2076/FFFFFFFFFFFF10A8 : 0807 0002           		btst	#2,d7
(1) 2077/FFFFFFFFFFFF10AC : 671E                		beq.s	.ver_normal
(1) 2078/FFFFFFFFFFFF10AE : 4846                		swap	d6
(1) 2079/FFFFFFFFFFFF10B0 : D846                		add.w	d6,d4
(1) 2080/FFFFFFFFFFFF10B2 : 4846                		swap	d6
(1) 2081/FFFFFFFFFFFF10B4 : 4844                		swap	d4
(1) 2082/FFFFFFFFFFFF10B6 : 4847                		swap	d7
(1) 2083/FFFFFFFFFFFF10B8 : 3807                		move.w	d7,d4
(1) 2084/FFFFFFFFFFFF10BA : D845                		add.w	d5,d4
(1) 2085/FFFFFFFFFFFF10BC : 4845                		swap	d5
(1) 2086/FFFFFFFFFFFF10BE : 3D44 0004           		move.w	d4,4(a6)
(1) 2087/FFFFFFFFFFFF10C2 : 3D45 0004           		move.w	d5,4(a6)
(1) 2088/FFFFFFFFFFFF10C6 : 4844                		swap	d4
(1) 2089/FFFFFFFFFFFF10C8 : 3C84                		move.w	d4,(a6)
(1) 2090/FFFFFFFFFFFF10CA : 6032                		bra.s	.ver_cont
(1) 2091/FFFFFFFFFFFF10CC :                     .ver_normal:
(1) 2092/FFFFFFFFFFFF10CC : D844                		add.w	d4,d4
(1) 2093/FFFFFFFFFFFF10CE : 4846                		swap	d6
(1) 2094/FFFFFFFFFFFF10D0 : D846                		add.w	d6,d4
(1) 2095/FFFFFFFFFFFF10D2 : 4846                		swap	d6
(1) 2096/FFFFFFFFFFFF10D4 : 4844                		swap	d4
(1) 2097/FFFFFFFFFFFF10D6 : 4847                		swap	d7
(1) 2098/FFFFFFFFFFFF10D8 : 3807                		move.w	d7,d4
(1) 2099/FFFFFFFFFFFF10DA : D845                		add.w	d5,d4
(1) 2100/FFFFFFFFFFFF10DC : 4845                		swap	d5
(1) 2101/FFFFFFFFFFFF10DE : 3D44 0004           		move.w	d4,4(a6)
(1) 2102/FFFFFFFFFFFF10E2 : 3D45 0004           		move.w	d5,4(a6)
(1) 2103/FFFFFFFFFFFF10E6 : 4844                		swap	d4
(1) 2104/FFFFFFFFFFFF10E8 : 3C84                		move.w	d4,(a6)
(1) 2105/FFFFFFFFFFFF10EA : 5244                		addq.w	#1,d4
(1) 2106/FFFFFFFFFFFF10EC : 4844                		swap	d4
(1) 2107/FFFFFFFFFFFF10EE : D846                		add.w	d6,d4
(1) 2108/FFFFFFFFFFFF10F0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2109/FFFFFFFFFFFF10F4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2110/FFFFFFFFFFFF10F8 : 4844                		swap	d4
(1) 2111/FFFFFFFFFFFF10FA : 3C84                		move.w	d4,(a6)
(1) 2112/FFFFFFFFFFFF10FC : 4844                		swap	d4
(1) 2113/FFFFFFFFFFFF10FE :                     
(1) 2114/FFFFFFFFFFFF10FE :                     .ver_cont:
(1) 2115/FFFFFFFFFFFF10FE : 4845                		swap	d5
(1) 2116/FFFFFFFFFFFF1100 : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2117/FFFFFFFFFFFF1102 : 6088                		bra.s	.loop
(1) 2118/FFFFFFFFFFFF1104 :                     .next:
(1) 2119/FFFFFFFFFFFF1104 : 4245                		clr.w	d5		; Clear X pos
(1) 2120/FFFFFFFFFFFF1106 : DE46                		add.w	d6,d7		; Next Y line
(1) 2121/FFFFFFFFFFFF1108 : DE46                		add.w	d6,d7		; twice
(1) 2122/FFFFFFFFFFFF110A : 6080                		bra	.loop
(1) 2123/FFFFFFFFFFFF110C :                     .exit:
(1) 2124/FFFFFFFFFFFF110C : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2125/FFFFFFFFFFFF1110 : 4E75                		rts
(1) 2126/FFFFFFFFFFFF1112 :                     ; ------------------------------------------------
(1) 2127/FFFFFFFFFFFF1112 :                     ; Show value
(1) 2128/FFFFFFFFFFFF1112 :                     ; d4 - $80|flags
(1) 2129/FFFFFFFFFFFF1112 :                     .special:
(1) 2130/FFFFFFFFFFFF1112 : 2646                		move.l	d6,a3
(1) 2131/FFFFFFFFFFFF1114 : 1C04                		move.b	d4,d6
(1) 2132/FFFFFFFFFFFF1116 : E19C                		rol.l	#8,d4
(1) 2133/FFFFFFFFFFFF1118 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2134/FFFFFFFFFFFF111A : E19C                		rol.l	#8,d4
(1) 2135/FFFFFFFFFFFF111C : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2136/FFFFFFFFFFFF111E : E19C                		rol.l	#8,d4
(1) 2137/FFFFFFFFFFFF1120 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2138/FFFFFFFFFFFF1122 : 2844                		move.l	d4,a4
(1) 2139/FFFFFFFFFFFF1124 : 6100 0130           		bsr	vid_PrintTValW
(1) 2140/FFFFFFFFFFFF1128 : 6000 FF62           		bra	.loop
(1) 2141/FFFFFFFFFFFF112C :                     
(1) 2142/FFFFFFFFFFFF112C :                     ; --------------------------------------------------------
(1) 2143/FFFFFFFFFFFF112C :                     ; Video_PrintVal, Video_PrintValW
(1) 2144/FFFFFFFFFFFF112C :                     ;
(1) 2145/FFFFFFFFFFFF112C :                     ; Prints a memory value
(1) 2146/FFFFFFFFFFFF112C :                     ;
(1) 2147/FFFFFFFFFFFF112C :                     ; Input:
(1) 2148/FFFFFFFFFFFF112C :                     ; a0   | Memory location to read
(1) 2149/FFFFFFFFFFFF112C :                     ; a1   | Type:
(1) 2150/FFFFFFFFFFFF112C :                     ;        0 - Byte
(1) 2151/FFFFFFFFFFFF112C :                     ;        1 - Word
(1) 2152/FFFFFFFFFFFF112C :                     ;        2 - Longword but as a 24-bit address
(1) 2153/FFFFFFFFFFFF112C :                     ;        3 - Full Longword
(1) 2154/FFFFFFFFFFFF112C :                     ;
(1) 2155/FFFFFFFFFFFF112C :                     ; d0.w | X position
(1) 2156/FFFFFFFFFFFF112C :                     ; d1.w | Y position
(1) 2157/FFFFFFFFFFFF112C :                     ; d2.w | Font VRAM location
(1) 2158/FFFFFFFFFFFF112C :                     ; d3.l | Screen width / Screen VRAM location:
(1) 2159/FFFFFFFFFFFF112C :                     ;        splitw(width,vram_out)
(1) 2160/FFFFFFFFFFFF112C :                     ;
(1) 2161/FFFFFFFFFFFF112C :                     ; * Font VRAM location
(1) 2162/FFFFFFFFFFFF112C :                     ; Default 8x8:  DEF_PrintVram
(1) 2163/FFFFFFFFFFFF112C :                     ; Default 8x16: DEF_PrintVramW
(1) 2164/FFFFFFFFFFFF112C :                     ;
(1) 2165/FFFFFFFFFFFF112C :                     ; * Screen VRAM
(1) 2166/FFFFFFFFFFFF112C :                     ; Foreground: DEF_VRAM_FG
(1) 2167/FFFFFFFFFFFF112C :                     ; Background: DEF_VRAM_BG
(1) 2168/FFFFFFFFFFFF112C :                     ; Window:     DEF_VRAM_WD
(1) 2169/FFFFFFFFFFFF112C :                     ;
(1) 2170/FFFFFFFFFFFF112C :                     ; * Screen Width
(1) 2171/FFFFFFFFFFFF112C :                     ; $040 (DEF_HSIZE_32)
(1) 2172/FFFFFFFFFFFF112C :                     ; $080 (DEF_HSIZE_64)
(1) 2173/FFFFFFFFFFFF112C :                     ; $100 (DEF_HSIZE_128)
(1) 2174/FFFFFFFFFFFF112C :                     ;
(1) 2175/FFFFFFFFFFFF112C :                     ; Notes:
(1) 2176/FFFFFFFFFFFF112C :                     ; - Initialize your graphics and VRAM location
(1) 2177/FFFFFFFFFFFF112C :                     ;   with Video_PrintInit
(1) 2178/FFFFFFFFFFFF112C :                     ; - Only Video_PrintW can be used in double-interlace
(1) 2179/FFFFFFFFFFFF112C :                     ;   mode.
(1) 2180/FFFFFFFFFFFF112C :                     ; --------------------------------------------------------
(1) 2181/FFFFFFFFFFFF112C :                     
(1) 2182/FFFFFFFFFFFF112C :                     Video_PrintVal:
(1) 2183/FFFFFFFFFFFF112C : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 2184/FFFFFFFFFFFF1130 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2185/FFFFFFFFFFFF1136 : 3E03                		move.w	d3,d7
(1) 2186/FFFFFFFFFFFF1138 : 3A00                		move.w	d0,d5
(1) 2187/FFFFFFFFFFFF113A : DA45                		add.w	d5,d5
(1) 2188/FFFFFFFFFFFF113C : 3801                		move.w	d1,d4
(1) 2189/FFFFFFFFFFFF113E : 4843                		swap	d3
(1) 2190/FFFFFFFFFFFF1140 : C8C3                		mulu.w	d3,d4
(1) 2191/FFFFFFFFFFFF1142 : DA44                		add.w	d4,d5
(1) 2192/FFFFFFFFFFFF1144 : DE45                		add.w	d5,d7
(1) 2193/FFFFFFFFFFFF1146 : 3C03                		move.w	d3,d6
(1) 2194/FFFFFFFFFFFF1148 : 4843                		swap	d3
(1) 2195/FFFFFFFFFFFF114A : 7A00                		moveq	#0,d5
(1) 2196/FFFFFFFFFFFF114C : 3A07                		move.w	d7,d5
(1) 2197/FFFFFFFFFFFF114E : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2198/FFFFFFFFFFFF1152 : 8E7C 4000           		or.w	#$4000,d7
(1) 2199/FFFFFFFFFFFF1156 : E55D                		rol.w	#2,d5
(1) 2200/FFFFFFFFFFFF1158 : 0245 0003           		andi.w	#%11,d5
(1) 2201/FFFFFFFFFFFF115C : 4845                		swap	d5
(1) 2202/FFFFFFFFFFFF115E : 2A48                		move.l	a0,a5
(1) 2203/FFFFFFFFFFFF1160 :                     .loop:
(1) 2204/FFFFFFFFFFFF1160 : 3806                		move.w	d6,d4
(1) 2205/FFFFFFFFFFFF1162 : 5344                		subq.w	#1,d4
(1) 2206/FFFFFFFFFFFF1164 : CA44                		and.w	d4,d5
(1) 2207/FFFFFFFFFFFF1166 :                     
(1) 2208/FFFFFFFFFFFF1166 : 3807                		move.w	d7,d4
(1) 2209/FFFFFFFFFFFF1168 : D845                		add.w	d5,d4
(1) 2210/FFFFFFFFFFFF116A : 4845                		swap	d5
(1) 2211/FFFFFFFFFFFF116C : 3D44 0004           		move.w	d4,4(a6)
(1) 2212/FFFFFFFFFFFF1170 : 3D45 0004           		move.w	d5,4(a6)
(1) 2213/FFFFFFFFFFFF1174 : 4845                		swap	d5
(1) 2214/FFFFFFFFFFFF1176 :                     .q_loop:
(1) 2215/FFFFFFFFFFFF1176 : 2848                		move.l	a0,a4
(1) 2216/FFFFFFFFFFFF1178 : 3C09                		move.w	a1,d6
(1) 2217/FFFFFFFFFFFF117A : 616E                		bsr	vid_PrintTVal
(1) 2218/FFFFFFFFFFFF117C : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 2219/FFFFFFFFFFFF1180 : 4E75                		rts
(1) 2220/FFFFFFFFFFFF1182 :                     
(1) 2221/FFFFFFFFFFFF1182 :                     ; --------------------------------------------------------
(1) 2222/FFFFFFFFFFFF1182 :                     ; 8x16 version
(1) 2223/FFFFFFFFFFFF1182 :                     ; --------------------------------------------------------
(1) 2224/FFFFFFFFFFFF1182 :                     
(1) 2225/FFFFFFFFFFFF1182 :                     Video_PrintValW:
(1) 2226/FFFFFFFFFFFF1182 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2227/FFFFFFFFFFFF1186 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2228/FFFFFFFFFFFF118C :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2229/FFFFFFFFFFFF118C : 3C02                		move.w	d2,d6
(1) 2230/FFFFFFFFFFFF118E : 0446 0040           		subi.w	#$20*2,d6
(1) 2231/FFFFFFFFFFFF1192 : 3A38 EC16           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2232/FFFFFFFFFFFF1196 : 0805 0002           		btst	#2,d5
(1) 2233/FFFFFFFFFFFF119A : 670E                		beq.s	.no_dble_y
(1) 2234/FFFFFFFFFFFF119C : 3E06                		move.w	d6,d7
(1) 2235/FFFFFFFFFFFF119E : 0247 F800           		andi.w	#$F800,d7
(1) 2236/FFFFFFFFFFFF11A2 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2237/FFFFFFFFFFFF11A6 : E24E                		lsr.w	#1,d6
(1) 2238/FFFFFFFFFFFF11A8 : 8C47                		or.w	d7,d6
(1) 2239/FFFFFFFFFFFF11AA :                     .no_dble_y:
(1) 2240/FFFFFFFFFFFF11AA : 4846                		swap	d6
(1) 2241/FFFFFFFFFFFF11AC : 3E03                		move.w	d3,d7
(1) 2242/FFFFFFFFFFFF11AE : 3A00                		move.w	d0,d5
(1) 2243/FFFFFFFFFFFF11B0 : DA45                		add.w	d5,d5
(1) 2244/FFFFFFFFFFFF11B2 : 3801                		move.w	d1,d4
(1) 2245/FFFFFFFFFFFF11B4 : 4843                		swap	d3
(1) 2246/FFFFFFFFFFFF11B6 : C8C3                		mulu.w	d3,d4
(1) 2247/FFFFFFFFFFFF11B8 : DA44                		add.w	d4,d5
(1) 2248/FFFFFFFFFFFF11BA : DE45                		add.w	d5,d7
(1) 2249/FFFFFFFFFFFF11BC : 3C03                		move.w	d3,d6
(1) 2250/FFFFFFFFFFFF11BE : 4843                		swap	d3
(1) 2251/FFFFFFFFFFFF11C0 :                     
(1) 2252/FFFFFFFFFFFF11C0 : 7A00                		moveq	#0,d5
(1) 2253/FFFFFFFFFFFF11C2 : 3A07                		move.w	d7,d5
(1) 2254/FFFFFFFFFFFF11C4 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2255/FFFFFFFFFFFF11C8 : 8E7C 4000           		or.w	#$4000,d7
(1) 2256/FFFFFFFFFFFF11CC : E55D                		rol.w	#2,d5
(1) 2257/FFFFFFFFFFFF11CE : 0245 0003           		andi.w	#%11,d5
(1) 2258/FFFFFFFFFFFF11D2 : 4845                		swap	d5
(1) 2259/FFFFFFFFFFFF11D4 : 2A48                		move.l	a0,a5
(1) 2260/FFFFFFFFFFFF11D6 :                     	; d7 -      TEMP       | VDP write left
(1) 2261/FFFFFFFFFFFF11D6 :                     	; d6 -      TEMP       | Y next-line size
(1) 2262/FFFFFFFFFFFF11D6 :                     	; d5 - VDP write right | X current pos
(1) 2263/FFFFFFFFFFFF11D6 :                     	; d4 -                 | TEMP
(1) 2264/FFFFFFFFFFFF11D6 :                     .loop:
(1) 2265/FFFFFFFFFFFF11D6 : 3806                		move.w	d6,d4
(1) 2266/FFFFFFFFFFFF11D8 : 5344                		subq.w	#1,d4
(1) 2267/FFFFFFFFFFFF11DA : CA44                		and.w	d4,d5
(1) 2268/FFFFFFFFFFFF11DC : 2646                		move.l	d6,a3
(1) 2269/FFFFFFFFFFFF11DE : 2848                		move.l	a0,a4
(1) 2270/FFFFFFFFFFFF11E0 : 3C09                		move.w	a1,d6
(1) 2271/FFFFFFFFFFFF11E2 : 6172                		bsr	vid_PrintTValW
(1) 2272/FFFFFFFFFFFF11E4 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2273/FFFFFFFFFFFF11E8 : 4E75                		rts
(1) 2274/FFFFFFFFFFFF11EA :                     
(1) 2275/FFFFFFFFFFFF11EA :                     ; ------------------------------------------------
(1) 2276/FFFFFFFFFFFF11EA :                     ; a4 - Memory value
(1) 2277/FFFFFFFFFFFF11EA :                     ; d6 - Type
(1) 2278/FFFFFFFFFFFF11EA :                     
(1) 2279/FFFFFFFFFFFF11EA :                     vid_PrintTVal:
(1) 2280/FFFFFFFFFFFF11EA : 0246 0003           		andi.w	#%11,d6
(1) 2281/FFFFFFFFFFFF11EE : 4847                		swap	d7
(1) 2282/FFFFFFFFFFFF11F0 : 3E3C 0000           		move.w	#1-1,d7
(1) 2283/FFFFFFFFFFFF11F4 : BC3C 0003           		cmp.b	#$03,d6
(1) 2284/FFFFFFFFFFFF11F8 : 6724                		beq.s	.show_long
(1) 2285/FFFFFFFFFFFF11FA : BC3C 0002           		cmp.b	#$02,d6
(1) 2286/FFFFFFFFFFFF11FE : 6716                		beq.s	.show_24
(1) 2287/FFFFFFFFFFFF1200 : BC3C 0001           		cmp.b	#$01,d6
(1) 2288/FFFFFFFFFFFF1204 : 6708                		beq.s	.show_word
(1) 2289/FFFFFFFFFFFF1206 :                     .show_byte:
(1) 2290/FFFFFFFFFFFF1206 : 1814                		move.b	(a4),d4
(1) 2291/FFFFFFFFFFFF1208 : 4844                		swap	d4
(1) 2292/FFFFFFFFFFFF120A : E19C                		rol.l	#8,d4
(1) 2293/FFFFFFFFFFFF120C : 6014                		bra.s	.mk_value
(1) 2294/FFFFFFFFFFFF120E :                     .show_word:
(1) 2295/FFFFFFFFFFFF120E : 3814                		move.w	(a4),d4
(1) 2296/FFFFFFFFFFFF1210 : 4844                		swap	d4
(1) 2297/FFFFFFFFFFFF1212 : 5247                		addq.w	#1,d7
(1) 2298/FFFFFFFFFFFF1214 : 600C                		bra.s	.mk_value
(1) 2299/FFFFFFFFFFFF1216 :                     .show_24:
(1) 2300/FFFFFFFFFFFF1216 : 2814                		move.l	(a4),d4
(1) 2301/FFFFFFFFFFFF1218 : E19C                		rol.l	#8,d4
(1) 2302/FFFFFFFFFFFF121A : 5447                		addq.w	#2,d7
(1) 2303/FFFFFFFFFFFF121C : 6004                		bra.s	.mk_value
(1) 2304/FFFFFFFFFFFF121E :                     .show_long:
(1) 2305/FFFFFFFFFFFF121E : 2814                		move.l	(a4),d4
(1) 2306/FFFFFFFFFFFF1220 : 5647                		addq.w	#3,d7
(1) 2307/FFFFFFFFFFFF1222 :                     .mk_value:
(1) 2308/FFFFFFFFFFFF1222 : E99C                		rol.l	#4,d4
(1) 2309/FFFFFFFFFFFF1224 : 610E                		bsr.s	.show_nibbl
(1) 2310/FFFFFFFFFFFF1226 : E99C                		rol.l	#4,d4
(1) 2311/FFFFFFFFFFFF1228 : 610A                		bsr.s	.show_nibbl
(1) 2312/FFFFFFFFFFFF122A : 51CF FFF6           		dbf	d7,.mk_value
(1) 2313/FFFFFFFFFFFF122E : 4846                		swap	d6
(1) 2314/FFFFFFFFFFFF1230 : 4847                		swap	d7
(1) 2315/FFFFFFFFFFFF1232 : 4E75                		rts
(1) 2316/FFFFFFFFFFFF1234 :                     .show_nibbl:
(1) 2317/FFFFFFFFFFFF1234 : 2846                		move.l	d6,a4
(1) 2318/FFFFFFFFFFFF1236 : 1C04                		move.b	d4,d6
(1) 2319/FFFFFFFFFFFF1238 : 0246 000F           		andi.w	#$0F,d6
(1) 2320/FFFFFFFFFFFF123C : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2321/FFFFFFFFFFFF1240 : 6502                		bcs.s	.hex_incr
(1) 2322/FFFFFFFFFFFF1242 : 5E46                		addq.w	#7,d6
(1) 2323/FFFFFFFFFFFF1244 : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2324/FFFFFFFFFFFF1248 :                     ; 		add.w	(RAM_SetPrntVram).w,d6
(1) 2325/FFFFFFFFFFFF1248 : DC42                		add.w	d2,d6
(1) 2326/FFFFFFFFFFFF124A : 0446 0020           		subi.w	#$20,d6
(1) 2327/FFFFFFFFFFFF124E : 3C86                		move.w	d6,(a6)
(1) 2328/FFFFFFFFFFFF1250 : 5445                		addq.w	#2,d5
(1) 2329/FFFFFFFFFFFF1252 : 2C0C                		move.l	a4,d6
(1) 2330/FFFFFFFFFFFF1254 : 4E75                		rts
(1) 2331/FFFFFFFFFFFF1256 :                     
(1) 2332/FFFFFFFFFFFF1256 :                     ; ------------------------------------------------
(1) 2333/FFFFFFFFFFFF1256 :                     
(1) 2334/FFFFFFFFFFFF1256 :                     vid_PrintTValW:
(1) 2335/FFFFFFFFFFFF1256 : 0246 0003           		andi.w	#%11,d6
(1) 2336/FFFFFFFFFFFF125A : 4847                		swap	d7
(1) 2337/FFFFFFFFFFFF125C : 3E3C 0000           		move.w	#1-1,d7
(1) 2338/FFFFFFFFFFFF1260 : BC3C 0003           		cmp.b	#$03,d6
(1) 2339/FFFFFFFFFFFF1264 : 6724                		beq.s	.show_long
(1) 2340/FFFFFFFFFFFF1266 : BC3C 0002           		cmp.b	#$02,d6
(1) 2341/FFFFFFFFFFFF126A : 6716                		beq.s	.show_24
(1) 2342/FFFFFFFFFFFF126C : BC3C 0001           		cmp.b	#$01,d6
(1) 2343/FFFFFFFFFFFF1270 : 6708                		beq.s	.show_word
(1) 2344/FFFFFFFFFFFF1272 :                     .show_byte:
(1) 2345/FFFFFFFFFFFF1272 : 1814                		move.b	(a4),d4
(1) 2346/FFFFFFFFFFFF1274 : 4844                		swap	d4
(1) 2347/FFFFFFFFFFFF1276 : E19C                		rol.l	#8,d4
(1) 2348/FFFFFFFFFFFF1278 : 6014                		bra.s	.mk_value_in
(1) 2349/FFFFFFFFFFFF127A :                     .show_word:
(1) 2350/FFFFFFFFFFFF127A : 3814                		move.w	(a4),d4
(1) 2351/FFFFFFFFFFFF127C : 4844                		swap	d4
(1) 2352/FFFFFFFFFFFF127E : 5247                		addq.w	#1,d7
(1) 2353/FFFFFFFFFFFF1280 : 600C                		bra.s	.mk_value_in
(1) 2354/FFFFFFFFFFFF1282 :                     .show_24:
(1) 2355/FFFFFFFFFFFF1282 : 2814                		move.l	(a4),d4
(1) 2356/FFFFFFFFFFFF1284 : E19C                		rol.l	#8,d4
(1) 2357/FFFFFFFFFFFF1286 : 5447                		addq.w	#2,d7
(1) 2358/FFFFFFFFFFFF1288 : 6004                		bra.s	.mk_value_in
(1) 2359/FFFFFFFFFFFF128A :                     .show_long:
(1) 2360/FFFFFFFFFFFF128A : 2814                		move.l	(a4),d4
(1) 2361/FFFFFFFFFFFF128C : 5647                		addq.w	#3,d7
(1) 2362/FFFFFFFFFFFF128E :                     .mk_value_in:
(1) 2363/FFFFFFFFFFFF128E : 2C0B                		move.l	a3,d6
(1) 2364/FFFFFFFFFFFF1290 :                     
(1) 2365/FFFFFFFFFFFF1290 :                     
(1) 2366/FFFFFFFFFFFF1290 :                     	; d4 - value
(1) 2367/FFFFFFFFFFFF1290 : 4846                		swap	d6
(1) 2368/FFFFFFFFFFFF1292 :                     .mk_value:
(1) 2369/FFFFFFFFFFFF1292 : E99C                		rol.l	#4,d4
(1) 2370/FFFFFFFFFFFF1294 : 610E                		bsr.s	.show_nibbl
(1) 2371/FFFFFFFFFFFF1296 : E99C                		rol.l	#4,d4
(1) 2372/FFFFFFFFFFFF1298 : 610A                		bsr.s	.show_nibbl
(1) 2373/FFFFFFFFFFFF129A : 51CF FFF6           		dbf	d7,.mk_value
(1) 2374/FFFFFFFFFFFF129E : 4846                		swap	d6
(1) 2375/FFFFFFFFFFFF12A0 : 4847                		swap	d7
(1) 2376/FFFFFFFFFFFF12A2 : 4E75                		rts
(1) 2377/FFFFFFFFFFFF12A4 :                     
(1) 2378/FFFFFFFFFFFF12A4 :                     	; d6 - Y next-line size | TEMP
(1) 2379/FFFFFFFFFFFF12A4 :                     .show_nibbl:
(1) 2380/FFFFFFFFFFFF12A4 : 2846                		move.l	d6,a4
(1) 2381/FFFFFFFFFFFF12A6 : 2644                		move.l	d4,a3
(1) 2382/FFFFFFFFFFFF12A8 : 3C38 EC16           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2383/FFFFFFFFFFFF12AC : 0806 0002           		btst	#2,d6
(1) 2384/FFFFFFFFFFFF12B0 : 6730                		beq.s	.nibbl_norm
(1) 2385/FFFFFFFFFFFF12B2 :                     
(1) 2386/FFFFFFFFFFFF12B2 :                     	; TODO CHECAR ESTO
(1) 2387/FFFFFFFFFFFF12B2 : 616C                		bsr.s	.get_preval
(1) 2388/FFFFFFFFFFFF12B4 : 0446 0020           		subi.w	#$20,d6
(1) 2389/FFFFFFFFFFFF12B8 : 4847                		swap	d7
(1) 2390/FFFFFFFFFFFF12BA :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2391/FFFFFFFFFFFF12BA : 3802                		move.w	d2,d4
(1) 2392/FFFFFFFFFFFF12BC : 0244 07FF           		andi.w	#$7FF,d4
(1) 2393/FFFFFFFFFFFF12C0 : E24C                		lsr.w	#1,d4
(1) 2394/FFFFFFFFFFFF12C2 : DC44                		add.w	d4,d6
(1) 2395/FFFFFFFFFFFF12C4 :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2396/FFFFFFFFFFFF12C4 : 3802                		move.w	d2,d4
(1) 2397/FFFFFFFFFFFF12C6 : 0244 F800           		andi.w	#$F800,d4
(1) 2398/FFFFFFFFFFFF12CA : 8C44                		or.w	d4,d6
(1) 2399/FFFFFFFFFFFF12CC : 3807                		move.w	d7,d4
(1) 2400/FFFFFFFFFFFF12CE : 4847                		swap	d7
(1) 2401/FFFFFFFFFFFF12D0 : D845                		add.w	d5,d4
(1) 2402/FFFFFFFFFFFF12D2 : 4845                		swap	d5
(1) 2403/FFFFFFFFFFFF12D4 : 3D44 0004           		move.w	d4,4(a6)
(1) 2404/FFFFFFFFFFFF12D8 : 3D45 0004           		move.w	d5,4(a6)
(1) 2405/FFFFFFFFFFFF12DC : 4845                		swap	d5
(1) 2406/FFFFFFFFFFFF12DE : 3C86                		move.w	d6,(a6)
(1) 2407/FFFFFFFFFFFF12E0 : 6036                		bra.s	.nibbl_cont
(1) 2408/FFFFFFFFFFFF12E2 :                     
(1) 2409/FFFFFFFFFFFF12E2 :                     .nibbl_norm:
(1) 2410/FFFFFFFFFFFF12E2 : 613C                		bsr.s	.get_preval
(1) 2411/FFFFFFFFFFFF12E4 : 0446 0020           		subi.w	#$20,d6
(1) 2412/FFFFFFFFFFFF12E8 : DC46                		add.w	d6,d6
(1) 2413/FFFFFFFFFFFF12EA : DC42                		add.w	d2,d6
(1) 2414/FFFFFFFFFFFF12EC : 4847                		swap	d7
(1) 2415/FFFFFFFFFFFF12EE : 3807                		move.w	d7,d4
(1) 2416/FFFFFFFFFFFF12F0 : 4847                		swap	d7
(1) 2417/FFFFFFFFFFFF12F2 : D845                		add.w	d5,d4
(1) 2418/FFFFFFFFFFFF12F4 : 4845                		swap	d5
(1) 2419/FFFFFFFFFFFF12F6 : 3D44 0004           		move.w	d4,4(a6)
(1) 2420/FFFFFFFFFFFF12FA : 3D45 0004           		move.w	d5,4(a6)
(1) 2421/FFFFFFFFFFFF12FE : 4845                		swap	d5
(1) 2422/FFFFFFFFFFFF1300 : 3C86                		move.w	d6,(a6)
(1) 2423/FFFFFFFFFFFF1302 : 5246                		addq.w	#1,d6
(1) 2424/FFFFFFFFFFFF1304 : 4846                		swap	d6
(1) 2425/FFFFFFFFFFFF1306 : D846                		add.w	d6,d4
(1) 2426/FFFFFFFFFFFF1308 : 4846                		swap	d6
(1) 2427/FFFFFFFFFFFF130A : 4845                		swap	d5
(1) 2428/FFFFFFFFFFFF130C : 3D44 0004           		move.w	d4,4(a6)
(1) 2429/FFFFFFFFFFFF1310 : 3D45 0004           		move.w	d5,4(a6)
(1) 2430/FFFFFFFFFFFF1314 : 4845                		swap	d5
(1) 2431/FFFFFFFFFFFF1316 : 3C86                		move.w	d6,(a6)
(1) 2432/FFFFFFFFFFFF1318 :                     .nibbl_cont:
(1) 2433/FFFFFFFFFFFF1318 : 5445                		addq.w	#2,d5
(1) 2434/FFFFFFFFFFFF131A : 2C0C                		move.l	a4,d6
(1) 2435/FFFFFFFFFFFF131C : 280B                		move.l	a3,d4
(1) 2436/FFFFFFFFFFFF131E : 4E75                		rts
(1) 2437/FFFFFFFFFFFF1320 :                     
(1) 2438/FFFFFFFFFFFF1320 :                     .get_preval:
(1) 2439/FFFFFFFFFFFF1320 : 1C04                		move.b	d4,d6
(1) 2440/FFFFFFFFFFFF1322 : 0246 000F           		andi.w	#$0F,d6
(1) 2441/FFFFFFFFFFFF1326 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2442/FFFFFFFFFFFF132A : 6502                		bcs.s	.hex_incr
(1) 2443/FFFFFFFFFFFF132C : 5E46                		addq.w	#7,d6
(1) 2444/FFFFFFFFFFFF132E :                     .hex_incr:
(1) 2445/FFFFFFFFFFFF132E : DC7C 0030           		add.w	#"0",d6
(1) 2446/FFFFFFFFFFFF1332 : 4E75                		rts
(1) 2447/FFFFFFFFFFFF1334 :                     
(1) 2448/FFFFFFFFFFFF1334 :                     ; ====================================================================
(1) 2449/FFFFFFFFFFFF1334 :                     ; ----------------------------------------------------------------
(1) 2450/FFFFFFFFFFFF1334 :                     ; VDP Sprites
(1) 2451/FFFFFFFFFFFF1334 :                     ; ----------------------------------------------------------------
(1) 2452/FFFFFFFFFFFF1334 :                     
(1) 2453/FFFFFFFFFFFF1334 :                     ; --------------------------------------------------------
(1) 2454/FFFFFFFFFFFF1334 :                     ; Video_SetSpr, Video_MakeSpr
(1) 2455/FFFFFFFFFFFF1334 :                     ;
(1) 2456/FFFFFFFFFFFF1334 :                     ; Sets or Makes a VDP Sprite piece
(1) 2457/FFFFFFFFFFFF1334 :                     ;
(1) 2458/FFFFFFFFFFFF1334 :                     ; Input:
(1) 2459/FFFFFFFFFFFF1334 :                     ; a0   | Slot (0-80) for _SetSpr
(1) 2460/FFFFFFFFFFFF1334 :                     ; d0.w | X pos
(1) 2461/FFFFFFFFFFFF1334 :                     ; d1.w | Y pos
(1) 2462/FFFFFFFFFFFF1334 :                     ; d2.w | VRAM
(1) 2463/FFFFFFFFFFFF1334 :                     ; d3.w | Size
(1) 2464/FFFFFFFFFFFF1334 :                     ;
(1) 2465/FFFFFFFFFFFF1334 :                     ; Returns:
(1) 2466/FFFFFFFFFFFF1334 :                     ; bcc | OK
(1) 2467/FFFFFFFFFFFF1334 :                     ; bcs | Ran out of slots (not sprites)
(1) 2468/FFFFFFFFFFFF1334 :                     ; --------------------------------------------------------
(1) 2469/FFFFFFFFFFFF1334 :                     
(1) 2470/FFFFFFFFFFFF1334 :                     Video_SetSpr:
(1) 2471/FFFFFFFFFFFF1334 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2472/FFFFFFFFFFFF1338 : 2E08                		move.l	a0,d7
(1) 2473/FFFFFFFFFFFF133A : 7C00                		moveq	#0,d6
(1) 2474/FFFFFFFFFFFF133C : 6020                		bra	vidMdSpr_MkSpr
(1) 2475/FFFFFFFFFFFF133E :                     Video_MakeSpr:
(1) 2476/FFFFFFFFFFFF133E : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2477/FFFFFFFFFFFF1342 : 7E00                		moveq	#0,d7
(1) 2478/FFFFFFFFFFFF1344 : 4DF8 DDDE           		lea	(RAM_SprPzList).w,a6
(1) 2479/FFFFFFFFFFFF1348 : 7C4F                		moveq	#80-1,d6
(1) 2480/FFFFFFFFFFFF134A :                     .chk_free:
(1) 2481/FFFFFFFFFFFF134A : 0816 0007           		btst	#7,(a6)
(1) 2482/FFFFFFFFFFFF134E : 670C                		beq.s	.mk_spr
(1) 2483/FFFFFFFFFFFF1350 : 5247                		addq.w	#1,d7
(1) 2484/FFFFFFFFFFFF1352 : DCFC 0008           		adda	#8,a6
(1) 2485/FFFFFFFFFFFF1356 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2486/FFFFFFFFFFFF135A : 605C                		bra.s	vidMd_CError
(1) 2487/FFFFFFFFFFFF135C :                     .mk_spr:
(1) 2488/FFFFFFFFFFFF135C : 7C40                		moveq	#$40,d6
(1) 2489/FFFFFFFFFFFF135E :                     vidMdSpr_MkSpr:
(1) 2490/FFFFFFFFFFFF135E : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2491/FFFFFFFFFFFF1364 : BE7C 0050           		cmp.w	#80,d7
(1) 2492/FFFFFFFFFFFF1368 : 6C4E                		bge.s	vidMd_CError
(1) 2493/FFFFFFFFFFFF136A : E74F                		lsl.w	#3,d7
(1) 2494/FFFFFFFFFFFF136C : 0687 FFFF DDDE      		addi.l	#RAM_SprPzList,d7
(1) 2495/FFFFFFFFFFFF1372 : 2C47                		move.l	d7,a6
(1) 2496/FFFFFFFFFFFF1374 : 4846                		swap	d6
(1) 2497/FFFFFFFFFFFF1376 : 3E01                		move.w	d1,d7			; Y pos
(1) 2498/FFFFFFFFFFFF1378 : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2499/FFFFFFFFFFFF137C : 0838 0002 EC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2500/FFFFFFFFFFFF1382 : 6704                		beq.s	.dont_add
(1) 2501/FFFFFFFFFFFF1384 : 0647 0080           		addi.w	#$80,d7
(1) 2502/FFFFFFFFFFFF1388 :                     .dont_add:
(1) 2503/FFFFFFFFFFFF1388 : 0247 03FF           		andi.w	#$3FF,d7
(1) 2504/FFFFFFFFFFFF138C : 3C03                		move.w	d3,d6
(1) 2505/FFFFFFFFFFFF138E : 0246 000F           		andi.w	#%1111,d6
(1) 2506/FFFFFFFFFFFF1392 : E14E                		lsl.w	#8,d6
(1) 2507/FFFFFFFFFFFF1394 : E54E                		lsl.w	#2,d6
(1) 2508/FFFFFFFFFFFF1396 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2509/FFFFFFFFFFFF1398 : 4846                		swap	d6
(1) 2510/FFFFFFFFFFFF139A : E14E                		lsl.w	#8,d6
(1) 2511/FFFFFFFFFFFF139C : 8E7C 8000           		or.w	#$8000,d7
(1) 2512/FFFFFFFFFFFF13A0 : 8E46                		or.w	d6,d7
(1) 2513/FFFFFFFFFFFF13A2 : 3CC7                		move.w	d7,(a6)+
(1) 2514/FFFFFFFFFFFF13A4 : 3E00                		move.w	d0,d7
(1) 2515/FFFFFFFFFFFF13A6 : 0647 0080           		addi.w	#$80,d7
(1) 2516/FFFFFFFFFFFF13AA : 3CC7                		move.w	d7,(a6)+
(1) 2517/FFFFFFFFFFFF13AC : 3CC2                		move.w	d2,(a6)+
(1) 2518/FFFFFFFFFFFF13AE : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2519/FFFFFFFFFFFF13B2 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2520/FFFFFFFFFFFF13B6 : 4E75                		rts
(1) 2521/FFFFFFFFFFFF13B8 :                     ; Carry error
(1) 2522/FFFFFFFFFFFF13B8 :                     vidMd_CError:
(1) 2523/FFFFFFFFFFFF13B8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2524/FFFFFFFFFFFF13BC : 003C 0001           		or	#1,ccr			; Return Error
(1) 2525/FFFFFFFFFFFF13C0 :                     vidMd_CFreeze:
(1) 2526/FFFFFFFFFFFF13C0 : 4E75                		rts
(1) 2527/FFFFFFFFFFFF13C2 :                     
(1) 2528/FFFFFFFFFFFF13C2 :                     ; --------------------------------------------------------
(1) 2529/FFFFFFFFFFFF13C2 :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2530/FFFFFFFFFFFF13C2 :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2531/FFFFFFFFFFFF13C2 :                     ;
(1) 2532/FFFFFFFFFFFF13C2 :                     ; Sets or Makes a VDP Sprite with map data
(1) 2533/FFFFFFFFFFFF13C2 :                     ;
(1) 2534/FFFFFFFFFFFF13C2 :                     ; Input:
(1) 2535/FFFFFFFFFFFF13C2 :                     ; a0   | Slot (0-80) for _SetSprMap/_SetSprMap_DMA
(1) 2536/FFFFFFFFFFFF13C2 :                     ; a1   | Map data
(1) 2537/FFFFFFFFFFFF13C2 :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2538/FFFFFFFFFFFF13C2 :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2539/FFFFFFFFFFFF13C2 :                     ; d0.w | X position
(1) 2540/FFFFFFFFFFFF13C2 :                     ; d1.w | Y position
(1) 2541/FFFFFFFFFFFF13C2 :                     ; d2.w | VRAM output location
(1) 2542/FFFFFFFFFFFF13C2 :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2543/FFFFFFFFFFFF13C2 :                     ;        cell vram is ignored.
(1) 2544/FFFFFFFFFFFF13C2 :                     ; d3.w | Frame number
(1) 2545/FFFFFFFFFFFF13C2 :                     ;
(1) 2546/FFFFFFFFFFFF13C2 :                     ; Returns:
(1) 2547/FFFFFFFFFFFF13C2 :                     ; bcc | OK
(1) 2548/FFFFFFFFFFFF13C2 :                     ; bcs | Ran out of slots (not sprites)
(1) 2549/FFFFFFFFFFFF13C2 :                     ; --------------------------------------------------------
(1) 2550/FFFFFFFFFFFF13C2 :                     
(1) 2551/FFFFFFFFFFFF13C2 :                     Video_SetSprMap_DMA:
(1) 2552/FFFFFFFFFFFF13C2 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2553/FFFFFFFFFFFF13C6 : 6104                		bsr	Video_SetSprMap
(1) 2554/FFFFFFFFFFFF13C8 : 651E                		bcs.s	vid_MkDmaCarry
(1) 2555/FFFFFFFFFFFF13CA : 6012                		bra	vid_MkDmaNext
(1) 2556/FFFFFFFFFFFF13CC :                     Video_SetSprMap:
(1) 2557/FFFFFFFFFFFF13CC : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2558/FFFFFFFFFFFF13D0 : 2E08                		move.l	a0,d7
(1) 2559/FFFFFFFFFFFF13D2 : 7C00                		moveq	#0,d6
(1) 2560/FFFFFFFFFFFF13D4 : 6036                		bra	vidMdSpr_MkSprMap
(1) 2561/FFFFFFFFFFFF13D6 :                     Video_MakeSprMap_DMA:
(1) 2562/FFFFFFFFFFFF13D6 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2563/FFFFFFFFFFFF13DA : 6112                		bsr	Video_MakeSprMap
(1) 2564/FFFFFFFFFFFF13DC : 650A                		bcs.s	vid_MkDmaCarry
(1) 2565/FFFFFFFFFFFF13DE :                     vid_MkDmaNext:
(1) 2566/FFFFFFFFFFFF13DE : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2567/FFFFFFFFFFFF13E0 : 224B                		move.l	a3,a1
(1) 2568/FFFFFFFFFFFF13E2 : 3003                		move.w	d3,d0
(1) 2569/FFFFFFFFFFFF13E4 : 3202                		move.w	d2,d1
(1) 2570/FFFFFFFFFFFF13E6 : 6160                		bsr	vid_MkMapDma
(1) 2571/FFFFFFFFFFFF13E8 :                     vid_MkDmaCarry:
(1) 2572/FFFFFFFFFFFF13E8 : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2573/FFFFFFFFFFFF13EC : 4E75                		rts
(1) 2574/FFFFFFFFFFFF13EE :                     
(1) 2575/FFFFFFFFFFFF13EE :                     Video_MakeSprMap:
(1) 2576/FFFFFFFFFFFF13EE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2577/FFFFFFFFFFFF13F2 : 7E00                		moveq	#0,d7
(1) 2578/FFFFFFFFFFFF13F4 : 4DF8 DC5E           		lea	(RAM_SprMapList).w,a6
(1) 2579/FFFFFFFFFFFF13F8 : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2580/FFFFFFFFFFFF13FA :                     .chk_free:
(1) 2581/FFFFFFFFFFFF13FA : 4A16                		tst.b	(a6)
(1) 2582/FFFFFFFFFFFF13FC : 670C                		beq.s	.mk_spr
(1) 2583/FFFFFFFFFFFF13FE : 5247                		addq.w	#1,d7
(1) 2584/FFFFFFFFFFFF1400 : DCFC 0010           		adda	#$10,a6
(1) 2585/FFFFFFFFFFFF1404 : 51CE FFF4           		dbf	d6,.chk_free
(1) 2586/FFFFFFFFFFFF1408 : 60AE                		bra	vidMd_CError
(1) 2587/FFFFFFFFFFFF140A :                     .mk_spr:
(1) 2588/FFFFFFFFFFFF140A : 7C40                		moveq	#$40,d6
(1) 2589/FFFFFFFFFFFF140C :                     vidMdSpr_MkSprMap:
(1) 2590/FFFFFFFFFFFF140C : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2591/FFFFFFFFFFFF1412 : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2592/FFFFFFFFFFFF1416 : 6CA0                		bge	vidMd_CError
(1) 2593/FFFFFFFFFFFF1418 : E98F                		lsl.l	#4,d7
(1) 2594/FFFFFFFFFFFF141A : 0687 FFFF DC5E      		addi.l	#RAM_SprMapList,d7
(1) 2595/FFFFFFFFFFFF1420 : 2C47                		move.l	d7,a6
(1) 2596/FFFFFFFFFFFF1422 : 2E09                		move.l	a1,d7
(1) 2597/FFFFFFFFFFFF1424 : 8C7C 0080           		or.w	#$80,d6
(1) 2598/FFFFFFFFFFFF1428 : 4846                		swap	d6
(1) 2599/FFFFFFFFFFFF142A : E18E                		lsl.l	#8,d6
(1) 2600/FFFFFFFFFFFF142C : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2601/FFFFFFFFFFFF1432 : 8E86                		or.l	d6,d7
(1) 2602/FFFFFFFFFFFF1434 : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2603/FFFFFFFFFFFF1436 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2604/FFFFFFFFFFFF1438 : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2605/FFFFFFFFFFFF143A : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2606/FFFFFFFFFFFF143C : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2607/FFFFFFFFFFFF143E : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2608/FFFFFFFFFFFF1442 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2609/FFFFFFFFFFFF1446 : 4E75                		rts
(1) 2610/FFFFFFFFFFFF1448 :                     
(1) 2611/FFFFFFFFFFFF1448 :                     ; --------------------------------------------------------
(1) 2612/FFFFFFFFFFFF1448 :                     ; Input:
(1) 2613/FFFFFFFFFFFF1448 :                     ; a0   | DMA map data
(1) 2614/FFFFFFFFFFFF1448 :                     ; a1   | Graphics data
(1) 2615/FFFFFFFFFFFF1448 :                     ; d0.w | Current frame in DMA list
(1) 2616/FFFFFFFFFFFF1448 :                     ; d1.w | VRAM position
(1) 2617/FFFFFFFFFFFF1448 :                     ;
(1) 2618/FFFFFFFFFFFF1448 :                     ; USES:
(1) 2619/FFFFFFFFFFFF1448 :                     ; a6
(1) 2620/FFFFFFFFFFFF1448 :                     vid_MkMapDma:
(1) 2621/FFFFFFFFFFFF1448 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2622/FFFFFFFFFFFF144C : 7800                		moveq	#0,d4
(1) 2623/FFFFFFFFFFFF144E : 0240 00FF           		andi.w	#$FF,d0
(1) 2624/FFFFFFFFFFFF1452 : D040                 		add.w	d0,d0
(1) 2625/FFFFFFFFFFFF1454 : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2626/FFFFFFFFFFFF1458 : D0C4                 		adda	d4,a0
(1) 2627/FFFFFFFFFFFF145A : 3818                 		move.w	(a0)+,d4
(1) 2628/FFFFFFFFFFFF145C : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2629/FFFFFFFFFFFF145E : 6B32                 		bmi.s	.no_dma
(1) 2630/FFFFFFFFFFFF1460 : 5344                 		subq.w	#1,d4
(1) 2631/FFFFFFFFFFFF1462 : 0241 07FF           		andi.w	#$07FF,d1
(1) 2632/FFFFFFFFFFFF1466 : EB49                		lsl.w	#5,d1
(1) 2633/FFFFFFFFFFFF1468 :                     .next_pz:
(1) 2634/FFFFFFFFFFFF1468 : 4844                		swap	d4
(1) 2635/FFFFFFFFFFFF146A : 3818                		move.w	(a0)+,d4
(1) 2636/FFFFFFFFFFFF146C : 3404                		move.w	d4,d2
(1) 2637/FFFFFFFFFFFF146E : EE4A                		lsr.w	#7,d2
(1) 2638/FFFFFFFFFFFF1470 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2639/FFFFFFFFFFFF1474 : D47C 0020           		add.w	#$20,d2
(1) 2640/FFFFFFFFFFFF1478 : 7000                		moveq	#0,d0
(1) 2641/FFFFFFFFFFFF147A : 3004                		move.w	d4,d0
(1) 2642/FFFFFFFFFFFF147C : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2643/FFFFFFFFFFFF1480 : EB48                		lsl.w	#5,d0
(1) 2644/FFFFFFFFFFFF1482 : D089                		add.l	a1,d0
(1) 2645/FFFFFFFFFFFF1484 : 6100 F646           		bsr	Video_MakeDmaEntry
(1) 2646/FFFFFFFFFFFF1488 : D242                		add.w	d2,d1
(1) 2647/FFFFFFFFFFFF148A : 4844                		swap	d4
(1) 2648/FFFFFFFFFFFF148C : 51CC FFDA           		dbf	d4,.next_pz
(1) 2649/FFFFFFFFFFFF1490 : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2650/FFFFFFFFFFFF1492 :                     .no_dma:
(1) 2651/FFFFFFFFFFFF1492 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2652/FFFFFFFFFFFF1496 : 4E75                		rts
(1) 2653/FFFFFFFFFFFF1498 :                     
(1) 2654/FFFFFFFFFFFF1498 :                     ; ====================================================================
(1) 2655/FFFFFFFFFFFF1498 :                     ; ----------------------------------------------------------------
(1) 2656/FFFFFFFFFFFF1498 :                     ; Video routines for SEGA CD
(1) 2657/FFFFFFFFFFFF1498 :                     ; ----------------------------------------------------------------
(1) 2658/FFFFFFFFFFFF1498 :                     
(1) 2660/FFFFFFFFFFFF1498 :                     
(1) 2661/FFFFFFFFFFFF1498 :                     ; --------------------------------------------------------
(1) 2662/FFFFFFFFFFFF1498 :                     ; EXAMPLE CODE to use stamps
(1) 2663/FFFFFFFFFFFF1498 :                     ;
(1) 2664/FFFFFFFFFFFF1498 :                     ; Single-buffer:
(1) 2665/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2666/FFFFFFFFFFFF1498 :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2667/FFFFFFFFFFFF1498 :                     ; 		moveq	#0,d2						; Single buffer mode
(1) 2668/FFFFFFFFFFFF1498 :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2669/FFFFFFFFFFFF1498 :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2670/FFFFFFFFFFFF1498 :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2671/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2672/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2673/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2674/FFFFFFFFFFFF1498 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2675/FFFFFFFFFFFF1498 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2676/FFFFFFFFFFFF1498 :                     
(1) 2677/FFFFFFFFFFFF1498 :                     ; Double-buffer:
(1) 2678/FFFFFFFFFFFF1498 :                     ; V32 H64
(1) 2679/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2680/FFFFFFFFFFFF1498 :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2681/FFFFFFFFFFFF1498 :                     ; 		moveq	#1,d2						; Double buffer mode
(1) 2682/FFFFFFFFFFFF1498 :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2683/FFFFFFFFFFFF1498 :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2684/FFFFFFFFFFFF1498 :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2685/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2686/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2687/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2688/FFFFFFFFFFFF1498 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2689/FFFFFFFFFFFF1498 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2690/FFFFFFFFFFFF1498 :                     ; 		move.l	#splitw($0000+$20,$0002),d0			; X+$20
(1) 2691/FFFFFFFFFFFF1498 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramSec).w,d3	; Get Second Auto-VRAM set by _StampEnable
(1) 2692/FFFFFFFFFFFF1498 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2693/FFFFFFFFFFFF1498 :                     
(1) 2694/FFFFFFFFFFFF1498 :                     ; --------------------------------------------------------
(1) 2695/FFFFFFFFFFFF1498 :                     ; Video_MdMcd_StampInit
(1) 2696/FFFFFFFFFFFF1498 :                     ;
(1) 2697/FFFFFFFFFFFF1498 :                     ; Make the first Stamp screens, Call this BEFORE entering
(1) 2698/FFFFFFFFFFFF1498 :                     ; your main loop.
(1) 2699/FFFFFFFFFFFF1498 :                     ; ** VDP DISPLAY MUST BE ENABLED **
(1) 2700/FFFFFFFFFFFF1498 :                     ;
(1) 2701/FFFFFFFFFFFF1498 :                     ; Breaks:
(1) 2702/FFFFFFFFFFFF1498 :                     ; ALL
(1) 2703/FFFFFFFFFFFF1498 :                     ; --------------------------------------------------------
(1) 2704/FFFFFFFFFFFF1498 :                     
(1) 2705/FFFFFFFFFFFF1498 :                     Video_MdMcd_StampInit:
(1) 2707/FFFFFFFFFFFF1498 : 4DF8 DC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2708/FFFFFFFFFFFF149C : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2709/FFFFFFFFFFFF14A0 : 672A                		beq.s	.exit_now
(1) 2710/FFFFFFFFFFFF14A2 : 426E 000E           		clr.w	mdstmp_currOutFlip(a6)
(1) 2711/FFFFFFFFFFFF14A6 : 6100 0B40           		bsr	System_MdMcd_WaitWRAM
(1) 2712/FFFFFFFFFFFF14AA : 6100 0214           		bsr	vidMdMcd_SendStampInfo
(1) 2713/FFFFFFFFFFFF14AE : 6100 0B5A           		bsr	System_MdMcd_GiveWRAM
(1) 2714/FFFFFFFFFFFF14B2 : 6106                		bsr	.mk_initbuff
(1) 2715/FFFFFFFFFFFF14B4 : 6104                		bsr	.mk_initbuff
(1) 2716/FFFFFFFFFFFF14B6 : 6100 0002           		bsr	.mk_initbuff
(1) 2717/FFFFFFFFFFFF14BA :                     .mk_initbuff:
(1) 2718/FFFFFFFFFFFF14BA : 6100 0480           		bsr	System_Render
(1) 2719/FFFFFFFFFFFF14BE : 6110                		bsr	Video_MdMcd_StampRender
(1) 2720/FFFFFFFFFFFF14C0 :                     .wait_finish:
(1) 2721/FFFFFFFFFFFF14C0 : 6100 047A           		bsr	System_Render
(1) 2722/FFFFFFFFFFFF14C4 : 610A                		bsr	Video_MdMcd_StampRender
(1) 2723/FFFFFFFFFFFF14C6 : 4A78 DC08           		tst.w	(RAM_MdMcd_StampSett+mdstmp_vramLen).w
(1) 2724/FFFFFFFFFFFF14CA : 66F4                		bne.s	.wait_finish
(1) 2725/FFFFFFFFFFFF14CC :                     .exit_now:
(1) 2727/FFFFFFFFFFFF14CC : 6000 04EC           		bra	Sound_Update
(1) 2728/FFFFFFFFFFFF14D0 :                     
(1) 2729/FFFFFFFFFFFF14D0 :                     ; --------------------------------------------------------
(1) 2730/FFFFFFFFFFFF14D0 :                     ; Video_MdMcd_StampRender
(1) 2731/FFFFFFFFFFFF14D0 :                     ;
(1) 2732/FFFFFFFFFFFF14D0 :                     ; Update new Stamp output, drops frames if not ready.
(1) 2733/FFFFFFFFFFFF14D0 :                     ; ** Call this during VBlank ONLY.
(1) 2734/FFFFFFFFFFFF14D0 :                     ;
(1) 2735/FFFFFFFFFFFF14D0 :                     ; Returns:
(1) 2736/FFFFFFFFFFFF14D0 :                     ; bcc | No changes
(1) 2737/FFFFFFFFFFFF14D0 :                     ; bcs | Output buffer changed (DOUBLE-buffer ONLY)
(1) 2738/FFFFFFFFFFFF14D0 :                     ;
(1) 2739/FFFFFFFFFFFF14D0 :                     ; Breaks:
(1) 2740/FFFFFFFFFFFF14D0 :                     ; ALL
(1) 2741/FFFFFFFFFFFF14D0 :                     ; --------------------------------------------------------
(1) 2742/FFFFFFFFFFFF14D0 :                     
(1) 2743/FFFFFFFFFFFF14D0 :                     Video_MdMcd_StampRender:
(1) 2745/FFFFFFFFFFFF14D0 : 4DF8 DC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2746/FFFFFFFFFFFF14D4 : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2747/FFFFFFFFFFFF14D8 : 6700 0084           		beq	.not_yet
(1) 2748/FFFFFFFFFFFF14DC : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2749/FFFFFFFFFFFF14E0 : 6646                		bne	.draw_cells
(1) 2750/FFFFFFFFFFFF14E2 :                     ; 		bsr	System_MdMcd_WaitWRAM
(1) 2751/FFFFFFFFFFFF14E2 :                     ; 		move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 2752/FFFFFFFFFFFF14E2 :                     ; 		btst	#3,d7
(1) 2753/FFFFFFFFFFFF14E2 :                     ; 		bne.s	.not_yet
(1) 2754/FFFFFFFFFFFF14E2 : 6100 0B10           		bsr	System_MdMcd_CheckWRAM
(1) 2755/FFFFFFFFFFFF14E6 : 6676                		bne	.not_yet
(1) 2756/FFFFFFFFFFFF14E8 : 6100 0AA2           		bsr	System_MdMcd_SubWait
(1) 2757/FFFFFFFFFFFF14EC : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2758/FFFFFFFFFFFF14F0 : 0247 0001           		andi.w	#%01,d7
(1) 2759/FFFFFFFFFFFF14F4 : 33C7 0023 BFFE      		move.w	d7,(sysmcd_wram+WRAM_StampCurrFlip).l
(1) 2760/FFFFFFFFFFFF14FA : 33FC 0000 0023      		move.w	#0,(sysmcd_wram+WRAM_StampsDone).l
         FFFFFFFFFFFF1500 : BFFC             
(1) 2761/FFFFFFFFFFFF1502 : 0A6E 0001 000E      		eor.w	#1,mdstmp_currOutFlip(a6)
(1) 2762/FFFFFFFFFFFF1508 : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2763/FFFFFFFFFFFF150C : 6100 04AC           		bsr	Sound_Update
(1) 2764/FFFFFFFFFFFF1510 : 42AE 001A           		clr.l	mdstmp_buffIncr(a6)
(1) 2765/FFFFFFFFFFFF1514 : 426E 000A           		clr.w	mdstmp_vramIncr(a6)
(1) 2766/FFFFFFFFFFFF1518 : 3D6E 0006 0008      		move.w	mdstmp_vramSize(a6),mdstmp_vramLen(a6)
(1) 2767/FFFFFFFFFFFF151E : 6100 01A0           		bsr	vidMdMcd_SendStampInfo
(1) 2768/FFFFFFFFFFFF1522 : 6100 00A4           		bsr	.make_cellbuff
(1) 2769/FFFFFFFFFFFF1526 : 6012                		bra	.first_step
(1) 2770/FFFFFFFFFFFF1528 :                     
(1) 2771/FFFFFFFFFFFF1528 :                     ; --------------------------------------------------------
(1) 2772/FFFFFFFFFFFF1528 :                     ; Next cell slice
(1) 2773/FFFFFFFFFFFF1528 :                     ; --------------------------------------------------------
(1) 2774/FFFFFFFFFFFF1528 :                     
(1) 2775/FFFFFFFFFFFF1528 :                     .draw_cells:
(1) 2776/FFFFFFFFFFFF1528 : 6100 0A54           		bsr	System_MdMcd_Interrupt
(1) 2777/FFFFFFFFFFFF152C :                     .wait_wram:
(1) 2778/FFFFFFFFFFFF152C : 6100 048C           		bsr	Sound_Update
(1) 2779/FFFFFFFFFFFF1530 : 6100 0AC2           		bsr	System_MdMcd_CheckWRAM
(1) 2780/FFFFFFFFFFFF1534 : 66F6                		bne	.wait_wram
(1) 2781/FFFFFFFFFFFF1536 : 6100 0090           		bsr	.make_cellbuff
(1) 2782/FFFFFFFFFFFF153A :                     .first_step:
(1) 2783/FFFFFFFFFFFF153A : 6100 0ACE           		bsr	System_MdMcd_GiveWRAM
(1) 2784/FFFFFFFFFFFF153E : 6128                		bsr	.mkdma_buff
(1) 2785/FFFFFFFFFFFF1540 : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2786/FFFFFFFFFFFF1544 : 6618                		bne.s	.not_yet
(1) 2787/FFFFFFFFFFFF1546 : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2788/FFFFFFFFFFFF154A : 6100 046E           		bsr	Sound_Update
(1) 2789/FFFFFFFFFFFF154E : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2790/FFFFFFFFFFFF1552 : 670A                		beq.s	.not_yet
(1) 2791/FFFFFFFFFFFF1554 : 6100 0464           		bsr	Sound_Update
(1) 2792/FFFFFFFFFFFF1558 : 003C 0001           		or	#1,ccr
(1) 2793/FFFFFFFFFFFF155C : 4E75                		rts
(1) 2794/FFFFFFFFFFFF155E :                     .not_yet:
(1) 2795/FFFFFFFFFFFF155E : 6100 045A           		bsr	Sound_Update
(1) 2796/FFFFFFFFFFFF1562 : 023C 001E           		and	#%11110,ccr
(1) 2797/FFFFFFFFFFFF1566 : 4E75                		rts
(1) 2798/FFFFFFFFFFFF1568 :                     
(1) 2799/FFFFFFFFFFFF1568 :                     ; --------------------------------------------------------
(1) 2800/FFFFFFFFFFFF1568 :                     
(1) 2801/FFFFFFFFFFFF1568 :                     .mkdma_buff:
(1) 2802/FFFFFFFFFFFF1568 : 202E 0012           		move.l	mdstmp_cellstorage(a6),d0
(1) 2803/FFFFFFFFFFFF156C : 7200                		moveq	#0,d1
(1) 2804/FFFFFFFFFFFF156E : 322E 0002           		move.w	mdstmp_vramMain(a6),d1
(1) 2805/FFFFFFFFFFFF1572 : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2806/FFFFFFFFFFFF1576 : 670A                		beq.s	.first_one
(1) 2807/FFFFFFFFFFFF1578 : 0816 0006           		btst	#6,mdstmp_flags(a6)
(1) 2808/FFFFFFFFFFFF157C : 6704                		beq.s	.first_one
(1) 2809/FFFFFFFFFFFF157E : 322E 0004           		move.w	mdstmp_vramSec(a6),d1
(1) 2810/FFFFFFFFFFFF1582 :                     .first_one:
(1) 2811/FFFFFFFFFFFF1582 : D26E 000A           		add.w	mdstmp_vramIncr(a6),d1
(1) 2812/FFFFFFFFFFFF1586 : 362E 0008           		move.w	mdstmp_vramLen(a6),d3
(1) 2813/FFFFFFFFFFFF158A : 342E 000C           		move.w	mdstmp_stmpoutb(a6),d2
(1) 2814/FFFFFFFFFFFF158E : B46E 0006           		cmp.w	mdstmp_vramSize(a6),d2
(1) 2815/FFFFFFFFFFFF1592 : 6704                		beq.s	.exact_size
(1) 2816/FFFFFFFFFFFF1594 : B642                		cmp.w	d2,d3
(1) 2817/FFFFFFFFFFFF1596 : 6E08                		bgt.s	.maximum
(1) 2818/FFFFFFFFFFFF1598 :                     .exact_size:
(1) 2819/FFFFFFFFFFFF1598 : 3403                		move.w	d3,d2
(1) 2820/FFFFFFFFFFFF159A : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2821/FFFFFFFFFFFF159E : 6014                		bra.s	.not_done
(1) 2822/FFFFFFFFFFFF15A0 :                     .maximum:
(1) 2823/FFFFFFFFFFFF15A0 : 3602                		move.w	d2,d3
(1) 2824/FFFFFFFFFFFF15A2 : D76E 000A           		addi.w	d3,mdstmp_vramIncr(a6)
(1) 2825/FFFFFFFFFFFF15A6 : 976E 0008           		subi.w	d3,mdstmp_vramLen(a6)
(1) 2826/FFFFFFFFFFFF15AA : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)	; Failsafe
(1) 2827/FFFFFFFFFFFF15AE : 6A04                		bpl.s	.not_done
(1) 2828/FFFFFFFFFFFF15B0 : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2829/FFFFFFFFFFFF15B4 :                     .not_done:
(1) 2830/FFFFFFFFFFFF15B4 : EB89                		lsl.l	#5,d1
(1) 2831/FFFFFFFFFFFF15B6 : EB8A                		lsl.l	#5,d2
(1) 2832/FFFFFFFFFFFF15B8 : 6100 F512           		bsr	Video_MakeDmaEntry
(1) 2834/FFFFFFFFFFFF15BC : 6000 03FC           		bra	Sound_Update
(1) 2835/FFFFFFFFFFFF15C0 :                     
(1) 2836/FFFFFFFFFFFF15C0 :                     ; --------------------------------------------------------
(1) 2837/FFFFFFFFFFFF15C0 :                     ; Get a slice of the dot-screen
(1) 2838/FFFFFFFFFFFF15C0 :                     ; --------------------------------------------------------
(1) 2839/FFFFFFFFFFFF15C0 :                     
(1) 2840/FFFFFFFFFFFF15C0 :                     .out_locs:
(1) 2841/FFFFFFFFFFFF15C0 : 0022 0000           		dc.l sysmcd_wram+WRAM_DotOutput_0
(1) 2842/FFFFFFFFFFFF15C4 : 0022 8000           		dc.l sysmcd_wram+WRAM_DotOutput_1
(1) 2843/FFFFFFFFFFFF15C8 :                     .make_cellbuff:
(1) 2844/FFFFFFFFFFFF15C8 : 6100 03F0           		bsr	Sound_Update
(1) 2845/FFFFFFFFFFFF15CC : 7E00                		moveq	#0,d7
(1) 2846/FFFFFFFFFFFF15CE : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2847/FFFFFFFFFFFF15D2 : 0247 0001           		andi.w	#%01,d7
(1) 2848/FFFFFFFFFFFF15D6 : E58F                		lsl.l	#2,d7
(1) 2849/FFFFFFFFFFFF15D8 : 2E3B 70E6           		move.l	.out_locs(pc,d7.w),d7
(1) 2850/FFFFFFFFFFFF15DC : DEAE 001A           		add.l	mdstmp_buffIncr(a6),d7
(1) 2851/FFFFFFFFFFFF15E0 : 2A47                		move.l	d7,a5
(1) 2852/FFFFFFFFFFFF15E2 : 7E00                		moveq	#0,d7
(1) 2853/FFFFFFFFFFFF15E4 : 3E2E 000C           		move.w	mdstmp_stmpoutb(a6),d7
(1) 2854/FFFFFFFFFFFF15E8 : 2C07                		move.l	d7,d6
(1) 2855/FFFFFFFFFFFF15EA : EB8E                		lsl.l	#5,d6
(1) 2856/FFFFFFFFFFFF15EC : DDAE 001A           		add.l	d6,mdstmp_buffIncr(a6)
(1) 2857/FFFFFFFFFFFF15F0 : 286E 0012           		movea.l	mdstmp_cellstorage(a6),a4
(1) 2858/FFFFFFFFFFFF15F4 : 3C07                		move.w	d7,d6
(1) 2859/FFFFFFFFFFFF15F6 : E84E                		lsr.w	#4,d6
(1) 2860/FFFFFFFFFFFF15F8 : 5346                		subq.w	#1,d6
(1) 2861/FFFFFFFFFFFF15FA :                     .copy_mid:
(1) 2862/FFFFFFFFFFFF15FA : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2863/FFFFFFFFFFFF15FE : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2864/FFFFFFFFFFFF1602 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2865/FFFFFFFFFFFF1606 : 48EC 0F0F 0020      		movem.l	d0-d3/a0-a3,$20(a4)
(1) 2866/FFFFFFFFFFFF160C : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2867/FFFFFFFFFFFF1610 : 48EC 0F0F 0040      		movem.l	d0-d3/a0-a3,$40(a4)
(1) 2868/FFFFFFFFFFFF1616 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2869/FFFFFFFFFFFF161A : 48EC 0F0F 0060      		movem.l	d0-d3/a0-a3,$60(a4)
(1) 2870/FFFFFFFFFFFF1620 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2871/FFFFFFFFFFFF1624 : 48EC 0F0F 0080      		movem.l	d0-d3/a0-a3,$80(a4)
(1) 2872/FFFFFFFFFFFF162A : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2873/FFFFFFFFFFFF162E : 48EC 0F0F 00A0      		movem.l	d0-d3/a0-a3,$A0(a4)
(1) 2874/FFFFFFFFFFFF1634 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2875/FFFFFFFFFFFF1638 : 48EC 0F0F 00C0      		movem.l	d0-d3/a0-a3,$C0(a4)
(1) 2876/FFFFFFFFFFFF163E : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2877/FFFFFFFFFFFF1642 : 48EC 0F0F 00E0      		movem.l	d0-d3/a0-a3,$E0(a4)
(1) 2878/FFFFFFFFFFFF1648 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2879/FFFFFFFFFFFF164C : 48EC 0F0F 0100      		movem.l	d0-d3/a0-a3,$100(a4)
(1) 2880/FFFFFFFFFFFF1652 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2881/FFFFFFFFFFFF1656 : 48EC 0F0F 0120      		movem.l	d0-d3/a0-a3,$120(a4)
(1) 2882/FFFFFFFFFFFF165C : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2883/FFFFFFFFFFFF1660 : 48EC 0F0F 0140      		movem.l	d0-d3/a0-a3,$140(a4)
(1) 2884/FFFFFFFFFFFF1666 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2885/FFFFFFFFFFFF166A : 48EC 0F0F 0160      		movem.l	d0-d3/a0-a3,$160(a4)
(1) 2886/FFFFFFFFFFFF1670 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2887/FFFFFFFFFFFF1674 : 48EC 0F0F 0180      		movem.l	d0-d3/a0-a3,$180(a4)
(1) 2888/FFFFFFFFFFFF167A : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2889/FFFFFFFFFFFF167E : 48EC 0F0F 01A0      		movem.l	d0-d3/a0-a3,$1A0(a4)
(1) 2890/FFFFFFFFFFFF1684 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2891/FFFFFFFFFFFF1688 : 48EC 0F0F 01C0      		movem.l	d0-d3/a0-a3,$1C0(a4)
(1) 2892/FFFFFFFFFFFF168E : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2893/FFFFFFFFFFFF1692 : 48EC 0F0F 01E0      		movem.l	d0-d3/a0-a3,$1E0(a4)
(1) 2894/FFFFFFFFFFFF1698 : 49EC 0200           		lea	$200(a4),a4
(1) 2895/FFFFFFFFFFFF169C : 51CE FF5C           		dbf	d6,.copy_mid
(1) 2896/FFFFFFFFFFFF16A0 : 6100 0318           		bsr	Sound_Update
(1) 2897/FFFFFFFFFFFF16A4 : 0247 000F           		andi.w	#%1111,d7
(1) 2898/FFFFFFFFFFFF16A8 : 6712                		beq.s	.no_lsb
(1) 2899/FFFFFFFFFFFF16AA : 5347                		subq.w	#1,d7
(1) 2900/FFFFFFFFFFFF16AC :                     .copy_lsb:
(1) 2901/FFFFFFFFFFFF16AC : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2902/FFFFFFFFFFFF16B0 : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2903/FFFFFFFFFFFF16B4 : 49EC 0020           		lea	$20(a4),a4
(1) 2904/FFFFFFFFFFFF16B8 : 51CF FFF2           		dbf	d7,.copy_lsb
(1) 2905/FFFFFFFFFFFF16BC :                     .no_lsb:
(1) 2906/FFFFFFFFFFFF16BC : 6000 02FC           		bra	Sound_Update
(1) 2907/FFFFFFFFFFFF16C0 :                     
(1) 2908/FFFFFFFFFFFF16C0 :                     ; --------------------------------------------------------
(1) 2909/FFFFFFFFFFFF16C0 :                     
(1) 2910/FFFFFFFFFFFF16C0 :                     vidMdMcd_SendStampInfo:
(1) 2911/FFFFFFFFFFFF16C0 : 4BF8 D800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2912/FFFFFFFFFFFF16C4 : 49F9 0023 A000      		lea	(sysmcd_wram+WRAM_MdStampList).l,a4
(1) 2913/FFFFFFFFFFFF16CA : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1) 2914/FFFFFFFFFFFF16CE :                     .copy_towram:
(1) 2915/FFFFFFFFFFFF16CE : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2916/FFFFFFFFFFFF16D2 : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2917/FFFFFFFFFFFF16D6 : D8FC 0020           		adda	#$20,a4
(1) 2918/FFFFFFFFFFFF16DA : 51CF FFF2           		dbf	d7,.copy_towram
(1) 2919/FFFFFFFFFFFF16DE : 4BF8 D800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2920/FFFFFFFFFFFF16E2 : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(1) 2921/FFFFFFFFFFFF16E4 : 3C3C 0020           		move.w	#cdstamp_len,d6
(1) 2922/FFFFFFFFFFFF16E8 :                     .chk_spr:
(1) 2923/FFFFFFFFFFFF16E8 : 0815 0006           		btst	#6,cdstamp_flags(a5)
(1) 2924/FFFFFFFFFFFF16EC : 6702                		beq.s	.not_sprtemp
(1) 2925/FFFFFFFFFFFF16EE : 4215                		clr.b	cdstamp_flags(a5)
(1) 2926/FFFFFFFFFFFF16F0 :                     .not_sprtemp:
(1) 2927/FFFFFFFFFFFF16F0 : DAC6                		adda	d6,a5
(1) 2928/FFFFFFFFFFFF16F2 : 51CF FFF4           		dbf	d7,.chk_spr
(1) 2929/FFFFFFFFFFFF16F6 : 6000 02C2           		bra	Sound_Update
(1) 2930/FFFFFFFFFFFF16FA :                     
(1) 2931/FFFFFFFFFFFF16FA :                     ; --------------------------------------------------------
(1) 2932/FFFFFFFFFFFF16FA :                     ; Video_MdMcd_StampEnable
(1) 2933/FFFFFFFFFFFF16FA :                     ;
(1) 2934/FFFFFFFFFFFF16FA :                     ; Init/Enable SCD Stamp rendering
(1) 2935/FFFFFFFFFFFF16FA :                     ;
(1) 2936/FFFFFFFFFFFF16FA :                     ; Input:
(1) 2937/FFFFFFFFFFFF16FA :                     ; a0   | RAM location to store cells
(1) 2938/FFFFFFFFFFFF16FA :                     ; d0.l | Dot-Screen Width and Height: splitw(width,height)
(1) 2939/FFFFFFFFFFFF16FA :                     ; d1.w | VRAM Main output
(1) 2940/FFFFFFFFFFFF16FA :                     ; d2.w | Use double-buffering: No(0) or Yes(1)
(1) 2941/FFFFFFFFFFFF16FA :                     ; d3.w | Size of out cells storage
(1) 2942/FFFFFFFFFFFF16FA :                     ;        Default tag: DEF_MaxStampCOut
(1) 2943/FFFFFFFFFFFF16FA :                     ;
(1) 2944/FFFFFFFFFFFF16FA :                     ; Notes:
(1) 2945/FFFFFFFFFFFF16FA :                     ; - Use only Width and Height aligned by 8
(1) 2946/FFFFFFFFFFFF16FA :                     ; - Width and Height will also be used to get the
(1) 2947/FFFFFFFFFFFF16FA :                     ;   the CENTER point in ALL Stamps.
(1) 2948/FFFFFFFFFFFF16FA :                     ; --------------------------------------------------------
(1) 2949/FFFFFFFFFFFF16FA :                     
(1) 2950/FFFFFFFFFFFF16FA :                     Video_MdMcd_StampEnable:
(1) 2951/FFFFFFFFFFFF16FA : 48E7 8306           		movem.l	d0/d6-d7/a5-a6,-(sp)
(1) 2952/FFFFFFFFFFFF16FE : 4DF8 DC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2953/FFFFFFFFFFFF1702 : 2A4E                		move.l	a6,a5
(1) 2954/FFFFFFFFFFFF1704 : 3E3C 001D           		move.w	#mdstmp_len-1,d7
(1) 2955/FFFFFFFFFFFF1708 : 7C00                		moveq	#0,d6
(1) 2956/FFFFFFFFFFFF170A :                     .clr_sett:
(1) 2957/FFFFFFFFFFFF170A : 3AC6                		move.w	d6,(a5)+
(1) 2958/FFFFFFFFFFFF170C : 51CF FFFC           		dbf	d7,.clr_sett
(1) 2959/FFFFFFFFFFFF1710 : 3D43 000C           		move.w	d3,mdstmp_stmpoutb(a6)
(1) 2960/FFFFFFFFFFFF1714 : 2D48 0012           		move.l	a0,mdstmp_cellstorage(a6)
(1) 2961/FFFFFFFFFFFF1718 : 3D41 0002           		move.w	d1,mdstmp_vramMain(a6)
(1) 2962/FFFFFFFFFFFF171C : 7E00                		moveq	#0,d7
(1) 2963/FFFFFFFFFFFF171E : 2C00                		move.l	d0,d6
(1) 2964/FFFFFFFFFFFF1720 : 4846                		swap	d6
(1) 2965/FFFFFFFFFFFF1722 : 3E00                		move.w	d0,d7
(1) 2966/FFFFFFFFFFFF1724 : CEC6                		mulu.w	d6,d7
(1) 2967/FFFFFFFFFFFF1726 : EC8F                		lsr.l	#5+1,d7
(1) 2968/FFFFFFFFFFFF1728 : 3D47 0006           		move.w	d7,mdstmp_vramSize(a6)
(1) 2969/FFFFFFFFFFFF172C : 0896 0000           		bclr	#0,mdstmp_flags(a6)
(1) 2970/FFFFFFFFFFFF1730 : 4A42                		tst.w	d2
(1) 2971/FFFFFFFFFFFF1732 : 670E                		beq.s	.dont_use
(1) 2972/FFFFFFFFFFFF1734 : 3C2E 0002           		move.w	mdstmp_vramMain(a6),d6
(1) 2973/FFFFFFFFFFFF1738 : DC47                		add.w	d7,d6
(1) 2974/FFFFFFFFFFFF173A : 3D46 0004           		move.w	d6,mdstmp_vramSec(a6)
(1) 2975/FFFFFFFFFFFF173E : 08D6 0000           		bset	#0,mdstmp_flags(a6)
(1) 2976/FFFFFFFFFFFF1742 :                     .dont_use:
(1) 2977/FFFFFFFFFFFF1742 : 08D6 0007           		bset	#7,mdstmp_flags(a6)
(1) 2978/FFFFFFFFFFFF1746 : 2E00                		move.l	d0,d7
(1) 2979/FFFFFFFFFFFF1748 : 4847                		swap	d7
(1) 2980/FFFFFFFFFFFF174A : 33C7 00A1 2010      		move.w	d7,(sysmcd_reg+mcd_dcomm_m).l
(1) 2981/FFFFFFFFFFFF1750 : 33C0 00A1 2012      		move.w	d0,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 2982/FFFFFFFFFFFF1756 : 6100 08B2           		bsr	System_MdMcd_GiveWRAM
(1) 2983/FFFFFFFFFFFF175A : 303C 0018           		move.w	#$18,d0
(1) 2984/FFFFFFFFFFFF175E : 6100 0848           		bsr	System_MdMcd_SubTask
(1) 2985/FFFFFFFFFFFF1762 : 6100 0884           		bsr	System_MdMcd_WaitWRAM
(1) 2986/FFFFFFFFFFFF1766 : 4CDF 60C1           		movem.l	(sp)+,d0/d6-d7/a5-a6
(1) 2987/FFFFFFFFFFFF176A : 4E75                		rts
(1) 2988/FFFFFFFFFFFF176C :                     
(1) 2989/FFFFFFFFFFFF176C :                     ; --------------------------------------------------------
(1) 2990/FFFFFFFFFFFF176C :                     ; Video_MdMcd_StampDisable
(1) 2991/FFFFFFFFFFFF176C :                     ;
(1) 2992/FFFFFFFFFFFF176C :                     ; Disable SCD Stamp rendering
(1) 2993/FFFFFFFFFFFF176C :                     ; --------------------------------------------------------
(1) 2994/FFFFFFFFFFFF176C :                     
(1) 2995/FFFFFFFFFFFF176C :                     Video_MdMcd_StampDisable:
(1) 2996/FFFFFFFFFFFF176C : 48E7 8002           		movem.l	d0/a6,-(sp)
(1) 2997/FFFFFFFFFFFF1770 : 4DF8 DC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2998/FFFFFFFFFFFF1774 : 0896 0007           		bclr	#7,mdstmp_flags(a6)
(1) 2999/FFFFFFFFFFFF1778 : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 3000/FFFFFFFFFFFF177C : 6100 088C           		bsr	System_MdMcd_GiveWRAM
(1) 3001/FFFFFFFFFFFF1780 : 7019                		moveq	#$19,d0
(1) 3002/FFFFFFFFFFFF1782 : 6100 0824           		bsr	System_MdMcd_SubTask
(1) 3003/FFFFFFFFFFFF1786 : 4CDF 4001           		movem.l	(sp)+,d0/a6
(1) 3004/FFFFFFFFFFFF178A : 4E75                		rts
(1) 3005/FFFFFFFFFFFF178C :                     
(1) 3006/FFFFFFFFFFFF178C :                     ; --------------------------------------------------------
(1) 3007/FFFFFFFFFFFF178C :                     ; Video_MdMcd_StampDotMap
(1) 3008/FFFFFFFFFFFF178C :                     ;
(1) 3009/FFFFFFFFFFFF178C :                     ; Show the stamp screen
(1) 3010/FFFFFFFFFFFF178C :                     ;
(1) 3011/FFFFFFFFFFFF178C :                     ; Input:
(1) 3012/FFFFFFFFFFFF178C :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 3013/FFFFFFFFFFFF178C :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 3014/FFFFFFFFFFFF178C :                     ; d2.l | Screen Width/VRAM location:
(1) 3015/FFFFFFFFFFFF178C :                     ;        splitw(sw_size,vram_loc)
(1) 3016/FFFFFFFFFFFF178C :                     ; d3.w | VRAM start
(1) 3017/FFFFFFFFFFFF178C :                     ; --------------------------------------------------------
(1) 3018/FFFFFFFFFFFF178C :                     
(1) 3019/FFFFFFFFFFFF178C :                     Video_MdMcd_StampDotMap:
(1) 3020/FFFFFFFFFFFF178C : 48E7 1F0E           		movem.l	d3-d7/a4-a6,-(sp)
(1) 3021/FFFFFFFFFFFF1790 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 3022/FFFFFFFFFFFF1796 : 3E02                		move.w	d2,d7
(1) 3023/FFFFFFFFFFFF1798 : 2C02                		move.l	d2,d6
(1) 3024/FFFFFFFFFFFF179A : 4846                		swap	d6
(1) 3025/FFFFFFFFFFFF179C : 3A00                		move.w	d0,d5
(1) 3026/FFFFFFFFFFFF179E : CAC6                		mulu.w	d6,d5
(1) 3027/FFFFFFFFFFFF17A0 : 2800                		move.l	d0,d4
(1) 3028/FFFFFFFFFFFF17A2 : 4844                		swap	d4
(1) 3029/FFFFFFFFFFFF17A4 : D844                		add.w	d4,d4
(1) 3030/FFFFFFFFFFFF17A6 : DA44                		add.w	d4,d5
(1) 3031/FFFFFFFFFFFF17A8 : DE45                		add.w	d5,d7
(1) 3032/FFFFFFFFFFFF17AA : 7A00                		moveq	#0,d5
(1) 3033/FFFFFFFFFFFF17AC : 3A07                		move.w	d7,d5
(1) 3034/FFFFFFFFFFFF17AE : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 3035/FFFFFFFFFFFF17B2 : 8E7C 4000           		or.w	#$4000,d7
(1) 3036/FFFFFFFFFFFF17B6 : E55D                		rol.w	#2,d5
(1) 3037/FFFFFFFFFFFF17B8 : 0245 0003           		andi.w	#%11,d5
(1) 3038/FFFFFFFFFFFF17BC : 4845                		swap	d5
(1) 3039/FFFFFFFFFFFF17BE : 2A48                		move.l	a0,a5
(1) 3040/FFFFFFFFFFFF17C0 : 2801                		move.l	d1,d4
(1) 3041/FFFFFFFFFFFF17C2 : 4844                		swap	d4
(1) 3042/FFFFFFFFFFFF17C4 : 5344                		subq.w	#1,d4
(1) 3043/FFFFFFFFFFFF17C6 : 6B30                		bmi.s	.bad_size
(1) 3044/FFFFFFFFFFFF17C8 :                     .x_loop:
(1) 3045/FFFFFFFFFFFF17C8 : 2844                		move.l	d4,a4
(1) 3046/FFFFFFFFFFFF17CA : 3801                		move.w	d1,d4
(1) 3047/FFFFFFFFFFFF17CC : 5344                		subq.w	#1,d4
(1) 3048/FFFFFFFFFFFF17CE :                     .y_loop:
(1) 3049/FFFFFFFFFFFF17CE : 4844                		swap	d4
(1) 3050/FFFFFFFFFFFF17D0 : 3807                		move.w	d7,d4
(1) 3051/FFFFFFFFFFFF17D2 : D845                		add.w	d5,d4
(1) 3052/FFFFFFFFFFFF17D4 : 4845                		swap	d5
(1) 3053/FFFFFFFFFFFF17D6 : 3D44 0004           		move.w	d4,4(a6)
(1) 3054/FFFFFFFFFFFF17DA : 3D45 0004           		move.w	d5,4(a6)
(1) 3055/FFFFFFFFFFFF17DE : 4845                		swap	d5
(1) 3056/FFFFFFFFFFFF17E0 : 3C83                		move.w	d3,(a6)
(1) 3057/FFFFFFFFFFFF17E2 : 5243                		addq.w	#1,d3
(1) 3058/FFFFFFFFFFFF17E4 : DA46                		add.w	d6,d5
(1) 3059/FFFFFFFFFFFF17E6 : 4844                		swap	d4
(1) 3060/FFFFFFFFFFFF17E8 : 51CC FFE4           		dbf	d4,.y_loop
(1) 3061/FFFFFFFFFFFF17EC : DE7C 0002           		add.w	#2,d7
(1) 3062/FFFFFFFFFFFF17F0 : 4245                		clr.w	d5
(1) 3063/FFFFFFFFFFFF17F2 : 280C                		move.l	a4,d4
(1) 3064/FFFFFFFFFFFF17F4 : 51CC FFD2           		dbf	d4,.x_loop
(1) 3065/FFFFFFFFFFFF17F8 :                     .bad_size:
(1) 3066/FFFFFFFFFFFF17F8 : 4CDF 70F8           		movem.l	(sp)+,d3-d7/a4-a6
(1) 3067/FFFFFFFFFFFF17FC : 4E75                		rts
(1) 3068/FFFFFFFFFFFF17FE :                     
(1) 3069/FFFFFFFFFFFF17FE :                     ; --------------------------------------------------------
(1) 3070/FFFFFFFFFFFF17FE :                     ; Video_MdMcd_StampSet
(1) 3071/FFFFFFFFFFFF17FE :                     ;
(1) 3072/FFFFFFFFFFFF17FE :                     ; Set or Make a Sega CD Stamp
(1) 3073/FFFFFFFFFFFF17FE :                     ;
(1) 3074/FFFFFFFFFFFF17FE :                     ; Input:
(1) 3075/FFFFFFFFFFFF17FE :                     ; a0   | Index slot (_SetStamp ONLY)
(1) 3076/FFFFFFFFFFFF17FE :                     ; a1   | Map slot to use
(1) 3077/FFFFFFFFFFFF17FE :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3078/FFFFFFFFFFFF17FE :                     ; d1.l | Rotation and Scale: splitw(rot,scale)
(1) 3079/FFFFFFFFFFFF17FE :                     ; d2.l | Width/Height: split(width,height)
(1) 3080/FFFFFFFFFFFF17FE :                     ; d3.l | Center X/Y: splitw(cx,cy)
(1) 3081/FFFFFFFFFFFF17FE :                     ;
(1) 3082/FFFFFFFFFFFF17FE :                     ; Returns:
(1) 3083/FFFFFFFFFFFF17FE :                     ; bcc | Wrote sucessfully
(1) 3084/FFFFFFFFFFFF17FE :                     ; bcs | Ran out of stamps
(1) 3085/FFFFFFFFFFFF17FE :                     ;
(1) 3086/FFFFFFFFFFFF17FE :                     ; Notes:
(1) 3087/FFFFFFFFFFFF17FE :                     ; - This resets the X/Y/Z position and rotations
(1) 3088/FFFFFFFFFFFF17FE :                     ; --------------------------------------------------------
(1) 3089/FFFFFFFFFFFF17FE :                     
(1) 3090/FFFFFFFFFFFF17FE :                     Video_MdMcd_SetStamp:
(1) 3091/FFFFFFFFFFFF17FE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3092/FFFFFFFFFFFF1802 : 4DF8 D800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3093/FFFFFFFFFFFF1806 : 2E08                		move.l	a0,d7
(1) 3094/FFFFFFFFFFFF1808 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3095/FFFFFFFFFFFF180A : 601E                		bra	vidMdMcd_MkStamp
(1) 3096/FFFFFFFFFFFF180C :                     
(1) 3097/FFFFFFFFFFFF180C :                     Video_MdMcd_MakeStamp:
(1) 3098/FFFFFFFFFFFF180C : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3099/FFFFFFFFFFFF1810 : 7E00                		moveq	#0,d7
(1) 3100/FFFFFFFFFFFF1812 : 4DF8 D800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3101/FFFFFFFFFFFF1816 : 7C1F                		moveq	#MAX_MCDSTAMPS-1,d6
(1) 3102/FFFFFFFFFFFF1818 :                     .chk_free:
(1) 3103/FFFFFFFFFFFF1818 : 4A16                		tst.b	cdstamp_flags(a6)
(1) 3104/FFFFFFFFFFFF181A : 670C                		beq.s	.mk_spr
(1) 3105/FFFFFFFFFFFF181C : 5247                		addq.w	#1,d7
(1) 3106/FFFFFFFFFFFF181E : DCFC 0020           		adda	#cdstamp_len,a6
(1) 3107/FFFFFFFFFFFF1822 : 51CE FFF4           		dbf	d6,.chk_free
(1) 3108/FFFFFFFFFFFF1826 : 605C                		bra.s	vidMdMcd_CError
(1) 3109/FFFFFFFFFFFF1828 :                     .mk_spr:
(1) 3110/FFFFFFFFFFFF1828 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3111/FFFFFFFFFFFF182A :                     
(1) 3112/FFFFFFFFFFFF182A :                     vidMdMcd_MkStamp:
(1) 3113/FFFFFFFFFFFF182A : 0247 00FF           		andi.w	#$FF,d7
(1) 3114/FFFFFFFFFFFF182E : 0C47 0020           		cmpi.w	#MAX_MCDSTAMPS,d7
(1) 3115/FFFFFFFFFFFF1832 : 6C50                		bge.s	vidMdMcd_CError
(1) 3116/FFFFFFFFFFFF1834 : EB4F                		lsl.w	#5,d7
(1) 3117/FFFFFFFFFFFF1836 : DCC7                		adda	d7,a6
(1) 3118/FFFFFFFFFFFF1838 : 3E09                		move.w	a1,d7
(1) 3119/FFFFFFFFFFFF183A : 0247 00FF           		andi.w	#$FF,d7
(1) 3120/FFFFFFFFFFFF183E : 1D47 0001           		move.b	d7,cdstamp_map(a6)
(1) 3121/FFFFFFFFFFFF1842 : 2E00                		move.l	d0,d7
(1) 3122/FFFFFFFFFFFF1844 : 4847                		swap	d7
(1) 3123/FFFFFFFFFFFF1846 : 3D40 0008           		move.w  d0,cdstamp_y(a6)
(1) 3124/FFFFFFFFFFFF184A : 3D47 0006           		move.w  d7,cdstamp_x(a6)
(1) 3125/FFFFFFFFFFFF184E : 2E02                		move.l	d2,d7
(1) 3126/FFFFFFFFFFFF1850 : 4847                		swap	d7
(1) 3127/FFFFFFFFFFFF1852 : 3D42 000C           		move.w  d2,cdstamp_hght(a6)
(1) 3128/FFFFFFFFFFFF1856 : 3D47 000A           		move.w  d7,cdstamp_wdth(a6)
(1) 3129/FFFFFFFFFFFF185A : 2E03                		move.l	d3,d7
(1) 3130/FFFFFFFFFFFF185C : 4847                		swap	d7
(1) 3131/FFFFFFFFFFFF185E : 3D43 0004           		move.w  d3,cdstamp_cy(a6)
(1) 3132/FFFFFFFFFFFF1862 : 3D47 0002           		move.w  d7,cdstamp_cx(a6)
(1) 3133/FFFFFFFFFFFF1866 :                     
(1) 3134/FFFFFFFFFFFF1866 : 2E01                		move.l	d1,d7
(1) 3135/FFFFFFFFFFFF1868 : 4847                		swap	d7
(1) 3136/FFFFFFFFFFFF186A : 3D41 000E           		move.w	d1,cdstamp_scale(a6)
(1) 3137/FFFFFFFFFFFF186E : 3D47 0010           		move.w	d7,cdstamp_rot(a6)
(1) 3138/FFFFFFFFFFFF1872 :                     
(1) 3139/FFFFFFFFFFFF1872 : 3E3C 0080           		move.w	#$80,d7
(1) 3140/FFFFFFFFFFFF1876 : 8E46                		or.w	d6,d7
(1) 3141/FFFFFFFFFFFF1878 : 1C87                		move.b	d7,cdstamp_flags(a6)	; TODO: add the RPT bit ($01)
(1) 3142/FFFFFFFFFFFF187A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3143/FFFFFFFFFFFF187E : 023C 001E           		andi	#%11110,ccr
(1) 3144/FFFFFFFFFFFF1882 : 4E75                		rts
(1) 3145/FFFFFFFFFFFF1884 :                     ; Carry error
(1) 3146/FFFFFFFFFFFF1884 :                     vidMdMcd_CError:
(1) 3147/FFFFFFFFFFFF1884 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3148/FFFFFFFFFFFF1888 : 003C 0001           		or	#1,ccr			; Return Error
(1) 3149/FFFFFFFFFFFF188C : 4E75                		rts
(1) 3150/FFFFFFFFFFFF188E :                     
(1) 3151/FFFFFFFFFFFF188E :                     ; --------------------------------------------------------
(1) 3152/FFFFFFFFFFFF188E :                     
(1) 3153/FFFFFFFFFFFF188E :                     vidMdMcd_RdStmpSlot:
(1) 3154/FFFFFFFFFFFF188E : 4DF8 D800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3155/FFFFFFFFFFFF1892 : 7E00                		moveq	#0,d7
(1) 3156/FFFFFFFFFFFF1894 : 3E00                		move.w	d0,d7
(1) 3157/FFFFFFFFFFFF1896 :                     ; 		cmpi.w	#MAX_MCDSTAMPS,d0
(1) 3158/FFFFFFFFFFFF1896 :                     ; 		bge.s	.got_full
(1) 3159/FFFFFFFFFFFF1896 : EB4F                		lsl.w	#5,d7			; FIXED SIZE $20
(1) 3160/FFFFFFFFFFFF1898 : DCC7                		adda	d7,a6
(1) 3161/FFFFFFFFFFFF189A :                     ; .got_full:
(1) 3162/FFFFFFFFFFFF189A : 4E75                		rts
(1) 3163/FFFFFFFFFFFF189C :                     
(1) 3164/FFFFFFFFFFFF189C :                     ; --------------------------------------------------------
(1) 3165/FFFFFFFFFFFF189C :                     ; Video_MdMcd_StampMap
(1) 3166/FFFFFFFFFFFF189C :                     ; --------------------------------------------------------
(1) 3167/FFFFFFFFFFFF189C :                     
(1) 3168/FFFFFFFFFFFF189C :                     Video_MdMcd_StampMap:
(1) 3169/FFFFFFFFFFFF189C : 4E75                		rts
(1) 3170/FFFFFFFFFFFF189E :                     
(1) 3171/FFFFFFFFFFFF189E :                     
(1) 3172/FFFFFFFFFFFF189E :                     ; --------------------------------------------------------
(1) 3173/FFFFFFFFFFFF189E :                     ; Video_MdMcd_StampReset
(1) 3174/FFFFFFFFFFFF189E :                     ;
(1) 3175/FFFFFFFFFFFF189E :                     ; Clear ALL Stamps
(1) 3176/FFFFFFFFFFFF189E :                     ; --------------------------------------------------------
(1) 3177/FFFFFFFFFFFF189E :                     
(1) 3178/FFFFFFFFFFFF189E :                     Video_MdMcd_StampReset:
(1) 3180/FFFFFFFFFFFF189E : 48E7 0102           		movem.l	d7/a6,-(sp)
(1) 3181/FFFFFFFFFFFF18A2 : 4DF8 D800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3182/FFFFFFFFFFFF18A6 : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1) 3183/FFFFFFFFFFFF18AA :                     .clr_stamps:
(1) 3184/FFFFFFFFFFFF18AA :                     	rept $20/4
(1) 3185/FFFFFFFFFFFF18AA :                     		clr.l	(a6)+
(1) 3186/FFFFFFFFFFFF18AA :                     	endm
(1) 3185/FFFFFFFFFFFF18AA : 429E                		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF18AC : 429E                		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF18AE : 429E                		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF18B0 : 429E                		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF18B2 : 429E                		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF18B4 : 429E                		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF18B6 : 429E                		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF18B8 : 429E                		clr.l	(a6)+
(1) 3187/FFFFFFFFFFFF18BA : 51CF FFEE           		dbf	d7,.clr_stamps
(1) 3188/FFFFFFFFFFFF18BE : 4CDF 4080           		movem.l	(sp)+,d7/a6
(1) 3190/FFFFFFFFFFFF18C2 : 4E75                		rts
(1) 3191/FFFFFFFFFFFF18C4 :                     
(1) 3192/FFFFFFFFFFFF18C4 :                     ; ====================================================================
(1) 3193/FFFFFFFFFFFF18C4 :                     
(1) 3195/FFFFFFFFFFFF18C4 :                     
(1) 3196/FFFFFFFFFFFF18C4 :                     ; ====================================================================
(1) 3197/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1) 3198/FFFFFFFFFFFF18C4 :                     ; Video routines for 32X
(1) 3199/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1) 3200/FFFFFFFFFFFF18C4 :                     
(1) 3933/FFFFFFFFFFFF18C4 :                     
     197/FFFFFFFFFFFF18C4 :                     		include	"nikona/md/system.asm"
(1)    1/FFFFFFFFFFFF18C4 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF18C4 :                     ; Genesis system routines
(1)    4/FFFFFFFFFFFF18C4 :                     ;
(1)    5/FFFFFFFFFFFF18C4 :                     ; including SCD, 32X and PICO.
(1)    6/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)    7/FFFFFFFFFFFF18C4 :                     
(1)    8/FFFFFFFFFFFF18C4 :                     ; ====================================================================
(1)    9/FFFFFFFFFFFF18C4 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF18C4 :                     ; Settings
(1)   11/FFFFFFFFFFFF18C4 :                     ; --------------------------------------------------------
(1)   12/FFFFFFFFFFFF18C4 :                     
(1)   13/FFFFFFFFFFFF18C4 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   14/FFFFFFFFFFFF18C4 :                     
(1)   15/FFFFFFFFFFFF18C4 :                     ; ===================================================================
(1)   16/FFFFFFFFFFFF18C4 :                     ; --------------------------------------------------------
(1)   17/FFFFFFFFFFFF18C4 :                     ; Variables
(1)   18/FFFFFFFFFFFF18C4 :                     ; --------------------------------------------------------
(1)   19/FFFFFFFFFFFF18C4 :                     
(1)   20/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFF18C4 :                     ; Controller buffer data
(1)   22/FFFFFFFFFFFF18C4 :                     ;
(1)   23/FFFFFFFFFFFF18C4 :                     ; MUST call System_Input during VBlank
(1)   24/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   25/FFFFFFFFFFFF18C4 :                     
(1)   26/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   27/FFFFFFFFFFFF18C4 :                     ; pad_id
(1)   28/FFFFFFFFFFFF18C4 :                     ;
(1)   29/FFFFFFFFFFFF18C4 :                     ; JoyID_MD:
(1)   30/FFFFFFFFFFFF18C4 :                     ; Read pad_ver separately to check if controller
(1)   31/FFFFFFFFFFFF18C4 :                     ; is 3button(0) or 6button(1)
(1)   32/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   33/FFFFFFFFFFFF18C4 :                     
(1)   34/FFFFFFFFFFFF18C4 : =$3                  JoyID_Mouse	equ $03
(1)   35/FFFFFFFFFFFF18C4 : =$D                  JoyID_MD	equ $0D
(1)   36/FFFFFFFFFFFF18C4 : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   37/FFFFFFFFFFFF18C4 :                     
(1)   38/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   39/FFFFFFFFFFFF18C4 :                     ; Genesis controller
(1)   40/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   41/FFFFFFFFFFFF18C4 :                     
(1)   42/FFFFFFFFFFFF18C4 : =$1                  JoyUp		equ $0001
(1)   43/FFFFFFFFFFFF18C4 : =$2                  JoyDown		equ $0002
(1)   44/FFFFFFFFFFFF18C4 : =$4                  JoyLeft		equ $0004
(1)   45/FFFFFFFFFFFF18C4 : =$8                  JoyRight	equ $0008
(1)   46/FFFFFFFFFFFF18C4 : =$10                 JoyB		equ $0010
(1)   47/FFFFFFFFFFFF18C4 : =$20                 JoyC		equ $0020
(1)   48/FFFFFFFFFFFF18C4 : =$40                 JoyA		equ $0040
(1)   49/FFFFFFFFFFFF18C4 : =$80                 JoyStart	equ $0080
(1)   50/FFFFFFFFFFFF18C4 : =$100                JoyZ		equ $0100
(1)   51/FFFFFFFFFFFF18C4 : =$200                JoyY		equ $0200
(1)   52/FFFFFFFFFFFF18C4 : =$400                JoyX		equ $0400
(1)   53/FFFFFFFFFFFF18C4 : =$800                JoyMode		equ $0800
(1)   54/FFFFFFFFFFFF18C4 : =$0                  bitJoyUp	equ 0
(1)   55/FFFFFFFFFFFF18C4 : =$1                  bitJoyDown	equ 1
(1)   56/FFFFFFFFFFFF18C4 : =$2                  bitJoyLeft	equ 2
(1)   57/FFFFFFFFFFFF18C4 : =$3                  bitJoyRight	equ 3
(1)   58/FFFFFFFFFFFF18C4 : =$4                  bitJoyB		equ 4
(1)   59/FFFFFFFFFFFF18C4 : =$5                  bitJoyC		equ 5
(1)   60/FFFFFFFFFFFF18C4 : =$6                  bitJoyA		equ 6
(1)   61/FFFFFFFFFFFF18C4 : =$7                  bitJoyStart	equ 7
(1)   62/FFFFFFFFFFFF18C4 : =$8                  bitJoyZ		equ 8
(1)   63/FFFFFFFFFFFF18C4 : =$9                  bitJoyY		equ 9
(1)   64/FFFFFFFFFFFF18C4 : =$A                  bitJoyX		equ 10
(1)   65/FFFFFFFFFFFF18C4 : =$B                  bitJoyMode	equ 11
(1)   66/FFFFFFFFFFFF18C4 :                     
(1)   67/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   68/FFFFFFFFFFFF18C4 :                     ; Mega Mouse
(1)   69/FFFFFFFFFFFF18C4 :                     ;
(1)   70/FFFFFFFFFFFF18C4 :                     ; pad_x and pad_y are speed increment values,
(1)   71/FFFFFFFFFFFF18C4 :                     ; NOT screen position.
(1)   72/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   73/FFFFFFFFFFFF18C4 :                     
(1)   74/FFFFFFFFFFFF18C4 : =$1                  ClickR		equ $0001
(1)   75/FFFFFFFFFFFF18C4 : =$2                  ClickL		equ $0002
(1)   76/FFFFFFFFFFFF18C4 : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   77/FFFFFFFFFFFF18C4 : =$8                  ClickS		equ $0008		; (Untested)
(1)   78/FFFFFFFFFFFF18C4 : =$0                  bitClickL	equ 0
(1)   79/FFFFFFFFFFFF18C4 : =$1                  bitClickR	equ 1
(1)   80/FFFFFFFFFFFF18C4 : =$2                  bitClickM	equ 2
(1)   81/FFFFFFFFFFFF18C4 : =$3                  bitClickS	equ 3
(1)   82/FFFFFFFFFFFF18C4 :                     
(1)   83/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   84/FFFFFFFFFFFF18C4 :                     ; Sega PICO
(1)   85/FFFFFFFFFFFF18C4 :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   86/FFFFFFFFFFFF18C4 :                     ;
(1)   87/FFFFFFFFFFFF18C4 :                     ; For reading the pen use pad_x and pad_y
(1)   88/FFFFFFFFFFFF18C4 :                     ; pad_y:
(1)   89/FFFFFFFFFFFF18C4 :                     ; $0000-$00EF - Tablet area
(1)   90/FFFFFFFFFFFF18C4 :                     ; $0100-$01EF - Storyware area
(1)   91/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)   92/FFFFFFFFFFFF18C4 :                     
(1)   93/FFFFFFFFFFFF18C4 : =$10                 JoyRED		equ $0010
(1)   94/FFFFFFFFFFFF18C4 : =$80                 JoyPEN		equ $0080
(1)   95/FFFFFFFFFFFF18C4 : =$4                  bitJoyRED	equ 4
(1)   96/FFFFFFFFFFFF18C4 : =$7                  bitJoyPEN	equ 7
(1)   97/FFFFFFFFFFFF18C4 :                     
(1)   98/FFFFFFFFFFFF18C4 :                     ; ====================================================================
(1)   99/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)  100/FFFFFFFFFFFF18C4 :                     ; Structs
(1)  101/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)  102/FFFFFFFFFFFF18C4 :                     
(1)  103/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)  104/FFFFFFFFFFFF18C4 :                     ; RAM_InputData
(1)  105/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)  106/FFFFFFFFFFFF18C4 :                     
(1)  107/       0 :                     pad		struct
(1)  108/       0 :                     id		ds.b 1		; Controller ID
(1)  109/       1 :                     ver		ds.b 1		; Controller type/revision
(1)  110/       2 :                     hold		ds.w 1		; HOLD bits
(1)  111/       4 :                     press		ds.w 1		; PRESSED bits
(1)  112/       6 :                     release		ds.w 1		; RELEASED bits
(1)  113/       8 :                     x		ds.w 1		; Mouse/Pen X speed
(1)  114/       A :                     y		ds.w 1		; Mouse/Pen Y speed
(1)  115/       C :                     page		ds.w 1		; PICO page
(1)  116/       E :                     ext		ds.w 1
(1)  117/      10 :                     ; pad_len	ds.l 0
(1)  118/FFFFFFFFFFFF18C4 : =$10                 		endstruct
(1)  119/FFFFFFFFFFFF18C4 :                     
(1)  120/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)  121/FFFFFFFFFFFF18C4 :                     ; The object's memory
(1)  122/FFFFFFFFFFFF18C4 :                     ; ------------------------------------------------
(1)  123/FFFFFFFFFFFF18C4 :                     
(1)  124/       0 :                     obj		struct
(1)  125/       0 :                     code		ds.l 1		; Object code, If 0 == blank slot
(1)  126/       4 :                     x		ds.l 1		; Object X Position $xxxx.0000
(1)  127/       8 :                     y		ds.l 1		; Object Y Position $yyyy.0000
(1)  128/       C :                     z		ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  129/      10 :                     size_x		ds.w 1		; Object size Left/Right $llrr
(1)  130/      12 :                     size_y		ds.w 1		; Object size Up/Down $uudd
(1)  131/      14 :                     size_z		ds.w 1		; Object size Zback/Zfront $bbff starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  132/      16 :                     x_spd		ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  133/      18 :                     y_spd		ds.w 1		; Object Y Speed $yy.00 ''
(1)  134/      1A :                     z_spd		ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  135/      1C :                     index		ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  136/      1D :                     subid		ds.b 1		; Object Sub-ID for custom placement settings
(1)  137/      1E :                     status		ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  138/      1F :                     attr		ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  139/      20 :                     				; ** object_Animate ONLY:
(1)  140/      20 :                     frame		ds.w 1		; ** Current frame, object_Animate outputs here
(1)  141/      22 :                     anim_num	ds.w 1		; ** Animation number to use
(1)  142/      24 :                     anim_indx	ds.w 1		; ** Animation script index
(1)  143/      26 :                     anim_icur	ds.b 1		; ** Current animation id
(1)  144/      27 :                     anim_spd	ds.b 1		; ** Animation delay set on animation script
(1)  145/      28 :                     ram		ds.b $40	; Object's own RAM
(1)  146/      68 :                     ; obj_len	ds.l 0
(1)  147/FFFFFFFFFFFF18C4 : =$68                 		endstruct
(1)  148/FFFFFFFFFFFF18C4 :                     
(1)  149/FFFFFFFFFFFF18C4 :                     ; ====================================================================
(1)  150/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)  151/FFFFFFFFFFFF18C4 :                     ; RAM section
(1)  152/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)  153/FFFFFFFFFFFF18C4 :                     
(1)  154/FFFFFFFFFFFF18C4 : (MACRO)              			memory RAM_MdSystem
(1)  154/FFFFFFFFFFFF18C4 : =$FFFFFFFFFFFF18C4   GLBL_LASTPC     := *
(1)  154/    41EC :                                     dephase
(1)  154/FFFFFFFFFFFFEC18 :                                     phase RAM_MDSYSTEM
(1)  154/FFFFFFFFFFFFEC18 : =$FFFFFFFFFFFFEC18   GLBL_LASTORG    := *
(1)  155/FFFFFFFFFFFFEC18 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  156/FFFFFFFFFFFFEE18 :                     RAM_InputData		ds.b pad_len*4			; Input data section
(1)  157/FFFFFFFFFFFFEE58 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  158/FFFFFFFFFFFFEE5C :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  159/FFFFFFFFFFFFEE60 :                     RAM_SysLastBank		ds.l 1
(1)  160/FFFFFFFFFFFFEE64 :                     RAM_CurrObjList		ds.l 1
(1)  161/FFFFFFFFFFFFEE68 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFEE6E :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFEE74 :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFEE7A :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFEE7C :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFEE7E :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFEE80 :                     RAM_CurrObjNum		ds.w 1
(1)  168/FFFFFFFFFFFFEE82 :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFEE88 : (MACRO)              			endmemory
(1)  169/    445C :                     .here:          dephase
(1)  169/    445C :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/FFFFFFFFFFFF18C4 :                                     phase GLBL_LASTPC
(1)  170/FFFFFFFFFFFF18C4 :                     
(1)  171/FFFFFFFFFFFF18C4 :                     ; ====================================================================
(1)  172/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)  173/FFFFFFFFFFFF18C4 :                     ; Label aliases
(1)  174/FFFFFFFFFFFF18C4 :                     ; ----------------------------------------------------------------
(1)  175/FFFFFFFFFFFF18C4 :                     
(1)  176/FFFFFFFFFFFF18C4 : =$FFFFFFFFFFFFEE18   Controller_1	equ RAM_InputData
(1)  177/FFFFFFFFFFFF18C4 : =$FFFFFFFFFFFFEE28   Controller_2	equ RAM_InputData+pad_len
(1)  178/FFFFFFFFFFFF18C4 : =$FFFFFFFFFFFFEE38   Controller_3	equ RAM_InputData+pad_len*2
(1)  179/FFFFFFFFFFFF18C4 : =$FFFFFFFFFFFFEE48   Controller_4	equ RAM_InputData+pad_len*3
(1)  180/FFFFFFFFFFFF18C4 :                     
(1)  181/FFFFFFFFFFFF18C4 :                     ; ====================================================================
(1)  182/FFFFFFFFFFFF18C4 :                     ; --------------------------------------------------------
(1)  183/FFFFFFFFFFFF18C4 :                     ; Init System
(1)  184/FFFFFFFFFFFF18C4 :                     ; 
(1)  185/FFFFFFFFFFFF18C4 :                     ; Uses:
(1)  186/FFFFFFFFFFFF18C4 :                     ; a0-a2,d0-d1
(1)  187/FFFFFFFFFFFF18C4 :                     ; --------------------------------------------------------
(1)  188/FFFFFFFFFFFF18C4 :                     
(1)  189/FFFFFFFFFFFF18C4 :                     System_Init:
(1)  190/FFFFFFFFFFFF18C4 : 007C 0700           		or.w	#$0700,sr
(1)  192/FFFFFFFFFFFF18C8 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF18CE : 1100             
(1)  193/FFFFFFFFFFFF18D0 :                     .wait:
(1)  194/FFFFFFFFFFFF18D0 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
         FFFFFFFFFFFF18D6 : 1100             
(1)  195/FFFFFFFFFFFF18D8 : 66F6                		bne.s	.wait
(1)  196/FFFFFFFFFFFF18DA : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  197/FFFFFFFFFFFF18DC : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  198/FFFFFFFFFFFF18E2 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  199/FFFFFFFFFFFF18E8 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  200/FFFFFFFFFFFF18EE : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF18F4 : 1100             
(1)  202/FFFFFFFFFFFF18F6 : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode
(1)  203/FFFFFFFFFFFF18FA : 31C0 EE68            		move.w	d0,(RAM_VBlankJump).w
(1)  204/FFFFFFFFFFFF18FE : 31C0 EE6E           		move.w	d0,(RAM_HBlankJump).w
(1)  205/FFFFFFFFFFFF1902 : 31C0 EE74           		move.w	d0,(RAM_ExternalJump).w
(1)  206/FFFFFFFFFFFF1906 : 203C FFFF 1D42      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  207/FFFFFFFFFFFF190C : 223C FFFF 1D44      		move.l	#HInt_Default,d1
(1)  208/FFFFFFFFFFFF1912 : 243C FFFF 1D46      		move.l	#ExtInt_Default,d2
(1)  209/FFFFFFFFFFFF1918 : 6100 064A           		bsr	System_SetIntJumps
(1)  210/FFFFFFFFFFFF191C : 41F8 EE18           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  211/FFFFFFFFFFFF1920 : 323C 0007           		move.w	#(pad_len/2)-1,d1
(1)  212/FFFFFFFFFFFF1924 : 7000                		moveq	#0,d0
(1)  213/FFFFFFFFFFFF1926 : 23C0 FFFF EE60      		move.l	d0,(RAM_SysLastBank).l
(1)  214/FFFFFFFFFFFF192C :                     .clrinput:
(1)  215/FFFFFFFFFFFF192C : 30C0                		move.w	d0,(a0)+
(1)  216/FFFFFFFFFFFF192E : 51C9 FFFC           		dbf	d1,.clrinput
(1)  218/FFFFFFFFFFFF1932 : 6100 0246           		bsr	System_SramInit				; Init/Load SRAM
(1)  220/FFFFFFFFFFFF1936 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  221/FFFFFFFFFFFF193A : 4E75                		rts
(1)  222/FFFFFFFFFFFF193C :                     
(1)  223/FFFFFFFFFFFF193C :                     ; ====================================================================
(1)  224/FFFFFFFFFFFF193C :                     ; --------------------------------------------------------
(1)  225/FFFFFFFFFFFF193C :                     ; System_Render
(1)  226/FFFFFFFFFFFF193C :                     ;
(1)  227/FFFFFFFFFFFF193C :                     ; This will:
(1)  228/FFFFFFFFFFFF193C :                     ; - Drop a frame if we got late on VBlank
(1)  229/FFFFFFFFFFFF193C :                     ; - Process Palette fading buffers
(1)  230/FFFFFFFFFFFF193C :                     ;   (Video_MdMars_RunFade: CPU-INTENSIVE IF PROCESSING
(1)  231/FFFFFFFFFFFF193C :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  232/FFFFFFFFFFFF193C :                     ; - Check the sound driver for any changes/requests
(1)  233/FFFFFFFFFFFF193C :                     ;   from Z80 (Sound_Update, several times)
(1)  234/FFFFFFFFFFFF193C :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  235/FFFFFFFFFFFF193C :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  236/FFFFFFFFFFFF193C :                     ;
(1)  237/FFFFFFFFFFFF193C :                     ; Then during VBlank:
(1)  238/FFFFFFFFFFFF193C :                     ; - Read the Input data (System_Input)
(1)  239/FFFFFFFFFFFF193C :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  240/FFFFFFFFFFFF193C :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  241/FFFFFFFFFFFF193C :                     ;   (Video_Render)
(1)  242/FFFFFFFFFFFF193C :                     ;
(1)  243/FFFFFFFFFFFF193C :                     ; Notes:
(1)  244/FFFFFFFFFFFF193C :                     ; - If VDP Display is disabled all of this
(1)  245/FFFFFFFFFFFF193C :                     ;   will be skipped.
(1)  246/FFFFFFFFFFFF193C :                     ; --------------------------------------------------------
(1)  247/FFFFFFFFFFFF193C :                     
(1)  248/FFFFFFFFFFFF193C :                     System_Render:
(1)  249/FFFFFFFFFFFF193C : 3E38 EC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  250/FFFFFFFFFFFF1940 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  251/FFFFFFFFFFFF1944 : 671C                		beq	.forgot_disp
(1)  252/FFFFFFFFFFFF1946 : 6100 F3CE           		bsr	Video_RunFade			; Process VDP palette fade
(1)  253/FFFFFFFFFFFF194A :                     .wait_early:
(1)  254/FFFFFFFFFFFF194A : 616E                		bsr	Sound_Update			; Update sound on wait
(1)  255/FFFFFFFFFFFF194C : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  256/FFFFFFFFFFFF1952 : 0807 0003           		btst	#bitVBlk,d7
(1)  257/FFFFFFFFFFFF1956 : 66F2                		bne.s	.wait_early
(1)  258/FFFFFFFFFFFF1958 :                     	; ----------------------------------------
(1)  259/FFFFFFFFFFFF1958 :                     	; 32X/CD32X
(1)  289/FFFFFFFFFFFF1958 :                     ; ----------------------------------------
(1)  290/FFFFFFFFFFFF1958 : 610A                		bsr	.wait_vblank			; Genesis normal VBlank wait
(1)  291/FFFFFFFFFFFF195A :                     ; ----------------------------------------
(1)  297/FFFFFFFFFFFF195A :                     .from_late:
(1)  299/FFFFFFFFFFFF195A : 615E                		bsr	Sound_Update
(1)  305/FFFFFFFFFFFF195C : 52B8 EBFC           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  306/FFFFFFFFFFFF1960 : 6158                		bsr	Sound_Update
(1)  307/FFFFFFFFFFFF1962 :                     .forgot_disp:
(1)  308/FFFFFFFFFFFF1962 : 4E75                		rts
(1)  309/FFFFFFFFFFFF1964 :                     
(1)  310/FFFFFFFFFFFF1964 :                     ; ----------------------------------------
(1)  311/FFFFFFFFFFFF1964 :                     ; Wait until beam reaches VBlank
(1)  312/FFFFFFFFFFFF1964 :                     ; ----------------------------------------
(1)  313/FFFFFFFFFFFF1964 :                     
(1)  314/FFFFFFFFFFFF1964 : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  315/FFFFFFFFFFFF1966 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  316/FFFFFFFFFFFF196C : 0807 0003           		btst	#bitVBlk,d7
(1)  317/FFFFFFFFFFFF1970 : 67F2                		beq.s	.wait_vblank
(1)  318/FFFFFFFFFFFF1972 : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  319/FFFFFFFFFFFF1974 : 6000 E9F4           		bra	Video_Render			; Render VDP Visuals
(1)  320/FFFFFFFFFFFF1978 :                     
(1)  321/FFFFFFFFFFFF1978 :                     ; ====================================================================
(1)  322/FFFFFFFFFFFF1978 :                     ; --------------------------------------------------------
(1)  323/FFFFFFFFFFFF1978 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  324/FFFFFFFFFFFF1978 :                     ; from ROM or RAM
(1)  325/FFFFFFFFFFFF1978 :                     ;
(1)  326/FFFFFFFFFFFF1978 :                     ; Call these labels BEFORE and AFTER your
(1)  327/FFFFFFFFFFFF1978 :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  328/FFFFFFFFFFFF1978 :                     ; FILL or COPY.
(1)  329/FFFFFFFFFFFF1978 :                     ;
(1)  330/FFFFFFFFFFFF1978 :                     ; This is where you put your Sound driver's Z80 stop
(1)  331/FFFFFFFFFFFF1978 :                     ; or pause calls here
(1)  332/FFFFFFFFFFFF1978 :                     ; SAVE THE REGISTERS THAT YOU GONNA USE TO STACK.
(1)  333/FFFFFFFFFFFF1978 :                     ; --------------------------------------------------------
(1)  334/FFFFFFFFFFFF1978 :                     
(1)  335/FFFFFFFFFFFF1978 :                     ; --------------------------------------------------------
(1)  336/FFFFFFFFFFFF1978 :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  337/FFFFFFFFFFFF1978 :                     System_DmaEnter_ROM:
(1)  338/FFFFFFFFFFFF1978 : 6138                		bsr	System_DmaEnter_RAM
(1)  346/FFFFFFFFFFFF197A : 4E75                		rts
(1)  347/FFFFFFFFFFFF197C :                     
(1)  348/FFFFFFFFFFFF197C :                     System_DmaExit_ROM:
(1)  356/FFFFFFFFFFFF197C : 6038                		bra	System_DmaExit_RAM
(1)  357/FFFFFFFFFFFF197E :                     
(1)  358/FFFFFFFFFFFF197E :                     ; ------------------------------------------------
(1)  359/FFFFFFFFFFFF197E :                     
(1)  360/FFFFFFFFFFFF197E :                     sys_MarsSlvCmd:
(1)  361/FFFFFFFFFFFF197E : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  362/FFFFFFFFFFFF1984 : 66F8                		bne.s	sys_MarsSlvCmd
(1)  363/FFFFFFFFFFFF1986 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  364/FFFFFFFFFFFF198C : 8E06                		or.b	d6,d7
(1)  365/FFFFFFFFFFFF198E : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  366/FFFFFFFFFFFF1992 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  367/FFFFFFFFFFFF1998 : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
         FFFFFFFFFFFF199E : 5103             
(1)  368/FFFFFFFFFFFF19A0 : 4E71                		nop
(1)  369/FFFFFFFFFFFF19A2 : 4E71                		nop
(1)  370/FFFFFFFFFFFF19A4 :                     .wait_exit:
(1)  371/FFFFFFFFFFFF19A4 : 4E71                		nop
(1)  372/FFFFFFFFFFFF19A6 : 4E71                		nop
(1)  373/FFFFFFFFFFFF19A8 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  374/FFFFFFFFFFFF19AE : 66F4                		bne.s	.wait_exit
(1)  375/FFFFFFFFFFFF19B0 : 4E75                		rts
(1)  376/FFFFFFFFFFFF19B2 :                     
(1)  377/FFFFFFFFFFFF19B2 :                     ; --------------------------------------------------------
(1)  378/FFFFFFFFFFFF19B2 :                     ; *** EXTERNAL JUMPS ***
(1)  379/FFFFFFFFFFFF19B2 :                     ; --------------------------------------------------------
(1)  380/FFFFFFFFFFFF19B2 :                     
(1)  381/FFFFFFFFFFFF19B2 :                     System_DmaEnter_RAM:
(1)  382/FFFFFFFFFFFF19B2 : 6000 E7C0           		bra	gemaDmaPause
(1)  383/FFFFFFFFFFFF19B6 :                     System_DmaExit_RAM:
(1)  384/FFFFFFFFFFFF19B6 : 6000 E7DA           		bra	gemaDmaResume
(1)  385/FFFFFFFFFFFF19BA :                     
(1)  386/FFFFFFFFFFFF19BA :                     ; ====================================================================
(1)  387/FFFFFFFFFFFF19BA :                     ; --------------------------------------------------------
(1)  388/FFFFFFFFFFFF19BA :                     ; Update sound/syncronize with the Z80
(1)  389/FFFFFFFFFFFF19BA :                     ; --------------------------------------------------------
(1)  390/FFFFFFFFFFFF19BA :                     
(1)  391/FFFFFFFFFFFF19BA :                     Sound_Update:
(1)  392/FFFFFFFFFFFF19BA : 6000 E6EA           		bra	gemaSendRam
(1)  393/FFFFFFFFFFFF19BE :                     
(1)  394/FFFFFFFFFFFF19BE :                     ; ====================================================================
(1)  395/FFFFFFFFFFFF19BE :                     ; --------------------------------------------------------
(1)  396/FFFFFFFFFFFF19BE :                     ; Init sound driver
(1)  397/FFFFFFFFFFFF19BE :                     ; --------------------------------------------------------
(1)  398/FFFFFFFFFFFF19BE :                     
(1)  399/FFFFFFFFFFFF19BE :                     Sound_Init:
(1)  400/FFFFFFFFFFFF19BE : 6000 E640           		bra	gemaInit
(1)  401/FFFFFFFFFFFF19C2 :                     
(1)  402/FFFFFFFFFFFF19C2 :                     ; ====================================================================
(1)  403/FFFFFFFFFFFF19C2 :                     ; --------------------------------------------------------
(1)  404/FFFFFFFFFFFF19C2 :                     ; System_Input
(1)  405/FFFFFFFFFFFF19C2 :                     ;
(1)  406/FFFFFFFFFFFF19C2 :                     ; Reads data from the Controller ports
(1)  407/FFFFFFFFFFFF19C2 :                     ;
(1)  408/FFFFFFFFFFFF19C2 :                     ; Call this during VBlank only once per frame,
(1)  409/FFFFFFFFFFFF19C2 :                     ; System_Render already calls this.
(1)  410/FFFFFFFFFFFF19C2 :                     ;
(1)  411/FFFFFFFFFFFF19C2 :                     ; Uses:
(1)  412/FFFFFFFFFFFF19C2 :                     ; d5-d7,a5-a6
(1)  413/FFFFFFFFFFFF19C2 :                     ; --------------------------------------------------------
(1)  414/FFFFFFFFFFFF19C2 :                     
(1)  415/FFFFFFFFFFFF19C2 :                     ; ----------------------------------------
(1)  416/FFFFFFFFFFFF19C2 :                     ; PICO input is hard-coded to
(1)  417/FFFFFFFFFFFF19C2 :                     ; Controller_1
(1)  418/FFFFFFFFFFFF19C2 :                     ;
(1)  419/FFFFFFFFFFFF19C2 :                     ; pad_hold/pad_press:
(1)  420/FFFFFFFFFFFF19C2 :                     ; %P00BRLDU
(1)  421/FFFFFFFFFFFF19C2 :                     ; UDLR - Arrows
(1)  422/FFFFFFFFFFFF19C2 :                     ;    B - BIG button red (JoyB)
(1)  423/FFFFFFFFFFFF19C2 :                     ;    P - Pen press/click (JoyStart)
(1)  424/FFFFFFFFFFFF19C2 :                     ;
(1)  425/FFFFFFFFFFFF19C2 :                     ; pad_x/pad_y:
(1)  426/FFFFFFFFFFFF19C2 :                     ; Pen X/Y position
(1)  427/FFFFFFFFFFFF19C2 :                     ; ----------------------------------------
(1)  428/FFFFFFFFFFFF19C2 :                     
(1)  429/FFFFFFFFFFFF19C2 :                     System_Input:
(1)  476/FFFFFFFFFFFF19C2 :                     
(1)  477/FFFFFFFFFFFF19C2 :                     	; ----------------------------------------
(1)  478/FFFFFFFFFFFF19C2 :                     	; Normal Genesis controls
(1)  479/FFFFFFFFFFFF19C2 : 4DF8 EE18           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  480/FFFFFFFFFFFF19C6 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  481/FFFFFFFFFFFF19CC : 6108                		bsr.s	.this_one
(1)  482/FFFFFFFFFFFF19CE : DAFC 0002           		adda	#2,a5
(1)  483/FFFFFFFFFFFF19D2 : DCFC 0010           		adda	#pad_len,a6
(1)  484/FFFFFFFFFFFF19D6 :                     
(1)  485/FFFFFFFFFFFF19D6 :                     ; ----------------------------------------
(1)  486/FFFFFFFFFFFF19D6 :                     ; Read port
(1)  487/FFFFFFFFFFFF19D6 :                     ;
(1)  488/FFFFFFFFFFFF19D6 :                     ; a5 - Current port
(1)  489/FFFFFFFFFFFF19D6 :                     ; a6 - Output data
(1)  490/FFFFFFFFFFFF19D6 :                     ; ----------------------------------------
(1)  491/FFFFFFFFFFFF19D6 :                     
(1)  492/FFFFFFFFFFFF19D6 :                     .this_one:
(1)  493/FFFFFFFFFFFF19D6 : 611C                		bsr	.pick_id
(1)  494/FFFFFFFFFFFF19D8 : 1C87                		move.b	d7,pad_id(a6)
(1)  495/FFFFFFFFFFFF19DA : 0C47 000F           		cmpi.w	#$0F,d7
(1)  496/FFFFFFFFFFFF19DE : 670E                		beq.s	.exit
(1)  497/FFFFFFFFFFFF19E0 : 0247 000F           		andi.w	#$0F,d7
(1)  498/FFFFFFFFFFFF19E4 : DE47                		add.w	d7,d7
(1)  499/FFFFFFFFFFFF19E6 : 3C3B 703C           		move.w	.list(pc,d7.w),d6
(1)  500/FFFFFFFFFFFF19EA : 4EFB 6038           		jmp	.list(pc,d6.w)
(1)  501/FFFFFFFFFFFF19EE :                     .exit:
(1)  502/FFFFFFFFFFFF19EE : 422E 0001           		clr.b	pad_ver(a6)
(1)  503/FFFFFFFFFFFF19F2 : 4E75                		rts
(1)  504/FFFFFFFFFFFF19F4 :                     
(1)  505/FFFFFFFFFFFF19F4 :                     ; ----------------------------------------
(1)  506/FFFFFFFFFFFF19F4 :                     ; Grab ID
(1)  507/FFFFFFFFFFFF19F4 :                     ; ----------------------------------------
(1)  508/FFFFFFFFFFFF19F4 :                     
(1)  509/FFFFFFFFFFFF19F4 :                     .pick_id:
(1)  510/FFFFFFFFFFFF19F4 : 7E00                		moveq	#0,d7
(1)  511/FFFFFFFFFFFF19F6 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  512/FFFFFFFFFFFF19FA : 4E71                		nop
(1)  513/FFFFFFFFFFFF19FC : 4E71                		nop
(1)  514/FFFFFFFFFFFF19FE : 610A                		bsr	.read
(1)  515/FFFFFFFFFFFF1A00 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  516/FFFFFFFFFFFF1A04 : 4E71                		nop
(1)  517/FFFFFFFFFFFF1A06 : 4E71                		nop
(1)  518/FFFFFFFFFFFF1A08 : DE47                		add.w	d7,d7
(1)  519/FFFFFFFFFFFF1A0A :                     .read:
(1)  520/FFFFFFFFFFFF1A0A : 1A15                		move.b	(a5),d5
(1)  521/FFFFFFFFFFFF1A0C : 1C05                		move.b	d5,d6
(1)  522/FFFFFFFFFFFF1A0E : 0206 000C           		andi.b	#%1100,d6
(1)  523/FFFFFFFFFFFF1A12 : 6702                		beq.s	.step_1
(1)  524/FFFFFFFFFFFF1A14 : 5247                		addq.w	#1,d7
(1)  525/FFFFFFFFFFFF1A16 :                     .step_1:
(1)  526/FFFFFFFFFFFF1A16 : DE47                		add.w	d7,d7
(1)  527/FFFFFFFFFFFF1A18 : 1C05                		move.b	d5,d6
(1)  528/FFFFFFFFFFFF1A1A : 0246 0003           		andi.w	#%0011,d6
(1)  529/FFFFFFFFFFFF1A1E : 6702                		beq.s	.step_2
(1)  530/FFFFFFFFFFFF1A20 : 5247                		addq.w	#1,d7
(1)  531/FFFFFFFFFFFF1A22 :                     .step_2:
(1)  532/FFFFFFFFFFFF1A22 : 4E75                		rts
(1)  533/FFFFFFFFFFFF1A24 :                     
(1)  534/FFFFFFFFFFFF1A24 :                     ; ----------------------------------------
(1)  535/FFFFFFFFFFFF1A24 :                     ; Grab ID
(1)  536/FFFFFFFFFFFF1A24 :                     ; ----------------------------------------
(1)  537/FFFFFFFFFFFF1A24 :                     
(1)  538/FFFFFFFFFFFF1A24 :                     .list:
(1)  539/FFFFFFFFFFFF1A24 : FFCA                		dc.w .exit-.list	; $00
(1)  540/FFFFFFFFFFFF1A26 : FFCA                		dc.w .exit-.list
(1)  541/FFFFFFFFFFFF1A28 : FFCA                		dc.w .exit-.list
(1)  542/FFFFFFFFFFFF1A2A : 0020                		dc.w .id_03-.list	; $03 - Mega Mouse
(1)  543/FFFFFFFFFFFF1A2C : FFCA                		dc.w .exit-.list	; $04
(1)  544/FFFFFFFFFFFF1A2E : FFCA                		dc.w .exit-.list
(1)  545/FFFFFFFFFFFF1A30 : FFCA                		dc.w .exit-.list
(1)  546/FFFFFFFFFFFF1A32 : FFCA                		dc.w .exit-.list
(1)  547/FFFFFFFFFFFF1A34 : FFCA                		dc.w .exit-.list	; $08
(1)  548/FFFFFFFFFFFF1A36 : FFCA                		dc.w .exit-.list
(1)  549/FFFFFFFFFFFF1A38 : FFCA                		dc.w .exit-.list
(1)  550/FFFFFFFFFFFF1A3A : FFCA                		dc.w .exit-.list
(1)  551/FFFFFFFFFFFF1A3C : FFCA                		dc.w .exit-.list	; $0C
(1)  552/FFFFFFFFFFFF1A3E : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller 3 or 6 button
(1)  553/FFFFFFFFFFFF1A40 : FFCA                		dc.w .exit-.list
(1)  554/FFFFFFFFFFFF1A42 : FFCA                		dc.w .exit-.list	; $0F - No controller / Master System controller (Buttons 1 and 2)
(1)  555/FFFFFFFFFFFF1A44 :                     
(1)  556/FFFFFFFFFFFF1A44 :                     ; ----------------------------------------
(1)  557/FFFFFFFFFFFF1A44 :                     ; ID $03
(1)  558/FFFFFFFFFFFF1A44 :                     ;
(1)  559/FFFFFFFFFFFF1A44 :                     ; Mega Mouse
(1)  560/FFFFFFFFFFFF1A44 :                     ; ----------------------------------------
(1)  561/FFFFFFFFFFFF1A44 :                     
(1)  562/FFFFFFFFFFFF1A44 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  563/FFFFFFFFFFFF1A44 :                     ; *** NO RELEASED BITS ***
(1)  564/FFFFFFFFFFFF1A44 :                     
(1)  565/FFFFFFFFFFFF1A44 :                     .id_03:
(1)  566/FFFFFFFFFFFF1A44 : 1ABC 0020           		move.b	#$20,(a5)
(1)  567/FFFFFFFFFFFF1A48 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  568/FFFFFFFFFFFF1A4E : 0815 0004           		btst	#4,(a5)
(1)  569/FFFFFFFFFFFF1A52 : 6700 0094           		beq.w	.invalid
(1)  570/FFFFFFFFFFFF1A56 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  571/FFFFFFFFFFFF1A5A : 4E71                		nop
(1)  572/FFFFFFFFFFFF1A5C : 4E71                		nop
(1)  573/FFFFFFFFFFFF1A5E : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  574/FFFFFFFFFFFF1A62 : 4E71                		nop
(1)  575/FFFFFFFFFFFF1A64 : 4E71                		nop
(1)  576/FFFFFFFFFFFF1A66 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  577/FFFFFFFFFFFF1A6A : 4E71                		nop
(1)  578/FFFFFFFFFFFF1A6C : 4E71                		nop
(1)  579/FFFFFFFFFFFF1A6E : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  580/FFFFFFFFFFFF1A70 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  581/FFFFFFFFFFFF1A74 : 4E71                		nop
(1)  582/FFFFFFFFFFFF1A76 : 4E71                		nop
(1)  583/FFFFFFFFFFFF1A78 : 1E15                		move.b	(a5),d7
(1)  584/FFFFFFFFFFFF1A7A : 0247 000F            		andi.w	#%1111,d7
(1)  585/FFFFFFFFFFFF1A7E : 3C2E 0002           		move.w	pad_hold(a6),d6
(1)  586/FFFFFFFFFFFF1A82 : BF46                		eor.w	d7,d6
(1)  587/FFFFFFFFFFFF1A84 : 3D47 0002           		move.w	d7,pad_hold(a6)
(1)  588/FFFFFFFFFFFF1A88 : CC47                		and.w	d7,d6
(1)  589/FFFFFFFFFFFF1A8A : 3D46 0004           		move.w	d6,pad_press(a6)
(1)  590/FFFFFFFFFFFF1A8E : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  591/FFFFFFFFFFFF1A92 : 4E71                		nop
(1)  592/FFFFFFFFFFFF1A94 : 4E71                		nop
(1)  593/FFFFFFFFFFFF1A96 : 1E15                		move.b	(a5),d7
(1)  594/FFFFFFFFFFFF1A98 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  595/FFFFFFFFFFFF1A9C : 0247 000F           		andi.w	#%1111,d7
(1)  596/FFFFFFFFFFFF1AA0 : E94F                		lsl.w	#4,d7
(1)  597/FFFFFFFFFFFF1AA2 : 4E71                		nop
(1)  598/FFFFFFFFFFFF1AA4 : 1C15                		move.b	(a5),d6
(1)  599/FFFFFFFFFFFF1AA6 : 0246 000F           		andi.w	#%1111,d6
(1)  600/FFFFFFFFFFFF1AAA : 8E46                		or.w	d6,d7
(1)  601/FFFFFFFFFFFF1AAC : 0805 0000           		btst    #0,d5
(1)  602/FFFFFFFFFFFF1AB0 : 6704                		beq.s	.x_neg
(1)  603/FFFFFFFFFFFF1AB2 : 4407                		neg.b	d7
(1)  604/FFFFFFFFFFFF1AB4 : 4447                		neg.w	d7
(1)  605/FFFFFFFFFFFF1AB6 :                     .x_neg:
(1)  606/FFFFFFFFFFFF1AB6 : 3D47 0008           		move.w	d7,pad_x(a6)
(1)  607/FFFFFFFFFFFF1ABA : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  608/FFFFFFFFFFFF1ABE : 4E71                		nop
(1)  609/FFFFFFFFFFFF1AC0 : 4E71                		nop
(1)  610/FFFFFFFFFFFF1AC2 : 1E15                		move.b	(a5),d7
(1)  611/FFFFFFFFFFFF1AC4 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  612/FFFFFFFFFFFF1AC8 : 0247 000F           		andi.w	#%1111,d7
(1)  613/FFFFFFFFFFFF1ACC : E94F                		lsl.w	#4,d7
(1)  614/FFFFFFFFFFFF1ACE : 4E71                		nop
(1)  615/FFFFFFFFFFFF1AD0 : 1C15                		move.b	(a5),d6
(1)  616/FFFFFFFFFFFF1AD2 : 0246 000F           		andi.w	#%1111,d6
(1)  617/FFFFFFFFFFFF1AD6 : 8E46                		or.w	d6,d7
(1)  618/FFFFFFFFFFFF1AD8 : 0805 0001           		btst    #1,d5
(1)  619/FFFFFFFFFFFF1ADC : 6704                		beq.s	.y_neg
(1)  620/FFFFFFFFFFFF1ADE : 4407                		neg.b	d7
(1)  621/FFFFFFFFFFFF1AE0 : 4447                		neg.w	d7
(1)  622/FFFFFFFFFFFF1AE2 :                     .y_neg:
(1)  623/FFFFFFFFFFFF1AE2 : 4447                		neg.w	d7		; Reverse Y
(1)  624/FFFFFFFFFFFF1AE4 : 3D47 000A           		move.w	d7,pad_y(a6)
(1)  625/FFFFFFFFFFFF1AE8 :                     
(1)  626/FFFFFFFFFFFF1AE8 :                     .invalid:
(1)  627/FFFFFFFFFFFF1AE8 : 1ABC 0060           		move.b	#$60,(a5)
(1)  628/FFFFFFFFFFFF1AEC : 4E75                		rts
(1)  629/FFFFFFFFFFFF1AEE :                     
(1)  630/FFFFFFFFFFFF1AEE :                     ; ----------------------------------------
(1)  631/FFFFFFFFFFFF1AEE :                     ; ID $0D
(1)  632/FFFFFFFFFFFF1AEE :                     ;
(1)  633/FFFFFFFFFFFF1AEE :                     ; Normal controller: 3 button or 6 button.
(1)  634/FFFFFFFFFFFF1AEE :                     ; ----------------------------------------
(1)  635/FFFFFFFFFFFF1AEE :                     
(1)  636/FFFFFFFFFFFF1AEE :                     .id_0D:
(1)  637/FFFFFFFFFFFF1AEE : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  638/FFFFFFFFFFFF1AF2 : 4E71                		nop
(1)  639/FFFFFFFFFFFF1AF4 : 4E71                		nop
(1)  640/FFFFFFFFFFFF1AF6 : 1A15                		move.b	(a5),d5
(1)  641/FFFFFFFFFFFF1AF8 : 0245 003F           		andi.w	#%00111111,d5
(1)  642/FFFFFFFFFFFF1AFC : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  643/FFFFFFFFFFFF1B00 : 4E71                		nop
(1)  644/FFFFFFFFFFFF1B02 : 4E71                		nop
(1)  645/FFFFFFFFFFFF1B04 : 1E15                		move.b	(a5),d7
(1)  646/FFFFFFFFFFFF1B06 : E54F                		lsl.w	#2,d7
(1)  647/FFFFFFFFFFFF1B08 : 0247 00C0           		andi.w	#%11000000,d7
(1)  648/FFFFFFFFFFFF1B0C : 8E45                		or.w	d5,d7
(1)  649/FFFFFFFFFFFF1B0E : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  650/FFFFFFFFFFFF1B12 : 4647                		not.w	d7
(1)  651/FFFFFFFFFFFF1B14 : 1A2E 0003           		move.b	pad_hold+1(a6),d5
(1)  652/FFFFFFFFFFFF1B18 : 1805                		move.b	d5,d4
(1)  653/FFFFFFFFFFFF1B1A : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  654/FFFFFFFFFFFF1B1E : BF05                		eor.b	d7,d5
(1)  655/FFFFFFFFFFFF1B20 : 1D47 0003           		move.b	d7,pad_hold+1(a6)
(1)  656/FFFFFFFFFFFF1B24 : CA07                		and.b	d7,d5
(1)  657/FFFFFFFFFFFF1B26 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  658/FFFFFFFFFFFF1B2A : 1D45 0005           		move.b	d5,pad_press+1(a6)
(1)  659/FFFFFFFFFFFF1B2E : 1A07                		move.b	d7,d5
(1)  660/FFFFFFFFFFFF1B30 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  661/FFFFFFFFFFFF1B32 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  662/FFFFFFFFFFFF1B36 : B905                		eor.b	d4,d5
(1)  663/FFFFFFFFFFFF1B38 : CA04                		and.b	d4,d5
(1)  664/FFFFFFFFFFFF1B3A : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  665/FFFFFFFFFFFF1B3C : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  666/FFFFFFFFFFFF1B40 : 1D45 0007           		move.b	d5,pad_release+1(a6)
(1)  667/FFFFFFFFFFFF1B44 : 0246 000F           		andi.w	#$F,d6
(1)  668/FFFFFFFFFFFF1B48 : E44E                		lsr.w	#2,d6
(1)  669/FFFFFFFFFFFF1B4A : 0246 0001           		andi.w	#1,d6
(1)  670/FFFFFFFFFFFF1B4E : 6724                		beq.s	.oldpad
(1)  671/FFFFFFFFFFFF1B50 : 4607                		not.b	d7
(1)  672/FFFFFFFFFFFF1B52 : 0247 000F            		andi.w	#%1111,d7
(1)  673/FFFFFFFFFFFF1B56 : 1C07                 		move.b	d7,d6
(1)  674/FFFFFFFFFFFF1B58 : 1A2E 0002           		move.b	pad_hold(a6),d5
(1)  675/FFFFFFFFFFFF1B5C : BB06                		eor.b	d5,d6
(1)  676/FFFFFFFFFFFF1B5E : CC05                		and.b	d5,d6
(1)  677/FFFFFFFFFFFF1B60 : 1D46 0006           		move.b	d6,pad_release(a6)
(1)  678/FFFFFFFFFFFF1B64 : 1A2E 0002           		move.b	pad_hold(a6),d5
(1)  679/FFFFFFFFFFFF1B68 : BF05                		eor.b	d7,d5
(1)  680/FFFFFFFFFFFF1B6A : 1D47 0002           		move.b	d7,pad_hold(a6)
(1)  681/FFFFFFFFFFFF1B6E : CA07                		and.b	d7,d5
(1)  682/FFFFFFFFFFFF1B70 : 1D45 0004           		move.b	d5,pad_press(a6)
(1)  683/FFFFFFFFFFFF1B74 :                     .oldpad:
(1)  684/FFFFFFFFFFFF1B74 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  685/FFFFFFFFFFFF1B78 : 4E75                		rts
(1)  687/FFFFFFFFFFFF1B7A :                     
(1)  688/FFFFFFFFFFFF1B7A :                     ; ============================================================
(1)  689/FFFFFFFFFFFF1B7A :                     ; --------------------------------------------------------
(1)  690/FFFFFFFFFFFF1B7A :                     ; System_SramInit
(1)  691/FFFFFFFFFFFF1B7A :                     ;
(1)  692/FFFFFFFFFFFF1B7A :                     ; Enable SRAM/BRAM support
(1)  693/FFFFFFFFFFFF1B7A :                     ;
(1)  694/FFFFFFFFFFFF1B7A :                     ; Input:
(1)  695/FFFFFFFFFFFF1B7A :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  696/FFFFFFFFFFFF1B7A :                     ;      dc.b "SAVE_NAME__",0
(1)  697/FFFFFFFFFFFF1B7A :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  698/FFFFFFFFFFFF1B7A :                     ;                            ; protection)
(1)  699/FFFFFFFFFFFF1B7A :                     ;      dc.w flags:
(1)  700/FFFFFFFFFFFF1B7A :                     ;            0 | Normal
(1)  701/FFFFFFFFFFFF1B7A :                     ;           -1 | Save protection
(1)  702/FFFFFFFFFFFF1B7A :                     ;
(1)  703/FFFFFFFFFFFF1B7A :                     ;
(1)  704/FFFFFFFFFFFF1B7A :                     ; Notes:
(1)  705/FFFFFFFFFFFF1B7A :                     ; - ONLY use the RAM_SaveData section to modify
(1)  706/FFFFFFFFFFFF1B7A :                     ;   your changes, then call System_SramSave to
(1)  707/FFFFFFFFFFFF1B7A :                     ;   save it into SRAM/BRAM.
(1)  708/FFFFFFFFFFFF1B7A :                     ;
(1)  709/FFFFFFFFFFFF1B7A :                     ; CD/CD32X ONLY:
(1)  710/FFFFFFFFFFFF1B7A :                     ; - Call gemaStopAll FIRST if any track uses
(1)  711/FFFFFFFFFFFF1B7A :                     ;   PCM samples
(1)  712/FFFFFFFFFFFF1B7A :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  713/FFFFFFFFFFFF1B7A :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  714/FFFFFFFFFFFF1B7A :                     ;   OVERWRITE without warning any other save.
(1)  715/FFFFFFFFFFFF1B7A :                     ; --------------------------------------------------------
(1)  716/FFFFFFFFFFFF1B7A :                     
(1)  717/FFFFFFFFFFFF1B7A :                     System_SramInit:
(1)  721/FFFFFFFFFFFF1B7A :                     	; ------------------------------------------------
(1)  722/FFFFFFFFFFFF1B7A :                     	; CD BRAM
(1)  723/FFFFFFFFFFFF1B7A :                     	; ------------------------------------------------
(1)  724/FFFFFFFFFFFF1B7A : 4A78 EE7A           		tst.w	(RAM_SaveEnable).w			; Already initialized?
(1)  725/FFFFFFFFFFFF1B7E : 6668                		bne	.already_set
(1)  726/FFFFFFFFFFFF1B80 :                     ; 	if MARSCD
(1)  727/FFFFFFFFFFFF1B80 :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l		; Set RV=1
(1)  728/FFFFFFFFFFFF1B80 :                     ; 	endif
(1)  729/FFFFFFFFFFFF1B80 : 6100 040A           		bsr	System_MdMcd_SubWait
(1)  730/FFFFFFFFFFFF1B84 : 4BFA 0614           		lea	def_SaveInfo(pc),a5			; Init+Load SRAM/BRAM feature
(1)  731/FFFFFFFFFFFF1B88 : 4DF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a6		; Copy-paste info
(1)  732/FFFFFFFFFFFF1B8E : 7E07                		moveq	#($10/2)-1,d7
(1)  733/FFFFFFFFFFFF1B90 :                     .copy_paste:
(1)  734/FFFFFFFFFFFF1B90 : 3CDD                		move.w	(a5)+,(a6)+
(1)  735/FFFFFFFFFFFF1B92 : 51CF FFFC           		dbf	d7,.copy_paste
(1)  736/FFFFFFFFFFFF1B96 : 7008                		moveq	#$08,d0					; Init BRAM support
(1)  737/FFFFFFFFFFFF1B98 : 6100 040E           		bsr	System_MdMcd_SubTask
(1)  738/FFFFFFFFFFFF1B9C : 6100 03EE           		bsr	System_MdMcd_SubWait
(1)  739/FFFFFFFFFFFF1BA0 :                     ; 	if MARSCD
(1)  740/FFFFFFFFFFFF1BA0 :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l		; Set RV=0
(1)  741/FFFFFFFFFFFF1BA0 :                     ; 	endif
(1)  742/FFFFFFFFFFFF1BA0 : 31FC 0000 EE7A      		move.w	#0,(RAM_SaveEnable).w			; Disable SAVE R/W
(1)  743/FFFFFFFFFFFF1BA6 : 0C79 FFFE 00A1      		cmp.w	#-2,(sysmcd_reg+mcd_dcomm_s).l		; Got -2 No RAM / Unformatted?
         FFFFFFFFFFFF1BAC : 2020             
(1)  744/FFFFFFFFFFFF1BAE : 6734                		beq.s	.cont_save
(1)  745/FFFFFFFFFFFF1BB0 :                     .not_fail:
(1)  746/FFFFFFFFFFFF1BB0 : 31FC 0001 EE7A      		move.w	#1,(RAM_SaveEnable).w			; Enable SAVE Read/Write
(1)  747/FFFFFFFFFFFF1BB6 : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l		; Found the file?
         FFFFFFFFFFFF1BBC : 2020             
(1)  748/FFFFFFFFFFFF1BBE : 6624                		bne.s	.cont_save
(1)  749/FFFFFFFFFFFF1BC0 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  750/FFFFFFFFFFFF1BC4 : 4DF8 EC18           		lea	(RAM_SaveData).w,a6			; If NOT found, Make SAVE template
(1)  751/FFFFFFFFFFFF1BC8 : 7C00                		moveq	#0,d6
(1)  752/FFFFFFFFFFFF1BCA : 3E3C 01FF           		move.w	#SET_SRAMSIZE-1,d7
(1)  753/FFFFFFFFFFFF1BCE :                     .clr_sram:
(1)  754/FFFFFFFFFFFF1BCE : 1CC6                		move.b	d6,(a6)+
(1)  755/FFFFFFFFFFFF1BD0 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  756/FFFFFFFFFFFF1BD4 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  757/FFFFFFFFFFFF1BD8 : 21FC 5341 5645      		move.l	#TAG_SRAMDATA,(RAM_SaveData).w		; Write SAVE template
         FFFFFFFFFFFF1BDE : EC18             
(1)  758/FFFFFFFFFFFF1BE0 : 6100 00AC           		bsr	System_SramSave
(1)  759/FFFFFFFFFFFF1BE4 :                     .cont_save:
(1)  760/FFFFFFFFFFFF1BE4 : 6104                		bsr	System_SramLoad				; Get data from BRAM
(1)  761/FFFFFFFFFFFF1BE6 :                     	; ------------------------------------------------
(1)  786/FFFFFFFFFFFF1BE6 :                     .cant_use:
(1)  787/FFFFFFFFFFFF1BE6 : 6002                		bra	System_SramLoad
(1)  788/FFFFFFFFFFFF1BE8 :                     .already_set:
(1)  789/FFFFFFFFFFFF1BE8 : 4E75                		rts
(1)  790/FFFFFFFFFFFF1BEA :                     
(1)  791/FFFFFFFFFFFF1BEA :                     ; --------------------------------------------------------
(1)  792/FFFFFFFFFFFF1BEA :                     ; System_SramLoad
(1)  793/FFFFFFFFFFFF1BEA :                     ;
(1)  794/FFFFFFFFFFFF1BEA :                     ; Load the SRAM/BRAM to the SAVE data buffer
(1)  795/FFFFFFFFFFFF1BEA :                     ; --------------------------------------------------------
(1)  796/FFFFFFFFFFFF1BEA :                     
(1)  797/FFFFFFFFFFFF1BEA :                     System_SramLoad:
(1)  801/FFFFFFFFFFFF1BEA :                     	; ------------------------------------------------
(1)  802/FFFFFFFFFFFF1BEA :                     	; CD BRAM
(1)  803/FFFFFFFFFFFF1BEA :                     	; ------------------------------------------------
(1)  804/FFFFFFFFFFFF1BEA : 4A78 EE7A           		tst.w	(RAM_SaveEnable).w
(1)  805/FFFFFFFFFFFF1BEE : 6700 009C           		beq	.cant_use
(1)  806/FFFFFFFFFFFF1BF2 : 40E7                		move.w	sr,-(sp)
(1)  807/FFFFFFFFFFFF1BF4 : 48E7 830E           		movem.l	d0/d6-d7/a4-a6,-(sp)
(1)  808/FFFFFFFFFFFF1BF8 : 6100 0392           		bsr	System_MdMcd_SubWait
(1)  809/FFFFFFFFFFFF1BFC : 7009                		moveq	#$09,d0
(1)  810/FFFFFFFFFFFF1BFE : 6100 03A8           		bsr	System_MdMcd_SubTask
(1)  811/FFFFFFFFFFFF1C02 : 44FC 0001           		move	#1,ccr
(1)  812/FFFFFFFFFFFF1C06 : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l	; Got -1
         FFFFFFFFFFFF1C0C : 2020             
(1)  813/FFFFFFFFFFFF1C0E : 6776                		beq.s	.set_bad
(1)  814/FFFFFFFFFFFF1C10 : 0839 0004 00A1      .wait_sub:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait clean SIGNAL
         FFFFFFFFFFFF1C16 : 200F             
(1)  815/FFFFFFFFFFFF1C18 : 66F6                		bne.s	.wait_sub
(1)  816/FFFFFFFFFFFF1C1A : 08B9 0004 00A1      		bclr	#4,(sysmcd_reg+mcd_comm_m).l	; Set PASS
         FFFFFFFFFFFF1C20 : 200E             
(1)  817/FFFFFFFFFFFF1C22 : 08F9 0007 00A1      		bset	#7,(sysmcd_reg+mcd_comm_m).l	; Set LOCK
         FFFFFFFFFFFF1C28 : 200E             
(1)  818/FFFFFFFFFFFF1C2A : 4DF8 EC18           		lea	(RAM_SaveData).w,a6
(1)  819/FFFFFFFFFFFF1C2E : 4BF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s).l,a5
(1)  820/FFFFFFFFFFFF1C34 : 3E3C 001F           		move.w	#(SET_SRAMSIZE/$10)-1,d7
(1)  821/FFFFFFFFFFFF1C38 : 0839 0007 00A1      .get_data:	btst	#7,(sysmcd_reg+mcd_comm_s).l	; SUB finished?
         FFFFFFFFFFFF1C3E : 200F             
(1)  822/FFFFFFFFFFFF1C40 : 6738                		beq.s	.exit_now
(1)  823/FFFFFFFFFFFF1C42 : 0839 0004 00A1      		btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL set
         FFFFFFFFFFFF1C48 : 200F             
(1)  824/FFFFFFFFFFFF1C4A : 67EC                		beq.s	.get_data
(1)  825/FFFFFFFFFFFF1C4C : 284D                		move.l	a5,a4
(1)  826/FFFFFFFFFFFF1C4E : 3CDC                		move.w	(a4)+,(a6)+
(1)  827/FFFFFFFFFFFF1C50 : 3CDC                		move.w	(a4)+,(a6)+
(1)  828/FFFFFFFFFFFF1C52 : 3CDC                		move.w	(a4)+,(a6)+
(1)  829/FFFFFFFFFFFF1C54 : 3CDC                		move.w	(a4)+,(a6)+
(1)  830/FFFFFFFFFFFF1C56 : 3CDC                		move.w	(a4)+,(a6)+
(1)  831/FFFFFFFFFFFF1C58 : 3CDC                		move.w	(a4)+,(a6)+
(1)  832/FFFFFFFFFFFF1C5A : 3CDC                		move.w	(a4)+,(a6)+
(1)  833/FFFFFFFFFFFF1C5C : 3CDC                		move.w	(a4)+,(a6)+
(1)  834/FFFFFFFFFFFF1C5E : 08F9 0004 00A1      		bset	#4,(sysmcd_reg+mcd_comm_m).l	; Set PASS
         FFFFFFFFFFFF1C64 : 200E             
(1)  835/FFFFFFFFFFFF1C66 : 0839 0004 00A1      .wait_signo:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL clear
         FFFFFFFFFFFF1C6C : 200F             
(1)  836/FFFFFFFFFFFF1C6E : 66F6                		bne.s	.wait_signo
(1)  837/FFFFFFFFFFFF1C70 : 08B9 0004 00A1      		bclr	#4,(sysmcd_reg+mcd_comm_m).l	; Clear PASS
         FFFFFFFFFFFF1C76 : 200E             
(1)  838/FFFFFFFFFFFF1C78 : 60BE                		bra.s	.get_data
(1)  839/FFFFFFFFFFFF1C7A :                     .exit_now:
(1)  840/FFFFFFFFFFFF1C7A : 08B9 0007 00A1      		bclr	#7,(sysmcd_reg+mcd_comm_m).l	; Clear LOCK
         FFFFFFFFFFFF1C80 : 200E             
(1)  841/FFFFFFFFFFFF1C82 : 44FC 0000           		move	#0,ccr
(1)  842/FFFFFFFFFFFF1C86 :                     .set_bad:
(1)  843/FFFFFFFFFFFF1C86 : 4CDF 70C1           		movem.l	(sp)+,d0/d6-d7/a4-a6
(1)  844/FFFFFFFFFFFF1C8A : 46DF                		move.w	(sp)+,sr
(1)  845/FFFFFFFFFFFF1C8C :                     .cant_use:
(1)  846/FFFFFFFFFFFF1C8C :                     	; ------------------------------------------------
(1)  879/FFFFFFFFFFFF1C8C : 4E75                		rts
(1)  880/FFFFFFFFFFFF1C8E :                     
(1)  881/FFFFFFFFFFFF1C8E :                     ; --------------------------------------------------------
(1)  882/FFFFFFFFFFFF1C8E :                     ; System_SramSave
(1)  883/FFFFFFFFFFFF1C8E :                     ;
(1)  884/FFFFFFFFFFFF1C8E :                     ; Write the SAVE data buffer to SRAM/BRAM
(1)  885/FFFFFFFFFFFF1C8E :                     ;
(1)  886/FFFFFFFFFFFF1C8E :                     ; NOTE SCD/CD32X:
(1)  887/FFFFFFFFFFFF1C8E :                     ; Uses ALL mcd_dcomm_m PORTS
(1)  888/FFFFFFFFFFFF1C8E :                     ;
(1)  889/FFFFFFFFFFFF1C8E :                     ; Stop or Pause All GEMA Sequences that use PCM samples
(1)  890/FFFFFFFFFFFF1C8E :                     ; before calling this (TODO: a PCM-block flag)
(1)  891/FFFFFFFFFFFF1C8E :                     ; --------------------------------------------------------
(1)  892/FFFFFFFFFFFF1C8E :                     
(1)  893/FFFFFFFFFFFF1C8E :                     System_SramSave:
(1)  897/FFFFFFFFFFFF1C8E :                     
(1)  898/FFFFFFFFFFFF1C8E :                     	; ------------------------------------------------
(1)  899/FFFFFFFFFFFF1C8E :                     	; CD BRAM
(1)  900/FFFFFFFFFFFF1C8E :                     	; ------------------------------------------------
(1)  901/FFFFFFFFFFFF1C8E : 4A78 EE7A           		tst.w	(RAM_SaveEnable).w
(1)  902/FFFFFFFFFFFF1C92 : 6700 008C           		beq	.cant_use
(1)  903/FFFFFFFFFFFF1C96 : 40E7                		move.w	sr,-(sp)
(1)  904/FFFFFFFFFFFF1C98 : 48E7 830E           		movem.l	d0/d6-d7/a4-a6,-(sp)
(1)  905/FFFFFFFFFFFF1C9C : 6100 02EE           		bsr	System_MdMcd_SubWait
(1)  906/FFFFFFFFFFFF1CA0 : 700A                		moveq	#$0A,d0
(1)  907/FFFFFFFFFFFF1CA2 : 6100 0304           		bsr	System_MdMcd_SubTask
(1)  908/FFFFFFFFFFFF1CA6 : 44FC 0001           		move	#1,ccr
(1)  909/FFFFFFFFFFFF1CAA : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l	; Got -1
         FFFFFFFFFFFF1CB0 : 2020             
(1)  910/FFFFFFFFFFFF1CB2 : 6766                		beq.s	.set_bad
(1)  911/FFFFFFFFFFFF1CB4 : 0839 0004 00A1      .wait_sub:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait clean SIGNAL
         FFFFFFFFFFFF1CBA : 200F             
(1)  912/FFFFFFFFFFFF1CBC : 66F6                		bne.s	.wait_sub
(1)  913/FFFFFFFFFFFF1CBE : 08F9 0007 00A1      		bset	#7,(sysmcd_reg+mcd_comm_m).l	; Set LOCK
         FFFFFFFFFFFF1CC4 : 200E             
(1)  914/FFFFFFFFFFFF1CC6 : 4DF8 EC18           		lea	(RAM_SaveData).w,a6
(1)  915/FFFFFFFFFFFF1CCA : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a5
(1)  916/FFFFFFFFFFFF1CD0 : 3E3C 001F           		move.w	#(SET_SRAMSIZE/$10)-1,d7
(1)  917/FFFFFFFFFFFF1CD4 : 284D                .send_data:	move.l	a5,a4
(1)  918/FFFFFFFFFFFF1CD6 : 38DE                		move.w	(a6)+,(a4)+
(1)  919/FFFFFFFFFFFF1CD8 : 38DE                		move.w	(a6)+,(a4)+
(1)  920/FFFFFFFFFFFF1CDA : 38DE                		move.w	(a6)+,(a4)+
(1)  921/FFFFFFFFFFFF1CDC : 38DE                		move.w	(a6)+,(a4)+
(1)  922/FFFFFFFFFFFF1CDE : 38DE                		move.w	(a6)+,(a4)+
(1)  923/FFFFFFFFFFFF1CE0 : 38DE                		move.w	(a6)+,(a4)+
(1)  924/FFFFFFFFFFFF1CE2 : 38DE                		move.w	(a6)+,(a4)+
(1)  925/FFFFFFFFFFFF1CE4 : 38DE                		move.w	(a6)+,(a4)+
(1)  926/FFFFFFFFFFFF1CE6 : 08F9 0004 00A1      		bset	#4,(sysmcd_reg+mcd_comm_m).l	; Set PASS
         FFFFFFFFFFFF1CEC : 200E             
(1)  927/FFFFFFFFFFFF1CEE : 0839 0004 00A1      .wait_signi:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL set
         FFFFFFFFFFFF1CF4 : 200F             
(1)  928/FFFFFFFFFFFF1CF6 : 67F6                		beq.s	.wait_signi
(1)  929/FFFFFFFFFFFF1CF8 : 08B9 0004 00A1      		bclr	#4,(sysmcd_reg+mcd_comm_m).l
         FFFFFFFFFFFF1CFE : 200E             
(1)  930/FFFFFFFFFFFF1D00 : 0839 0004 00A1      .wait_signo:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL clear
         FFFFFFFFFFFF1D06 : 200F             
(1)  931/FFFFFFFFFFFF1D08 : 66F6                		bne.s	.wait_signo
(1)  932/FFFFFFFFFFFF1D0A : 51CF FFC8           		dbf	d7,.send_data
(1)  933/FFFFFFFFFFFF1D0E : 08B9 0007 00A1      		bclr	#7,(sysmcd_reg+mcd_comm_m).l	; Clear LOCK
         FFFFFFFFFFFF1D14 : 200E             
(1)  934/FFFFFFFFFFFF1D16 : 44FC 0000           		move	#0,ccr
(1)  935/FFFFFFFFFFFF1D1A :                     .set_bad:
(1)  936/FFFFFFFFFFFF1D1A : 4CDF 70C1           		movem.l	(sp)+,d0/d6-d7/a4-a6
(1)  937/FFFFFFFFFFFF1D1E : 46DF                		move.w	(sp)+,sr
(1)  938/FFFFFFFFFFFF1D20 :                     .cant_use:
(1)  939/FFFFFFFFFFFF1D20 :                     	; ------------------------------------------------
(1)  969/FFFFFFFFFFFF1D20 : 4E75                		rts
(1)  970/FFFFFFFFFFFF1D22 :                     
(1)  971/FFFFFFFFFFFF1D22 :                     ; ============================================================
(1)  972/FFFFFFFFFFFF1D22 :                     ; --------------------------------------------------------
(1)  973/FFFFFFFFFFFF1D22 :                     ; System_Default
(1)  974/FFFFFFFFFFFF1D22 :                     ;
(1)  975/FFFFFFFFFFFF1D22 :                     ; Initializes current screen mode
(1)  976/FFFFFFFFFFFF1D22 :                     ;
(1)  977/FFFFFFFFFFFF1D22 :                     ; Uses:
(1)  978/FFFFFFFFFFFF1D22 :                     ; ALL
(1)  979/FFFFFFFFFFFF1D22 :                     ; --------------------------------------------------------
(1)  980/FFFFFFFFFFFF1D22 :                     
(1)  981/FFFFFFFFFFFF1D22 :                     System_Default:
(1)  982/FFFFFFFFFFFF1D22 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  983/FFFFFFFFFFFF1D26 : 4DF8 B000           		lea	(RAM_ScrnBuff).w,a6
(1)  984/FFFFFFFFFFFF1D2A : 3E3C 1FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  985/FFFFFFFFFFFF1D2E : 7C00                		moveq	#0,d6
(1)  986/FFFFFFFFFFFF1D30 :                     .clr_loop:
(1)  987/FFFFFFFFFFFF1D30 : 1CC6                		move.b	d6,(a6)+
(1)  988/FFFFFFFFFFFF1D32 : 51CF FFFC           		dbf	d7,.clr_loop
(1)  989/FFFFFFFFFFFF1D36 : 6100 E93E           		bsr	Video_Clear
(1)  990/FFFFFFFFFFFF1D3A : 6100 E5EA           		bsr	Video_Default
(1)  991/FFFFFFFFFFFF1D3E : 6000 04B4           		bra	Object_Init			; Reset all objects
(1)  992/FFFFFFFFFFFF1D42 :                     
(1)  993/FFFFFFFFFFFF1D42 :                     ; ====================================================================
(1)  994/FFFFFFFFFFFF1D42 :                     ; ----------------------------------------------------------------
(1)  995/FFFFFFFFFFFF1D42 :                     ; Default interrupts
(1)  996/FFFFFFFFFFFF1D42 :                     ; ----------------------------------------------------------------
(1)  997/FFFFFFFFFFFF1D42 :                     
(1)  998/FFFFFFFFFFFF1D42 :                     ; --------------------------------------------------------
(1)  999/FFFFFFFFFFFF1D42 :                     ; VBlank
(1) 1000/FFFFFFFFFFFF1D42 :                     ; --------------------------------------------------------
(1) 1001/FFFFFFFFFFFF1D42 :                     
(1) 1002/FFFFFFFFFFFF1D42 :                     VInt_Default:
(1) 1003/FFFFFFFFFFFF1D42 :                     ; 		movem.l	d0-a6,-(sp)
(1) 1004/FFFFFFFFFFFF1D42 :                     ; 		bsr	System_Input
(1) 1005/FFFFFFFFFFFF1D42 :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1) 1006/FFFFFFFFFFFF1D42 :                     ; 		movem.l	(sp)+,d0-a6
(1) 1007/FFFFFFFFFFFF1D42 : 4E73                		rte
(1) 1008/FFFFFFFFFFFF1D44 :                     
(1) 1009/FFFFFFFFFFFF1D44 :                     ; --------------------------------------------------------
(1) 1010/FFFFFFFFFFFF1D44 :                     ; HBlank
(1) 1011/FFFFFFFFFFFF1D44 :                     ; --------------------------------------------------------
(1) 1012/FFFFFFFFFFFF1D44 :                     
(1) 1013/FFFFFFFFFFFF1D44 :                     HInt_Default:
(1) 1014/FFFFFFFFFFFF1D44 : 4E73                		rte
(1) 1015/FFFFFFFFFFFF1D46 :                     
(1) 1016/FFFFFFFFFFFF1D46 :                     ; --------------------------------------------------------
(1) 1017/FFFFFFFFFFFF1D46 :                     ; External interrupt
(1) 1018/FFFFFFFFFFFF1D46 :                     ; --------------------------------------------------------
(1) 1019/FFFFFFFFFFFF1D46 :                     
(1) 1020/FFFFFFFFFFFF1D46 :                     ExtInt_Default:
(1) 1021/FFFFFFFFFFFF1D46 : 4E73                		rte
(1) 1022/FFFFFFFFFFFF1D48 :                     
(1) 1023/FFFFFFFFFFFF1D48 :                     ; ====================================================================
(1) 1024/FFFFFFFFFFFF1D48 :                     ; ------------------------------------------------------------
(1) 1025/FFFFFFFFFFFF1D48 :                     ; Subroutines
(1) 1026/FFFFFFFFFFFF1D48 :                     ; ------------------------------------------------------------
(1) 1027/FFFFFFFFFFFF1D48 :                     
(1) 1028/FFFFFFFFFFFF1D48 :                     ; --------------------------------------------------------
(1) 1029/FFFFFFFFFFFF1D48 :                     ; System_Random, System_Random_Seed
(1) 1030/FFFFFFFFFFFF1D48 :                     ;
(1) 1031/FFFFFFFFFFFF1D48 :                     ; Generate random value
(1) 1032/FFFFFFFFFFFF1D48 :                     ;
(1) 1033/FFFFFFFFFFFF1D48 :                     ; Input:
(1) 1034/FFFFFFFFFFFF1D48 :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1035/FFFFFFFFFFFF1D48 :                     ;
(1) 1036/FFFFFFFFFFFF1D48 :                     ; Returns:
(1) 1037/FFFFFFFFFFFF1D48 :                     ; d0.l | Result value
(1) 1038/FFFFFFFFFFFF1D48 :                     ; --------------------------------------------------------
(1) 1039/FFFFFFFFFFFF1D48 :                     
(1) 1040/FFFFFFFFFFFF1D48 :                     System_Random_Seed:
(1) 1041/FFFFFFFFFFFF1D48 : 2F04                		move.l	d4,-(sp)
(1) 1042/FFFFFFFFFFFF1D4A : 2800                		move.l	d0,d4
(1) 1043/FFFFFFFFFFFF1D4C : 6114                		bsr	sysRnd_MkValue
(1) 1044/FFFFFFFFFFFF1D4E : 281F                		move.l	(sp)+,d4
(1) 1045/FFFFFFFFFFFF1D50 : 4E75                		rts
(1) 1046/FFFFFFFFFFFF1D52 :                     System_Random:
(1) 1047/FFFFFFFFFFFF1D52 : 2F04                		move.l	d4,-(sp)
(1) 1048/FFFFFFFFFFFF1D54 : 2838 EE5C           		move.l	(RAM_SysRandom).w,d4
(1) 1049/FFFFFFFFFFFF1D58 : 6108                		bsr	sysRnd_MkValue
(1) 1050/FFFFFFFFFFFF1D5A : 21C4 EE5C           		move.l	d4,(RAM_SysRandom).w
(1) 1051/FFFFFFFFFFFF1D5E : 281F                		move.l	(sp)+,d4
(1) 1052/FFFFFFFFFFFF1D60 : 4E75                		rts
(1) 1053/FFFFFFFFFFFF1D62 :                     sysRnd_MkValue:
(1) 1054/FFFFFFFFFFFF1D62 : 4A84                		tst.l	d4
(1) 1055/FFFFFFFFFFFF1D64 : 660E                		bne.s	.has_seed
(1) 1056/FFFFFFFFFFFF1D66 : 2838 EBFC           		move.l	(RAM_FrameCount).w,d4
(1) 1057/FFFFFFFFFFFF1D6A : E1BC                		rol.l	d0,d4
(1) 1058/FFFFFFFFFFFF1D6C : E2BC                		ror.l	d1,d4
(1) 1059/FFFFFFFFFFFF1D6E : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1060/FFFFFFFFFFFF1D74 :                     .has_seed:
(1) 1061/FFFFFFFFFFFF1D74 : 2004                		move.l	d4,d0
(1) 1062/FFFFFFFFFFFF1D76 : E484                		asr.l	#2,d4
(1) 1063/FFFFFFFFFFFF1D78 : D880                		add.l	d0,d4
(1) 1064/FFFFFFFFFFFF1D7A : E79C                		rol.l	#3,d4
(1) 1065/FFFFFFFFFFFF1D7C : D880                		add.l	d0,d4
(1) 1066/FFFFFFFFFFFF1D7E : 3004                		move.w	d4,d0
(1) 1067/FFFFFFFFFFFF1D80 : 4844                		swap	d4
(1) 1068/FFFFFFFFFFFF1D82 : D044                		add.w	d4,d0
(1) 1069/FFFFFFFFFFFF1D84 : 3800                		move.w	d0,d4
(1) 1070/FFFFFFFFFFFF1D86 : E0BC                		ror.l	d0,d4
(1) 1071/FFFFFFFFFFFF1D88 : 4844                		swap	d4
(1) 1072/FFFFFFFFFFFF1D8A : 4E75                		rts
(1) 1073/FFFFFFFFFFFF1D8C :                     
(1) 1074/FFFFFFFFFFFF1D8C :                     ; --------------------------------------------------------
(1) 1075/FFFFFFFFFFFF1D8C :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1076/FFFFFFFFFFFF1D8C :                     ;
(1) 1077/FFFFFFFFFFFF1D8C :                     ; Pick a random number using a maximum value,
(1) 1078/FFFFFFFFFFFF1D8C :                     ; uses System_Random
(1) 1079/FFFFFFFFFFFF1D8C :                     ;
(1) 1080/FFFFFFFFFFFF1D8C :                     ; Input:
(1) 1081/FFFFFFFFFFFF1D8C :                     ; d0.l | Maximum number + 1
(1) 1082/FFFFFFFFFFFF1D8C :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1083/FFFFFFFFFFFF1D8C :                     ;
(1) 1084/FFFFFFFFFFFF1D8C :                     ; Returns:
(1) 1085/FFFFFFFFFFFF1D8C :                     ; d0.w | Output value
(1) 1086/FFFFFFFFFFFF1D8C :                     ; --------------------------------------------------------
(1) 1087/FFFFFFFFFFFF1D8C :                     
(1) 1088/FFFFFFFFFFFF1D8C :                     System_DiceRoll_Seed:
(1) 1089/FFFFFFFFFFFF1D8C : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1090/FFFFFFFFFFFF1D90 : 2A00                		move.l	d0,d5
(1) 1091/FFFFFFFFFFFF1D92 : 2801                		move.l	d1,d4
(1) 1092/FFFFFFFFFFFF1D94 : 61B2                		bsr	System_Random_Seed
(1) 1093/FFFFFFFFFFFF1D96 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1094/FFFFFFFFFFFF1D9C : C0C5                		mulu.w	d5,d0
(1) 1095/FFFFFFFFFFFF1D9E : 4840                		swap	d0
(1) 1096/FFFFFFFFFFFF1DA0 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1097/FFFFFFFFFFFF1DA6 : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1098/FFFFFFFFFFFF1DAA : 4E75                		rts
(1) 1099/FFFFFFFFFFFF1DAC :                     
(1) 1100/FFFFFFFFFFFF1DAC :                     System_DiceRoll:
(1) 1101/FFFFFFFFFFFF1DAC : 2F04                		move.l	d4,-(sp)
(1) 1102/FFFFFFFFFFFF1DAE : 2800                		move.l	d0,d4
(1) 1103/FFFFFFFFFFFF1DB0 : 61A0                		bsr	System_Random
(1) 1104/FFFFFFFFFFFF1DB2 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1105/FFFFFFFFFFFF1DB8 : C0C4                		mulu.w	d4,d0
(1) 1106/FFFFFFFFFFFF1DBA : 4840                		swap	d0
(1) 1107/FFFFFFFFFFFF1DBC : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1108/FFFFFFFFFFFF1DC2 : 281F                		move.l	(sp)+,d4
(1) 1109/FFFFFFFFFFFF1DC4 : 4E75                		rts
(1) 1110/FFFFFFFFFFFF1DC6 :                     
(1) 1111/FFFFFFFFFFFF1DC6 :                     ; --------------------------------------------------------
(1) 1112/FFFFFFFFFFFF1DC6 :                     ; System_SineWave, System_SineWave_Cos
(1) 1113/FFFFFFFFFFFF1DC6 :                     ;
(1) 1114/FFFFFFFFFFFF1DC6 :                     ; Get Sine or Cosine value
(1) 1115/FFFFFFFFFFFF1DC6 :                     ;
(1) 1116/FFFFFFFFFFFF1DC6 :                     ; Input:
(1) 1117/FFFFFFFFFFFF1DC6 :                     ; d0.w | Tan value: 0-511
(1) 1118/FFFFFFFFFFFF1DC6 :                     ;
(1) 1119/FFFFFFFFFFFF1DC6 :                     ; Returns:
(1) 1120/FFFFFFFFFFFF1DC6 :                     ; d1.w | Result
(1) 1121/FFFFFFFFFFFF1DC6 :                     ; --------------------------------------------------------
(1) 1122/FFFFFFFFFFFF1DC6 :                     
(1) 1123/FFFFFFFFFFFF1DC6 :                     System_SineWave_Cos:
(1) 1124/FFFFFFFFFFFF1DC6 : 2F07                		move.l	d7,-(sp)
(1) 1125/FFFFFFFFFFFF1DC8 : 3E00                		move.w	d0,d7
(1) 1126/FFFFFFFFFFFF1DCA : 0647 0080           		addi.w  #$80,d7
(1) 1127/FFFFFFFFFFFF1DCE : 6004                		bra	sys_SineWave
(1) 1128/FFFFFFFFFFFF1DD0 :                     System_SineWave:
(1) 1129/FFFFFFFFFFFF1DD0 : 2F07                		move.l	d7,-(sp)
(1) 1130/FFFFFFFFFFFF1DD2 : 3E00                		move.w	d0,d7
(1) 1131/FFFFFFFFFFFF1DD4 :                     sys_SineWave:
(1) 1132/FFFFFFFFFFFF1DD4 : 0247 01FF           		andi.w	#$1FF,d7
(1) 1133/FFFFFFFFFFFF1DD8 : 3207                		move.w	d7,d1
(1) 1134/FFFFFFFFFFFF1DDA : 0807 0007           		btst	#7,d7
(1) 1135/FFFFFFFFFFFF1DDE : 6702                		beq.s	.loc_7EFA
(1) 1136/FFFFFFFFFFFF1DE0 : 4641                		not.w	d1
(1) 1137/FFFFFFFFFFFF1DE2 :                     .loc_7EFA:
(1) 1138/FFFFFFFFFFFF1DE2 : 0241 007F           		andi.w  #$7F,d1
(1) 1139/FFFFFFFFFFFF1DE6 : D241                		add.w	d1,d1
(1) 1140/FFFFFFFFFFFF1DE8 : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1141/FFFFFFFFFFFF1DEC : 0807 0008           		btst    #8,d7
(1) 1142/FFFFFFFFFFFF1DF0 : 6702                		beq.s   .loc_7F0C
(1) 1143/FFFFFFFFFFFF1DF2 : 4441                		neg.w   d1
(1) 1144/FFFFFFFFFFFF1DF4 :                     .loc_7F0C:
(1) 1145/FFFFFFFFFFFF1DF4 : 48C1                		ext.l	d1
(1) 1146/FFFFFFFFFFFF1DF6 : 2E1F                		move.l (sp)+,d7
(1) 1147/FFFFFFFFFFFF1DF8 : 4E75                		rts
(1) 1148/FFFFFFFFFFFF1DFA :                     
(1) 1149/FFFFFFFFFFFF1DFA :                     .sine_data:
(1) 1150/FFFFFFFFFFFF1DFA :                     		binclude "nikona/md/data/sine_data.bin"
(1) 1151/FFFFFFFFFFFF1EFA :                     		align 2
(1) 1152/FFFFFFFFFFFF1EFC :                     
(1) 1153/FFFFFFFFFFFF1EFC :                     ; --------------------------------------------------------
(1) 1154/FFFFFFFFFFFF1EFC :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1155/FFFFFFFFFFFF1EFC :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1156/FFFFFFFFFFFF1EFC :                     ;
(1) 1157/FFFFFFFFFFFF1EFC :                     ; Increment/Decrement BCD value
(1) 1158/FFFFFFFFFFFF1EFC :                     ; for Scores, Lives, and such.
(1) 1159/FFFFFFFFFFFF1EFC :                     ;
(1) 1160/FFFFFFFFFFFF1EFC :                     ; Input:
(1) 1161/FFFFFFFFFFFF1EFC :                     ; d0.? | BCD value input
(1) 1162/FFFFFFFFFFFF1EFC :                     ; d1.l | Increment/Decrement by
(1) 1163/FFFFFFFFFFFF1EFC :                     ;
(1) 1164/FFFFFFFFFFFF1EFC :                     ; Returns:
(1) 1165/FFFFFFFFFFFF1EFC :                     ; d0.? | BCD value output
(1) 1166/FFFFFFFFFFFF1EFC :                     ; --------------------------------------------------------
(1) 1167/FFFFFFFFFFFF1EFC :                     
(1) 1168/FFFFFFFFFFFF1EFC :                     ; TODO: An overflow check
(1) 1169/FFFFFFFFFFFF1EFC :                     
(1) 1170/FFFFFFFFFFFF1EFC :                     System_BCD_SubB:
(1) 1171/FFFFFFFFFFFF1EFC : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1172/FFFFFFFFFFFF1F02 : 6006                		bra.s	System_BCD_SubL
(1) 1173/FFFFFFFFFFFF1F04 :                     System_BCD_SubW:
(1) 1174/FFFFFFFFFFFF1F04 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1175/FFFFFFFFFFFF1F0A :                     ; 		bra.s	System_BCD_SubL
(1) 1176/FFFFFFFFFFFF1F0A :                     System_BCD_SubL:
(1) 1177/FFFFFFFFFFFF1F0A : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1178/FFFFFFFFFFFF1F0E : 613C                		bsr	sysBCD_SpOut
(1) 1179/FFFFFFFFFFFF1F10 : 023C 0000           		and	#0,ccr
(1) 1180/FFFFFFFFFFFF1F14 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1181/FFFFFFFFFFFF1F16 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1182/FFFFFFFFFFFF1F18 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1183/FFFFFFFFFFFF1F1A : 8D0D                		sbcd	-(a5),-(a6)
(1) 1184/FFFFFFFFFFFF1F1C : 2016                		move.l	(a6),d0
(1) 1185/FFFFFFFFFFFF1F1E : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1186/FFFFFFFFFFFF1F22 : 4E75                		rts
(1) 1187/FFFFFFFFFFFF1F24 :                     System_BCD_AddB:
(1) 1188/FFFFFFFFFFFF1F24 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1189/FFFFFFFFFFFF1F2A : 6006                		bra.s	System_BCD_AddL
(1) 1190/FFFFFFFFFFFF1F2C :                     System_BCD_AddW:
(1) 1191/FFFFFFFFFFFF1F2C : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1192/FFFFFFFFFFFF1F32 :                     ; 		bsr.s	System_BCD_AddL
(1) 1193/FFFFFFFFFFFF1F32 :                     System_BCD_AddL:
(1) 1194/FFFFFFFFFFFF1F32 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1195/FFFFFFFFFFFF1F36 : 6114                		bsr	sysBCD_SpOut
(1) 1196/FFFFFFFFFFFF1F38 : 023C 0000           		and	#0,ccr
(1) 1197/FFFFFFFFFFFF1F3C : CD0D                		abcd	-(a5),-(a6)
(1) 1198/FFFFFFFFFFFF1F3E : CD0D                		abcd	-(a5),-(a6)
(1) 1199/FFFFFFFFFFFF1F40 : CD0D                		abcd	-(a5),-(a6)
(1) 1200/FFFFFFFFFFFF1F42 : CD0D                		abcd	-(a5),-(a6)
(1) 1201/FFFFFFFFFFFF1F44 : 2016                		move.l	(a6),d0
(1) 1202/FFFFFFFFFFFF1F46 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1203/FFFFFFFFFFFF1F4A : 4E75                		rts
(1) 1204/FFFFFFFFFFFF1F4C :                     sysBCD_SpOut:
(1) 1205/FFFFFFFFFFFF1F4C : 598F                		subq.l	#4,sp
(1) 1206/FFFFFFFFFFFF1F4E : 2C4F                		move.l	sp,a6
(1) 1207/FFFFFFFFFFFF1F50 : 598F                		subq.l	#4,sp
(1) 1208/FFFFFFFFFFFF1F52 : 2A4F                		move.l	sp,a5
(1) 1209/FFFFFFFFFFFF1F54 : 2C80                		move.l	d0,(a6)
(1) 1210/FFFFFFFFFFFF1F56 : 2A81                		move.l	d1,(a5)
(1) 1211/FFFFFFFFFFFF1F58 : DCFC 0004           		adda	#4,a6
(1) 1212/FFFFFFFFFFFF1F5C : DAFC 0004           		adda	#4,a5
(1) 1213/FFFFFFFFFFFF1F60 : 508F                		addq.l	#8,sp
(1) 1214/FFFFFFFFFFFF1F62 : 4E75                		rts
(1) 1215/FFFFFFFFFFFF1F64 :                     
(1) 1216/FFFFFFFFFFFF1F64 :                     ; --------------------------------------------------------
(1) 1217/FFFFFFFFFFFF1F64 :                     ; System_SetIntJumps
(1) 1218/FFFFFFFFFFFF1F64 :                     ;
(1) 1219/FFFFFFFFFFFF1F64 :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1220/FFFFFFFFFFFF1F64 :                     ; generated by VDP
(1) 1221/FFFFFFFFFFFF1F64 :                     ;
(1) 1222/FFFFFFFFFFFF1F64 :                     ; Input:
(1) 1223/FFFFFFFFFFFF1F64 :                     ; d0.l | New VBlank location
(1) 1224/FFFFFFFFFFFF1F64 :                     ; d1.l | New HBlank location
(1) 1225/FFFFFFFFFFFF1F64 :                     ; d2.l | New External location
(1) 1226/FFFFFFFFFFFF1F64 :                     ;
(1) 1227/FFFFFFFFFFFF1F64 :                     ; Notes:
(1) 1228/FFFFFFFFFFFF1F64 :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1229/FFFFFFFFFFFF1F64 :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1230/FFFFFFFFFFFF1F64 :                     ; --------------------------------------------------------
(1) 1231/FFFFFFFFFFFF1F64 :                     
(1) 1232/FFFFFFFFFFFF1F64 :                     System_SetIntJumps:
(1) 1233/FFFFFFFFFFFF1F64 : 4A80                		tst.l	d0
(1) 1234/FFFFFFFFFFFF1F66 : 6704                		beq.s	.no_vint
(1) 1236/FFFFFFFFFFFF1F68 : 21C0 FD08           		move.l	d0,($FFFFFD06+2).w
(1) 1240/FFFFFFFFFFFF1F6C :                     .no_vint:
(1) 1241/FFFFFFFFFFFF1F6C : 4A81                		tst.l	d1
(1) 1242/FFFFFFFFFFFF1F6E : 6704                		beq.s	.no_hint
(1) 1244/FFFFFFFFFFFF1F70 : 21C1 FD0E           		move.l	d1,($FFFFFD0C+2).w
(1) 1248/FFFFFFFFFFFF1F74 :                     .no_hint:
(1) 1249/FFFFFFFFFFFF1F74 : 4A82                		tst.l	d2
(1) 1250/FFFFFFFFFFFF1F76 : 6704                		beq.s	.no_exint
(1) 1252/FFFFFFFFFFFF1F78 : 21C2 FD14           		move.l	d2,($FFFFFD12+2).w
(1) 1256/FFFFFFFFFFFF1F7C :                     .no_exint:
(1) 1257/FFFFFFFFFFFF1F7C : 4E75                		rts
(1) 1258/FFFFFFFFFFFF1F7E :                     
(1) 1259/FFFFFFFFFFFF1F7E :                     ; ====================================================================
(1) 1260/FFFFFFFFFFFF1F7E :                     ; ----------------------------------------------------------------
(1) 1261/FFFFFFFFFFFF1F7E :                     ; SCD / CD32X ONLY
(1) 1262/FFFFFFFFFFFF1F7E :                     ; ----------------------------------------------------------------
(1) 1263/FFFFFFFFFFFF1F7E :                     
(1) 1264/FFFFFFFFFFFF1F7E :                     ; --------------------------------------------------------
(1) 1265/FFFFFFFFFFFF1F7E :                     ; System_MdMcd_Interrupt
(1) 1266/FFFFFFFFFFFF1F7E :                     ;
(1) 1267/FFFFFFFFFFFF1F7E :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1268/FFFFFFFFFFFF1F7E :                     ; VBlank.
(1) 1269/FFFFFFFFFFFF1F7E :                     ; --------------------------------------------------------
(1) 1270/FFFFFFFFFFFF1F7E :                     
(1) 1271/FFFFFFFFFFFF1F7E :                     System_MdMcd_Interrupt:
(1) 1272/FFFFFFFFFFFF1F7E : 2F07                		move.l	d7,-(sp)
(1) 1273/FFFFFFFFFFFF1F80 :                     ; .wait_first:
(1) 1274/FFFFFFFFFFFF1F80 :                     ; 		bsr	System_MdMcd_SubWait
(1) 1275/FFFFFFFFFFFF1F80 :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1276/FFFFFFFFFFFF1F80 :                     ; 		andi.w	#$C0,d7
(1) 1277/FFFFFFFFFFFF1F80 :                     ; 		cmpi.w	#$C0,d7
(1) 1278/FFFFFFFFFFFF1F80 :                     ; 		beq.s	.wait_first
(1) 1279/FFFFFFFFFFFF1F80 :                     ; 		bset	#0,(sysmcd_reg).l
(1) 1280/FFFFFFFFFFFF1F80 : 13FC 0081 00A1      		move.b	#%10000001,(sysmcd_reg).l		; Request Level 1
         FFFFFFFFFFFF1F86 : 2000             
(1) 1281/FFFFFFFFFFFF1F88 : 2E1F                		move.l	(sp)+,d7
(1) 1282/FFFFFFFFFFFF1F8A : 4E75                		rts
(1) 1283/FFFFFFFFFFFF1F8C :                     
(1) 1284/FFFFFFFFFFFF1F8C :                     ; --------------------------------------------------------
(1) 1285/FFFFFFFFFFFF1F8C :                     ; System_MdMcd_SubWait
(1) 1286/FFFFFFFFFFFF1F8C :                     ;
(1) 1287/FFFFFFFFFFFF1F8C :                     ; Waits until Sub-CPU finishes.
(1) 1288/FFFFFFFFFFFF1F8C :                     ; --------------------------------------------------------
(1) 1289/FFFFFFFFFFFF1F8C :                     
(1) 1290/FFFFFFFFFFFF1F8C :                     System_MdMcd_SubWait:
(1) 1292/FFFFFFFFFFFF1F8C : 3F07                		move.w	d7,-(sp)
(1) 1293/FFFFFFFFFFFF1F8E : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1294/FFFFFFFFFFFF1F94 : 6BF8                		bmi.s	.wait_sub_o
(1) 1295/FFFFFFFFFFFF1F96 : 3E1F                		move.w	(sp)+,d7
(1) 1297/FFFFFFFFFFFF1F98 : 4E75                		rts
(1) 1298/FFFFFFFFFFFF1F9A :                     
(1) 1299/FFFFFFFFFFFF1F9A :                     ; --------------------------------------------------------
(1) 1300/FFFFFFFFFFFF1F9A :                     ; System_MdMcd_SubEnter
(1) 1301/FFFFFFFFFFFF1F9A :                     ;
(1) 1302/FFFFFFFFFFFF1F9A :                     ; Waits until Sub-CPU starts.
(1) 1303/FFFFFFFFFFFF1F9A :                     ; --------------------------------------------------------
(1) 1304/FFFFFFFFFFFF1F9A :                     
(1) 1305/FFFFFFFFFFFF1F9A :                     System_MdMcd_SubEnter:
(1) 1307/FFFFFFFFFFFF1F9A : 3F07                		move.w	d7,-(sp)
(1) 1308/FFFFFFFFFFFF1F9C : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1309/FFFFFFFFFFFF1FA2 : 6AF8                		bpl.s	.wait_sub_o
(1) 1310/FFFFFFFFFFFF1FA4 : 3E1F                		move.w	(sp)+,d7
(1) 1312/FFFFFFFFFFFF1FA6 : 4E75                		rts
(1) 1313/FFFFFFFFFFFF1FA8 :                     
(1) 1314/FFFFFFFFFFFF1FA8 :                     ; --------------------------------------------------------
(1) 1315/FFFFFFFFFFFF1FA8 :                     ; System_MdMcd_SubTask
(1) 1316/FFFFFFFFFFFF1FA8 :                     ;
(1) 1317/FFFFFFFFFFFF1FA8 :                     ; Request task to Sub-CPU
(1) 1318/FFFFFFFFFFFF1FA8 :                     ;
(1) 1319/FFFFFFFFFFFF1FA8 :                     ; Input:
(1) 1320/FFFFFFFFFFFF1FA8 :                     ; d0.b | Task number
(1) 1321/FFFFFFFFFFFF1FA8 :                     ;
(1) 1322/FFFFFFFFFFFF1FA8 :                     ; Uses:
(1) 1323/FFFFFFFFFFFF1FA8 :                     ; d7/a6
(1) 1324/FFFFFFFFFFFF1FA8 :                     ;
(1) 1325/FFFFFFFFFFFF1FA8 :                     ; Notes:
(1) 1326/FFFFFFFFFFFF1FA8 :                     ; This exits without waiting SUB to finish,
(1) 1327/FFFFFFFFFFFF1FA8 :                     ; call System_MdMcd_SubWait afterwards if required.
(1) 1328/FFFFFFFFFFFF1FA8 :                     ; --------------------------------------------------------
(1) 1329/FFFFFFFFFFFF1FA8 :                     
(1) 1330/FFFFFFFFFFFF1FA8 :                     System_MdMcd_SubTask:
(1) 1332/FFFFFFFFFFFF1FA8 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1333/FFFFFFFFFFFF1FAC : 4DF9 00A1 200E      		lea	(sysmcd_reg+mcd_comm_m).l,a6
(1) 1334/FFFFFFFFFFFF1FB2 :                     .wait_first:
(1) 1335/FFFFFFFFFFFF1FB2 : 61D8                		bsr	System_MdMcd_SubWait
(1) 1336/FFFFFFFFFFFF1FB4 : 1E16                		move.b	(a6),d7
(1) 1337/FFFFFFFFFFFF1FB6 : 0247 00C0           		andi.w	#%11000000,d7
(1) 1338/FFFFFFFFFFFF1FBA : 0C47 00C0           		cmpi.w	#%11000000,d7
(1) 1339/FFFFFFFFFFFF1FBE : 67F2                		beq.s	.wait_first
(1) 1340/FFFFFFFFFFFF1FC0 : 7C08                		moveq	#9-1,d6		; Retry times
(1) 1341/FFFFFFFFFFFF1FC2 : 1C80                		move.b	d0,(a6)		; Set this command
(1) 1342/FFFFFFFFFFFF1FC4 :                     .make_sure:
(1) 1343/FFFFFFFFFFFF1FC4 : 1E16                		move.b	(a6),d7
(1) 1344/FFFFFFFFFFFF1FC6 : BE00                		cmp.b	d0,d7
(1) 1345/FFFFFFFFFFFF1FC8 : 66E8                		bne.s	.wait_first
(1) 1346/FFFFFFFFFFFF1FCA : 51CE FFF8           		dbf	d6,.make_sure
(1) 1347/FFFFFFFFFFFF1FCE : 1E2E 0001           .wait_sub_i:	move.b	1(a6),d7	; Wait until SUB gets busy
(1) 1348/FFFFFFFFFFFF1FD2 : 6AFA                		bpl.s	.wait_sub_i
(1) 1349/FFFFFFFFFFFF1FD4 : 0247 00C0           		andi.w	#%11000000,d7
(1) 1350/FFFFFFFFFFFF1FD8 : BE7C 00C0           		cmp.w	#%11000000,d7
(1) 1351/FFFFFFFFFFFF1FDC : 67D4                		beq.s	.wait_first
(1) 1352/FFFFFFFFFFFF1FDE : 1CBC 0000           		move.b	#$00,(a6)
(1) 1353/FFFFFFFFFFFF1FE2 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1355/FFFFFFFFFFFF1FE6 : 4E75                		rts
(1) 1356/FFFFFFFFFFFF1FE8 :                     
(1) 1357/FFFFFFFFFFFF1FE8 :                     ; --------------------------------------------------------
(1) 1358/FFFFFFFFFFFF1FE8 :                     ; System_MdMcd_WaitWRAM
(1) 1359/FFFFFFFFFFFF1FE8 :                     ;
(1) 1360/FFFFFFFFFFFF1FE8 :                     ; Wait for Word-RAM permission.
(1) 1361/FFFFFFFFFFFF1FE8 :                     ; --------------------------------------------------------
(1) 1362/FFFFFFFFFFFF1FE8 :                     
(1) 1363/FFFFFFFFFFFF1FE8 :                     System_MdMcd_WaitWRAM:
(1) 1364/FFFFFFFFFFFF1FE8 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1FEE : 2003             
(1) 1365/FFFFFFFFFFFF1FF0 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1366/FFFFFFFFFFFF1FF2 : 4E75                		rts
(1) 1367/FFFFFFFFFFFF1FF4 :                     
(1) 1368/FFFFFFFFFFFF1FF4 :                     ; --------------------------------------------------------
(1) 1369/FFFFFFFFFFFF1FF4 :                     ; System_MdMcd_CheckWRAM
(1) 1370/FFFFFFFFFFFF1FF4 :                     ;
(1) 1371/FFFFFFFFFFFF1FF4 :                     ; Checks if Word-RAM is set to MAIN in return, 2M
(1) 1372/FFFFFFFFFFFF1FF4 :                     ;
(1) 1373/FFFFFFFFFFFF1FF4 :                     ; Returns:
(1) 1374/FFFFFFFFFFFF1FF4 :                     ; beq | Word-RAM is available
(1) 1375/FFFFFFFFFFFF1FF4 :                     ; bne | Word-RAM is locked
(1) 1376/FFFFFFFFFFFF1FF4 :                     ; --------------------------------------------------------
(1) 1377/FFFFFFFFFFFF1FF4 :                     
(1) 1378/FFFFFFFFFFFF1FF4 :                     System_MdMcd_CheckWRAM:
(1) 1379/FFFFFFFFFFFF1FF4 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1FFA : 2003             
(1) 1380/FFFFFFFFFFFF1FFC : 6706                		beq.s	.no_ret
(1) 1381/FFFFFFFFFFFF1FFE : 003C 0004           		or	#%00100,ccr	; beq
(1) 1382/FFFFFFFFFFFF2002 : 4E75                		rts
(1) 1383/FFFFFFFFFFFF2004 :                     .no_ret:
(1) 1384/FFFFFFFFFFFF2004 : 023C 001B           		and	#%11011,ccr	; bne
(1) 1385/FFFFFFFFFFFF2008 : 4E75                		rts
(1) 1386/FFFFFFFFFFFF200A :                     
(1) 1387/FFFFFFFFFFFF200A :                     ; --------------------------------------------------------
(1) 1388/FFFFFFFFFFFF200A :                     ; System_MdMcd_GiveWRAM
(1) 1389/FFFFFFFFFFFF200A :                     ;
(1) 1390/FFFFFFFFFFFF200A :                     ; Give Word-RAM to SubCPU (DMNA), 2M
(1) 1391/FFFFFFFFFFFF200A :                     ; --------------------------------------------------------
(1) 1392/FFFFFFFFFFFF200A :                     
(1) 1393/FFFFFFFFFFFF200A :                     System_MdMcd_GiveWRAM:
(1) 1394/FFFFFFFFFFFF200A : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF2010 : 2003             
(1) 1395/FFFFFFFFFFFF2012 : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1396/FFFFFFFFFFFF2014 : 4E75                		rts
(1) 1397/FFFFFFFFFFFF2016 :                     
(1) 1398/FFFFFFFFFFFF2016 :                     ; --------------------------------------------------------
(1) 1399/FFFFFFFFFFFF2016 :                     ; System_MdMcd_RdFile_RAM
(1) 1400/FFFFFFFFFFFF2016 :                     ;
(1) 1401/FFFFFFFFFFFF2016 :                     ; Read file from disc and transfers output the
(1) 1402/FFFFFFFFFFFF2016 :                     ; data to a1, uses communication ports.
(1) 1403/FFFFFFFFFFFF2016 :                     ;
(1) 1404/FFFFFFFFFFFF2016 :                     ; Input:
(1) 1405/FFFFFFFFFFFF2016 :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1406/FFFFFFFFFFFF2016 :                     ; a1   | Output location in RAM
(1) 1407/FFFFFFFFFFFF2016 :                     ; d0.w | Size, $10-aligned sizes only
(1) 1408/FFFFFFFFFFFF2016 :                     ;
(1) 1409/FFFFFFFFFFFF2016 :                     ; Uses:
(1) 1410/FFFFFFFFFFFF2016 :                     ; d7,a0-a1,a5-a6
(1) 1411/FFFFFFFFFFFF2016 :                     ;
(1) 1412/FFFFFFFFFFFF2016 :                     ; Notes:
(1) 1413/FFFFFFFFFFFF2016 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1414/FFFFFFFFFFFF2016 :                     ; --------------------------------------------------------
(1) 1415/FFFFFFFFFFFF2016 :                     
(1) 1416/FFFFFFFFFFFF2016 :                     System_MdMcd_RdFile_RAM:
(1) 1418/FFFFFFFFFFFF2016 : 48E7 C1C6           		movem.l	d0-d1/d7/a0-a1/a5-a6,-(sp)
(1) 1419/FFFFFFFFFFFF201A : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1) 1420/FFFFFFFFFFFF2020 : 3AD8                		move.w	(a0)+,(a5)+			; 0 copy filename
(1) 1421/FFFFFFFFFFFF2022 : 3AD8                		move.w	(a0)+,(a5)+			; 2
(1) 1422/FFFFFFFFFFFF2024 : 3AD8                		move.w	(a0)+,(a5)+			; 4
(1) 1423/FFFFFFFFFFFF2026 : 3AD8                		move.w	(a0)+,(a5)+			; 6
(1) 1424/FFFFFFFFFFFF2028 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1425/FFFFFFFFFFFF202A : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1426/FFFFFFFFFFFF202C : 3AFC 0000           		move.w	#0,(a5)+			; A <-- zero end
(1) 1427/FFFFFFFFFFFF2030 : 3200                		move.w	d0,d1
(1) 1428/FFFFFFFFFFFF2032 : 7001                		moveq	#$01,d0				; COMMAND: READ CD AND PASS DATA
(1) 1429/FFFFFFFFFFFF2034 : 6100 FF72           		bsr	System_MdMcd_SubTask
(1) 1430/FFFFFFFFFFFF2038 : 3001                		move.w	d1,d0
(1) 1431/FFFFFFFFFFFF203A :                     	; a0 - Output location
(1) 1432/FFFFFFFFFFFF203A :                     	; d0 - Number of $10-byte packets
(1) 1433/FFFFFFFFFFFF203A : E848                		lsr.w	#4,d0				; size >> 4
(1) 1434/FFFFFFFFFFFF203C : 5340                		subq.w	#1,d0				; -1
(1) 1435/FFFFFFFFFFFF203E : 4DF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s),a6
(1) 1436/FFFFFFFFFFFF2044 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; LOCK HERE
(1) 1437/FFFFFFFFFFFF204A : 08C7 0007           		bset	#7,d7
(1) 1438/FFFFFFFFFFFF204E : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1439/FFFFFFFFFFFF2054 : 1E39 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait if sub PASSed the packet
(1) 1440/FFFFFFFFFFFF205A : 0807 0004           		btst	#4,d7
(1) 1441/FFFFFFFFFFFF205E : 67F4                		beq.s	.copy_ram
(1) 1442/FFFFFFFFFFFF2060 : 2A4E                		move.l	a6,a5
(1) 1443/FFFFFFFFFFFF2062 : 32DD                		move.w	(a5)+,(a1)+
(1) 1444/FFFFFFFFFFFF2064 : 32DD                		move.w	(a5)+,(a1)+
(1) 1445/FFFFFFFFFFFF2066 : 32DD                		move.w	(a5)+,(a1)+
(1) 1446/FFFFFFFFFFFF2068 : 32DD                		move.w	(a5)+,(a1)+
(1) 1447/FFFFFFFFFFFF206A : 32DD                		move.w	(a5)+,(a1)+
(1) 1448/FFFFFFFFFFFF206C : 32DD                		move.w	(a5)+,(a1)+
(1) 1449/FFFFFFFFFFFF206E : 32DD                		move.w	(a5)+,(a1)+
(1) 1450/FFFFFFFFFFFF2070 : 32DD                		move.w	(a5)+,(a1)+
(1) 1451/FFFFFFFFFFFF2072 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; Tell SUB we got the pack
(1) 1452/FFFFFFFFFFFF2078 : 08C7 0006           		bset	#6,d7
(1) 1453/FFFFFFFFFFFF207C : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1454/FFFFFFFFFFFF2082 : 1E39 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait clear
(1) 1455/FFFFFFFFFFFF2088 : 0807 0004           		btst	#4,d7
(1) 1456/FFFFFFFFFFFF208C : 66F4                		bne.s	.wait_sub
(1) 1457/FFFFFFFFFFFF208E : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; and clear our bit too.
(1) 1458/FFFFFFFFFFFF2094 : 0887 0006           		bclr	#6,d7
(1) 1459/FFFFFFFFFFFF2098 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1460/FFFFFFFFFFFF209E : 51C8 FFB4           		dbf	d0,.copy_ram
(1) 1461/FFFFFFFFFFFF20A2 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; UNLOCK
(1) 1462/FFFFFFFFFFFF20A8 : 0887 0007           		bclr	#7,d7
(1) 1463/FFFFFFFFFFFF20AC : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1464/FFFFFFFFFFFF20B2 : 4CDF 6383           		movem.l	(sp)+,d0-d1/d7/a0-a1/a5-a6
(1) 1466/FFFFFFFFFFFF20B6 : 4E75                		rts
(1) 1467/FFFFFFFFFFFF20B8 :                     
(1) 1468/FFFFFFFFFFFF20B8 :                     ; --------------------------------------------------------
(1) 1469/FFFFFFFFFFFF20B8 :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1470/FFFFFFFFFFFF20B8 :                     ;
(1) 1471/FFFFFFFFFFFF20B8 :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1472/FFFFFFFFFFFF20B8 :                     ; waits on finish.
(1) 1473/FFFFFFFFFFFF20B8 :                     ;
(1) 1474/FFFFFFFFFFFF20B8 :                     ; Input:
(1) 1475/FFFFFFFFFFFF20B8 :                     ; a0   | Filename string "FILENAME.BIN"
(1) 1476/FFFFFFFFFFFF20B8 :                     ; a1   | Output location
(1) 1477/FFFFFFFFFFFF20B8 :                     ;
(1) 1478/FFFFFFFFFFFF20B8 :                     ; Notes:
(1) 1479/FFFFFFFFFFFF20B8 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1480/FFFFFFFFFFFF20B8 :                     ; --------------------------------------------------------
(1) 1481/FFFFFFFFFFFF20B8 :                     
(1) 1482/FFFFFFFFFFFF20B8 :                     System_MdMcd_RdFile_WRAM:
(1) 1484/FFFFFFFFFFFF20B8 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1485/FFFFFFFFFFFF20BC : 6100 FECE           		bsr	System_MdMcd_SubWait
(1) 1486/FFFFFFFFFFFF20C0 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a5
(1) 1487/FFFFFFFFFFFF20C6 : 3AD8                		move.w	(a0)+,(a5)+				; $00 copy filename
(1) 1488/FFFFFFFFFFFF20C8 : 3AD8                		move.w	(a0)+,(a5)+				; $02
(1) 1489/FFFFFFFFFFFF20CA : 3AD8                		move.w	(a0)+,(a5)+				; $04
(1) 1490/FFFFFFFFFFFF20CC : 3AD8                		move.w	(a0)+,(a5)+				; $06
(1) 1491/FFFFFFFFFFFF20CE : 3AD8                		move.w	(a0)+,(a5)+				; $08
(1) 1492/FFFFFFFFFFFF20D0 : 3AD8                		move.w	(a0)+,(a5)+				; $0A
(1) 1493/FFFFFFFFFFFF20D2 : 1AFC 0000           		move.b	#0,(a5)+				; $0C: always 0
(1) 1494/FFFFFFFFFFFF20D6 : 1AFC 0000           		move.b	#0,(a5)+				; $0D
(1) 1495/FFFFFFFFFFFF20DA : 1AFC 0000           		move.b	#0,(a5)+				; $0E
(1) 1496/FFFFFFFFFFFF20DE : 1AFC 0000           		move.b	#0,(a5)+				; $0F
(1) 1497/FFFFFFFFFFFF20E2 : 6100 FF26           		bsr	System_MdMcd_GiveWRAM
(1) 1498/FFFFFFFFFFFF20E6 : 3F00                		move.w	d0,-(sp)
(1) 1499/FFFFFFFFFFFF20E8 : 303C 0002           		move.w	#$02,d0					; COMMAND $02
(1) 1500/FFFFFFFFFFFF20EC : 6100 FEBA           		bsr	System_MdMcd_SubTask
(1) 1501/FFFFFFFFFFFF20F0 : 301F                		move.w	(sp)+,d0
(1) 1502/FFFFFFFFFFFF20F2 : 6100 FE98           		bsr	System_MdMcd_SubWait
(1) 1503/FFFFFFFFFFFF20F6 : 6100 FEF0           		bsr	System_MdMcd_WaitWRAM
(1) 1504/FFFFFFFFFFFF20FA : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1506/FFFFFFFFFFFF20FE : 4E75                		rts
(1) 1507/FFFFFFFFFFFF2100 :                     
(1) 1508/FFFFFFFFFFFF2100 :                     ; --------------------------------------------------------
(1) 1509/FFFFFFFFFFFF2100 :                     ; System_MdMcd_CheckHome
(1) 1510/FFFFFFFFFFFF2100 :                     ;
(1) 1511/FFFFFFFFFFFF2100 :                     ; Checks if the player is holding A, B, C and
(1) 1512/FFFFFFFFFFFF2100 :                     ; then presses the START button.
(1) 1513/FFFFFFFFFFFF2100 :                     ;
(1) 1514/FFFFFFFFFFFF2100 :                     ; Returns:
(1) 1515/FFFFFFFFFFFF2100 :                     ; bcc | Combo input not pressed
(1) 1516/FFFFFFFFFFFF2100 :                     ; bcs | User did the combo presses
(1) 1517/FFFFFFFFFFFF2100 :                     ;
(1) 1518/FFFFFFFFFFFF2100 :                     ; Notes:
(1) 1519/FFFFFFFFFFFF2100 :                     ; If you call this from your Title Screen:
(1) 1520/FFFFFFFFFFFF2100 :                     ; carry MUST JUMP to System_MdMcd_ExitShell,
(1) 1521/FFFFFFFFFFFF2100 :                     ; for other screen modes carry jumps to your
(1) 1522/FFFFFFFFFFFF2100 :                     ; Title Screen.
(1) 1523/FFFFFFFFFFFF2100 :                     ; --------------------------------------------------------
(1) 1524/FFFFFFFFFFFF2100 :                     
(1) 1525/FFFFFFFFFFFF2100 :                     System_MdMcd_CheckHome:
(1) 1526/FFFFFFFFFFFF2100 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1527/FFFFFFFFFFFF2104 : 3E38 EE1C           		move.w	(Controller_1+pad_press).w,d7
(1) 1528/FFFFFFFFFFFF2108 : 3C38 EE1A           		move.w	(Controller_1+pad_hold).w,d6
(1) 1529/FFFFFFFFFFFF210C : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1530/FFFFFFFFFFFF2110 : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1531/FFFFFFFFFFFF2114 : 6610                		bne.s	.not_press
(1) 1532/FFFFFFFFFFFF2116 : 0247 0080           		andi.w	#JoyStart,d7
(1) 1533/FFFFFFFFFFFF211A : 670A                		beq.s	.not_press
(1) 1534/FFFFFFFFFFFF211C : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1535/FFFFFFFFFFFF2120 : 003C 0001           		or	#1,ccr
(1) 1536/FFFFFFFFFFFF2124 : 4E75                		rts
(1) 1537/FFFFFFFFFFFF2126 :                     .not_press:
(1) 1538/FFFFFFFFFFFF2126 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1539/FFFFFFFFFFFF212A : 023C 001E           		and	#%11110,ccr
(1) 1540/FFFFFFFFFFFF212E : 4E75                		rts
(1) 1541/FFFFFFFFFFFF2130 :                     
(1) 1542/FFFFFFFFFFFF2130 :                     ; --------------------------------------------------------
(1) 1543/FFFFFFFFFFFF2130 :                     ; System_MdMcd_ExitShell
(1) 1544/FFFFFFFFFFFF2130 :                     ;
(1) 1545/FFFFFFFFFFFF2130 :                     ; Exits the entire program and goes to
(1) 1546/FFFFFFFFFFFF2130 :                     ; the BIOS/Shell.
(1) 1547/FFFFFFFFFFFF2130 :                     ;
(1) 1548/FFFFFFFFFFFF2130 :                     ; *** JUMP ONLY
(1) 1549/FFFFFFFFFFFF2130 :                     ; --------------------------------------------------------
(1) 1550/FFFFFFFFFFFF2130 :                     
(1) 1551/FFFFFFFFFFFF2130 :                     ; jmp $0280: Hot restart, stops PSG and clears VDP
(1) 1552/FFFFFFFFFFFF2130 :                     ; jmp $0284: Entry point
(1) 1553/FFFFFFFFFFFF2130 :                     ; jmp $0288: CD player, keeps SP (unsafe)
(1) 1554/FFFFFFFFFFFF2130 :                     ; jmp $028C: CD player, resets SP (official method)
(1) 1555/FFFFFFFFFFFF2130 :                     
(1) 1556/FFFFFFFFFFFF2130 :                     System_MdMcd_ExitShell:
(1) 1558/FFFFFFFFFFFF2130 : 6100 F63A           		bsr	Video_MdMcd_StampDisable
(1) 1559/FFFFFFFFFFFF2134 : 6138                		bsr	System_MdMcd_CddaStop
(1) 1563/FFFFFFFFFFFF2136 : 6100 E598           		bsr	Video_DisplayOff
(1) 1564/FFFFFFFFFFFF213A : 4EF8 028C           		jmp	$028C		; Exit jump
(1) 1568/FFFFFFFFFFFF213E :                     
(1) 1569/FFFFFFFFFFFF213E :                     ; ------------------------------------------------------------
(1) 1570/FFFFFFFFFFFF213E :                     ; CDDA PLAYBACK
(1) 1571/FFFFFFFFFFFF213E :                     ; ------------------------------------------------------------
(1) 1572/FFFFFFFFFFFF213E :                     
(1) 1573/FFFFFFFFFFFF213E :                     ; --------------------------------------------------------
(1) 1574/FFFFFFFFFFFF213E :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1575/FFFFFFFFFFFF213E :                     ;
(1) 1576/FFFFFFFFFFFF213E :                     ; Play CDDA track, normal or looped.
(1) 1577/FFFFFFFFFFFF213E :                     ;
(1) 1578/FFFFFFFFFFFF213E :                     ; Input:
(1) 1579/FFFFFFFFFFFF213E :                     ; d0.w | CD track number
(1) 1580/FFFFFFFFFFFF213E :                     ;
(1) 1581/FFFFFFFFFFFF213E :                     ; This calls Sub-Task $10 for normal playback
(1) 1582/FFFFFFFFFFFF213E :                     ; and $11 for looped
(1) 1583/FFFFFFFFFFFF213E :                     ;
(1) 1584/FFFFFFFFFFFF213E :                     ; Notes:
(1) 1585/FFFFFFFFFFFF213E :                     ; Tracks $00, $01 and any negative values are ignored.
(1) 1586/FFFFFFFFFFFF213E :                     ; --------------------------------------------------------
(1) 1587/FFFFFFFFFFFF213E :                     
(1) 1588/FFFFFFFFFFFF213E :                     System_MdMcd_CddaPlay:
(1) 1589/FFFFFFFFFFFF213E : 48E7 8902           		movem.l	d0/d4/d7/a6,-(sp)
(1) 1590/FFFFFFFFFFFF2142 : 383C 0010           		move.w	#$0010,d4
(1) 1591/FFFFFFFFFFFF2146 : 6008                		bra	sysMdMcd_SetCdda
(1) 1592/FFFFFFFFFFFF2148 :                     System_MdMcd_CddaPlayL:
(1) 1593/FFFFFFFFFFFF2148 : 48E7 8902           		movem.l	d0/d4/d7/a6,-(sp)
(1) 1594/FFFFFFFFFFFF214C : 383C 0011           		move.w	#$0011,d4
(1) 1595/FFFFFFFFFFFF2150 :                     sysMdMcd_SetCdda:
(1) 1597/FFFFFFFFFFFF2150 : 4A40                		tst.w	d0
(1) 1598/FFFFFFFFFFFF2152 : 6714                		beq.s	.fail_safe
(1) 1599/FFFFFFFFFFFF2154 : 6B12                		bmi.s	.fail_safe
(1) 1600/FFFFFFFFFFFF2156 : B07C 0001           		cmp.w	#$0001,d0
(1) 1601/FFFFFFFFFFFF215A : 670C                		beq.s	.fail_safe
(1) 1602/FFFFFFFFFFFF215C : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1603/FFFFFFFFFFFF2162 : 3004                		move.w	d4,d0
(1) 1604/FFFFFFFFFFFF2164 : 6100 FE42           		bsr	System_MdMcd_SubTask
(1) 1605/FFFFFFFFFFFF2168 :                     .fail_safe:
(1) 1607/FFFFFFFFFFFF2168 : 4CDF 4091           		movem.l	(sp)+,d0/d4/d7/a6
(1) 1608/FFFFFFFFFFFF216C : 4E75                		rts
(1) 1609/FFFFFFFFFFFF216E :                     
(1) 1610/FFFFFFFFFFFF216E :                     ; --------------------------------------------------------
(1) 1611/FFFFFFFFFFFF216E :                     ; System_MdMcd_CdStop
(1) 1612/FFFFFFFFFFFF216E :                     ;
(1) 1613/FFFFFFFFFFFF216E :                     ; Stop CDDA track
(1) 1614/FFFFFFFFFFFF216E :                     ; --------------------------------------------------------
(1) 1615/FFFFFFFFFFFF216E :                     
(1) 1616/FFFFFFFFFFFF216E :                     System_MdMcd_CddaStop:
(1) 1618/FFFFFFFFFFFF216E : 2F00                		move.l	d0,-(sp)
(1) 1619/FFFFFFFFFFFF2170 : 303C 0014           		move.w	#$0014,d0
(1) 1620/FFFFFFFFFFFF2174 : 6100 FE32           		bsr	System_MdMcd_SubTask
(1) 1621/FFFFFFFFFFFF2178 : 201F                		move.l	(sp)+,d0
(1) 1623/FFFFFFFFFFFF217A : 4E75                		rts
(1) 1624/FFFFFFFFFFFF217C :                     
(1) 1625/FFFFFFFFFFFF217C :                     ; --------------------------------------------------------
(1) 1626/FFFFFFFFFFFF217C :                     ; System_MdMcd_CdFade
(1) 1627/FFFFFFFFFFFF217C :                     ;
(1) 1628/FFFFFFFFFFFF217C :                     ; Fade the CDDA Volume
(1) 1629/FFFFFFFFFFFF217C :                     ;
(1) 1630/FFFFFFFFFFFF217C :                     ; Input:
(1) 1631/FFFFFFFFFFFF217C :                     ; d0.w | Target volume:
(1) 1632/FFFFFFFFFFFF217C :                     ;        $000-$400 - Min to Max
(1) 1633/FFFFFFFFFFFF217C :                     ; d1.w | Fading speed:
(1) 1634/FFFFFFFFFFFF217C :                     ;        $001-$200 - Slow to Fast
(1) 1635/FFFFFFFFFFFF217C :                     ;             $400 - Set quick
(1) 1636/FFFFFFFFFFFF217C :                     ;
(1) 1637/FFFFFFFFFFFF217C :                     ; This calls Sub-Task $16
(1) 1638/FFFFFFFFFFFF217C :                     ; --------------------------------------------------------
(1) 1639/FFFFFFFFFFFF217C :                     
(1) 1640/FFFFFFFFFFFF217C :                     System_MdMcd_CddaFade:
(1) 1642/FFFFFFFFFFFF217C : 48E7 C102           		movem.l	d0-d1/d7/a6,-(sp)
(1) 1643/FFFFFFFFFFFF2180 : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1644/FFFFFFFFFFFF2186 : 33C1 00A1 2012      		move.w	d1,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1645/FFFFFFFFFFFF218C : 303C 0016           		move.w	#$0016,d0
(1) 1646/FFFFFFFFFFFF2190 : 6100 FE16           		bsr	System_MdMcd_SubTask
(1) 1647/FFFFFFFFFFFF2194 : 4CDF 4083           		movem.l	(sp)+,d0-d1/d7/a6
(1) 1649/FFFFFFFFFFFF2198 : 4E75                		rts
(1) 1650/FFFFFFFFFFFF219A :                     
(1) 1651/FFFFFFFFFFFF219A :                     ; --------------------------------------------------------
(1) 1652/FFFFFFFFFFFF219A :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1653/FFFFFFFFFFFF219A :                     ; --------------------------------------------------------
(1) 1654/FFFFFFFFFFFF219A :                     
(1) 1655/FFFFFFFFFFFF219A :                     def_SaveInfo:
(1) 1659/FFFFFFFFFFFF219A : 4E49 4B4F 4E41      		dc.b HTAG_CDSAVE,0
         FFFFFFFFFFFF21A0 : 4344 5F5F 5F00    
(1) 1661/FFFFFFFFFFFF21A6 : 0008                		dc.w (SET_SRAMSIZE/$40)
(1) 1662/FFFFFFFFFFFF21A8 : 0000                		dc.w 0
(1) 1663/FFFFFFFFFFFF21AA :                     		align 2
(1) 1664/FFFFFFFFFFFF21AC :                     
(1) 1665/FFFFFFFFFFFF21AC :                     ; ====================================================================
(1) 1666/FFFFFFFFFFFF21AC :                     ; ----------------------------------------------------------------
(1) 1667/FFFFFFFFFFFF21AC :                     ; 32X and CD32X ONLY
(1) 1668/FFFFFFFFFFFF21AC :                     ; ----------------------------------------------------------------
(1) 1669/FFFFFFFFFFFF21AC :                     
(1) 1670/FFFFFFFFFFFF21AC :                     ; --------------------------------------------------------
(1) 1671/FFFFFFFFFFFF21AC :                     ; System_MdMars_SendData
(1) 1672/FFFFFFFFFFFF21AC :                     ;
(1) 1673/FFFFFFFFFFFF21AC :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1674/FFFFFFFFFFFF21AC :                     ; using DREQ
(1) 1675/FFFFFFFFFFFF21AC :                     ;
(1) 1676/FFFFFFFFFFFF21AC :                     ; Input:
(1) 1677/FFFFFFFFFFFF21AC :                     ; a0   | Source data
(1) 1678/FFFFFFFFFFFF21AC :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1679/FFFFFFFFFFFF21AC :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1680/FFFFFFFFFFFF21AC :                     ;
(1) 1681/FFFFFFFFFFFF21AC :                     ; Returns:
(1) 1682/FFFFFFFFFFFF21AC :                     ; a1   | New output SDRAM location
(1) 1683/FFFFFFFFFFFF21AC :                     ;
(1) 1684/FFFFFFFFFFFF21AC :                     ; Uses:
(1) 1685/FFFFFFFFFFFF21AC :                     ; d0/a4-a5,d5-d7
(1) 1686/FFFFFFFFFFFF21AC :                     ;
(1) 1687/FFFFFFFFFFFF21AC :                     ; Notes:
(1) 1688/FFFFFFFFFFFF21AC :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1689/FFFFFFFFFFFF21AC :                     ; - MOST 32X EMULATORS WILL GET STUCK HERE
(1) 1690/FFFFFFFFFFFF21AC :                     ; --------------------------------------------------------
(1) 1691/FFFFFFFFFFFF21AC :                     
(1) 1692/FFFFFFFFFFFF21AC :                     System_MdMars_SendData:
(1) 1729/FFFFFFFFFFFF21AC :                     
(1) 1730/FFFFFFFFFFFF21AC :                     ; --------------------------------------------------------
(1) 1731/FFFFFFFFFFFF21AC :                     ; System_MdMars_Update
(1) 1732/FFFFFFFFFFFF21AC :                     ;
(1) 1733/FFFFFFFFFFFF21AC :                     ; Send a section of MD RAM to 32X's SDRAM
(1) 1734/FFFFFFFFFFFF21AC :                     ;
(1) 1735/FFFFFFFFFFFF21AC :                     ; Notes:
(1) 1736/FFFFFFFFFFFF21AC :                     ; Call this during DISPLAY ONLY
(1) 1737/FFFFFFFFFFFF21AC :                     ; --------------------------------------------------------
(1) 1738/FFFFFFFFFFFF21AC :                     
(1) 1739/FFFFFFFFFFFF21AC :                     System_MdMars_Update:
(1) 1793/FFFFFFFFFFFF21AC :                     
(1) 1794/FFFFFFFFFFFF21AC :                     ; ====================================================================
(1) 1795/FFFFFFFFFFFF21AC :                     ; ----------------------------------------------------------------
(1) 1796/FFFFFFFFFFFF21AC :                     ; SHARED for all
(1) 1797/FFFFFFFFFFFF21AC :                     ; ----------------------------------------------------------------
(1) 1798/FFFFFFFFFFFF21AC :                     
(1) 1799/FFFFFFFFFFFF21AC :                     ; --------------------------------------------------------
(1) 1800/FFFFFFFFFFFF21AC :                     ; System_SetDataBank
(1) 1801/FFFFFFFFFFFF21AC :                     ;
(1) 1802/FFFFFFFFFFFF21AC :                     ; Sets the current DATA bank depending of the system
(1) 1803/FFFFFFFFFFFF21AC :                     ;
(1) 1804/FFFFFFFFFFFF21AC :                     ; Input:
(1) 1805/FFFFFFFFFFFF21AC :                     ; d0 | Data location
(1) 1806/FFFFFFFFFFFF21AC :                     ;      SCD/CD32X: Data label for searching
(1) 1807/FFFFFFFFFFFF21AC :                     ;      the ISO filename in incl_list.asm
(1) 1808/FFFFFFFFFFFF21AC :                     ;
(1) 1809/FFFFFFFFFFFF21AC :                     ; Returns:
(1) 1810/FFFFFFFFFFFF21AC :                     ; bcc | Loaded bank without problem
(1) 1811/FFFFFFFFFFFF21AC :                     ; bcs | Bank not found on DISC (CD/CD32 ONLY)
(1) 1812/FFFFFFFFFFFF21AC :                     ;
(1) 1813/FFFFFFFFFFFF21AC :                     ; Uses:
(1) 1814/FFFFFFFFFFFF21AC :                     ; a4-a5,d5-d7
(1) 1815/FFFFFFFFFFFF21AC :                     ;
(1) 1816/FFFFFFFFFFFF21AC :                     ; Notes:
(1) 1817/FFFFFFFFFFFF21AC :                     ; - This code is shared to all systems, on CD/CD32X
(1) 1818/FFFFFFFFFFFF21AC :                     ;   this will load from DISC so transfer will be
(1) 1819/FFFFFFFFFFFF21AC :                     ;   slow.
(1) 1820/FFFFFFFFFFFF21AC :                     ; - CD/CD32X: Requires adding the ISO filename
(1) 1821/FFFFFFFFFFFF21AC :                     ;   in incl_list.asm
(1) 1822/FFFFFFFFFFFF21AC :                     ; - CD/CD32X: DO NOT CALL THIS WHEN STAMPS ARE BEING
(1) 1823/FFFFFFFFFFFF21AC :                     ;   ACTIVE, Load the stamp data with this
(1) 1824/FFFFFFFFFFFF21AC :                     ;   BEFORE enabling them.
(1) 1825/FFFFFFFFFFFF21AC :                     ; --------------------------------------------------------
(1) 1826/FFFFFFFFFFFF21AC :                     
(1) 1827/FFFFFFFFFFFF21AC :                     System_SetDataBank:
(1) 1828/FFFFFFFFFFFF21AC :                     	; CD/CD32X:
(1) 1830/FFFFFFFFFFFF21AC : 48E7 0180           		movem.l	d7/a0,-(sp)
(1) 1831/FFFFFFFFFFFF21B0 : 6100 FDDA           		bsr	System_MdMcd_SubWait
(1) 1832/FFFFFFFFFFFF21B4 : B0B9 FFFF EE60      		cmp.l	(RAM_SysLastBank).l,d0
(1) 1833/FFFFFFFFFFFF21BA : 672E                		beq.s	.same_bank
(1) 1834/FFFFFFFFFFFF21BC : 23C0 FFFF EE60      		move.l	d0,(RAM_SysLastBank).l
(1) 1835/FFFFFFFFFFFF21C2 : 41F9 FFFF 255E      		lea	(disc_banklist).l,a0
(1) 1836/FFFFFFFFFFFF21C8 :                     .srch_cdbank:
(1) 1837/FFFFFFFFFFFF21C8 : 2E10                		move.l	(a0),d7
(1) 1838/FFFFFFFFFFFF21CA : BEBC FFFF FFFF      		cmp.l	#-1,d7
(1) 1839/FFFFFFFFFFFF21D0 : 670A                		beq.s	.ran_out
(1) 1840/FFFFFFFFFFFF21D2 : B087                		cmp.l	d7,d0
(1) 1841/FFFFFFFFFFFF21D4 : 670C                		beq.s	.found_it
(1) 1842/FFFFFFFFFFFF21D6 : D0FC 0010           		adda	#$10,a0
(1) 1843/FFFFFFFFFFFF21DA : 60EC                		bra.s	.srch_cdbank
(1) 1844/FFFFFFFFFFFF21DC :                     .ran_out:
(1) 1845/FFFFFFFFFFFF21DC :                     	; TODO: an on-screen message
(1) 1846/FFFFFFFFFFFF21DC : 003C 0001           		or	#1,ccr
(1) 1847/FFFFFFFFFFFF21E0 : 600C                		bra.s	.from_err
(1) 1848/FFFFFFFFFFFF21E2 :                     .found_it:
(1) 1849/FFFFFFFFFFFF21E2 : D0FC 0004           		adda	#4,a0
(1) 1850/FFFFFFFFFFFF21E6 : 6100 FED0           		bsr	System_MdMcd_RdFile_WRAM
(1) 1851/FFFFFFFFFFFF21EA :                     .same_bank:
(1) 1852/FFFFFFFFFFFF21EA : 023C 001E           		and	#%11110,ccr
(1) 1853/FFFFFFFFFFFF21EE :                     .from_err:
(1) 1854/FFFFFFFFFFFF21EE : 4CDF 0180           		movem.l	(sp)+,d7/a0
(1) 1855/FFFFFFFFFFFF21F2 :                     		; rts
(1) 1856/FFFFFFFFFFFF21F2 :                     
(1) 1857/FFFFFFFFFFFF21F2 :                     	; 32X ONLY
(1) 1873/FFFFFFFFFFFF21F2 :                     
(1) 1874/FFFFFFFFFFFF21F2 : 4E75                		rts			; *** KEEP THIS RTS ***
(1) 1875/FFFFFFFFFFFF21F4 :                     
(1) 1876/FFFFFFFFFFFF21F4 :                     ; ====================================================================
(1) 1877/FFFFFFFFFFFF21F4 :                     ; ----------------------------------------------------------------
(1) 1878/FFFFFFFFFFFF21F4 :                     ; Objects system
(1) 1879/FFFFFFFFFFFF21F4 :                     ; ----------------------------------------------------------------
(1) 1880/FFFFFFFFFFFF21F4 :                     
(1) 1881/FFFFFFFFFFFF21F4 :                     ; --------------------------------------------------------
(1) 1882/FFFFFFFFFFFF21F4 :                     ; Object_Init
(1) 1883/FFFFFFFFFFFF21F4 :                     ;
(1) 1884/FFFFFFFFFFFF21F4 :                     ; Reset Objects system
(1) 1885/FFFFFFFFFFFF21F4 :                     ; --------------------------------------------------------
(1) 1886/FFFFFFFFFFFF21F4 :                     
(1) 1887/FFFFFFFFFFFF21F4 :                     Object_Init:
(1) 1888/FFFFFFFFFFFF21F4 : 21FC 0000 0000      		move.l	#0,(RAM_CurrObjList).w
         FFFFFFFFFFFF21FA : EE64             
(1) 1889/FFFFFFFFFFFF21FC : 31FC 0000 EE80      		move.w	#0,(RAM_CurrObjNum).w
(1) 1890/FFFFFFFFFFFF2202 : 4E75                		rts
(1) 1891/FFFFFFFFFFFF2204 :                     
(1) 1892/FFFFFFFFFFFF2204 :                     ; --------------------------------------------------------
(1) 1893/FFFFFFFFFFFF2204 :                     ; Object_Enable
(1) 1894/FFFFFFFFFFFF2204 :                     ;
(1) 1895/FFFFFFFFFFFF2204 :                     ; Enable Objects on the current screen
(1) 1896/FFFFFFFFFFFF2204 :                     ;
(1) 1897/FFFFFFFFFFFF2204 :                     ; Input:
(1) 1898/FFFFFFFFFFFF2204 :                     ; a0   | Objects buffer
(1) 1899/FFFFFFFFFFFF2204 :                     ; d0.w | Number of Objects to use
(1) 1900/FFFFFFFFFFFF2204 :                     ; --------------------------------------------------------
(1) 1901/FFFFFFFFFFFF2204 :                     
(1) 1902/FFFFFFFFFFFF2204 :                     Object_Enable:
(1) 1903/FFFFFFFFFFFF2204 : 48E7 0102           		movem.l	d7/a6,-(sp)
(1) 1904/FFFFFFFFFFFF2208 : 2C48                		move.l	a0,a6
(1) 1905/FFFFFFFFFFFF220A : 3E00                		move.w	d0,d7
(1) 1906/FFFFFFFFFFFF220C : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1907/FFFFFFFFFFFF2210 : 5347                		subq.w	#1,d7
(1) 1908/FFFFFFFFFFFF2212 :                     .clr_first:
(1) 1909/FFFFFFFFFFFF2212 : 421E                		clr.b	(a6)+
(1) 1910/FFFFFFFFFFFF2214 : 51CF FFFC           		dbf	d7,.clr_first
(1) 1911/FFFFFFFFFFFF2218 : 21C8 EE64           		move.l	a0,(RAM_CurrObjList).w
(1) 1912/FFFFFFFFFFFF221C : 31C0 EE80           		move.w	d0,(RAM_CurrObjNum).w
(1) 1913/FFFFFFFFFFFF2220 : 4CDF 4080           		movem.l	(sp)+,d7/a6
(1) 1914/FFFFFFFFFFFF2224 : 4E75                		rts
(1) 1915/FFFFFFFFFFFF2226 :                     
(1) 1916/FFFFFFFFFFFF2226 :                     ; --------------------------------------------------------
(1) 1917/FFFFFFFFFFFF2226 :                     ; Object_Run
(1) 1918/FFFFFFFFFFFF2226 :                     ;
(1) 1919/FFFFFFFFFFFF2226 :                     ; Process ALL Objects
(1) 1920/FFFFFFFFFFFF2226 :                     ;
(1) 1921/FFFFFFFFFFFF2226 :                     ; Breaks:
(1) 1922/FFFFFFFFFFFF2226 :                     ; ALL
(1) 1923/FFFFFFFFFFFF2226 :                     ;
(1) 1924/FFFFFFFFFFFF2226 :                     ; Notes:
(1) 1925/FFFFFFFFFFFF2226 :                     ; - ONLY CALL THIS ONCE PER FRAME
(1) 1926/FFFFFFFFFFFF2226 :                     ; --------------------------------------------------------
(1) 1927/FFFFFFFFFFFF2226 :                     
(1) 1928/FFFFFFFFFFFF2226 :                     Object_Run:
(1) 1929/FFFFFFFFFFFF2226 : 2E38 EE64           		move.l	(RAM_CurrObjList).w,d7
(1) 1930/FFFFFFFFFFFF222A : 671E                		beq.s	.invld_num
(1) 1931/FFFFFFFFFFFF222C : 2C47                		move.l	d7,a6
(1) 1932/FFFFFFFFFFFF222E : 3E38 EE80           		move.w	(RAM_CurrObjNum).w,d7
(1) 1933/FFFFFFFFFFFF2232 : 6716                		beq.s	.invld_num
(1) 1934/FFFFFFFFFFFF2234 : 6B14                		bmi.s	.invld_num
(1) 1935/FFFFFFFFFFFF2236 :                     .next_one:
(1) 1936/FFFFFFFFFFFF2236 : 2C16                		move.l	obj_code(a6),d6
(1) 1937/FFFFFFFFFFFF2238 : 6708                		beq.s	.no_code
(1) 1938/FFFFFFFFFFFF223A : 2F07                		move.l	d7,-(sp)
(1) 1939/FFFFFFFFFFFF223C : 2A46                		move.l	d6,a5
(1) 1940/FFFFFFFFFFFF223E : 4E95                		jsr	(a5)
(1) 1941/FFFFFFFFFFFF2240 : 2E1F                		move.l	(sp)+,d7
(1) 1942/FFFFFFFFFFFF2242 :                     .no_code:
(1) 1943/FFFFFFFFFFFF2242 : DCFC 0068           		adda	#obj_len,a6
(1) 1944/FFFFFFFFFFFF2246 : 51CF FFEE           		dbf	d7,.next_one
(1) 1945/FFFFFFFFFFFF224A :                     .invld_num:
(1) 1946/FFFFFFFFFFFF224A : 4E75                		rts
(1) 1947/FFFFFFFFFFFF224C :                     
(1) 1948/FFFFFFFFFFFF224C :                     ; --------------------------------------------------------
(1) 1949/FFFFFFFFFFFF224C :                     ; Object_Set, Object_Make
(1) 1950/FFFFFFFFFFFF224C :                     ;
(1) 1951/FFFFFFFFFFFF224C :                     ; Set a new object into a specific slot.
(1) 1952/FFFFFFFFFFFF224C :                     ;
(1) 1953/FFFFFFFFFFFF224C :                     ; Input:
(1) 1954/FFFFFFFFFFFF224C :                     ; d0.l | Object code pointer
(1) 1955/FFFFFFFFFFFF224C :                     ;        If 0: DELETE the object including it's memory
(1) 1956/FFFFFFFFFFFF224C :                     ; d1.b | Object sub-type (obj_subid)
(1) 1957/FFFFFFFFFFFF224C :                     ; d2.w | Object slot
(1) 1958/FFFFFFFFFFFF224C :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1959/FFFFFFFFFFFF224C :                     ;
(1) 1960/FFFFFFFFFFFF224C :                     ; Returns:
(1) 1961/FFFFFFFFFFFF224C :                     ; bcc | Found free slot
(1) 1962/FFFFFFFFFFFF224C :                     ; bcs | Ran-out of object slots
(1) 1963/FFFFFFFFFFFF224C :                     ;
(1) 1964/FFFFFFFFFFFF224C :                     ; Notes:
(1) 1965/FFFFFFFFFFFF224C :                     ; If you are not using obj_subid you can ignore it,
(1) 1966/FFFFFFFFFFFF224C :                     ; but it will contain the remains of d2 when you
(1) 1967/FFFFFFFFFFFF224C :                     ; called this.
(1) 1968/FFFFFFFFFFFF224C :                     ; --------------------------------------------------------
(1) 1969/FFFFFFFFFFFF224C :                     
(1) 1970/FFFFFFFFFFFF224C :                     Object_Set:
(1) 1971/FFFFFFFFFFFF224C : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1972/FFFFFFFFFFFF2250 : 2C78 EE64           		movea.l	(RAM_CurrObjList).w,a6
(1) 1973/FFFFFFFFFFFF2254 : 7E00                		moveq	#0,d7
(1) 1974/FFFFFFFFFFFF2256 : 3E02                		move.w	d2,d7
(1) 1975/FFFFFFFFFFFF2258 : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1976/FFFFFFFFFFFF225C : DCC7                		adda	d7,a6
(1) 1977/FFFFFFFFFFFF225E : 602E                		bra.s	objSet_Go
(1) 1978/FFFFFFFFFFFF2260 :                     Object_Make:
(1) 1979/FFFFFFFFFFFF2260 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1980/FFFFFFFFFFFF2264 : 2C78 EE64           		movea.l	(RAM_CurrObjList).w,a6
(1) 1981/FFFFFFFFFFFF2268 : 3E38 EE80           		move.w	(RAM_CurrObjNum).w,d7
(1) 1982/FFFFFFFFFFFF226C : 5347                		subq.w	#1,d7
(1) 1983/FFFFFFFFFFFF226E : 7C00                		moveq	#0,d6
(1) 1984/FFFFFFFFFFFF2270 :                     .search:
(1) 1985/FFFFFFFFFFFF2270 : BC78 EE80           		cmp.w	(RAM_CurrObjNum).w,d6
(1) 1986/FFFFFFFFFFFF2274 : 6C0E                		bge.s	objSet_Error
(1) 1987/FFFFFFFFFFFF2276 : 4A96                		tst.l	obj_code(a6)
(1) 1988/FFFFFFFFFFFF2278 : 6714                		beq.s	objSet_Go
(1) 1989/FFFFFFFFFFFF227A : DCFC 0068           		adda	#obj_len,a6
(1) 1990/FFFFFFFFFFFF227E : 5246                		addq.w	#1,d6
(1) 1991/FFFFFFFFFFFF2280 : 51CF FFEE           		dbf	d7,.search
(1) 1992/FFFFFFFFFFFF2284 :                     objSet_Error:
(1) 1993/FFFFFFFFFFFF2284 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1994/FFFFFFFFFFFF2288 : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1995/FFFFFFFFFFFF228C : 4E75                		rts
(1) 1996/FFFFFFFFFFFF228E :                     objSet_Go:
(1) 1997/FFFFFFFFFFFF228E : 4A80                		tst.l	d0
(1) 1998/FFFFFFFFFFFF2290 : 670A                		beq.s	.from_del
(1) 1999/FFFFFFFFFFFF2292 : 2E00                		move.l	d0,d7
(1) 2000/FFFFFFFFFFFF2294 : 2C87                		move.l	d7,obj_code(a6)
(1) 2001/FFFFFFFFFFFF2296 : 1D41 001D           		move.b	d1,obj_subid(a6)
(1) 2002/FFFFFFFFFFFF229A : 600C                		bra.s	.exit_this
(1) 2003/FFFFFFFFFFFF229C :                     .from_del:
(1) 2004/FFFFFFFFFFFF229C : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 2005/FFFFFFFFFFFF229E : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 2006/FFFFFFFFFFFF22A2 : 421D                .clr:		clr.b	(a5)+
(1) 2007/FFFFFFFFFFFF22A4 : 51CF FFFC           		dbf	d7,.clr
(1) 2008/FFFFFFFFFFFF22A8 :                     .exit_this:
(1) 2009/FFFFFFFFFFFF22A8 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 2010/FFFFFFFFFFFF22AC : 003C 0001           		or	#1,ccr
(1) 2011/FFFFFFFFFFFF22B0 : 4E75                		rts
(1) 2012/FFFFFFFFFFFF22B2 :                     
(1) 2013/FFFFFFFFFFFF22B2 :                     ; ====================================================================
(1) 2014/FFFFFFFFFFFF22B2 :                     ; --------------------------------------------------------
(1) 2015/FFFFFFFFFFFF22B2 :                     ; Object subroutines
(1) 2016/FFFFFFFFFFFF22B2 :                     ;
(1) 2017/FFFFFFFFFFFF22B2 :                     ; These can ONLY be called on the current object's code
(1) 2018/FFFFFFFFFFFF22B2 :                     ; --------------------------------------------------------
(1) 2019/FFFFFFFFFFFF22B2 :                     
(1) 2020/FFFFFFFFFFFF22B2 :                     ; --------------------------------------------------------
(1) 2021/FFFFFFFFFFFF22B2 :                     ; object_ResetVars
(1) 2022/FFFFFFFFFFFF22B2 :                     ;
(1) 2023/FFFFFFFFFFFF22B2 :                     ; Resets the current object's memory, call this
(1) 2024/FFFFFFFFFFFF22B2 :                     ; at very beginning of your object's init code
(1) 2025/FFFFFFFFFFFF22B2 :                     ;
(1) 2026/FFFFFFFFFFFF22B2 :                     ; Input:
(1) 2027/FFFFFFFFFFFF22B2 :                     ; a6 | This object
(1) 2028/FFFFFFFFFFFF22B2 :                     ; --------------------------------------------------------
(1) 2029/FFFFFFFFFFFF22B2 :                     
(1) 2030/FFFFFFFFFFFF22B2 :                     object_ResetVars:
(1) 2031/FFFFFFFFFFFF22B2 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 2032/FFFFFFFFFFFF22B6 : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 2033/FFFFFFFFFFFF22BA : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 2034/FFFFFFFFFFFF22BE : 7E00                		moveq	#0,d7
(1) 2035/FFFFFFFFFFFF22C0 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 2036/FFFFFFFFFFFF22C2 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 2037/FFFFFFFFFFFF22C6 : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 2038/FFFFFFFFFFFF22CA : 4E75                		rts
(1) 2039/FFFFFFFFFFFF22CC :                     
(1) 2040/FFFFFFFFFFFF22CC :                     ; --------------------------------------------------------
(1) 2041/FFFFFFFFFFFF22CC :                     ; object_ResetAnim
(1) 2042/FFFFFFFFFFFF22CC :                     ;
(1) 2043/FFFFFFFFFFFF22CC :                     ; Reset animation variables
(1) 2044/FFFFFFFFFFFF22CC :                     ; call this BEFORE using object_Animate
(1) 2045/FFFFFFFFFFFF22CC :                     ;
(1) 2046/FFFFFFFFFFFF22CC :                     ; Input:
(1) 2047/FFFFFFFFFFFF22CC :                     ; a6 | This object
(1) 2048/FFFFFFFFFFFF22CC :                     ; --------------------------------------------------------
(1) 2049/FFFFFFFFFFFF22CC :                     
(1) 2050/FFFFFFFFFFFF22CC :                     object_ResetAnim:
(1) 2051/FFFFFFFFFFFF22CC :                     ;  		clr.w	obj_anim_indx(a6)
(1) 2052/FFFFFFFFFFFF22CC :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2053/FFFFFFFFFFFF22CC : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 2054/FFFFFFFFFFFF22D2 : 4E75                		rts
(1) 2055/FFFFFFFFFFFF22D4 :                     
(1) 2056/FFFFFFFFFFFF22D4 :                     ; --------------------------------------------------------
(1) 2057/FFFFFFFFFFFF22D4 :                     ; object_Speed
(1) 2058/FFFFFFFFFFFF22D4 :                     ;
(1) 2059/FFFFFFFFFFFF22D4 :                     ; Moves the object using speed values set on
(1) 2060/FFFFFFFFFFFF22D4 :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y
(1) 2061/FFFFFFFFFFFF22D4 :                     ;
(1) 2062/FFFFFFFFFFFF22D4 :                     ; Input:
(1) 2063/FFFFFFFFFFFF22D4 :                     ; a6 | This object
(1) 2064/FFFFFFFFFFFF22D4 :                     ; --------------------------------------------------------
(1) 2065/FFFFFFFFFFFF22D4 :                     
(1) 2066/FFFFFFFFFFFF22D4 :                     object_Speed:
(1) 2067/FFFFFFFFFFFF22D4 : 2F07                		move.l	d7,-(sp)
(1) 2068/FFFFFFFFFFFF22D6 : 7E00                		moveq	#0,d7
(1) 2069/FFFFFFFFFFFF22D8 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2070/FFFFFFFFFFFF22DC : 48C7                		ext.l	d7
(1) 2071/FFFFFFFFFFFF22DE : E187                		asl.l	#8,d7
(1) 2072/FFFFFFFFFFFF22E0 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2073/FFFFFFFFFFFF22E4 : 7E00                		moveq	#0,d7
(1) 2074/FFFFFFFFFFFF22E6 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2075/FFFFFFFFFFFF22EA : 48C7                		ext.l	d7
(1) 2076/FFFFFFFFFFFF22EC : E187                		asl.l	#8,d7
(1) 2077/FFFFFFFFFFFF22EE : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2078/FFFFFFFFFFFF22F2 : 7E00                		moveq	#0,d7
(1) 2079/FFFFFFFFFFFF22F4 : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 2080/FFFFFFFFFFFF22F8 : 48C7                		ext.l	d7
(1) 2081/FFFFFFFFFFFF22FA : E187                		asl.l	#8,d7
(1) 2082/FFFFFFFFFFFF22FC : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 2083/FFFFFFFFFFFF2300 : 2E1F                		move.l	(sp)+,d7
(1) 2084/FFFFFFFFFFFF2302 : 4E75                		rts
(1) 2085/FFFFFFFFFFFF2304 :                     
(1) 2086/FFFFFFFFFFFF2304 :                     ; --------------------------------------------------------
(1) 2087/FFFFFFFFFFFF2304 :                     ; object_Animate
(1) 2088/FFFFFFFFFFFF2304 :                     ;
(1) 2089/FFFFFFFFFFFF2304 :                     ; Animates the sprite with a animation script,
(1) 2090/FFFFFFFFFFFF2304 :                     ; modifies obj_frame with the frame to use
(1) 2091/FFFFFFFFFFFF2304 :                     ;
(1) 2092/FFFFFFFFFFFF2304 :                     ; Input:
(1) 2093/FFFFFFFFFFFF2304 :                     ; a6 | This object
(1) 2094/FFFFFFFFFFFF2304 :                     ; a0 | Animation data
(1) 2095/FFFFFFFFFFFF2304 :                     ; --------------------------------------------------------
(1) 2096/FFFFFFFFFFFF2304 :                     
(1) 2097/FFFFFFFFFFFF2304 :                     ; anim_data:
(1) 2098/FFFFFFFFFFFF2304 :                     ; 	dc.w .frame_1-anim_data
(1) 2099/FFFFFFFFFFFF2304 :                     ; 	dc.w .frame_2-anim_data
(1) 2100/FFFFFFFFFFFF2304 :                     ; 	;...
(1) 2101/FFFFFFFFFFFF2304 :                     ;
(1) 2102/FFFFFFFFFFFF2304 :                     ; .frame_num:
(1) 2103/FFFFFFFFFFFF2304 :                     ; 	dc.w speed			; Animation speed/delay
(1) 2104/FFFFFFFFFFFF2304 :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2105/FFFFFFFFFFFF2304 :                     ; 	dc.w command			; End-of-data command
(1) 2106/FFFFFFFFFFFF2304 :                     ;
(1) 2107/FFFFFFFFFFFF2304 :                     ; commands:
(1) 2108/FFFFFFFFFFFF2304 :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2109/FFFFFFFFFFFF2304 :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2110/FFFFFFFFFFFF2304 :                     ; dc.w -3,to_indx	; Jump to index
(1) 2111/FFFFFFFFFFFF2304 :                     
(1) 2112/FFFFFFFFFFFF2304 :                     object_Animate:
(1) 2113/FFFFFFFFFFFF2304 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2114/FFFFFFFFFFFF2308 : 7E00                		moveq	#0,d7
(1) 2115/FFFFFFFFFFFF230A : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2116/FFFFFFFFFFFF230E : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2117/FFFFFFFFFFFF2312 : 670E                 		beq.s	.sameThing
(1) 2118/FFFFFFFFFFFF2314 : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2119/FFFFFFFFFFFF231A : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2120/FFFFFFFFFFFF231E : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2121/FFFFFFFFFFFF2322 :                     .sameThing:
(1) 2122/FFFFFFFFFFFF2322 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2123/FFFFFFFFFFFF2326 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2124/FFFFFFFFFFFF232A : 6748                 		beq.s	.return
(1) 2125/FFFFFFFFFFFF232C : DE47                 		add.w	d7,d7
(1) 2126/FFFFFFFFFFFF232E : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2127/FFFFFFFFFFFF2332 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2128/FFFFFFFFFFFF2336 : 3E18                 		move.w	(a0)+,d7
(1) 2129/FFFFFFFFFFFF2338 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2130/FFFFFFFFFFFF233C : 670C                 		beq.s	.keepspd
(1) 2131/FFFFFFFFFFFF233E : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2132/FFFFFFFFFFFF2344 : 6A2E                 		bpl.s	.return
(1) 2133/FFFFFFFFFFFF2346 : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2134/FFFFFFFFFFFF234A :                     .keepspd:
(1) 2135/FFFFFFFFFFFF234A : 7C00                 		moveq	#0,d6
(1) 2136/FFFFFFFFFFFF234C : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2137/FFFFFFFFFFFF2350 : DE47                 		add.w	d7,d7
(1) 2138/FFFFFFFFFFFF2352 : 3C10                 		move.w	(a0),d6
(1) 2139/FFFFFFFFFFFF2354 : D0C7                 		adda	d7,a0
(1) 2140/FFFFFFFFFFFF2356 : 3A10                 		move.w	(a0),d5
(1) 2141/FFFFFFFFFFFF2358 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2142/FFFFFFFFFFFF235C : 6730                 		beq.s	.lastFrame	; finish
(1) 2143/FFFFFFFFFFFF235E : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2144/FFFFFFFFFFFF2362 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2145/FFFFFFFFFFFF2364 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2146/FFFFFFFFFFFF2368 : 671A                 		beq.s	.goToFrame
(1) 2147/FFFFFFFFFFFF236A : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2148/FFFFFFFFFFFF236E : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2149/FFFFFFFFFFFF2374 :                     .return:
(1) 2150/FFFFFFFFFFFF2374 : 601C                 		bra.s	.exit_anim
(1) 2151/FFFFFFFFFFFF2376 :                     .noAnim:
(1) 2152/FFFFFFFFFFFF2376 : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2153/FFFFFFFFFFFF237C : 3A06                 		move.w	d6,d5
(1) 2154/FFFFFFFFFFFF237E : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2155/FFFFFFFFFFFF2382 : 600E                		bra.s	.exit_anim
(1) 2156/FFFFFFFFFFFF2384 :                     .goToFrame:
(1) 2157/FFFFFFFFFFFF2384 : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2158/FFFFFFFFFFFF2388 : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2159/FFFFFFFFFFFF238E :                     .lastFrame:
(1) 2160/FFFFFFFFFFFF238E : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2161/FFFFFFFFFFFF2392 :                     .exit_anim:
(1) 2162/FFFFFFFFFFFF2392 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2163/FFFFFFFFFFFF2396 : 4E75                		rts
(1) 2164/FFFFFFFFFFFF2398 :                     
(1) 2165/FFFFFFFFFFFF2398 :                     ; --------------------------------------------------------
(1) 2166/FFFFFFFFFFFF2398 :                     ; object_Touch
(1) 2167/FFFFFFFFFFFF2398 :                     ;
(1) 2168/FFFFFFFFFFFF2398 :                     ; Detects collision with another Object
(1) 2169/FFFFFFFFFFFF2398 :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2170/FFFFFFFFFFFF2398 :                     ;
(1) 2171/FFFFFFFFFFFF2398 :                     ; Input:
(1) 2172/FFFFFFFFFFFF2398 :                     ; a6   | This object
(1) 2173/FFFFFFFFFFFF2398 :                     ; d0.w | Start from slot
(1) 2174/FFFFFFFFFFFF2398 :                     ;
(1) 2175/FFFFFFFFFFFF2398 :                     ; Returns:
(1) 2176/FFFFFFFFFFFF2398 :                     ; d0.l | If Nothing: 0
(1) 2177/FFFFFFFFFFFF2398 :                     ;        If Found:   The target's RAM location
(1) 2178/FFFFFFFFFFFF2398 :                     ; --------------------------------------------------------
(1) 2179/FFFFFFFFFFFF2398 :                     
(1) 2180/FFFFFFFFFFFF2398 :                     object_Touch:
(1) 2181/FFFFFFFFFFFF2398 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2182/FFFFFFFFFFFF239C : 7000                		moveq	#0,d0
(1) 2183/FFFFFFFFFFFF239E : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2184/FFFFFFFFFFFF23A2 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2185/FFFFFFFFFFFF23A6 : 8C45                		or.w	d5,d6
(1) 2186/FFFFFFFFFFFF23A8 : 672C                		beq	.exit_this
(1) 2187/FFFFFFFFFFFF23AA : 2A78 EE64           		movea.l	(RAM_CurrObjList).w,a5
(1) 2188/FFFFFFFFFFFF23AE : 3C00                		move.w	d0,d6
(1) 2189/FFFFFFFFFFFF23B0 : CCFC 0068           		mulu.w	#obj_len,d6
(1) 2190/FFFFFFFFFFFF23B4 : DAC6                		adda	d6,a5
(1) 2191/FFFFFFFFFFFF23B6 : 3E00                		move.w	d0,d7
(1) 2192/FFFFFFFFFFFF23B8 :                     .next:
(1) 2193/FFFFFFFFFFFF23B8 : BE78 EE80           		cmp.w	(RAM_CurrObjNum).w,d7
(1) 2194/FFFFFFFFFFFF23BC : 6C16                		bge.s	.ran_out
(1) 2195/FFFFFFFFFFFF23BE : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2196/FFFFFFFFFFFF23C0 : 670A                		beq.s	.skip
(1) 2197/FFFFFFFFFFFF23C2 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2198/FFFFFFFFFFFF23C4 : 6706                		beq.s	.skip
(1) 2199/FFFFFFFFFFFF23C6 : 6114                		bsr.s	.check_this
(1) 2200/FFFFFFFFFFFF23C8 : 4A40                		tst.w	d0			; Exit if Found.
(1) 2201/FFFFFFFFFFFF23CA : 660A                		bne.s	.exit_this
(1) 2202/FFFFFFFFFFFF23CC : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2203/FFFFFFFFFFFF23D0 : 51CF FFE6           		dbf	d7,.next
(1) 2204/FFFFFFFFFFFF23D4 :                     .ran_out:
(1) 2205/FFFFFFFFFFFF23D4 : 7000                		moveq	#0,d0
(1) 2206/FFFFFFFFFFFF23D6 :                     .exit_this:
(1) 2207/FFFFFFFFFFFF23D6 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2208/FFFFFFFFFFFF23DA : 4E75                		rts
(1) 2209/FFFFFFFFFFFF23DC :                     
(1) 2210/FFFFFFFFFFFF23DC :                     ; main check
(1) 2211/FFFFFFFFFFFF23DC :                     .check_this:
(1) 2212/FFFFFFFFFFFF23DC : 7000                		moveq	#0,d0			; Reset Return
(1) 2213/FFFFFFFFFFFF23DE :                     	; d6 - Y current top
(1) 2214/FFFFFFFFFFFF23DE :                     	; d5 - Y current bottom
(1) 2215/FFFFFFFFFFFF23DE :                     	; d4 - Y target top
(1) 2216/FFFFFFFFFFFF23DE :                     	; d3 - Y target bottom
(1) 2217/FFFFFFFFFFFF23DE :                     	; Check X
(1) 2218/FFFFFFFFFFFF23DE : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2219/FFFFFFFFFFFF23E2 : 6700 00B4           		beq	.not_ytop
(1) 2220/FFFFFFFFFFFF23E6 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2221/FFFFFFFFFFFF23EA : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2222/FFFFFFFFFFFF23EC : 3401                		move.w	d1,d2
(1) 2223/FFFFFFFFFFFF23EE : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2224/FFFFFFFFFFFF23F0 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2225/FFFFFFFFFFFF23F4 :                     ; 		lsl.w	#3,d1
(1) 2226/FFFFFFFFFFFF23F4 :                     ; 		lsl.w	#3,d2
(1) 2227/FFFFFFFFFFFF23F4 : 5342                		subq.w	#1,d2			; X right adjust
(1) 2228/FFFFFFFFFFFF23F6 : 9C41                		sub.w	d1,d6
(1) 2229/FFFFFFFFFFFF23F8 : DA42                		add.w	d2,d5
(1) 2230/FFFFFFFFFFFF23FA : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2231/FFFFFFFFFFFF23FE : 6700 0098           		beq	.not_ytop
(1) 2232/FFFFFFFFFFFF2402 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2233/FFFFFFFFFFFF2406 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2234/FFFFFFFFFFFF2408 : 3401                		move.w	d1,d2
(1) 2235/FFFFFFFFFFFF240A : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2236/FFFFFFFFFFFF240C : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2237/FFFFFFFFFFFF2410 :                     ; 		lsl.w	#3,d1
(1) 2238/FFFFFFFFFFFF2410 :                     ; 		lsl.w	#3,d2
(1) 2239/FFFFFFFFFFFF2410 : 5342                		subq.w	#1,d2
(1) 2240/FFFFFFFFFFFF2412 : 9841                		sub.w	d1,d4
(1) 2241/FFFFFFFFFFFF2414 : D642                		add.w	d2,d3
(1) 2242/FFFFFFFFFFFF2416 : B646                		cmp.w	d6,d3
(1) 2243/FFFFFFFFFFFF2418 : 6D7E                		blt	.not_ytop
(1) 2244/FFFFFFFFFFFF241A : B845                		cmp.w	d5,d4
(1) 2245/FFFFFFFFFFFF241C : 6C7A                		bge	.not_ytop
(1) 2246/FFFFFFFFFFFF241E :                     
(1) 2247/FFFFFFFFFFFF241E :                     	; Check Y
(1) 2248/FFFFFFFFFFFF241E : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2249/FFFFFFFFFFFF2422 : 6774                		beq	.not_ytop
(1) 2250/FFFFFFFFFFFF2424 : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2251/FFFFFFFFFFFF2428 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2252/FFFFFFFFFFFF242A : 3401                		move.w	d1,d2
(1) 2253/FFFFFFFFFFFF242C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2254/FFFFFFFFFFFF242E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2255/FFFFFFFFFFFF2432 :                     ; 		lsl.w	#3,d1
(1) 2256/FFFFFFFFFFFF2432 :                     ; 		lsl.w	#3,d2
(1) 2257/FFFFFFFFFFFF2432 : 5342                		subq.w	#1,d2
(1) 2258/FFFFFFFFFFFF2434 : 9C41                		sub.w	d1,d6
(1) 2259/FFFFFFFFFFFF2436 : DA42                		add.w	d2,d5
(1) 2260/FFFFFFFFFFFF2438 : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2261/FFFFFFFFFFFF243C : 675A                		beq	.not_ytop
(1) 2262/FFFFFFFFFFFF243E : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2263/FFFFFFFFFFFF2442 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2264/FFFFFFFFFFFF2444 : 3401                		move.w	d1,d2
(1) 2265/FFFFFFFFFFFF2446 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2266/FFFFFFFFFFFF2448 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2267/FFFFFFFFFFFF244C :                     ; 		lsl.w	#3,d1
(1) 2268/FFFFFFFFFFFF244C :                     ; 		lsl.w	#3,d2
(1) 2269/FFFFFFFFFFFF244C : 5342                		subq.w	#1,d2
(1) 2270/FFFFFFFFFFFF244E : 9841                		sub.w	d1,d4
(1) 2271/FFFFFFFFFFFF2450 : D642                		add.w	d2,d3
(1) 2272/FFFFFFFFFFFF2452 : B646                		cmp.w	d6,d3
(1) 2273/FFFFFFFFFFFF2454 : 6D42                		blt.s	.not_ytop
(1) 2274/FFFFFFFFFFFF2456 : B845                		cmp.w	d5,d4
(1) 2275/FFFFFFFFFFFF2458 : 6C3E                		bge.s	.not_ytop
(1) 2276/FFFFFFFFFFFF245A :                     
(1) 2277/FFFFFFFFFFFF245A :                     	; Special Z check
(1) 2278/FFFFFFFFFFFF245A : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2279/FFFFFFFFFFFF245E : 6736                		beq.s	.set_ok
(1) 2280/FFFFFFFFFFFF2460 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2281/FFFFFFFFFFFF2464 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2282/FFFFFFFFFFFF2466 : 3401                		move.w	d1,d2
(1) 2283/FFFFFFFFFFFF2468 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2284/FFFFFFFFFFFF246A : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2285/FFFFFFFFFFFF246E :                     ; 		lsl.w	#3,d1
(1) 2286/FFFFFFFFFFFF246E :                     ; 		lsl.w	#3,d2
(1) 2287/FFFFFFFFFFFF246E : 5342                		subq.w	#1,d2
(1) 2288/FFFFFFFFFFFF2470 : 9C41                		sub.w	d1,d6
(1) 2289/FFFFFFFFFFFF2472 : DA42                		add.w	d2,d5
(1) 2290/FFFFFFFFFFFF2474 : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2291/FFFFFFFFFFFF2478 : 671C                		beq.s	.set_ok
(1) 2292/FFFFFFFFFFFF247A : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2293/FFFFFFFFFFFF247E : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2294/FFFFFFFFFFFF2480 : 3401                		move.w	d1,d2
(1) 2295/FFFFFFFFFFFF2482 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2296/FFFFFFFFFFFF2484 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2297/FFFFFFFFFFFF2488 :                     ; 		lsl.w	#3,d1
(1) 2298/FFFFFFFFFFFF2488 :                     ; 		lsl.w	#3,d2
(1) 2299/FFFFFFFFFFFF2488 : 5342                		subq.w	#1,d2
(1) 2300/FFFFFFFFFFFF248A : 9841                		sub.w	d1,d4
(1) 2301/FFFFFFFFFFFF248C : D642                		add.w	d2,d3
(1) 2302/FFFFFFFFFFFF248E : B646                		cmp.w	d6,d3
(1) 2303/FFFFFFFFFFFF2490 : 6D06                		blt	.not_ytop
(1) 2304/FFFFFFFFFFFF2492 : B845                		cmp.w	d5,d4
(1) 2305/FFFFFFFFFFFF2494 : 6C02                		bge	.not_ytop
(1) 2306/FFFFFFFFFFFF2496 :                     .set_ok:
(1) 2307/FFFFFFFFFFFF2496 : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2308/FFFFFFFFFFFF2498 :                     .not_ytop:
(1) 2309/FFFFFFFFFFFF2498 : 4E75                		rts
(1) 2310/FFFFFFFFFFFF249A :                     
(1) 2311/FFFFFFFFFFFF249A :                     ; ============================================================
(1) 2312/FFFFFFFFFFFF249A :                     ; --------------------------------------------------------
(1) 2313/FFFFFFFFFFFF249A :                     ; object_MdMars_GetSprInfo
(1) 2314/FFFFFFFFFFFF249A :                     ;
(1) 2315/FFFFFFFFFFFF249A :                     ; Grabs info from the current object
(1) 2316/FFFFFFFFFFFF249A :                     ; for Video_MdMars_MakeSpr2D and Video_MdMars_MakeSpr3D
(1) 2317/FFFFFFFFFFFF249A :                     ;
(1) 2318/FFFFFFFFFFFF249A :                     ; Input:
(1) 2319/FFFFFFFFFFFF249A :                     ; a6   | This object
(1) 2320/FFFFFFFFFFFF249A :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2321/FFFFFFFFFFFF249A :                     ;        Set to 0 for 3D Sprites
(1) 2322/FFFFFFFFFFFF249A :                     ; d1.w | Flags
(1) 2323/FFFFFFFFFFFF249A :                     ;
(1) 2324/FFFFFFFFFFFF249A :                     ; Output:
(1) 2325/FFFFFFFFFFFF249A :                     ; d0.l | X and Y position
(1) 2326/FFFFFFFFFFFF249A :                     ; d1.l | Flags and Z Position
(1) 2327/FFFFFFFFFFFF249A :                     ; d2.w | Current frame when using object_Animate
(1) 2328/FFFFFFFFFFFF249A :                     ; --------------------------------------------------------
(1) 2329/FFFFFFFFFFFF249A :                     
(1) 2330/FFFFFFFFFFFF249A :                     object_MdMars_GetSprInfo:
(1) 2345/FFFFFFFFFFFF249A : 4E75                		rts
(1) 2346/FFFFFFFFFFFF249C :                     
     198/FFFFFFFFFFFF249C :                     
     199/FFFFFFFFFFFF249C :                     ; --------------------------------------------------------
     200/FFFFFFFFFFFF249C :                     ; SCREEN MODE MAIN LOOP
     201/FFFFFFFFFFFF249C :                     ;
     202/FFFFFFFFFFFF249C :                     ;  MD/Pico: Direct ROM jump
     203/FFFFFFFFFFFF249C :                     ; CD/CD32X: Reads file from DISC and
     204/FFFFFFFFFFFF249C :                     ;           transfers code to RAM
     205/FFFFFFFFFFFF249C :                     ;      32X: Code is stored on ROM but runs in
     206/FFFFFFFFFFFF249C :                     ;           RAM to prevent conflicts with the
     207/FFFFFFFFFFFF249C :                     ;           SH2
     208/FFFFFFFFFFFF249C :                     ;
     209/FFFFFFFFFFFF249C :                     ; - Returning(rts) in your current screen code return
     210/FFFFFFFFFFFF249C :                     ;   here
     211/FFFFFFFFFFFF249C :                     ; - CD/32X/CD32X:
     212/FFFFFFFFFFFF249C :                     ;   This will turn OFF ALL special features
     213/FFFFFFFFFFFF249C :                     ; --------------------------------------------------------
     214/FFFFFFFFFFFF249C :                     
     215/FFFFFFFFFFFF249C :                     Md_ReadModes:
     216/FFFFFFFFFFFF249C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     218/FFFFFFFFFFFF24A0 : 6100 F2CA           		bsr	Video_MdMcd_StampDisable	; Disable Stamps
     219/FFFFFFFFFFFF24A4 : 6100 FCC8           		bsr	System_MdMcd_CddaStop		; Stop CDDA
     224/FFFFFFFFFFFF24A8 : 7000                		moveq	#0,d0
     225/FFFFFFFFFFFF24AA : 3038 EE7C           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     226/FFFFFFFFFFFF24AE : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     227/FFFFFFFFFFFF24B2 : E948                		lsl.w	#4,d0				; number * $10
     228/FFFFFFFFFFFF24B4 : 41FB 0024           		lea	.screen_list(pc,d0.w),a0		; Read list
     229/FFFFFFFFFFFF24B8 :                     	; SCD/CD32X
     231/FFFFFFFFFFFF24B8 : D0FC 0004           		adda	#4,a0				; a0 - Filename string
     232/FFFFFFFFFFFF24BC : 6100 FACE           		bsr	System_MdMcd_SubWait
     233/FFFFFFFFFFFF24C0 : 43F9 FFFF 2C00      		lea	(RAM_UserCode).l,a1		; a1 - Output location
     234/FFFFFFFFFFFF24C6 : 303C 8400           		move.w	#MAX_UserCode,d0		; Maximum code size
     235/FFFFFFFFFFFF24CA : 6100 FB4A           		bsr	System_MdMcd_RdFile_RAM		; Load CODE from disc
     236/FFFFFFFFFFFF24CE : 6100 FABC           		bsr	System_MdMcd_SubWait		; Wait Sub-CPU
     237/FFFFFFFFFFFF24D2 : 4EB9 FFFF 2C00      		jsr	(RAM_UserCode).l
     238/FFFFFFFFFFFF24D8 :                     	; 32X Cartridge
     252/FFFFFFFFFFFF24D8 : 60C2                		bra.s	Md_ReadModes			; Loop on rts
     253/FFFFFFFFFFFF24DA :                     
     254/FFFFFFFFFFFF24DA :                     ; ====================================================================
     255/FFFFFFFFFFFF24DA :                     
     256/FFFFFFFFFFFF24DA :                     		include "game/incl_list.asm"
(1)    1/FFFFFFFFFFFF24DA :                     ; ============================================================
(1)    2/FFFFFFFFFFFF24DA :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF24DA :                     ; SCREEN CODE jump list sorted by ID (RAM_ScreenMode)
(1)    4/FFFFFFFFFFFF24DA :                     ;
(1)    5/FFFFFFFFFFFF24DA :                     ; - CODE banks are at: incl_code.asm
(1)    6/FFFFFFFFFFFF24DA :                     ; - For SCD/CD32X:
(1)    7/FFFFFFFFFFFF24DA :                     ;   Include the Start+End labels and ISO filename
(1)    8/FFFFFFFFFFFF24DA :                     ;   at iso_files.asm
(1)    9/FFFFFFFFFFFF24DA :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF24DA :                     
(1)   11/FFFFFFFFFFFF24DA :                     .screen_list:
(1)   12/FFFFFFFFFFFF24DA : 0000 E800           		dc.l Md_Screen00	; ROM label
(1)   13/FFFFFFFFFFFF24DE : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename
         FFFFFFFFFFFF24E4 : 3030 2E42 494E    
(1)   14/FFFFFFFFFFFF24EA : 0000 E800           		dc.l Md_Screen00
(1)   15/FFFFFFFFFFFF24EE : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF24F4 : 3030 2E42 494E    
(1)   16/FFFFFFFFFFFF24FA : 0000 E800           		dc.l Md_Screen00
(1)   17/FFFFFFFFFFFF24FE : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2504 : 3030 2E42 494E    
(1)   18/FFFFFFFFFFFF250A : 0000 E800           		dc.l Md_Screen00
(1)   19/FFFFFFFFFFFF250E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2514 : 3030 2E42 494E    
(1)   20/FFFFFFFFFFFF251A : 0000 E800           		dc.l Md_Screen00
(1)   21/FFFFFFFFFFFF251E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2524 : 3030 2E42 494E    
(1)   22/FFFFFFFFFFFF252A : 0000 E800           		dc.l Md_Screen00
(1)   23/FFFFFFFFFFFF252E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2534 : 3030 2E42 494E    
(1)   24/FFFFFFFFFFFF253A : 0000 E800           		dc.l Md_Screen00
(1)   25/FFFFFFFFFFFF253E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2544 : 3030 2E42 494E    
(1)   26/FFFFFFFFFFFF254A : 0000 F000           		dc.l Md_Screen07
(1)   27/FFFFFFFFFFFF254E : 5343 5245 454E      		dc.b "SCREEN07.BIN"
         FFFFFFFFFFFF2554 : 3037 2E42 494E    
(1)   28/FFFFFFFFFFFF255A : FFFF FFFF           		dc.l -1			; END-OF-LIST
(1)   29/FFFFFFFFFFFF255E :                     
(1)   30/FFFFFFFFFFFF255E :                     ; ============================================================
(1)   31/FFFFFFFFFFFF255E :                     ; --------------------------------------------------------
(1)   32/FFFFFFFFFFFF255E :                     ; CD/CD32X ONLY: Bank filenames at any order
(1)   33/FFFFFFFFFFFF255E :                     ;
(1)   34/FFFFFFFFFFFF255E :                     ; If you forget to reference the label it will crash
(1)   35/FFFFFFFFFFFF255E :                     ; the entire SCD system.
(1)   36/FFFFFFFFFFFF255E :                     ;
(1)   37/FFFFFFFFFFFF255E :                     ; - Include the Start+End labels and ISO filename
(1)   38/FFFFFFFFFFFF255E :                     ;   at iso_files.asm
(1)   39/FFFFFFFFFFFF255E :                     ; --------------------------------------------------------
(1)   40/FFFFFFFFFFFF255E :                     
(1)   41/FFFFFFFFFFFF255E :                     disc_banklist:
(1)   42/FFFFFFFFFFFF255E : 0001 0000           		dc.l DATA_BANK0		; Start Label
(1)   43/FFFFFFFFFFFF2562 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN"	; ISO filename
         FFFFFFFFFFFF2568 : 494E 2E42 494E    
(1)   44/FFFFFFFFFFFF256E : FFFF FFFF           		dc.l -1			; END-OF-LIST
(1)   45/FFFFFFFFFFFF2572 :                     
     257/FFFFFFFFFFFF2572 :                     		align 2
     258/FFFFFFFFFFFF2574 :                     
     259/FFFFFFFFFFFF2574 :                     ; ====================================================================
     260/FFFFFFFFFFFF2574 :                     
     262/FFFFFFFFFFFF2574 :                     .end:
     263/FFFFFFFFFFFF2574 : (MACRO)              		erreport "NIKONA RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     264/    4E9C :                     		dephase
     265/    4E9C :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     267/    4E9C :                     
     268/    4E9C :                     Md_SysCode_e:
     269/    4E9C :                     		align 2
     270/    4E9C :                     
     271/    4E9C :                     ; ===========================================================================
     272/    4E9C :                     ; ----------------------------------------------------------------
     273/    4E9C :                     ; DATA section shared on both Cartridge or Disc
     274/    4E9C :                     ; ----------------------------------------------------------------
     275/    4E9C :                     
     276/    4E9C :                     ; --------------------------------------------------------
     277/    4E9C :                     ; CD/CD32X ISO header and files
     278/    4E9C :                     ; --------------------------------------------------------
     279/    4E9C :                     
     281/    4E9C :                     		align $8000
     282/    8000 :                     		binclude "nikona/mcd/fshead.bin"		; Pre-generated ISO header
     283/    B800 : (MACRO)              		fs_mkList 0,IsoFileList,IsoFileList_e		; TWO pointers to the filelist
     283/    B800 :                     .fstrt:
     283/    B800 : 22                                  dc.b .fend-.fstrt                               ; Block size
     283/    B801 : 00                                  dc.b 0                                          ; Zero
     283/    B802 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     283/    B804 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     283/    B806 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     283/    B80A : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     283/    B80C : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     283/    B80E : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     283/    B812 : 7E                                  dc.b (2025-1900)+1                              ; Year
     283/    B813 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     283/    B819 : 02                                  dc.b 2                                          ; File flags
     283/    B81A : 0000                                dc.b 0,0
     283/    B81C : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     283/    B81E : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     283/    B820 : 0100                                dc.b 1,0
     283/    B822 :                     .fend:
     284/    B822 : (MACRO)              		fs_mkList 1,IsoFileList,IsoFileList_e
     284/    B822 :                     .fstrt:
     284/    B822 : 22                                  dc.b .fend-.fstrt                               ; Block size
     284/    B823 : 00                                  dc.b 0                                          ; Zero
     284/    B824 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     284/    B826 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     284/    B828 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     284/    B82C : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     284/    B82E : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     284/    B830 : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     284/    B834 : 7E                                  dc.b (2025-1900)+1                              ; Year
     284/    B835 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     284/    B83B : 02                                  dc.b 2                                          ; File flags
     284/    B83C : 0000                                dc.b 0,0
     284/    B83E : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     284/    B840 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     284/    B842 : 0101                                dc.b 1,1
     284/    B844 :                     .fend:
     285/    B844 :                     IsoFileList:
     286/    B844 :                     	; MAX 8 sectors of file pointers
     287/    B844 : (MACRO)              		fs_file "NKNA_SUB.BIN",MCD_SMPDATA,MCD_SMPDATA_e
     287/    B844 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     287/    B845 : 00                                  dc.b 0                                          ; zero
     287/    B846 : 1C00                                dc.b (MCD_SMPDATA>>11&$FF),(MCD_SMPDATA>>19&$FF)            ; MCD_SMPDATA sector, little
     287/    B848 : 0000                                dc.b (MCD_SMPDATA>>27&$FF),(MCD_SMPDATA>>35&$FF)
     287/    B84A : 0000 001C                           dc.l MCD_SMPDATA>>11                                  ; MCD_SMPDATA sector, big
     287/    B84E : 0008                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>8&$FF)     ; Filesize, little
     287/    B850 : 0000                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)>>16&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>24&$FF)
     287/    B852 : 0000 0800                           dc.l MCD_SMPDATA_E-MCD_SMPDATA                                  ; Filesize, big
     287/    B856 : 7E                                  dc.b (2025-1900)+1                              ; Year
     287/    B857 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     287/    B85D : 00                                  dc.b 0                                          ; File flags
     287/    B85E : 0000                                dc.b 0,0
     287/    B860 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     287/    B862 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     287/    B864 : 0E                                  dc.b .flend-.flen
     287/    B865 : 4E4B 4E41 5F53      .flen:          dc.b "NKNA_SUB.BIN",";1"
             B86B : 5542 2E42 494E 
             B871 : 3B31             
     287/    B873 : 00                  .flend:         dc.b 0
     287/    B874 :                     .fend:
     288/    B874 : (MACRO)              		fs_file "NKNAMARS.BIN",MARS_RAMCODE,MARS_RAMCODE_EOF
     288/    B874 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     288/    B875 : 00                                  dc.b 0                                          ; zero
     288/    B876 : 1D00                                dc.b (MARS_RAMCODE>>11&$FF),(MARS_RAMCODE>>19&$FF)            ; MARS_RAMCODE sector, little
     288/    B878 : 0000                                dc.b (MARS_RAMCODE>>27&$FF),(MARS_RAMCODE>>35&$FF)
     288/    B87A : 0000 001D                           dc.l MARS_RAMCODE>>11                                  ; MARS_RAMCODE sector, big
     288/    B87E : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>8&$FF)     ; Filesize, little
     288/    B880 : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)>>16&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>24&$FF)
     288/    B882 : 0000 0000                           dc.l MARS_RAMCODE_EOF-MARS_RAMCODE                                  ; Filesize, big
     288/    B886 : 7E                                  dc.b (2025-1900)+1                              ; Year
     288/    B887 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     288/    B88D : 00                                  dc.b 0                                          ; File flags
     288/    B88E : 0000                                dc.b 0,0
     288/    B890 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     288/    B892 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     288/    B894 : 0E                                  dc.b .flend-.flen
     288/    B895 : 4E4B 4E41 4D41      .flen:          dc.b "NKNAMARS.BIN",";1"
             B89B : 5253 2E42 494E 
             B8A1 : 3B31             
     288/    B8A3 : 00                  .flend:         dc.b 0
     288/    B8A4 :                     .fend:
     289/    B8A4 : (MACRO)              		fs_file "GEMA_Z80.BIN",Z80_CODE_FILE,Z80_CODE_EOF
     289/    B8A4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     289/    B8A5 : 00                                  dc.b 0                                          ; zero
     289/    B8A6 : 1800                                dc.b (Z80_CODE_FILE>>11&$FF),(Z80_CODE_FILE>>19&$FF)            ; Z80_CODE_FILE sector, little
     289/    B8A8 : 0000                                dc.b (Z80_CODE_FILE>>27&$FF),(Z80_CODE_FILE>>35&$FF)
     289/    B8AA : 0000 0018                           dc.l Z80_CODE_FILE>>11                                  ; Z80_CODE_FILE sector, big
     289/    B8AE : 0020                                dc.b ((Z80_CODE_EOF-Z80_CODE_FILE)&$FF),((Z80_CODE_EOF-Z80_CODE_FILE)>>8&$FF)     ; Filesize, little
     289/    B8B0 : 0000                                dc.b ((Z80_CODE_EOF-Z80_CODE_FILE)>>16&$FF),((Z80_CODE_EOF-Z80_CODE_FILE)>>24&$FF)
     289/    B8B2 : 0000 2000                           dc.l Z80_CODE_EOF-Z80_CODE_FILE                                  ; Filesize, big
     289/    B8B6 : 7E                                  dc.b (2025-1900)+1                              ; Year
     289/    B8B7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     289/    B8BD : 00                                  dc.b 0                                          ; File flags
     289/    B8BE : 0000                                dc.b 0,0
     289/    B8C0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     289/    B8C2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     289/    B8C4 : 0E                                  dc.b .flend-.flen
     289/    B8C5 : 4745 4D41 5F5A      .flen:          dc.b "GEMA_Z80.BIN",";1"
             B8CB : 3830 2E42 494E 
             B8D1 : 3B31             
     289/    B8D3 : 00                  .flend:         dc.b 0
     289/    B8D4 :                     .fend:
     290/    B8D4 :                     		include "game/iso_files.asm"			; User files
(1)    1/    B8D4 :                     ; ============================================================
(1)    2/    B8D4 :                     ; ----------------------------------------------------
(1)    3/    B8D4 :                     ; SCD/CD32X ONLY:
(1)    4/    B8D4 :                     ;
(1)    5/    B8D4 :                     ; Labels and ISO filenames for the CODE and DATA banks
(1)    6/    B8D4 :                     ;
(1)    7/    B8D4 :                     ; The labels are the same ones your set on
(1)    8/    B8D4 :                     ; incl_code.asm and incl_data.asm
(1)    9/    B8D4 :                     ; ----------------------------------------------------
(1)   10/    B8D4 :                     
(1)   11/    B8D4 :                     	;fs_file "ISO_FILE.BIN",Label_Start,Lable_End
(1)   12/    B8D4 : (MACRO)              	fs_file "SCREEN00.BIN",Md_Screen00,Md_Screen00_e
(1)   12/    B8D4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   12/    B8D5 : 00                                  dc.b 0                                          ; zero
(1)   12/    B8D6 : 1D00                                dc.b (MD_SCREEN00>>11&$FF),(MD_SCREEN00>>19&$FF)            ; MD_SCREEN00 sector, little
(1)   12/    B8D8 : 0000                                dc.b (MD_SCREEN00>>27&$FF),(MD_SCREEN00>>35&$FF)
(1)   12/    B8DA : 0000 001D                           dc.l MD_SCREEN00>>11                                  ; MD_SCREEN00 sector, big
(1)   12/    B8DE : 0008                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>8&$FF)     ; Filesize, little
(1)   12/    B8E0 : 0000                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)>>16&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>24&$FF)
(1)   12/    B8E2 : 0000 0800                           dc.l MD_SCREEN00_E-MD_SCREEN00                                  ; Filesize, big
(1)   12/    B8E6 : 7E                                  dc.b (2025-1900)+1                              ; Year
(1)   12/    B8E7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   12/    B8ED : 00                                  dc.b 0                                          ; File flags
(1)   12/    B8EE : 0000                                dc.b 0,0
(1)   12/    B8F0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   12/    B8F2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   12/    B8F4 : 0E                                  dc.b .flend-.flen
(1)   12/    B8F5 : 5343 5245 454E      .flen:          dc.b "SCREEN00.BIN",";1"
             B8FB : 3030 2E42 494E 
             B901 : 3B31             
(1)   12/    B903 : 00                  .flend:         dc.b 0
(1)   12/    B904 :                     .fend:
(1)   13/    B904 : (MACRO)              	fs_file "SCREEN07.BIN",Md_Screen07,Md_Screen07_e
(1)   13/    B904 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   13/    B905 : 00                                  dc.b 0                                          ; zero
(1)   13/    B906 : 1E00                                dc.b (MD_SCREEN07>>11&$FF),(MD_SCREEN07>>19&$FF)            ; MD_SCREEN07 sector, little
(1)   13/    B908 : 0000                                dc.b (MD_SCREEN07>>27&$FF),(MD_SCREEN07>>35&$FF)
(1)   13/    B90A : 0000 001E                           dc.l MD_SCREEN07>>11                                  ; MD_SCREEN07 sector, big
(1)   13/    B90E : 0010                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>8&$FF)     ; Filesize, little
(1)   13/    B910 : 0000                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)>>16&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>24&$FF)
(1)   13/    B912 : 0000 1000                           dc.l MD_SCREEN07_E-MD_SCREEN07                                  ; Filesize, big
(1)   13/    B916 : 7E                                  dc.b (2025-1900)+1                              ; Year
(1)   13/    B917 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   13/    B91D : 00                                  dc.b 0                                          ; File flags
(1)   13/    B91E : 0000                                dc.b 0,0
(1)   13/    B920 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   13/    B922 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   13/    B924 : 0E                                  dc.b .flend-.flen
(1)   13/    B925 : 5343 5245 454E      .flen:          dc.b "SCREEN07.BIN",";1"
             B92B : 3037 2E42 494E 
             B931 : 3B31             
(1)   13/    B933 : 00                  .flend:         dc.b 0
(1)   13/    B934 :                     .fend:
(1)   14/    B934 : (MACRO)              	fs_file "BNK_MAIN.BIN",DATA_BANK0,DATA_BANK0_e
(1)   14/    B934 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   14/    B935 : 00                                  dc.b 0                                          ; zero
(1)   14/    B936 : 2000                                dc.b (DATA_BANK0>>11&$FF),(DATA_BANK0>>19&$FF)            ; DATA_BANK0 sector, little
(1)   14/    B938 : 0000                                dc.b (DATA_BANK0>>27&$FF),(DATA_BANK0>>35&$FF)
(1)   14/    B93A : 0000 0020                           dc.l DATA_BANK0>>11                                  ; DATA_BANK0 sector, big
(1)   14/    B93E : 00E8                                dc.b ((DATA_BANK0_E-DATA_BANK0)&$FF),((DATA_BANK0_E-DATA_BANK0)>>8&$FF)     ; Filesize, little
(1)   14/    B940 : 0300                                dc.b ((DATA_BANK0_E-DATA_BANK0)>>16&$FF),((DATA_BANK0_E-DATA_BANK0)>>24&$FF)
(1)   14/    B942 : 0003 E800                           dc.l DATA_BANK0_E-DATA_BANK0                                  ; Filesize, big
(1)   14/    B946 : 7E                                  dc.b (2025-1900)+1                              ; Year
(1)   14/    B947 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   14/    B94D : 00                                  dc.b 0                                          ; File flags
(1)   14/    B94E : 0000                                dc.b 0,0
(1)   14/    B950 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   14/    B952 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   14/    B954 : 0E                                  dc.b .flend-.flen
(1)   14/    B955 : 424E 4B5F 4D41      .flen:          dc.b "BNK_MAIN.BIN",";1"
             B95B : 494E 2E42 494E 
             B961 : 3B31             
(1)   14/    B963 : 00                  .flend:         dc.b 0
(1)   14/    B964 :                     .fend:
(1)   15/    B964 :                     
     291/    B964 :                     		align $800
     292/    C000 :                     IsoFileList_e:
     294/    C000 :                     
     295/    C000 :                     ; ===========================================================================
     296/    C000 :                     ; --------------------------------------------------------
     297/    C000 :                     ; Z80 driver include
     298/    C000 :                     ;
     299/    C000 :                     ; SCD/CD32X: Stored on DISC
     300/    C000 :                     ; --------------------------------------------------------
     301/    C000 :                     
     303/    C000 :                     		align $800
     304/    C000 :                     Z80_CODE_FILE:
     305/  200000 :                     		phase sysmcd_wram
     309/  200000 :                     Z80_CODE:
     313/  200000 :                     		include "sound/drv/gema_zdrv.asm"
(1)    1/  200000 :                     ; ===========================================================================
(1)    2/  200000 :                     ; -------------------------------------------------------------------
(1)    3/  200000 :                     ; GEMA Z80 code
(1)    4/  200000 :                     ; -------------------------------------------------------------------
(1)    5/  200000 :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =9H                  MAX_TRFRPZ	equ 9		; !! Max readRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** MSB alinged ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE LSB ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size **HARDCODED
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of track buffers
(1)   19/       0 : =20H                 MAX_ZCMND	equ 20h		; !! Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   20/       0 : =12H                 MAX_TBLSIZE	equ 12h		; Maximum size for chip table arrays
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Structs
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; trkBuff struct
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; seq_Status: %ERP- V--0
(1)   30/       0 :                     ; E - enabled
(1)   31/       0 :                     ; R - Init|Restart track
(1)   32/       0 :                     ; P - refill-on-playback
(1)   33/       0 :                     ; V - volume change flag
(1)   34/       0 :                     ; 0 - Use global sub-beats
(1)   35/       0 : =0H                  seq_Status	equ 00h	; ** Slot Status and flags (MUST BE at 00h)
(1)   36/       0 : =1H                  seq_Num		equ 01h ; ** Sequence number
(1)   37/       0 : =2H                  seq_SetBlk	equ 02h	; ** Start on this block
(1)   38/       0 : =3H                  seq_TickSet	equ 03h	; ** Ticks for this track
(1)   39/       0 : =4H                  seq_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   40/       0 : =6H                  seq_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   41/       0 : =8H                  seq_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   42/       0 : =0AH                 seq_Read	equ 0Ah	; [W] Track current pattern read
(1)   43/       0 : =0CH                 seq_Rows	equ 0Ch	; [W] Track row counter
(1)   44/       0 : =0EH                 seq_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   45/       0 : =10H                 seq_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   46/       0 : =11H                 seq_rowPause	equ 11h	; Row-pause timer
(1)   47/       0 : =12H                 seq_TickTmr	equ 12h	; Ticks timer
(1)   48/       0 : =13H                 seq_currBlk	equ 13h	; Current block
(1)   49/       0 : =14H                 seq_Priority	equ 14h ; Priority level for this buffer
(1)   50/       0 : =15H                 seq_BankHeads	equ 15h ; Header bank
(1)   51/       0 : =16H                 seq_BankBlk	equ 16h	; Block bank
(1)   52/       0 : =17H                 seq_MaxChnl	equ 17h ; MAX channels used in this track
(1)   53/       0 : =18H                 seq_VolFdTarget	equ 18h	; Target fade volume
(1)   54/       0 : =19H                 seq_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   55/       0 : =1CH                 seq_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   56/       0 : =1FH                 seq_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   57/       0 : =22H                 seq_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   58/       0 : =25H                 seq_ChnIndx	equ 25h	; CHANNEL INDEXING START HERE
(1)   59/       0 :                     
(1)   60/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   61/       0 :                     ;
(1)   62/       0 :                     ; chnl_Flags: E0LRevin
(1)   63/       0 :                     ; 	 E - Channel is active
(1)   64/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   65/       0 :                     ; 	 e - Effect*
(1)   66/       0 :                     ; 	 v - Volume*
(1)   67/       0 :                     ; 	 i - Intrument*
(1)   68/       0 :                     ; 	 n - Note*
(1)   69/       0 :                     
(1)   70/       0 : =0H                  chnl_Flags	equ 0	; !! Playback flags: %E0LRevin ** MUST BE LOCATED AT 0 **
(1)   71/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   72/       0 : =2H                  chnl_Note	equ 2	; IT Music note or command
(1)   73/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   74/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   75/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   76/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   77/       0 : =7H                  chnl_Type	equ 7	; Impulse type bits
(1)   78/       0 :                     
(1)   79/       0 :                     
(1)   80/       0 :                     ; Table struct
(1)   81/       0 : =0H                  ztbl_Link	equ 00h			; !! current linked channel in trkChnls
(1)   82/       0 : =2H                  ztbl_Priority	equ 02h			; !! 00h-7Fh: Priority level 0-15 + 80h+chipID Silence request
(1)   83/       0 : =3H                  ztbl_Chip	equ 03h			; !! Chip index (YM2612: direct index) *MUST BE ON THE LIST*
(1)   84/       0 : =4H                  ztbl_MasterVol	equ 04h			; MASTER volume for this channel
(1)   85/       0 : =5H                  ztbl_FreqIndx	equ 05h			; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   86/       0 : =6H                  ztbl_PitchBend	equ 06h			; Pitchbend incr/decr
(1)   87/       0 : =7H                  ztbl_Volume	equ 07h			; Current Volume: 00-max
(1)   88/       0 : =8H                  ztbl_VolSlide	equ 08h			; Volume slide incr/decr
(1)   89/       0 : =0AH                 ztbl_InstCach	equ 0Ah			; <-- 8 bytes
(1)   90/       0 :                     
(1)   91/       0 :                     ; --------------------------------------------------------
(1)   92/       0 :                     ; Variables
(1)   93/       0 :                     ; --------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   96/       0 : =0H                  zopcNop		equ 00h
(1)   97/       0 : =8H                  zopcEx		equ 08h
(1)   98/       0 : =0C9H                zopcRet		equ 0C9h
(1)   99/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  100/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  101/       0 :                     
(1)  102/       0 :                     ; PSG
(1)  103/       0 : =0H                  COM		equ 0
(1)  104/       0 : =4H                  LEV		equ 4
(1)  105/       0 : =8H                  ATK		equ 8
(1)  106/       0 : =0CH                 DKY		equ 12
(1)  107/       0 : =10H                 SLV		equ 16
(1)  108/       0 : =14H                 RRT		equ 20
(1)  109/       0 : =18H                 MODE		equ 24
(1)  110/       0 : =1CH                 DTL		equ 28
(1)  111/       0 : =20H                 DTH		equ 32
(1)  112/       0 : =24H                 ALV		equ 36
(1)  113/       0 : =28H                 FLG		equ 40
(1)  114/       0 : =2CH                 ARP		equ 44
(1)  115/       0 : =30H                 MVOL		equ 48
(1)  116/       0 : =34H                 EFFV		equ 52
(1)  117/       0 : =38H                 PTMR		equ 56
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrupts
(1)  125/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  127/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ;
(1)  132/       8 :                     ; Writes wave data to DAC using data stored
(1)  133/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  134/       8 :                     ; instructions to keep the samplerate stable.
(1)  135/       8 :                     ;
(1)  136/       8 :                     ; Input (EXX):
(1)  137/       8 :                     ;  c - WAVE buffer MSB
(1)  138/       8 :                     ; de - Pitch (xx.00)
(1)  139/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  140/       8 :                     ;
(1)  141/       8 :                     ; Uses (EXX):
(1)  142/       8 :                     ; b
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Notes:
(1)  145/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  146/       8 :                     ; DAC playback
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  149/       8 :                     ; --------------------------------------------------------
(1)  150/       8 :                     
(1)  151/       8 :                     ; EXX set:
(1)  152/       8 :                     ; af - temporal
(1)  153/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  154/       8 :                     ; de - pitch increment
(1)  155/       8 :                     ; hl - wave buffer position 00.00h
(1)  156/       8 :                     		org 8
(1)  157/       8 : D9                  dac_me:		exx			; * flip registers | Changes between EXX(play) and RET(stop)
(1)  158/       9 : 08                  		ex	af,af'		; Swap af
(1)  159/       A : 45                  		ld	b,l		; Save old hl buff
(1)  160/       B : 6C                  		ld	l,h		;
(1)  161/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  162/       D : 3E 2A               		ld	a,2Ah		;
(1)  163/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  164/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  165/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  166/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  167/      17 : 68                  		ld	l,b		;
(1)  168/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  169/      19 : 08                  		ex	af,af'		; Return af
(1)  170/      1A : D9                  		exx			; * return regs
(1)  171/      1B : C9                  		ret
(1)  172/      1C :                     
(1)  173/      1C :                     ; --------------------------------------------------------
(1)  174/      1C :                     ; 1Ch - Master tracklist pointer
(1)  175/      1C :                     gemaMstrListPos:
(1)  176/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  177/      1D : 00                  		db 0
(1)  178/      1E : 00                  		db 0
(1)  179/      1F : 00                  		db 0
(1)  180/      20 :                     
(1)  181/      20 :                     ; --------------------------------------------------------
(1)  182/      20 :                     ; RST 20h (dac_me)
(1)  183/      20 :                     ; *** self-modifiable code ***
(1)  184/      20 :                     ;
(1)  185/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  186/      20 :                     ; it playing.
(1)  187/      20 :                     ; --------------------------------------------------------
(1)  188/      20 :                     
(1)  189/      20 :                     		org 20h
(1)  190/      20 : F5                  dac_fill:	push	af		; Save af | Changes between PUSH AF(play) and RET(stop)
(1)  191/      21 : 3A 37 00            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  192/      24 : D9                  		exx			; * flip registers
(1)  193/      25 : AC                  		xor	h		; Grab LSB.00
(1)  194/      26 : D9                  		exx			; * restore regs
(1)  195/      27 : E6 80               		and	80h		; Check if LSB 7th bit changed
(1)  196/      29 : C4 6A 13            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  197/      2C : F1                  		pop	af		; Restore af
(1)  198/      2D : C9                  		ret
(1)  199/      2E :                     
(1)  200/      2E :                     ; --------------------------------------------------------
(1)  201/      2E :                     ; 02Eh - User read/write values
(1)  202/      2E :                     
(1)  203/      2E : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1)  204/      2F : 00                  psgHatMode	db 0			; Current PSGN mode
(1)  205/      30 : 00                  fmSpecial	db 0			; copy of FM3 enable bit
(1)  206/      31 : 00 00               sbeatAcc	dw 0			; Accumulates on each tick to trigger the sub beats
(1)  207/      33 : D6 00               sbeatPtck	dw 214			; Default global subbeats (this-32 for PAL) 214=125
(1)  208/      35 : 00                  x68ksrclsb	db 0			; readRom temporal LSB
(1)  209/      36 : 00                  x68ksrcmid	db 0			; readRom temporal MID
(1)  210/      37 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1)  211/      38 :                     
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     ; Z80 Interrupt at 0038h
(1)  214/      38 :                     ; --------------------------------------------------------
(1)  215/      38 :                     
(1)  216/      38 :                     		org 38h				; Align 38h
(1)  217/      38 : ED 73 F6 1C         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  218/      3C : F3                  		di				; Disable interrupt
(1)  219/      3D : C9                  		ret
(1)  220/      3E :                     
(1)  221/      3E :                     ; --------------------------------------------------------
(1)  222/      3E :                     ; Initialize
(1)  223/      3E :                     ; --------------------------------------------------------
(1)  224/      3E :                     
(1)  225/      3E :                     z80_init:
(1)  226/      3E : CD 45 10            		call	gema_init		; Init values
(1)  227/      41 :                     
(1)  228/      41 :                     ; --------------------------------------------------------
(1)  229/      41 :                     ; MAIN LOOP
(1)  230/      41 :                     ; --------------------------------------------------------
(1)  231/      41 :                     
(1)  232/      41 :                     drv_loop:
(1)  233/      41 : CF                  		rst	8
(1)  234/      42 : CD B7 10            		call	get_tick		; Check tick on VBlank
(1)  235/      45 : E7                  		rst	20h			; Refill wave here
(1)  236/      46 : CF                  		rst	8
(1)  237/      47 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  238/      49 : 3A F8 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  239/      4C : D6 01               		sub	1
(1)  240/      4E : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  241/      50 : 32 F8 1C            		ld	(tickCnt),a
(1)  242/      53 : CD 8F 11            		call	chip_env		; Process PSG and YM
(1)  243/      56 : CD B7 10            		call	get_tick		; Check for another tick
(1)  244/      59 : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  245/      5B :                     .noticks:
(1)  246/      5B : 3A 32 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  247/      5E : D6 01               		sub	1
(1)  248/      60 : 38 06               		jr	c,.nobeats
(1)  249/      62 : CF                  		rst	8
(1)  250/      63 : 32 32 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  251/      66 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  252/      68 :                     .nobeats:
(1)  253/      68 : CF                  		rst	8
(1)  254/      69 : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  255/      6A : B7                  		or	a
(1)  256/      6B : 28 15               		jr	z,.neither
(1)  257/      6D : 32 F9 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  258/      70 : E7                  		rst	20h
(1)  259/      71 : CF                  		rst	8
(1)  260/      72 : CD B7 10            		call	get_tick
(1)  261/      75 : CD FE 05            		call	set_chips		; Process sound chips
(1)  262/      78 : CD B7 10            		call	get_tick
(1)  263/      7B : CF                  		rst	8
(1)  264/      7C : CD 26 02            		call	upd_seq			; Read sequences
(1)  265/      7F : CD B7 10            		call	get_tick
(1)  266/      82 :                     .neither:
(1)  267/      82 : E7                  		rst	20h
(1)  269/      83 : CF                  		rst	8
(1)  270/      84 : CD 99 0F            		call	zmars_send		; External communication with SCD and 32X
(1)  271/      87 : CD B7 10            		call	get_tick
(1)  272/      8A : CF                  		rst	8
(1)  281/      8B :                     .next_cmd:
(1)  282/      8B : 3A 80 1F            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  283/      8E : 47                  		ld	b,a			; are in the same spot a == b
(1)  284/      8F : 3A 2E 00            		ld	a,(commZRead)
(1)  285/      92 : B8                  		cp	b			; If equal, no changes.
(1)  286/      93 : 28 AC               		jr	z,drv_loop
(1)  287/      95 : CF                  		rst	8
(1)  288/      96 : CD AE 00            		call	.grab_arg		; Get command start flag -1
(1)  289/      99 : FE FF               		cp	-1
(1)  290/      9B : 20 A4               		jr	nz,drv_loop		; If not, end of command
(1)  291/      9D : CD AE 00            		call	.grab_arg		; Read command number
(1)  292/      A0 : 87                  		add	a,a			; num*2
(1)  293/      A1 : 21 CD 00            		ld	hl,.list		; Index-jump
(1)  294/      A4 : 16 00               		ld	d,0
(1)  295/      A6 : 5F                  		ld	e,a
(1)  296/      A7 : 19                  		add	hl,de
(1)  297/      A8 : 7E                  		ld	a,(hl)
(1)  298/      A9 : 23                  		inc	hl
(1)  299/      AA : 66                  		ld	h,(hl)
(1)  300/      AB : CF                  		rst	8
(1)  301/      AC : 6F                  		ld	l,a
(1)  302/      AD : E9                  		jp	(hl)			; Jump to label
(1)  303/      AE :                     
(1)  304/      AE :                     ; --------------------------------------------------------
(1)  305/      AE :                     ; Read cmd byte
(1)  306/      AE :                     ; --------------------------------------------------------
(1)  307/      AE :                     
(1)  308/      AE :                     .grab_arg:
(1)  309/      AE : D5                  		push	de
(1)  310/      AF : E5                  		push	hl
(1)  311/      B0 :                     .getcbytel:
(1)  312/      B0 : 3A 80 1F            		ld	a,(commZWrite)
(1)  313/      B3 : 57                  		ld	d,a
(1)  314/      B4 : CF                  		rst	8
(1)  315/      B5 : 3A 2E 00            		ld	a,(commZRead)
(1)  316/      B8 : BA                  		cp	d			; commZ R/W indexes are the same?
(1)  317/      B9 : 28 F5               		jr	z,.getcbytel		; wait until these counters change.
(1)  318/      BB : 16 00               		ld	d,0
(1)  319/      BD : 5F                  		ld	e,a
(1)  320/      BE : 21 60 1F            		ld	hl,commZfifo		; Read commZ list + index
(1)  321/      C1 : 19                  		add	hl,de
(1)  322/      C2 : CF                  		rst	8
(1)  323/      C3 : 3C                  		inc	a
(1)  324/      C4 : E6 1F               		and	MAX_ZCMND-1		; ** commZ list buffer limit
(1)  325/      C6 : 32 2E 00            		ld	(commZRead),a
(1)  326/      C9 : 7E                  		ld	a,(hl)			; a - got this byte from the buffer
(1)  327/      CA : E1                  		pop	hl
(1)  328/      CB : D1                  		pop	de
(1)  329/      CC : C9                  		ret
(1)  330/      CD :                     
(1)  331/      CD :                     ; --------------------------------------------------------
(1)  332/      CD :                     
(1)  333/      CD :                     .list:
(1)  334/      CD : DD 00               		dw .cmnd_0		; 00h - TESTING
(1)  335/      CF : E0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  336/      D1 : F9 00               		dw .cmnd_2		; 02h - Play by track number
(1)  337/      D3 : 33 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  338/      D5 : DD 00               		dw .cmnd_0		; 04h - (free)
(1)  339/      D7 : 71 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  340/      D9 : AA 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  341/      DB : E3 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  342/      DD :                     
(1)  343/      DD :                     ; --------------------------------------------------------
(1)  344/      DD :                     ; Command 00h
(1)  345/      DD :                     ;
(1)  346/      DD :                     ; Reserved for TESTING purposes.
(1)  347/      DD :                     ; --------------------------------------------------------
(1)  348/      DD :                     
(1)  349/      DD :                     .cmnd_0:
(1)  350/      DD : C3 8B 00            		jp	.next_cmd
(1)  351/      E0 :                     
(1)  352/      E0 :                     ; --------------------------------------------------------
(1)  353/      E0 :                     ; Command 01h:
(1)  354/      E0 :                     ;
(1)  355/      E0 :                     ; Set the Track MASTER-list.
(1)  356/      E0 :                     ; --------------------------------------------------------
(1)  357/      E0 :                     
(1)  358/      E0 :                     .cmnd_1:
(1)  359/      E0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  360/      E3 : CD AE 00            		call	.grab_arg		; $000000xx
(1)  361/      E6 : 77                  		ld	(hl),a
(1)  362/      E7 : 2B                  		dec	hl
(1)  363/      E8 : CD AE 00            		call	.grab_arg		; $0000xx00
(1)  364/      EB : 77                  		ld	(hl),a
(1)  365/      EC : 2B                  		dec	hl
(1)  366/      ED : CD AE 00            		call	.grab_arg		; $00xx0000
(1)  367/      F0 : 77                  		ld	(hl),a
(1)  368/      F1 : 2B                  		dec	hl
(1)  369/      F2 : CD AE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  370/      F5 : 77                  		ld	(hl),a
(1)  371/      F6 : C3 8B 00            		jp	.next_cmd
(1)  372/      F9 :                     
(1)  373/      F9 :                     ; --------------------------------------------------------
(1)  374/      F9 :                     ; Command 02h:
(1)  375/      F9 :                     ;
(1)  376/      F9 :                     ; Make new track by sequence number
(1)  377/      F9 :                     ;
(1)  378/      F9 :                     ; SeqID, BlockPos, SlotIndex(If -1 autofill)
(1)  379/      F9 :                     ; --------------------------------------------------------
(1)  380/      F9 :                     
(1)  381/      F9 :                     .cmnd_2:
(1)  382/      F9 : CD AE 00            		call	.grab_arg		; d1: Sequence ID
(1)  383/      FC : 4F                  		ld	c,a			; copy to c
(1)  384/      FD : CD AE 00            		call	.grab_arg		; d2: Block from
(1)  385/     100 : 47                  		ld	b,a			; copy to b
(1)  386/     101 : CF                  		rst	8
(1)  387/     102 : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  388/     105 : FD 21 FB 18         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  389/     109 : B7                  		or	a
(1)  390/     10A : FA 19 01            		jp	m,.srch_mode		; If negative, search for all with same ID
(1)  391/     10D : FE 03               		cp	MAX_SLOTS
(1)  392/     10F : D2 8B 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  393/     112 : CF                  		rst	8
(1)  394/     113 : CD 01 02            		call	.cmnd_rdslot
(1)  395/     116 : C3 28 01            		jp	.wrtto_slot
(1)  396/     119 :                     ; -1
(1)  397/     119 :                     .srch_mode:
(1)  398/     119 : CD 13 02            		call	.srch_slot		; Read this slot
(1)  399/     11C : FE FF               		cp	-1
(1)  400/     11E : CA 8B 00            		jp	z,.next_cmd		; if -1, exit.
(1)  401/     121 : CB 7E               		bit	7,(hl)			; Is this track active?
(1)  402/     123 : CA 28 01            		jp	z,.wrtto_slot
(1)  403/     126 : 18 F1               		jr	.srch_mode		; Check next one
(1)  404/     128 :                     .wrtto_slot:
(1)  405/     128 : 36 C0               		ld	(hl),11000000b		; ** Write seq_Status (Enable+FirstFill)
(1)  406/     12A : 23                  		inc	hl
(1)  407/     12B : CF                  		rst	8
(1)  408/     12C : 71                  		ld	(hl),c			; ** seq_Num
(1)  409/     12D : 23                  		inc	hl
(1)  410/     12E : 70                  		ld	(hl),b			; ** seq_SetBlk
(1)  411/     12F : 79                  		ld	a,c
(1)  412/     130 : C3 8B 00            		jp	.next_cmd
(1)  413/     133 :                     
(1)  414/     133 :                     ; --------------------------------------------------------
(1)  415/     133 :                     ; Command 03h:
(1)  416/     133 :                     ;
(1)  417/     133 :                     ; Stop track with the same sequence number
(1)  418/     133 :                     ;
(1)  419/     133 :                     ; SeqID,SlotIndex(If -1, stop all)
(1)  420/     133 :                     ; --------------------------------------------------------
(1)  421/     133 :                     
(1)  422/     133 :                     .cmnd_3:
(1)  423/     133 : CD AE 00            		call	.grab_arg		; d1: Sequence ID
(1)  424/     136 : 4F                  		ld	c,a			; copy to c
(1)  425/     137 : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  426/     13A : FD 21 FB 18         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  427/     13E : B7                  		or	a
(1)  428/     13F : FA 51 01            		jp	m,.srch_del		; If negative, search for all with same ID
(1)  429/     142 : FE 03               		cp	MAX_SLOTS
(1)  430/     144 : D2 8B 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  431/     147 : CF                  		rst	8
(1)  432/     148 : CD 01 02            		call	.cmnd_rdslot
(1)  433/     14B : CD 5E 01            		call	.wrtto_del
(1)  434/     14E : C3 8B 00            		jp	.next_cmd
(1)  435/     151 :                     ; -1
(1)  436/     151 :                     .srch_del:
(1)  437/     151 : CD 13 02            		call	.srch_slot		; Read this slot
(1)  438/     154 : FE FF               		cp	-1
(1)  439/     156 : CA 8B 00            		jp	z,.next_cmd		; if -1, exit.
(1)  440/     159 : CD 5E 01            		call	.wrtto_del
(1)  441/     15C : 18 F3               		jr	.srch_del
(1)  442/     15E :                     .wrtto_del:
(1)  443/     15E : CB 7E               		bit	7,(hl)			; Slot is active?
(1)  444/     160 : C8                  		ret	z
(1)  445/     161 : CB 79               		bit	7,c			; seq is -1? (lazy bit check)
(1)  446/     163 : 20 05               		jr	nz,.del_all
(1)  447/     165 : DD 7E 01            		ld	a,(ix+seq_Num)
(1)  448/     168 : B9                  		cp	c			; Is this the same seq?
(1)  449/     169 : C0                  		ret	nz			; Return if not.
(1)  450/     16A :                     .del_all:
(1)  451/     16A : 36 FF               		ld	(hl),-1			; stop channel and clear slot
(1)  452/     16C : 23                  		inc	hl
(1)  453/     16D : 36 FF               		ld	(hl),-1			; Reset seqId
(1)  454/     16F : CF                  		rst	8
(1)  455/     170 : C9                  		ret
(1)  456/     171 :                     
(1)  457/     171 :                     ; --------------------------------------------------------
(1)  458/     171 :                     ; Command 05h:
(1)  459/     171 :                     ;
(1)  460/     171 :                     ; Fade volume (FadeIn/FadeOut)
(1)  461/     171 :                     ;
(1)  462/     171 :                     ; Arguments:
(1)  463/     171 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  464/     171 :                     ; --------------------------------------------------------
(1)  465/     171 :                     
(1)  466/     171 :                     .cmnd_5:
(1)  467/     171 : CD AE 00            		call	.grab_arg		; d1: Master volume
(1)  468/     174 : 4F                  		ld	c,a			; copy to c
(1)  469/     175 : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  470/     178 : FD 21 FB 18         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  471/     17C : B7                  		or	a
(1)  472/     17D : FA 8F 01            		jp	m,.srch_fvol		; if -1, search for all with same ID
(1)  473/     180 : FE 03               		cp	MAX_SLOTS
(1)  474/     182 : D2 8B 00            		jp	nc,.next_cmd		; Exit If maxed out slots
(1)  475/     185 : CF                  		rst	8
(1)  476/     186 : CD 01 02            		call	.cmnd_rdslot
(1)  477/     189 : CD 9C 01            		call	.wrtto_fvol
(1)  478/     18C : C3 8B 00            		jp	.next_cmd
(1)  479/     18F :                     ; -1
(1)  480/     18F :                     .srch_fvol:
(1)  481/     18F : CD 13 02            		call	.srch_slot
(1)  482/     192 : FE FF               		cp	-1
(1)  483/     194 : CA 8B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  484/     197 : CD 9C 01            		call	.wrtto_fvol
(1)  485/     19A : 18 F3               		jr	.srch_fvol
(1)  486/     19C :                     .wrtto_fvol:
(1)  487/     19C : CB 7E               		bit	7,(hl)			; Active?
(1)  488/     19E : C8                  		ret	z
(1)  489/     19F : CB DE               		set	3,(hl)			; Volume update flag
(1)  490/     1A1 : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  491/     1A4 : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  492/     1A8 : CF                  		rst	8
(1)  493/     1A9 : C9                  		ret
(1)  494/     1AA :                     
(1)  495/     1AA :                     ; --------------------------------------------------------
(1)  496/     1AA :                     ; Command 06h:
(1)  497/     1AA :                     ;
(1)  498/     1AA :                     ; Set track's master volume
(1)  499/     1AA :                     ;
(1)  500/     1AA :                     ; Arguments:
(1)  501/     1AA :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  502/     1AA :                     ; --------------------------------------------------------
(1)  503/     1AA :                     
(1)  504/     1AA :                     .cmnd_6:
(1)  505/     1AA : CD AE 00            		call	.grab_arg		; d1: Master volume
(1)  506/     1AD : 4F                  		ld	c,a			; copy to c
(1)  507/     1AE : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  508/     1B1 : FD 21 FB 18         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  509/     1B5 : B7                  		or	a
(1)  510/     1B6 : FA C8 01            		jp	m,.srch_vol		; if -1, search for all with same ID
(1)  511/     1B9 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  512/     1BB : D2 8B 00            		jp	nc,.next_cmd
(1)  513/     1BE : CF                  		rst	8
(1)  514/     1BF : CD 01 02            		call	.cmnd_rdslot
(1)  515/     1C2 : CD D5 01            		call	.wrtto_vol
(1)  516/     1C5 : C3 8B 00            		jp	.next_cmd
(1)  517/     1C8 :                     ; -1
(1)  518/     1C8 :                     .srch_vol:
(1)  519/     1C8 : CD 13 02            		call	.srch_slot
(1)  520/     1CB : FE FF               		cp	-1
(1)  521/     1CD : CA 8B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  522/     1D0 : CD D5 01            		call	.wrtto_vol
(1)  523/     1D3 : 18 F3               		jr	.srch_vol
(1)  524/     1D5 :                     .wrtto_vol:
(1)  525/     1D5 : CB DE               		set	3,(hl)			; Volume update flag
(1)  526/     1D7 : DD 71 0E            		ld	(ix+seq_VolMaster),c
(1)  527/     1DA : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  528/     1DD : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  529/     1E1 : CF                  		rst	8
(1)  530/     1E2 : C9                  		ret
(1)  531/     1E3 :                     
(1)  532/     1E3 :                     ; --------------------------------------------------------
(1)  533/     1E3 :                     ; Command 07h:
(1)  534/     1E3 :                     ;
(1)  535/     1E3 :                     ; Set global sub-beats
(1)  536/     1E3 :                     ; --------------------------------------------------------
(1)  537/     1E3 :                     
(1)  538/     1E3 :                     .cmnd_7:
(1)  539/     1E3 : CD AE 00            		call	.grab_arg		; d0.w: $00xx
(1)  540/     1E6 : 4F                  		ld	c,a
(1)  541/     1E7 : CD AE 00            		call	.grab_arg		; d0.w: $xx00
(1)  542/     1EA : 67                  		ld	h,a
(1)  543/     1EB : 69                  		ld	l,c
(1)  544/     1EC : 3A 88 1F            		ld	a,(palMode)		; PAL speed mode?
(1)  545/     1EF : B7                  		or	a
(1)  546/     1F0 : 28 04               		jr	z,.not_pal
(1)  547/     1F2 : 11 28 00            		ld	de,40			; Add 40
(1)  548/     1F5 : 19                  		add	hl,de
(1)  549/     1F6 :                     .not_pal:
(1)  550/     1F6 : 7C                  		ld	a,h
(1)  551/     1F7 : 32 34 00            		ld	(sbeatPtck+1),a
(1)  552/     1FA : 7D                  		ld	a,l
(1)  553/     1FB : 32 33 00            		ld	(sbeatPtck),a
(1)  554/     1FE : C3 8B 00            		jp	.next_cmd
(1)  555/     201 :                     
(1)  556/     201 :                     ; --------------------------------------------------------
(1)  557/     201 :                     ; Shared subs
(1)  558/     201 :                     ; --------------------------------------------------------
(1)  559/     201 :                     
(1)  560/     201 :                     .cmnd_rdslot:
(1)  561/     201 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  562/     202 : 87                  		add	a,a			; id*8
(1)  563/     203 : 87                  		add	a,a
(1)  564/     204 : 16 00               		ld	d,0
(1)  565/     206 : 5F                  		ld	e,a
(1)  566/     207 : FD 19               		add	iy,de
(1)  567/     209 : FD 6E 00            		ld	l,(iy)
(1)  568/     20C : FD 66 01            		ld	h,(iy+1)
(1)  569/     20F : E5                  		push	hl
(1)  570/     210 : DD E1               		pop	ix
(1)  571/     212 : C9                  		ret
(1)  572/     213 :                     
(1)  573/     213 :                     ; ------------------------------------------------
(1)  574/     213 :                     ; iy - nikona_BuffList
(1)  575/     213 :                     
(1)  576/     213 :                     .srch_slot:
(1)  577/     213 : FD 7E 00            		ld	a,(iy)
(1)  578/     216 : FE FF               		cp	-1			; End of list?
(1)  579/     218 : C8                  		ret	z
(1)  580/     219 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  581/     21C : 6F                  		ld	l,a
(1)  582/     21D : E5                  		push	hl
(1)  583/     21E : DD E1               		pop	ix
(1)  584/     220 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  585/     223 : FD 19               		add	iy,de			; Next entry for later
(1)  586/     225 : C9                  		ret
(1)  587/     226 :                     
(1)  588/     226 :                     ; ====================================================================
(1)  589/     226 :                     ; ----------------------------------------------------------------
(1)  590/     226 :                     ; MAIN Playback section
(1)  591/     226 :                     ; ----------------------------------------------------------------
(1)  592/     226 :                     
(1)  593/     226 :                     ; --------------------------------------------------------
(1)  594/     226 :                     ; Read mini-impulse-tracker data
(1)  595/     226 :                     ; --------------------------------------------------------
(1)  596/     226 :                     
(1)  597/     226 :                     upd_seq:
(1)  598/     226 : CD B7 10            		call	get_tick		; Check for tick flag
(1)  599/     229 : FD 21 0C 18         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1)  600/     22D : CD 3B 02            		call	.read_seq
(1)  601/     230 : FD 21 4B 18         		ld	iy,trkBuff_1
(1)  602/     234 : CD 3B 02            		call	.read_seq
(1)  603/     237 : FD 21 8A 18         		ld	iy,trkBuff_2
(1)  604/     23B :                     
(1)  605/     23B :                     ; ----------------------------------------
(1)  606/     23B :                     ; Read sequence
(1)  607/     23B :                     ;
(1)  608/     23B :                     ; iy - Current sequence buffer
(1)  609/     23B :                     ; ----------------------------------------
(1)  610/     23B :                     
(1)  611/     23B :                     .read_seq:
(1)  612/     23B : FD 46 00            		ld	b,(iy+seq_Status)	; b - Track status and settings
(1)  613/     23E : CB 78               		bit	7,b			; bit7: Track active?
(1)  614/     240 : C8                  		ret	z			; Return if not.
(1)  615/     241 : 78                  		ld	a,b
(1)  616/     242 : FE FF               		cp	-1			; Status is -1?
(1)  617/     244 : C8                  		ret	z			; then skip this
(1)  618/     245 : CF                  		rst	8
(1)  619/     246 :                     	; ----------------------------------------
(1)  620/     246 :                     	; Track volume changes
(1)  621/     246 : FD 6E 0F            		ld	l,(iy+seq_VolMaster+1)
(1)  622/     249 : FD 66 0E            		ld	h,(iy+seq_VolMaster)
(1)  623/     24C : FD 4E 18            		ld	c,(iy+seq_VolFdTarget)
(1)  624/     24F : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  625/     252 : 79                  		ld	a,c
(1)  626/     253 : BC                  		cp	h
(1)  627/     254 : 28 1E               		jr	z,.keep_vol
(1)  628/     256 : 30 06               		jr	nc,.fade_out
(1)  629/     258 : 11 80 FF            		ld	de,-80h
(1)  630/     25B : 19                  		add	hl,de
(1)  631/     25C : 18 0C               		jr	.too_much
(1)  632/     25E :                     .fade_out:
(1)  633/     25E : 19                  		add	hl,de
(1)  634/     25F : CF                  		rst	8
(1)  635/     260 : 7C                  		ld	a,h
(1)  636/     261 : B9                  		cp	c
(1)  637/     262 : 38 06               		jr	c,.too_much
(1)  638/     264 : 61                  		ld	h,c
(1)  639/     265 : 2E 00               		ld	l,0
(1)  640/     267 : FD 71 18            		ld	(iy+seq_VolFdTarget),c
(1)  641/     26A :                     .too_much:
(1)  642/     26A : FD CB 00 DE         		set	3,(iy+seq_Status)	; Volume update flag
(1)  643/     26E : FD 75 0F            		ld	(iy+seq_VolMaster+1),l
(1)  644/     271 : FD 74 0E            		ld	(iy+seq_VolMaster),h
(1)  645/     274 :                     .keep_vol:
(1)  646/     274 :                     	; ----------------------------------------
(1)  647/     274 : 3A F9 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  648/     277 : CB 40               		bit	0,b			; bit0: This seq uses Beats?
(1)  649/     279 : 28 03               		jr	z,.sfxmd
(1)  650/     27B : CB 4F               		bit	1,a			; BEAT passed?
(1)  651/     27D : C8                  		ret	z			; No BEAT.
(1)  652/     27E :                     .sfxmd:
(1)  653/     27E : CB 47               		bit	0,a			; TICK passed?
(1)  654/     280 : C8                  		ret	z			; No TICK.
(1)  655/     281 : CF                  		rst	8
(1)  656/     282 :                     	; ----------------------------------------
(1)  657/     282 :                     	; Start reading notes
(1)  658/     282 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  659/     284 : C4 0F 05            		call	nz,.first_fill
(1)  660/     287 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  661/     289 : C4 08 05            		call	nz,.effect_fill
(1)  662/     28C : FD 7E 12            		ld	a,(iy+seq_TickTmr)	; TICK ex-timer for this seq
(1)  663/     28F : 3D                  		dec	a
(1)  664/     290 : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  665/     293 : B7                  		or	a			; Check a
(1)  666/     294 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  667/     295 : CF                  		rst	8
(1)  668/     296 : FD 7E 03            		ld	a,(iy+seq_TickSet)	; Set new tick timer
(1)  669/     299 : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  670/     29C :                     	; ----------------------------------------
(1)  671/     29C : FD 4E 0C            		ld	c,(iy+seq_Rows)		; bc - Set row counter
(1)  672/     29F : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  673/     2A2 : 79                  		ld	a,c			; Check rowcount
(1)  674/     2A3 : B0                  		or	b
(1)  675/     2A4 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  676/     2A6 :                     	; ----------------------------------------
(1)  677/     2A6 :                     	; Read next block
(1)  678/     2A6 : CF                  		rst	8
(1)  679/     2A7 : FD 7E 13            		ld	a,(iy+seq_currBlk)	; Next block
(1)  680/     2AA : 3C                  		inc	a
(1)  681/     2AB : FD 77 13            		ld 	(iy+seq_currBlk),a
(1)  682/     2AE : CD 2B 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  683/     2B1 : FE FF               		cp	-1			; Track finished?
(1)  684/     2B3 : C8                  		ret	z
(1)  685/     2B4 : FD 4E 0C            		ld	c,(iy+seq_Rows)		; Set new rowcount to bc
(1)  686/     2B7 : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  687/     2BA :                     	; ----------------------------------------
(1)  688/     2BA :                     	; bc - Row count
(1)  689/     2BA :                     .row_active:
(1)  690/     2BA : CF                  		rst	8
(1)  691/     2BB : FD 6E 0A            		ld	l,(iy+seq_Read)		; hl - CURRENT pattern to read
(1)  692/     2BE : FD 66 0B            		ld	h,(iy+((seq_Read+1)))
(1)  693/     2C1 :                     
(1)  694/     2C1 :                     ; --------------------------------
(1)  695/     2C1 :                     ; Main read-loop
(1)  696/     2C1 :                     ; --------------------------------
(1)  697/     2C1 :                     
(1)  698/     2C1 :                     .next_note:
(1)  699/     2C1 : FD 7E 11            		ld	a,(iy+seq_rowPause)	; Check row timer
(1)  700/     2C4 : B7                  		or	a
(1)  701/     2C5 : 20 16               		jr	nz,.dec_row
(1)  702/     2C7 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  703/     2C8 : B7                  		or	a
(1)  704/     2C9 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  705/     2CB : FA E8 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  706/     2CE : FD 77 11            		ld	(iy+seq_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  707/     2D1 :                     
(1)  708/     2D1 :                     ; --------------------------------
(1)  709/     2D1 :                     ; Exit
(1)  710/     2D1 :                     ; --------------------------------
(1)  711/     2D1 :                     
(1)  712/     2D1 :                     .exit:
(1)  713/     2D1 : CF                  		rst	8
(1)  714/     2D2 : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  715/     2D5 : FD 75 0A            		ld	(iy+seq_Read),l		; Update READ location
(1)  716/     2D8 : FD 74 0B            		ld	(iy+((seq_Read+1))),h
(1)  717/     2DB : 18 03               		jr	.dec_row_e
(1)  718/     2DD :                     .dec_row:
(1)  719/     2DD : FD 35 11            		dec	(iy+seq_rowPause)	; Decrement row-pause timer
(1)  720/     2E0 :                     .dec_row_e:
(1)  721/     2E0 : 0B                  		dec	bc			; Decrement rowcount
(1)  722/     2E1 : FD 71 0C            		ld	(iy+seq_Rows),c		; Write last row to memory
(1)  723/     2E4 : FD 70 0D            		ld	(iy+(seq_Rows+1)),b
(1)  724/     2E7 : C9                  		ret	; Exit sequence
(1)  725/     2E8 :                     
(1)  726/     2E8 :                     ; --------------------------------
(1)  727/     2E8 :                     ; New note request
(1)  728/     2E8 :                     ;
(1)  729/     2E8 :                     ; a - %1tcccccc
(1)  730/     2E8 :                     ;   | t - next byte has new type
(1)  731/     2E8 :                     ;   | c - channel
(1)  732/     2E8 :                     ; --------------------------------
(1)  733/     2E8 :                     
(1)  734/     2E8 :                     .has_note:
(1)  735/     2E8 : CF                  		rst	8
(1)  736/     2E9 : C5                  		push	bc			; Save rowcount
(1)  737/     2EA : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  738/     2EB : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  739/     2EE : E5                  		push	hl			; Save hl patt pos
(1)  740/     2EF : FD E5               		push	iy			; copy iy to hl
(1)  741/     2F1 : E1                  		pop	hl
(1)  742/     2F2 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels playback list
(1)  743/     2F6 : 11 25 00            		ld	de,seq_ChnIndx		; <-- this clears d
(1)  744/     2F9 : CF                  		rst	8
(1)  745/     2FA : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  746/     2FB : 79                  		ld	a,c			; Get patt note index
(1)  747/     2FC : E6 1F               		and	00011111b		; Filter bits
(1)  748/     2FE : 5F                  		ld	e,a			; Save as e
(1)  749/     2FF : 19                  		add	hl,de			; Increment more by this pos
(1)  750/     300 :                     	; hl - trkChnls+index
(1)  751/     300 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  752/     301 : B7                  		or	a
(1)  753/     302 : 28 15               		jr	z,.srch_new		; If == 0, search new one
(1)  754/     304 : E6 1F               		and	00011111b		; If already taken, read that channel
(1)  755/     306 : 87                  		add	a,a
(1)  756/     307 : 87                  		add	a,a
(1)  757/     308 : 87                  		add	a,a
(1)  758/     309 : 5F                  		ld	e,a
(1)  759/     30A : DD 19               		add	ix,de
(1)  760/     30C : DD 7E 00            		ld	a,(ix)			; Check status (chnl_Flags)
(1)  761/     30F : B7                  		or	a
(1)  762/     310 : F2 15 03            		jp	p,.srch_reroll
(1)  763/     313 : 18 31               		jr	.cont_chnl
(1)  764/     315 :                     ; Make NEW channel
(1)  765/     315 :                     ; ix - channel list start
(1)  766/     315 :                     .srch_reroll:
(1)  767/     315 : DD 36 00 00         		ld	(ix),0
(1)  768/     319 :                     .srch_new:
(1)  769/     319 : CF                  		rst	8
(1)  770/     31A : 06 1F               		ld	b,MAX_TRKCHN-1		; Max channels to check - 1
(1)  771/     31C : 16 00               		ld	d,0			; Reset out index
(1)  772/     31E :                     .next_chnl:
(1)  773/     31E : DD 7E 00            		ld	a,(ix)			; Read chnl_Flags
(1)  774/     321 : B7                  		or	a			; If plus, track channel is free
(1)  775/     322 : F2 3C 03            		jp	p,.chnl_free
(1)  776/     325 : DD 23               		inc	ix			; Search next channel, increment by 8
(1)  777/     327 : DD 23               		inc	ix
(1)  778/     329 : DD 23               		inc	ix
(1)  779/     32B : CF                  		rst	8
(1)  780/     32C : DD 23               		inc	ix
(1)  781/     32E : DD 23               		inc	ix
(1)  782/     330 : DD 23               		inc	ix
(1)  783/     332 : DD 23               		inc	ix
(1)  784/     334 : DD 23               		inc	ix
(1)  785/     336 : CF                  		rst	8
(1)  786/     337 : 14                  		inc	d			; Increment out index
(1)  787/     338 : 00                  		nop
(1)  788/     339 : 00                  		nop
(1)  789/     33A : 10 E2               		djnz	.next_chnl
(1)  790/     33C :                     .chnl_free:
(1)  791/     33C : 7A                  		ld	a,d			; Read index we got
(1)  792/     33D : E6 1F               		and	00011111b		; Filter bits
(1)  793/     33F : F6 80               		or	10000000b		; and set as used
(1)  794/     341 : 77                  		ld	(hl),a			; Write index slot
(1)  795/     342 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  796/     346 :                     .cont_chnl:
(1)  797/     346 : E1                  		pop	hl			; Recover patt pos
(1)  798/     347 : CF                  		rst	8
(1)  799/     348 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  800/     34B :                     
(1)  801/     34B :                     	; ix - Current channel
(1)  802/     34B :                     	; c  - Channel and type bits (7-6)
(1)  803/     34B :                     	; b  - Flags: evinEVIN
(1)  804/     34B :                     	;      E-effect/V-volume/I-instrument/N-note
(1)  805/     34B :                     	;      evin: byte is already stored on track-channel buffer
(1)  806/     34B :                     	;      EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  807/     34B : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  808/     34D : 28 08               		jr	z,.old_type
(1)  809/     34F : 7E                  		ld	a,(hl)
(1)  810/     350 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  811/     353 : 47                  		ld	b,a			; Set to b
(1)  812/     354 : CD F3 03            		call	.inc_cpatt		; Next patt pos
(1)  813/     357 :                     .old_type:
(1)  814/     357 : CF                  		rst	8
(1)  815/     358 : CB 40               		bit	0,b			; New NOTE?
(1)  816/     35A : 28 07               		jr	z,.no_note
(1)  817/     35C : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  818/     35D : DD 77 02            		ld	(ix+chnl_Note),a
(1)  819/     360 : CD F3 03            		call	.inc_cpatt
(1)  820/     363 :                     .no_note:
(1)  821/     363 : CB 48               		bit	1,b			; New INS?
(1)  822/     365 : 28 07               		jr	z,.no_ins
(1)  823/     367 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  824/     368 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  825/     36B : CD F3 03            		call	.inc_cpatt
(1)  826/     36E :                     .no_ins:
(1)  827/     36E : CF                  		rst	8
(1)  828/     36F : CB 50               		bit	2,b			; New VOL?
(1)  829/     371 : 28 07               		jr	z,.no_vol
(1)  830/     373 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  831/     374 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  832/     377 : CD F3 03            		call	.inc_cpatt
(1)  833/     37A :                     .no_vol:
(1)  834/     37A : CB 58               		bit	3,b			; New EFFECT?
(1)  835/     37C : 28 0F               		jr	z,.no_eff
(1)  836/     37E : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  837/     37F : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  838/     382 : CD F3 03            		call	.inc_cpatt
(1)  839/     385 : CF                  		rst	8
(1)  840/     386 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  841/     387 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  842/     38A : CD F3 03            		call	.inc_cpatt
(1)  843/     38D :                     .no_eff:
(1)  844/     38D : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  845/     38E : 0F                  		rrca
(1)  846/     38F : 0F                  		rrca
(1)  847/     390 : 0F                  		rrca
(1)  848/     391 : 0F                  		rrca
(1)  849/     392 : E6 0F               		and	00001111b		; Filter bits
(1)  850/     394 : 4F                  		ld	c,a			; Save as c
(1)  851/     395 : 78                  		ld	a,b
(1)  852/     396 : E6 0F               		and	00001111b		; Filter again
(1)  853/     398 : B1                  		or	c			; Merge c with a
(1)  854/     399 : CF                  		rst	8
(1)  855/     39A : 4F                  		ld	c,a			; Save bit flags
(1)  856/     39B : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  857/     39E : B1                  		or	c
(1)  858/     39F : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  859/     3A2 : C1                  		pop	bc			; Restore rowcount
(1)  860/     3A3 :                     	; ----------------------------------------
(1)  861/     3A3 :                     	; Effects that affect internal playback
(1)  862/     3A3 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  863/     3A6 : E6 08               		and	1000b			; ONLY check for the EFFECT bit
(1)  864/     3A8 : CA C1 02            		jp	z,.next_note
(1)  865/     3AB : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  866/     3AE : B7                  		or	a			; 00h = invalid effect
(1)  867/     3AF : CA C1 02            		jp	z,.next_note
(1)  868/     3B2 : FE 01               		cp	1			; Effect A: Tick set
(1)  869/     3B4 : 28 0B               		jr	z,.eff_A
(1)  870/     3B6 : FE 02               		cp	2			; Effect B: Position Jump
(1)  871/     3B8 : 28 18               		jr	z,.eff_B
(1)  872/     3BA : FE 03               		cp	3			; Effect C: Pattern break
(1)  873/     3BC : 28 32               		jr	z,.eff_C
(1)  874/     3BE : C3 C1 02            		jp	.next_note
(1)  875/     3C1 :                     
(1)  876/     3C1 :                     ; ----------------------------------------
(1)  877/     3C1 :                     ; Effect A: Set ticks
(1)  878/     3C1 :                     ; ----------------------------------------
(1)  879/     3C1 :                     
(1)  880/     3C1 :                     .eff_A:
(1)  881/     3C1 : CF                  		rst	8
(1)  882/     3C2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  883/     3C5 : FD 73 03            		ld	(iy+seq_TickSet),e	; set for both Set and Timer.
(1)  884/     3C8 : FD 73 12            		ld	(iy+seq_TickTmr),e
(1)  885/     3CB : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  886/     3CF : C3 C1 02            		jp	.next_note
(1)  887/     3D2 :                     
(1)  888/     3D2 :                     ; ----------------------------------------
(1)  889/     3D2 :                     ; Effect B: jump to a new block
(1)  890/     3D2 :                     ; ----------------------------------------
(1)  891/     3D2 :                     
(1)  892/     3D2 :                     .eff_B:
(1)  893/     3D2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  894/     3D5 : FD 73 13            		ld 	(iy+seq_currBlk),e
(1)  895/     3D8 : CF                  		rst	8
(1)  896/     3D9 : FD 36 11 00         		ld	(iy+seq_rowPause),0	; Reset rowpause
(1)  897/     3DD : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  898/     3E1 : FD CB 00 EE         		set	5,(iy+seq_Status)	; set fill-from-effect flag on exit
(1)  899/     3E5 : 3E 80               		ld	a,80h
(1)  900/     3E7 : FD 77 15            		ld	(iy+seq_BankHeads),a
(1)  901/     3EA : FD 77 16            		ld	(iy+seq_BankBlk),a
(1)  902/     3ED : C3 C1 02            		jp	.next_note
(1)  903/     3F0 :                     
(1)  904/     3F0 :                     ; ----------------------------------------
(1)  905/     3F0 :                     ; Effect C: Pattern break/exit
(1)  906/     3F0 :                     ;
(1)  907/     3F0 :                     ; Only used on SFX, arguments ignored.
(1)  908/     3F0 :                     ; ----------------------------------------
(1)  909/     3F0 :                     
(1)  910/     3F0 :                     .eff_C:
(1)  911/     3F0 : C3 02 05            		jp	.track_end
(1)  912/     3F3 :                     
(1)  913/     3F3 :                     ; ----------------------------------------
(1)  914/     3F3 :                     ; Increment the current patt position
(1)  915/     3F3 :                     ; and recieve more data
(1)  916/     3F3 :                     ;
(1)  917/     3F3 :                     ; Breaks:
(1)  918/     3F3 :                     ; a,e
(1)  919/     3F3 :                     ; ----------------------------------------
(1)  920/     3F3 :                     
(1)  921/     3F3 :                     .inc_cpatt:
(1)  922/     3F3 : FD 5E 08            		ld	e,(iy+seq_Cach)		; Read curret cache LSB
(1)  923/     3F6 : 7D                  		ld	a,l
(1)  924/     3F7 : 3C                  		inc	a
(1)  925/     3F8 : E6 1F               		and	MAX_RCACH-1
(1)  926/     3FA : FE 1E               		cp	MAX_RCACH-2		; ALMOST RAN OUT of bytes?
(1)  927/     3FC : 30 03               		jr	nc,.ran_out
(1)  928/     3FE : B3                  		or	e
(1)  929/     3FF : 6F                  		ld	l,a
(1)  930/     400 : C9                  		ret
(1)  931/     401 :                     .ran_out:
(1)  932/     401 : FD 6E 08            		ld	l,(iy+seq_Cach)
(1)  933/     404 : E5                  		push	hl
(1)  934/     405 : C5                  		push	bc
(1)  935/     406 : 06 00               		ld	b,0
(1)  936/     408 : 4F                  		ld	c,a
(1)  937/     409 : CF                  		rst	8
(1)  938/     40A : 5D                  		ld	e,l
(1)  939/     40B : 54                  		ld	d,h
(1)  940/     40C : FD 6E 19            		ld	l,(iy+seq_RomPattRead)
(1)  941/     40F : FD 66 1A            		ld	h,(iy+(seq_RomPattRead+1))
(1)  942/     412 : FD 7E 1B            		ld	a,(iy+(seq_RomPattRead+2))
(1)  943/     415 : 09                  		add	hl,bc
(1)  944/     416 : CE 00               		adc	a,0
(1)  945/     418 : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1)  946/     41B : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1)  947/     41E : CF                  		rst	8
(1)  948/     41F : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1)  949/     422 : 01 20 00            		ld	bc,MAX_RCACH
(1)  950/     425 : CD D8 10            		call	readRom		; *** ROM ACCESS ***
(1)  951/     428 : C1                  		pop	bc
(1)  952/     429 : E1                  		pop	hl
(1)  953/     42A : C9                  		ret
(1)  954/     42B :                     
(1)  955/     42B :                     ; ----------------------------------------
(1)  956/     42B :                     ; Set track pattern by seq_currBlk
(1)  957/     42B :                     ; ----------------------------------------
(1)  958/     42B :                     
(1)  959/     42B :                     .set_track:
(1)  960/     42B :                     	; ----------------------------------------
(1)  961/     42B :                     	; Make block id list
(1)  962/     42B : FD 5E 04            		ld	e,(iy+seq_Blocks)
(1)  963/     42E : FD 56 05            		ld	d,(iy+(seq_Blocks+1))
(1)  964/     431 : FD 7E 13            		ld	a,(iy+seq_currBlk)
(1)  965/     434 : 4F                  		ld	c,a
(1)  966/     435 : C5                  		push	bc
(1)  967/     436 : D5                  		push	de
(1)  968/     437 : CF                  		rst	8
(1)  969/     438 : 0F                  		rrca
(1)  970/     439 : 0F                  		rrca
(1)  971/     43A : 0F                  		rrca
(1)  972/     43B : E6 1F               		and	00011111b
(1)  973/     43D : FD 4E 16            		ld	c,(iy+seq_BankBlk)	; c - current block bank
(1)  974/     440 : CB 79               		bit	7,c			; First time?
(1)  975/     442 : 20 03               		jr	nz,.first_blk
(1)  976/     444 : B9                  		cp	c			; SAME instrument data?
(1)  977/     445 : 28 1C               		jr	z,.keep_blk
(1)  978/     447 :                     .first_blk:
(1)  979/     447 : CF                  		rst	8
(1)  980/     448 : FD 77 16            		ld	(iy+seq_BankBlk),a	; Save inst number
(1)  981/     44B : 07                  		rlca
(1)  982/     44C : 07                  		rlca
(1)  983/     44D : 07                  		rlca
(1)  984/     44E : 06 00               		ld	b,0
(1)  985/     450 : 4F                  		ld	c,a
(1)  986/     451 : FD 6E 22            		ld	l,(iy+seq_RomBlks)
(1)  987/     454 : FD 66 23            		ld	h,(iy+(seq_RomBlks+1))
(1)  988/     457 : FD 7E 24            		ld	a,(iy+(seq_RomBlks+2))
(1)  989/     45A : 09                  		add	hl,bc
(1)  990/     45B : CE 00               		adc	a,0
(1)  991/     45D : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  992/     460 : CD D8 10            		call	readRom			; ** ROM ACCESS **
(1)  993/     463 :                     .keep_blk:
(1)  994/     463 : E1                  		pop	hl
(1)  995/     464 : C1                  		pop	bc
(1)  996/     465 : 79                  		ld	a,c
(1)  997/     466 : E6 07               		and	00000111b
(1)  998/     468 : CF                  		rst	8
(1)  999/     469 : 16 00               		ld	d,0
(1) 1000/     46B : 5F                  		ld	e,a
(1) 1001/     46C : 19                  		add	hl,de
(1) 1002/     46D :                     	; ----------------------------------------
(1) 1003/     46D : 7E                  		ld	a,(hl)			; Read block byte
(1) 1004/     46E : FE FF               		cp	-1			; If block == -1, end track
(1) 1005/     470 : CA 02 05            		jp	z,.track_end
(1) 1006/     473 : CF                  		rst	8
(1) 1007/     474 :                     	; ----------------------------------------
(1) 1008/     474 : FD 5E 06            		ld	e,(iy+seq_Patt)		; Read CACHE patt heads
(1) 1009/     477 : FD 56 07            		ld	d,(iy+(seq_Patt+1))
(1) 1010/     47A : 4F                  		ld	c,a
(1) 1011/     47B : D5                  		push	de
(1) 1012/     47C : C5                  		push	bc
(1) 1013/     47D : CF                  		rst	8
(1) 1014/     47E : 0F                  		rrca
(1) 1015/     47F : 0F                  		rrca
(1) 1016/     480 : 0F                  		rrca
(1) 1017/     481 : E6 1F               		and	00011111b
(1) 1018/     483 : FD 4E 15            		ld	c,(iy+seq_BankHeads)	; c - current intrument loaded
(1) 1019/     486 : CB 79               		bit	7,c			; First time?
(1) 1020/     488 : 20 03               		jr	nz,.first_head
(1) 1021/     48A : B9                  		cp	c			; SAME instrument data?
(1) 1022/     48B : 28 26               		jr	z,.keep_it
(1) 1023/     48D :                     .first_head:
(1) 1024/     48D : CF                  		rst	8
(1) 1025/     48E : FD 77 15            		ld	(iy+seq_BankHeads),a	; Save inst number
(1) 1026/     491 : 47                  		ld	b,a
(1) 1027/     492 : 0F                  		rrca
(1) 1028/     493 : 0F                  		rrca
(1) 1029/     494 : 0F                  		rrca
(1) 1030/     495 : E6 E0               		and	11100000b
(1) 1031/     497 : 4F                  		ld	c,a
(1) 1032/     498 : 78                  		ld	a,b
(1) 1033/     499 : 0F                  		rrca
(1) 1034/     49A : 0F                  		rrca
(1) 1035/     49B : 0F                  		rrca
(1) 1036/     49C : E6 03               		and	00000011b
(1) 1037/     49E : 47                  		ld	b,a
(1) 1038/     49F :                     	; ----------------------------------------
(1) 1039/     49F : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1040/     4A2 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1041/     4A5 : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1042/     4A8 : E7                  		rst	20h
(1) 1043/     4A9 : CF                  		rst	8
(1) 1044/     4AA : 09                  		add	hl,bc
(1) 1045/     4AB : CE 00               		adc	a,0
(1) 1046/     4AD : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1047/     4B0 : CD D8 10            		call	readRom			; ** ROM ACCESS **
(1) 1048/     4B3 :                     .keep_it:
(1) 1049/     4B3 : C1                  		pop	bc
(1) 1050/     4B4 : 79                  		ld	a,c
(1) 1051/     4B5 : E6 07               		and	00000111b
(1) 1052/     4B7 : 87                  		add	a,a
(1) 1053/     4B8 : 87                  		add	a,a
(1) 1054/     4B9 : 57                  		ld	d,a
(1) 1055/     4BA : CF                  		rst	8
(1) 1056/     4BB : E6 FC               		and	11111100b
(1) 1057/     4BD : 5F                  		ld	e,a
(1) 1058/     4BE : 7A                  		ld	a,d
(1) 1059/     4BF : E6 03               		and	00000011b
(1) 1060/     4C1 : 57                  		ld	d,a
(1) 1061/     4C2 : E1                  		pop	hl
(1) 1062/     4C3 : 19                  		add	hl,de
(1) 1063/     4C4 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1064/     4C5 : 23                  		inc	hl
(1) 1065/     4C6 : CF                  		rst	8
(1) 1066/     4C7 : 56                  		ld	d,(hl)
(1) 1067/     4C8 : 23                  		inc	hl
(1) 1068/     4C9 : 7E                  		ld	a,(hl)
(1) 1069/     4CA : 23                  		inc	hl
(1) 1070/     4CB : FD 77 0C            		ld	(iy+seq_Rows),a
(1) 1071/     4CE : 7E                  		ld	a,(hl)
(1) 1072/     4CF : 23                  		inc	hl
(1) 1073/     4D0 : FD 77 0D            		ld	(iy+(seq_Rows+1)),a
(1) 1074/     4D3 : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1075/     4D6 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1076/     4D9 : CF                  		rst	8
(1) 1077/     4DA : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1078/     4DD : 19                  		add	hl,de
(1) 1079/     4DE : CE 00               		adc	a,0
(1) 1080/     4E0 : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1) 1081/     4E3 : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1) 1082/     4E6 : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1) 1083/     4E9 : FD 5E 08            		ld	e,(iy+seq_Cach)
(1) 1084/     4EC : FD 56 09            		ld	d,(iy+(seq_Cach+1))
(1) 1085/     4EF : FD 73 0A            		ld	(iy+seq_Read),e
(1) 1086/     4F2 : FD 72 0B            		ld	(iy+(seq_Read+1)),d
(1) 1087/     4F5 : 0E 20               		ld	c,MAX_RCACH
(1) 1088/     4F7 : FD 36 10 00         		ld	(iy+seq_cachHalf),0
(1) 1089/     4FB : FD 36 11 00         		ld	(iy+seq_rowPause),0
(1) 1090/     4FF : C3 D8 10            		jp	readRom			; ** ROM access **
(1) 1091/     502 :                     
(1) 1092/     502 :                     ; ----------------------------------------
(1) 1093/     502 :                     ; **JUMP ONLY**
(1) 1094/     502 :                     .track_end:
(1) 1095/     502 : CF                  		rst	8
(1) 1096/     503 : FD 36 00 FF         		ld	(iy+seq_Status),-1	; Disable track slot
(1) 1097/     507 : C9                  		ret
(1) 1098/     508 :                     
(1) 1099/     508 :                     ; ----------------------------------------
(1) 1100/     508 :                     ; Track refill
(1) 1101/     508 :                     ; ----------------------------------------
(1) 1102/     508 :                     
(1) 1103/     508 :                     .effect_fill:
(1) 1104/     508 : FD CB 00 AE         		res	5,(iy+seq_Status)	; Reset refill-from-effect flag
(1) 1105/     50C : C3 2B 04            		jp	.set_track
(1) 1106/     50F :                     
(1) 1107/     50F :                     ; ----------------------------------------
(1) 1108/     50F :                     ; Track Start/Reset
(1) 1109/     50F :                     ;
(1) 1110/     50F :                     ; iy - Track buffer
(1) 1111/     50F :                     ; ----------------------------------------
(1) 1112/     50F :                     
(1) 1113/     50F :                     .first_fill:
(1) 1114/     50F : FD CB 00 B6         		res	6,(iy+seq_Status)	; Clear FILL flag
(1) 1115/     513 : CD B0 05            		call	track_out
(1) 1116/     516 : FD 36 12 01         		ld	(iy+seq_TickTmr),1	; Reset tick timer
(1) 1117/     51A : FD 7E 02            		ld	a,(iy+seq_SetBlk)	; Make start block as current block
(1) 1118/     51D : CF                  		rst	8
(1) 1119/     51E : FD 77 13            		ld 	(iy+seq_currBlk),a	; block
(1) 1120/     521 : FD 7E 01            		ld	a,(iy+seq_Num)
(1) 1121/     524 : FE FF               		cp	-1			; Sequence -1?
(1) 1122/     526 : C8                  		ret	z
(1) 1123/     527 : 87                  		add	a,a
(1) 1124/     528 : 87                  		add	a,a
(1) 1125/     529 : 16 00               		ld	d,0
(1) 1126/     52B : 5F                  		ld	e,a
(1) 1127/     52C : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1128/     52F : 23                  		inc	hl
(1) 1129/     530 : 7E                  		ld	a,(hl)			; $00xx0000
(1) 1130/     531 : 23                  		inc	hl
(1) 1131/     532 : 4E                  		ld	c,(hl)			; $0000xx00
(1) 1132/     533 : 23                  		inc	hl
(1) 1133/     534 : 6E                  		ld	l,(hl)			; $000000xx
(1) 1134/     535 : CF                  		rst	8
(1) 1135/     536 : 61                  		ld	h,c
(1) 1136/     537 : 19                  		add	hl,de
(1) 1137/     538 : CE 00               		adc	a,0
(1) 1138/     53A : 11 84 17            		ld	de,trkInfoCach
(1) 1139/     53D : D5                  		push	de
(1) 1140/     53E : 01 04 00            		ld	bc,4
(1) 1141/     541 : CD D8 10            		call	readRom			; *** ROM ACCESS ***
(1) 1142/     544 : E1                  		pop	hl
(1) 1143/     545 : 7E                  		ld	a,(hl)
(1) 1144/     546 : 23                  		inc	hl
(1) 1145/     547 : CB 7F               		bit	7,a
(1) 1146/     549 : 28 04               		jr	z,.no_glbl
(1) 1147/     54B : FD CB 00 C6         		set	0,(iy+seq_Status)	; Enable GLOBAL sub-beats
(1) 1148/     54F :                     .no_glbl:
(1) 1149/     54F : CF                  		rst	8
(1) 1150/     550 : E6 7F               		and	01111111b
(1) 1151/     552 : FD 77 03            		ld	(iy+seq_TickSet),a
(1) 1152/     555 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1153/     556 : 23                  		inc	hl			; grab it's pointers
(1) 1154/     557 : 4E                  		ld	c,(hl)
(1) 1155/     558 : 23                  		inc	hl
(1) 1156/     559 : 6E                  		ld	l,(hl)
(1) 1157/     55A : 61                  		ld	h,c
(1) 1158/     55B : 11 DD 18            		ld	de,headerOut
(1) 1159/     55E : 0E 0E               		ld	c,0Eh
(1) 1160/     560 : CD D8 10            		call	readRom		; ** ROM access **
(1) 1161/     563 :                     
(1) 1162/     563 :                     	; headerOut:
(1) 1163/     563 :                     	; dc.w numof_chnls
(1) 1164/     563 :                     	; dc.l .blk,.pat,.ins
(1) 1165/     563 :                     	; *** READING BACKWARDS
(1) 1166/     563 : DD 21 EA 18         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1167/     567 : CD 9D 05            		call	.grab_rhead		; Instrument data
(1) 1168/     56A : FD 75 1F            		ld	(iy+seq_RomInst),l
(1) 1169/     56D : FD 74 20            		ld	(iy+(seq_RomInst+1)),h
(1) 1170/     570 : FD 70 21            		ld	(iy+(seq_RomInst+2)),b
(1) 1171/     573 : CD 9D 05            		call	.grab_rhead		; Pattern heads
(1) 1172/     576 : FD 75 1C            		ld	(iy+seq_RomPatt),l	; Save ROM patt base
(1) 1173/     579 : FD 74 1D            		ld	(iy+(seq_RomPatt+1)),h
(1) 1174/     57C : FD 70 1E            		ld	(iy+(seq_RomPatt+2)),b
(1) 1175/     57F : FD 36 15 80         		ld	(iy+seq_BankHeads),80h	; Reset pattern banking
(1) 1176/     583 : CD 9D 05            		call	.grab_rhead		; Block data
(1) 1177/     586 : FD 75 22            		ld	(iy+seq_RomBlks),l	; Save ROM patt base
(1) 1178/     589 : FD 74 23            		ld	(iy+(seq_RomBlks+1)),h
(1) 1179/     58C : FD 70 24            		ld	(iy+(seq_RomBlks+2)),b
(1) 1180/     58F : FD 36 16 80         		ld	(iy+seq_BankBlk),80h	; Reset pattern banking
(1) 1181/     593 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1182/     596 : FD 77 17            		ld	(iy+seq_MaxChnl),a
(1) 1183/     599 : CF                  		rst	8
(1) 1184/     59A : C3 2B 04            		jp	.set_track
(1) 1185/     59D :                     
(1) 1186/     59D :                     ; Read 68K pointer:
(1) 1187/     59D :                     ; hl - 00xxxx
(1) 1188/     59D :                     ;  b - xx0000
(1) 1189/     59D :                     .grab_rhead:
(1) 1190/     59D : DD 6E 00            		ld	l,(ix)
(1) 1191/     5A0 : DD 2B               		dec	ix
(1) 1192/     5A2 : DD 66 00            		ld	h,(ix)
(1) 1193/     5A5 : CF                  		rst	8
(1) 1194/     5A6 : DD 2B               		dec	ix
(1) 1195/     5A8 : DD 46 00            		ld	b,(ix)
(1) 1196/     5AB : DD 2B               		dec	ix
(1) 1197/     5AD :                     ; 		ld	c,(ix)
(1) 1198/     5AD : DD 2B               		dec	ix
(1) 1199/     5AF : C9                  		ret
(1) 1200/     5B0 :                     
(1) 1201/     5B0 :                     ; ----------------------------------------
(1) 1202/     5B0 :                     ; Reset tracker channels
(1) 1203/     5B0 :                     ;
(1) 1204/     5B0 :                     ; iy - Track buffer
(1) 1205/     5B0 :                     ;
(1) 1206/     5B0 :                     ; Breaks:
(1) 1207/     5B0 :                     ; b ,de,hl,ix
(1) 1208/     5B0 :                     ; ----------------------------------------
(1) 1209/     5B0 :                     
(1) 1210/     5B0 :                     track_out:
(1) 1211/     5B0 : FD E5               		push	iy
(1) 1212/     5B2 : E1                  		pop	hl
(1) 1213/     5B3 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1214/     5B7 : CF                  		rst	8
(1) 1215/     5B8 : 11 25 00            		ld	de,seq_ChnIndx
(1) 1216/     5BB : 19                  		add	hl,de
(1) 1217/     5BC : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1218/     5BF : B7                  		or	a
(1) 1219/     5C0 : 20 02               		jr	nz,.valid
(1) 1220/     5C2 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1221/     5C4 :                     .valid:
(1) 1222/     5C4 : 47                  		ld	b,a
(1) 1223/     5C5 :                     .indx_del:
(1) 1224/     5C5 : 7E                  		ld	a,(hl)
(1) 1225/     5C6 : B7                  		or	a
(1) 1226/     5C7 : 28 29               		jr	z,.nothin
(1) 1227/     5C9 : CF                  		rst	8
(1) 1228/     5CA : DD E5               		push	ix
(1) 1229/     5CC : E6 1F               		and	00011111b
(1) 1230/     5CE : 87                  		add	a,a
(1) 1231/     5CF : 87                  		add	a,a
(1) 1232/     5D0 : 87                  		add	a,a
(1) 1233/     5D1 : 5F                  		ld	e,a
(1) 1234/     5D2 : CF                  		rst	8
(1) 1235/     5D3 : DD 19               		add	ix,de
(1) 1236/     5D5 : AF                  		xor	a
(1) 1237/     5D6 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1238/     5DA : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1239/     5DE : DD 77 04            		ld	(ix+chnl_Vol),a
(1) 1240/     5E1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1241/     5E4 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1242/     5E7 : CF                  		rst	8
(1) 1243/     5E8 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1244/     5EB : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1245/     5EE : DD E1               		pop	ix
(1) 1246/     5F0 : 77                  		ld	(hl),a
(1) 1247/     5F1 : 00                  		nop
(1) 1248/     5F2 :                     .nothin:
(1) 1249/     5F2 : 23                  		inc	hl
(1) 1250/     5F3 : 10 D0               		djnz	.indx_del
(1) 1251/     5F5 : 3E 01               		ld	a,1
(1) 1252/     5F7 : 32 CF 18            		ld	(marsUpd),a
(1) 1253/     5FA : 32 D0 18            		ld	(mcdUpd),a
(1) 1254/     5FD : C9                  		ret
(1) 1255/     5FE :                     
(1) 1256/     5FE :                     ; ============================================================
(1) 1257/     5FE :                     ; --------------------------------------------------------
(1) 1258/     5FE :                     ; Process track channels to the sound chips
(1) 1259/     5FE :                     ; --------------------------------------------------------
(1) 1260/     5FE :                     
(1) 1261/     5FE :                     set_chips:
(1) 1262/     5FE : CD B7 10            		call	get_tick
(1) 1263/     601 : FD 21 0C 18         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1) 1264/     605 : CD 3E 06            		call	tblbuff_read
(1) 1265/     608 : FD 21 4B 18         		ld	iy,trkBuff_1
(1) 1266/     60C : CD 3E 06            		call	tblbuff_read
(1) 1267/     60F : FD 21 8A 18         		ld	iy,trkBuff_2
(1) 1268/     613 : CD 3E 06            		call	tblbuff_read
(1) 1269/     616 : E7                  		rst	20h
(1) 1270/     617 : CD B7 10            		call	get_tick
(1) 1271/     61A : FD 21 46 1C         		ld	iy,tblPSGN		; PSG Noise
(1) 1272/     61E : CD 02 08            		call	dtbl_singl
(1) 1273/     621 : FD 21 0E 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1274/     625 : CD EE 07            		call	dtbl_multi
(1) 1275/     628 : FD 21 A0 1B         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1276/     62C : CD EE 07            		call	dtbl_multi
(1) 1277/     62F : E7                  		rst	20h
(1) 1278/     630 : FD 21 0E 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1279/     634 : CD EE 07            		call	dtbl_multi
(1) 1280/     637 : FD 21 58 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1281/     63B : C3 EE 07            		jp	dtbl_multi
(1) 1282/     63E :                     
(1) 1283/     63E :                     ; ----------------------------------------
(1) 1284/     63E :                     ; Read current track
(1) 1285/     63E :                     ;
(1) 1286/     63E :                     ; iy - Buffer
(1) 1287/     63E :                     tblbuff_read:
(1) 1288/     63E : CF                  		rst	8
(1) 1289/     63F : FD 46 00            		ld	b,(iy+seq_Status)	; bit7: Track active?
(1) 1290/     642 : CB 78               		bit	7,b
(1) 1291/     644 : C8                  		ret	z
(1) 1292/     645 : 78                  		ld	a,b			; seq_Status == -1?
(1) 1293/     646 : FE FF               		cp	-1
(1) 1294/     648 : C2 56 06            		jp	nz,.track_cont
(1) 1295/     64B : CD B0 05            		call	track_out
(1) 1296/     64E : FD 36 00 00         		ld	(iy+seq_Status),0
(1) 1297/     652 : FD 36 01 FF         		ld	(iy+seq_Num),-1
(1) 1298/     656 :                     .track_cont:
(1) 1299/     656 : FD E5               		push	iy
(1) 1300/     658 : E1                  		pop	hl
(1) 1301/     659 : CF                  		rst	8
(1) 1302/     65A : DD 21 00 1E         		ld	ix,trkChnls
(1) 1303/     65E : 11 25 00            		ld	de,seq_ChnIndx
(1) 1304/     661 : 19                  		add	hl,de
(1) 1305/     662 : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1306/     665 : B7                  		or	a
(1) 1307/     666 : 20 02               		jr	nz,.valid
(1) 1308/     668 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1309/     66A :                     .valid:
(1) 1310/     66A : CF                  		rst	8
(1) 1311/     66B : 47                  		ld	b,a
(1) 1312/     66C :                     .next_indx:
(1) 1313/     66C : 7E                  		ld	a,(hl)			; Read index
(1) 1314/     66D : B7                  		or	a
(1) 1315/     66E : 20 02               		jr	nz,.has_indx		; If non-zero: valid
(1) 1316/     670 : 18 1C               		jr	.no_indx
(1) 1317/     672 :                     .has_indx:
(1) 1318/     672 : E6 1F               		and	00011111b
(1) 1319/     674 : 87                  		add	a,a
(1) 1320/     675 : 87                  		add	a,a
(1) 1321/     676 : 87                  		add	a,a
(1) 1322/     677 : CF                  		rst	8
(1) 1323/     678 : 16 00               		ld	d,0
(1) 1324/     67A : 5F                  		ld	e,a
(1) 1325/     67B : C5                  		push	bc			; Save bc, hl and ix
(1) 1326/     67C : E5                  		push	hl
(1) 1327/     67D : DD E5               		push	ix
(1) 1328/     67F : DD 19               		add	ix,de
(1) 1329/     681 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1330/     684 : E6 0F               		and	00001111b
(1) 1331/     686 : C4 96 06            		call	nz,.do_chip		; Call if non-zero
(1) 1332/     689 : CF                  		rst	8
(1) 1333/     68A : DD E1               		pop	ix
(1) 1334/     68C : E1                  		pop	hl
(1) 1335/     68D : C1                  		pop	bc
(1) 1336/     68E :                     .no_indx:
(1) 1337/     68E : 23                  		inc	hl
(1) 1338/     68F : 10 DB               		djnz	.next_indx
(1) 1339/     691 : FD CB 00 9E         		res	3,(iy+seq_Status)	; RESET Volume update bit
(1) 1340/     695 : C9                  		ret
(1) 1341/     696 :                     
(1) 1342/     696 :                     ; ----------------------------------------
(1) 1343/     696 :                     ; iy - Track buffer
(1) 1344/     696 :                     ; ix - Current channel
(1) 1345/     696 :                     
(1) 1346/     696 :                     .do_chip:
(1) 1347/     696 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1348/     699 : B7                  		or	a
(1) 1349/     69A : C8                  		ret	z			; If 0 == stop
(1) 1350/     69B : 3D                  		dec	a			; inst-1
(1) 1351/     69C : E6 7F               		and	01111111b
(1) 1352/     69E : 21 F3 18            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1353/     6A1 : E5                  		push	hl
(1) 1354/     6A2 : CF                  		rst	8
(1) 1355/     6A3 : 07                  		rlca
(1) 1356/     6A4 : 07                  		rlca
(1) 1357/     6A5 : 07                  		rlca
(1) 1358/     6A6 : 47                  		ld	b,a
(1) 1359/     6A7 : E6 F8               		and	11111000b
(1) 1360/     6A9 : 4F                  		ld	c,a
(1) 1361/     6AA : 78                  		ld	a,b
(1) 1362/     6AB : AF                  		xor	a
(1) 1363/     6AC : E6 03               		and	00000011b
(1) 1364/     6AE : CF                  		rst	8
(1) 1365/     6AF : 47                  		ld	b,a
(1) 1366/     6B0 : EB                  		ex	hl,de
(1) 1367/     6B1 : FD 6E 1F            		ld	l,(iy+seq_RomInst)
(1) 1368/     6B4 : FD 66 20            		ld	h,(iy+(seq_RomInst+1))
(1) 1369/     6B7 : FD 7E 21            		ld	a,(iy+(seq_RomInst+2))
(1) 1370/     6BA : 09                  		add	hl,bc
(1) 1371/     6BB : CE 00               		adc	a,0
(1) 1372/     6BD : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1373/     6C0 : CD D8 10            		call	readRom			; ** ROM access **
(1) 1374/     6C3 : E1                  		pop	hl
(1) 1375/     6C4 : E5                  		push	hl			; <-- save hl
(1) 1376/     6C5 : CD E0 06            		call	.grab_link
(1) 1377/     6C8 : D1                  		pop	de			; --> recover as de
(1) 1378/     6C9 :                     	; hl - current table
(1) 1379/     6C9 :                     	; de - instrument data
(1) 1380/     6C9 : FE FF               		cp	-1			; Found any link?
(1) 1381/     6CB : C8                  		ret	z
(1) 1382/     6CC : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1383/     6CD : 23                  		inc	hl
(1) 1384/     6CE : 23                  		inc	hl
(1) 1385/     6CF : 23                  		inc	hl
(1) 1386/     6D0 : CF                  		rst	8
(1) 1387/     6D1 : FD 7E 0E            		ld	a,(iy+seq_VolMaster)
(1) 1388/     6D4 : 77                  		ld	(hl),a
(1) 1389/     6D5 : 01 06 00            		ld	bc,ztbl_InstCach-4	; Move to instr data
(1) 1390/     6D8 : 09                  		add	hl,bc
(1) 1391/     6D9 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1392/     6DA : 01 08 00            		ld	bc,8
(1) 1393/     6DD : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1394/     6DF : C9                  		ret
(1) 1395/     6E0 :                     
(1) 1396/     6E0 :                     ; ----------------------------------------
(1) 1397/     6E0 :                     ; Search for a linked channel on the
(1) 1398/     6E0 :                     ; chip table
(1) 1399/     6E0 :                     ;
(1) 1400/     6E0 :                     ; Input:
(1) 1401/     6E0 :                     ; iy - Track buffer
(1) 1402/     6E0 :                     ; ix - Current channel
(1) 1403/     6E0 :                     ; hl - Intrument data
(1) 1404/     6E0 :                     ;
(1) 1405/     6E0 :                     ; Returns:
(1) 1406/     6E0 :                     ; hl | Channel table to use
(1) 1407/     6E0 :                     ;  a | Return value:
(1) 1408/     6E0 :                     ;       0 | Found
(1) 1409/     6E0 :                     ;      -1 | Not found
(1) 1410/     6E0 :                     ; ----------------------------------------
(1) 1411/     6E0 :                     
(1) 1412/     6E0 :                     .grab_link:
(1) 1413/     6E0 : 7E                  		ld	a,(hl)
(1) 1414/     6E1 : E6 F0               		and	11110000b
(1) 1415/     6E3 : 5F                  		ld	e,a			; e - NEW chip
(1) 1416/     6E4 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1417/     6E7 : E6 F0               		and	11110000b
(1) 1418/     6E9 : 28 72               		jr	z,.new_chip		; If current is blank, it's a NEW chip
(1) 1419/     6EB : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1420/     6EC : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1421/     6EE : CF                  		rst	8
(1) 1422/     6EF : 57                  		ld	d,a			; d - Chip to silence
(1) 1423/     6F0 : D5                  		push	de
(1) 1424/     6F1 : CD 0B 07            		call	.srch_link		; Search OLD link
(1) 1425/     6F4 : D1                  		pop	de
(1) 1426/     6F5 : FE FF               		cp	-1
(1) 1427/     6F7 : 28 03               		jr	z,.dont_res
(1) 1428/     6F9 : CD 8A 0F            		call	tblz_clear
(1) 1429/     6FC :                     .dont_res:
(1) 1430/     6FC : CF                  		rst	8
(1) 1431/     6FD : 18 5E               		jr	.new_chip
(1) 1432/     6FF :                     .same_link:
(1) 1433/     6FF : CD 0B 07            		call	.srch_link		; Search link
(1) 1434/     702 : FE FF               		cp	-1
(1) 1435/     704 : C0                  		ret	nz
(1) 1436/     705 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1437/     708 : CF                  		rst	8
(1) 1438/     709 : 18 52               		jr	.new_chip
(1) 1439/     70B :                     
(1) 1440/     70B :                     ; ----------------------------------------
(1) 1441/     70B :                     ; Search same link
(1) 1442/     70B :                     ;
(1) 1443/     70B :                     ; a - Chip to search for
(1) 1444/     70B :                     ; e - NEW chip
(1) 1445/     70B :                     ; ----------------------------------------
(1) 1446/     70B :                     
(1) 1447/     70B :                     .srch_link:
(1) 1448/     70B : CD D2 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1449/     70E : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1450/     710 : C1                  		pop	bc
(1) 1451/     711 : B7                  		or	a			; Single table?
(1) 1452/     712 : FA 29 07            		jp	m,.singl_link
(1) 1453/     715 :                     .srch_lloop:
(1) 1454/     715 : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1455/     716 : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1456/     718 : 28 3F               		jr	z,.not_samel
(1) 1457/     71A : B9                  		cp	c			; Same link LSB?
(1) 1458/     71B : 20 07               		jr	nz,.invldl
(1) 1459/     71D : 23                  		inc	hl
(1) 1460/     71E : CF                  		rst	8
(1) 1461/     71F : 7E                  		ld	a,(hl)
(1) 1462/     720 : 2B                  		dec	hl
(1) 1463/     721 : B8                  		cp	b			; Same link MSB?
(1) 1464/     722 : 28 13               		jr	z,.got_link
(1) 1465/     724 :                     .invldl:
(1) 1466/     724 : CD C9 07            		call	.nextsrch_tbl
(1) 1467/     727 : 18 EC               		jr	.srch_lloop
(1) 1468/     729 :                     
(1) 1469/     729 :                     ; --------------------------------
(1) 1470/     729 :                     ; PSGN/FM3/FM6
(1) 1471/     729 :                     ; --------------------------------
(1) 1472/     729 :                     
(1) 1473/     729 :                     .singl_link:
(1) 1474/     729 : 23                  		inc	hl			; Read MSB first
(1) 1475/     72A : 7E                  		ld	a,(hl)
(1) 1476/     72B : 2B                  		dec	hl
(1) 1477/     72C : CF                  		rst	8
(1) 1478/     72D : B8                  		cp	b			; MSB match?
(1) 1479/     72E : 20 29               		jr	nz,.not_samel
(1) 1480/     730 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1481/     731 : B9                  		cp	c
(1) 1482/     732 : 20 25               		jr	nz,.not_samel
(1) 1483/     734 : C3 5B 07            		jp	.rnot_psg
(1) 1484/     737 :                     
(1) 1485/     737 :                     ; ----------------------------------------
(1) 1486/     737 :                     ; Got the link, do special checks
(1) 1487/     737 :                     ; ----------------------------------------
(1) 1488/     737 :                     
(1) 1489/     737 :                     .got_link:
(1) 1490/     737 : E5                  		push	hl
(1) 1491/     738 : 23                  		inc	hl
(1) 1492/     739 : 23                  		inc	hl
(1) 1493/     73A : 23                  		inc	hl		; <-- ztbl_Chip
(1) 1494/     73B : CF                  		rst	8
(1) 1495/     73C : 4E                  		ld	c,(hl)		; c - ID
(1) 1496/     73D : E1                  		pop	hl
(1) 1497/     73E :                     	; PSG3/PSGN check
(1) 1498/     73E : 7B                  		ld	a,e
(1) 1499/     73F : FE 80               		cp	80h		; PSG?
(1) 1500/     741 : 20 18               		jr	nz,.rnot_psg
(1) 1501/     743 : 3A 2F 00            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1502/     746 : E6 03               		and	011b
(1) 1503/     748 : FE 03               		cp	011b
(1) 1504/     74A : 20 0F               		jr	nz,.rnot_psg
(1) 1505/     74C : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1506/     74D : FE 02               		cp	2
(1) 1507/     74F : 20 0A               		jr	nz,.rnot_psg
(1) 1508/     751 : CF                  		rst	8
(1) 1509/     752 : D5                  		push	de
(1) 1510/     753 : 16 80               		ld	d,80h		; Force silence
(1) 1511/     755 : CD 8A 0F            		call	tblz_clear
(1) 1512/     758 : D1                  		pop	de
(1) 1513/     759 :                     .not_samel:
(1) 1514/     759 : 18 52               		jr	.set_asfull
(1) 1515/     75B :                     .rnot_psg:
(1) 1516/     75B : AF                  		xor	a
(1) 1517/     75C : C9                  		ret
(1) 1518/     75D :                     
(1) 1519/     75D :                     ; ----------------------------------------
(1) 1520/     75D :                     ; *** NEW CHIP ***
(1) 1521/     75D :                     ;
(1) 1522/     75D :                     ; Input:
(1) 1523/     75D :                     ; e - Chip to set
(1) 1524/     75D :                     ; ----------------------------------------
(1) 1525/     75D :                     
(1) 1526/     75D :                     .new_chip:
(1) 1527/     75D : 7B                  		ld	a,e			; Read NEW chip
(1) 1528/     75E : B7                  		or	a
(1) 1529/     75F : F2 AD 07            		jp	p,.set_asfull		; If Null, mark as full
(1) 1530/     762 : CD D2 07            		call	.pick_tbl		; Pick chip table
(1) 1531/     765 : CF                  		rst	8
(1) 1532/     766 : FD 4E 14            		ld	c,(iy+seq_Priority)	; c - Seq priority level
(1) 1533/     769 : B7                  		or	a			; Chip is single?
(1) 1534/     76A : FA 98 07            		jp	m,.singl_free
(1) 1535/     76D : E5                  		push	hl			; Backup START table
(1) 1536/     76E :                     ; PASS 1
(1) 1537/     76E :                     .srch_free:
(1) 1538/     76E : 7E                  		ld	a,(hl)			; Read LSB
(1) 1539/     76F : FE FF               		cp	-1			; If -1, return -1
(1) 1540/     771 : 28 0F               		jr	z,.pass_2
(1) 1541/     773 : 23                  		inc	hl
(1) 1542/     774 : 46                  		ld	b,(hl)			; Read MSB
(1) 1543/     775 : 2B                  		dec	hl
(1) 1544/     776 : B0                  		or	b
(1) 1545/     777 : 28 05               		jr	z,.found_tnew
(1) 1546/     779 : CD C9 07            		call	.nextsrch_tbl
(1) 1547/     77C : 18 F0               		jr	.srch_free
(1) 1548/     77E :                     .found_tnew:
(1) 1549/     77E : 33                  		inc	sp			; skip backup
(1) 1550/     77F : 33                  		inc	sp
(1) 1551/     780 : 18 36               		jr	.new_link
(1) 1552/     782 :                     ; PASS 2
(1) 1553/     782 :                     .pass_2:
(1) 1554/     782 : E1                  		pop	hl			; Recover START
(1) 1555/     783 :                     .next_prio:
(1) 1556/     783 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1557/     784 : FE FF               		cp	-1			; If -1, return -1
(1) 1558/     786 : C8                  		ret	z
(1) 1559/     787 : 23                  		inc	hl
(1) 1560/     788 : 23                  		inc	hl
(1) 1561/     789 : 7E                  		ld	a,(hl)			; Read priority
(1) 1562/     78A : 2B                  		dec	hl
(1) 1563/     78B : 2B                  		dec	hl
(1) 1564/     78C : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1565/     78D : 28 21               		jr	z,.ovrw_link
(1) 1566/     78F : B9                  		cp	c
(1) 1567/     790 : 38 1E               		jr	c,.ovrw_link		; PRIORITY
(1) 1568/     792 : CF                  		rst	8
(1) 1569/     793 : CD C9 07            		call	.nextsrch_tbl
(1) 1570/     796 : 18 EB               		jr	.next_prio
(1) 1571/     798 :                     
(1) 1572/     798 :                     ; ----------------------------------------
(1) 1573/     798 :                     ; Single slot PSGN/FM3/FM6
(1) 1574/     798 :                     ;
(1) 1575/     798 :                     ; c - priority
(1) 1576/     798 :                     ; e - chip
(1) 1577/     798 :                     ; ----------------------------------------
(1) 1578/     798 :                     
(1) 1579/     798 :                     .singl_free:
(1) 1580/     798 : E5                  		push	hl
(1) 1581/     799 : 46                  		ld	b,(hl)
(1) 1582/     79A : 23                  		inc	hl
(1) 1583/     79B : 7E                  		ld	a,(hl)
(1) 1584/     79C : 23                  		inc	hl
(1) 1585/     79D : 56                  		ld	d,(hl)		; this prio
(1) 1586/     79E : E1                  		pop	hl
(1) 1587/     79F : B0                  		or	b
(1) 1588/     7A0 : 28 0E               		jr	z,.ovrw_link
(1) 1589/     7A2 : CF                  		rst	8
(1) 1590/     7A3 : 7A                  		ld	a,d
(1) 1591/     7A4 : B7                  		or	a
(1) 1592/     7A5 : 28 09               		jr	z,.ovrw_link
(1) 1593/     7A7 : B9                  		cp	c
(1) 1594/     7A8 : 38 06               		jr	c,.ovrw_link	; PRIORITY
(1) 1595/     7AA : 28 04               		jr	z,.ovrw_link	; <-- ALWAYS overwrite
(1) 1596/     7AC : CF                  		rst	8
(1) 1597/     7AD :                     .set_asfull:
(1) 1598/     7AD : 3E FF               		ld	a,-1		; Return -1
(1) 1599/     7AF : C9                  		ret
(1) 1600/     7B0 :                     
(1) 1601/     7B0 :                     ; ----------------------------------------
(1) 1602/     7B0 :                     
(1) 1603/     7B0 :                     .ovrw_link:
(1) 1604/     7B0 : E5                  		push	hl
(1) 1605/     7B1 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1606/     7B4 : CD 8A 0F            		call	tblz_clear
(1) 1607/     7B7 : E1                  		pop	hl
(1) 1608/     7B8 :                     .new_link:
(1) 1609/     7B8 : CF                  		rst	8
(1) 1610/     7B9 : 23                  		inc	hl
(1) 1611/     7BA : 23                  		inc	hl
(1) 1612/     7BB :                     ; hl+2
(1) 1613/     7BB :                     .l_hiprio:
(1) 1614/     7BB : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1615/     7BE : DD E5               		push	ix
(1) 1616/     7C0 : D1                  		pop	de
(1) 1617/     7C1 : 71                  		ld	(hl),c		; Write priority
(1) 1618/     7C2 : 2B                  		dec	hl
(1) 1619/     7C3 : CF                  		rst	8
(1) 1620/     7C4 : 72                  		ld 	(hl),d		; MSB
(1) 1621/     7C5 : 2B                  		dec	hl
(1) 1622/     7C6 : 73                  		ld	(hl),e		; LSB
(1) 1623/     7C7 : AF                  		xor	a		; Return OK
(1) 1624/     7C8 : C9                  		ret
(1) 1625/     7C9 :                     
(1) 1626/     7C9 :                     ; ----------------------------------------
(1) 1627/     7C9 :                     
(1) 1628/     7C9 :                     .nextsrch_tbl:
(1) 1629/     7C9 : CF                  		rst	8
(1) 1630/     7CA : 00                  		nop
(1) 1631/     7CB : D5                  		push	de
(1) 1632/     7CC : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1633/     7CF : 19                  		add	hl,de
(1) 1634/     7D0 : D1                  		pop	de
(1) 1635/     7D1 : C9                  		ret
(1) 1636/     7D2 :                     
(1) 1637/     7D2 :                     ; ----------------------------------------
(1) 1638/     7D2 :                     ; Pick chip table
(1) 1639/     7D2 :                     ;
(1) 1640/     7D2 :                     ; Input:
(1) 1641/     7D2 :                     ; a  - Chip ID
(1) 1642/     7D2 :                     ;
(1) 1643/     7D2 :                     ; Output:
(1) 1644/     7D2 :                     ; hl - Current table
(1) 1645/     7D2 :                     ; a  - bit 7 only: multi or single table
(1) 1646/     7D2 :                     ; ----------------------------------------
(1) 1647/     7D2 :                     
(1) 1648/     7D2 :                     .pick_tbl:
(1) 1649/     7D2 : D5                  		push	de
(1) 1650/     7D3 : 0F                  		rrca
(1) 1651/     7D4 : 0F                  		rrca
(1) 1652/     7D5 : 0F                  		rrca
(1) 1653/     7D6 : 0F                  		rrca
(1) 1654/     7D7 : E6 07               		and	00000111b
(1) 1655/     7D9 : 87                  		add	a,a
(1) 1656/     7DA : 21 00 1B            		ld	hl,tblList
(1) 1657/     7DD : E5                  		push	hl
(1) 1658/     7DE : 16 00               		ld	d,0
(1) 1659/     7E0 : 5F                  		ld	e,a
(1) 1660/     7E1 : 19                  		add	hl,de
(1) 1661/     7E2 : 5E                  		ld	e,(hl)
(1) 1662/     7E3 : 23                  		inc	hl
(1) 1663/     7E4 : 7E                  		ld	a,(hl)
(1) 1664/     7E5 : 57                  		ld	d,a
(1) 1665/     7E6 : E6 80               		and	10000000b
(1) 1666/     7E8 : CB BA               		res	7,d
(1) 1667/     7EA : E1                  		pop	hl
(1) 1668/     7EB : 19                  		add	hl,de
(1) 1669/     7EC : D1                  		pop	de
(1) 1670/     7ED : C9                  		ret
(1) 1671/     7EE :                     
(1) 1672/     7EE :                     ; ============================================
(1) 1673/     7EE :                     ; ----------------------------------------
(1) 1674/     7EE :                     ; Process chip using it's table
(1) 1675/     7EE :                     ;
(1) 1676/     7EE :                     ; iy - table to read
(1) 1677/     7EE :                     ; ----------------------------------------
(1) 1678/     7EE :                     
(1) 1679/     7EE :                     dtbl_multi:
(1) 1680/     7EE : FD 7E 00            		ld	a,(iy)
(1) 1681/     7F1 : FE FF               		cp	-1
(1) 1682/     7F3 : C8                  		ret	z
(1) 1683/     7F4 : CF                  		rst	8
(1) 1684/     7F5 : CD 02 08            		call	dtbl_singl
(1) 1685/     7F8 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1686/     7FB : FD 19               		add	iy,de
(1) 1687/     7FD : CF                  		rst	8
(1) 1688/     7FE : 00                  		nop
(1) 1689/     7FF : 00                  		nop
(1) 1690/     800 : 18 EC               		jr	dtbl_multi
(1) 1691/     802 :                     dtbl_singl:
(1) 1692/     802 : FD 5E 00            		ld	e,(iy)			; Read link
(1) 1693/     805 : FD 56 01            		ld	d,(iy+1)
(1) 1694/     808 : 7A                  		ld	a,d			; If no-zero, active
(1) 1695/     809 : B3                  		or	e
(1) 1696/     80A : 20 60               		jr	nz,.linked
(1) 1697/     80C : FD 7E 02            		ld	a,(iy+ztbl_Priority)	; Silence request?
(1) 1698/     80F : B7                  		or	a
(1) 1699/     810 : F0                  		ret	p			; Return if not.
(1) 1700/     811 : CF                  		rst	8
(1) 1701/     812 : FD 36 02 00         		ld	(iy+ztbl_Priority),0	; Reset request on memory
(1) 1702/     816 :                     
(1) 1703/     816 :                     ; ----------------------------------------
(1) 1704/     816 :                     ; chip-silence request
(1) 1705/     816 :                     ; iy - Table
(1) 1706/     816 :                     
(1) 1707/     816 : 06 00               		ld	b,0
(1) 1708/     818 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1709/     81B : E6 F0               		and	11110000b
(1) 1710/     81D : FE 80               		cp	80h
(1) 1711/     81F : 28 1E               		jr	z,.siln_psg
(1) 1712/     821 : FE 90               		cp	90h
(1) 1713/     823 : 28 16               		jr	z,.siln_psg_n
(1) 1714/     825 : FE A0               		cp	0A0h
(1) 1715/     827 : 28 3D               		jr	z,.siln_fm
(1) 1716/     829 : FE B0               		cp	0B0h
(1) 1717/     82B : 28 39               		jr	z,.siln_fm
(1) 1718/     82D : CF                  		rst	8
(1) 1719/     82E : FE C0               		cp	0C0h
(1) 1720/     830 : 28 31               		jr	z,.siln_dac
(1) 1721/     832 : FE D0               		cp	0D0h
(1) 1722/     834 : 28 0F               		jr	z,.siln_pcm
(1) 1723/     836 : FE E0               		cp	0E0h
(1) 1724/     838 : 28 1C               		jr	z,.siln_pwm
(1) 1725/     83A : C9                  		ret
(1) 1726/     83B :                     .siln_psg_n:
(1) 1727/     83B : AF                  		xor	a
(1) 1728/     83C : 32 2F 00            		ld	(psgHatMode),a
(1) 1729/     83F :                     .siln_psg:
(1) 1730/     83F : CF                  		rst	8
(1) 1731/     840 : 21 4C 16            		ld	hl,psgcom
(1) 1732/     843 : 18 1A               		jr	.rcyl_com
(1) 1733/     845 :                     
(1) 1734/     845 :                     ; --------------------------------
(1) 1735/     845 :                     
(1) 1736/     845 :                     .siln_pcm:
(1) 1737/     845 : 3E 01               		ld	a,1
(1) 1738/     847 : 32 D0 18            		ld	(mcdUpd),a
(1) 1739/     84A : CF                  		rst	8
(1) 1740/     84B : 21 F4 15            		ld	hl,pcmcom+32
(1) 1741/     84E : 09                  		add	hl,bc
(1) 1742/     84F : 36 FF               		ld	(hl),-1
(1) 1743/     851 : 21 D4 15            		ld	hl,pcmcom
(1) 1744/     854 : 18 09               		jr	.rcyl_com
(1) 1745/     856 :                     .siln_pwm:
(1) 1746/     856 : 3E 01               		ld	a,1
(1) 1747/     858 : 32 CF 18            		ld	(marsUpd),a
(1) 1748/     85B : CF                  		rst	8
(1) 1749/     85C : 21 14 16            		ld	hl,pwmcom
(1) 1750/     85F :                     .rcyl_com:
(1) 1751/     85F : 09                  		add	hl,bc
(1) 1752/     860 : 36 04               		ld	(hl),100b	; key-cut
(1) 1753/     862 : C9                  		ret
(1) 1754/     863 :                     
(1) 1755/     863 :                     ; --------------------------------
(1) 1756/     863 :                     
(1) 1757/     863 :                     .siln_dac:
(1) 1758/     863 : CD 21 13            		call	dac_off
(1) 1759/     866 :                     .siln_fm:
(1) 1760/     866 : CD 6D 0A            		call	.fm_tloff
(1) 1761/     869 : C3 65 0A            		jp	.fm_keyoff
(1) 1762/     86C :                     
(1) 1763/     86C :                     ; ----------------------------------------
(1) 1764/     86C :                     ; Process channel now
(1) 1765/     86C :                     ; iy - Table
(1) 1766/     86C :                     ; ix - Tracker channel
(1) 1767/     86C :                     .linked:
(1) 1768/     86C : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1769/     86D : 47                  		ld	b,a		; b - flags to check
(1) 1770/     86E : E6 0F               		and	00001111b	; evin flags?
(1) 1771/     870 : C8                  		ret	z
(1) 1772/     871 : 78                  		ld	a,b
(1) 1773/     872 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1774/     874 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1775/     875 : CF                  		rst	8
(1) 1776/     876 : FD E5               		push	iy		; table+10h instrment data
(1) 1777/     878 : D5                  		push	de
(1) 1778/     879 : DD E1               		pop	ix
(1) 1779/     87B : E1                  		pop	hl
(1) 1780/     87C : 11 0A 00            		ld	de,ztbl_InstCach	; Go to stored inst data
(1) 1781/     87F : 19                  		add	hl,de
(1) 1782/     880 :                     	; --------------------------------
(1) 1783/     880 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1784/     880 :                     	; iy - Our chip table
(1) 1785/     880 :                     	; ix - Track channel
(1) 1786/     880 :                     	; hl - Intrument data
(1) 1787/     880 : 78                  		ld	a,b		; Note and/or Inst?
(1) 1788/     881 : E6 03               		and	0011b
(1) 1789/     883 : C4 AE 08            		call	nz,.reset_effc	; Reset effects
(1) 1790/     886 : CB 50               		bit	2,b		; Volume
(1) 1791/     888 : C4 94 0D            		call	nz,.volu
(1) 1792/     88B : CF                  		rst	8
(1) 1793/     88C : CB 40               		bit	0,b		; Note
(1) 1794/     88E : C4 37 0F            		call	nz,.note
(1) 1795/     891 : CB 48               		bit	1,b		; Intrument
(1) 1796/     893 : C4 9D 0D            		call	nz,.inst
(1) 1797/     896 : CB 58               		bit	3,b		; Effect
(1) 1798/     898 : C4 A9 0C            		call	nz,.effc
(1) 1799/     89B : 7E                  		ld	a,(hl)		; Read INS type
(1) 1800/     89C : E6 70               		and	01110000b	; Filter bits
(1) 1801/     89E : 0F                  		rrca
(1) 1802/     89F : CF                  		rst	8
(1) 1803/     8A0 : 0F                  		rrca
(1) 1804/     8A1 : 0F                  		rrca
(1) 1805/     8A2 : 16 00               		ld	d,0
(1) 1806/     8A4 : 5F                  		ld	e,a
(1) 1807/     8A5 : 21 BB 08            		ld	hl,.mk_list
(1) 1808/     8A8 : 19                  		add	hl,de
(1) 1809/     8A9 : 7E                  		ld	a,(hl)
(1) 1810/     8AA : 23                  		inc	hl
(1) 1811/     8AB : 66                  		ld	h,(hl)
(1) 1812/     8AC : 6F                  		ld	l,a
(1) 1813/     8AD : E9                  		jp	(hl)
(1) 1814/     8AE :                     .reset_effc:
(1) 1815/     8AE : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 1816/     8B2 : FD 36 08 00         		ld	(iy+ztbl_VolSlide),0
(1) 1817/     8B6 : FD 36 07 00         		ld	(iy+ztbl_Volume),0
(1) 1818/     8BA : C9                  		ret
(1) 1819/     8BB :                     
(1) 1820/     8BB :                     ; --------------------------------
(1) 1821/     8BB :                     .mk_list:
(1) 1822/     8BB : C9 08               		dw .mk_psg
(1) 1823/     8BD : C9 08               		dw .mk_psg
(1) 1824/     8BF : 7C 09               		dw .mk_fm
(1) 1825/     8C1 : 00 0A               		dw .mk_fm_sp
(1) 1826/     8C3 : B4 0B               		dw .mk_dac
(1) 1827/     8C5 : 0A 0C               		dw .mk_pcm
(1) 1828/     8C7 : 8A 0C               		dw .mk_pwm
(1) 1829/     8C9 :                     
(1) 1830/     8C9 :                     ; --------------------------------
(1) 1831/     8C9 :                     ; PSG and PSGN
(1) 1832/     8C9 :                     ; --------------------------------
(1) 1833/     8C9 :                     
(1) 1834/     8C9 :                     .mk_psg:
(1) 1835/     8C9 : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Note
(1) 1836/     8CC : DD E5               		push	ix			; * Save ix
(1) 1837/     8CE : CF                  		rst	8
(1) 1838/     8CF : DD 21 4C 16         		ld	ix,psgcom		; ix - psgcom
(1) 1839/     8D3 : 16 00               		ld	d,0
(1) 1840/     8D5 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1841/     8D8 : DD 19               		add	ix,de			; Get com index
(1) 1842/     8DA : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1843/     8DB : E6 03               		and	0011b
(1) 1844/     8DD : 28 4A               		jr	z,.psgc_proc		; Process only
(1) 1845/     8DF : 79                  		ld	a,c			; c - Note
(1) 1846/     8E0 : B7                  		or	a
(1) 1847/     8E1 : C8                  		ret	z
(1) 1848/     8E2 : CF                  		rst	8
(1) 1849/     8E3 : FE FE               		cp	-2			; Key cut?
(1) 1850/     8E5 : 28 32               		jr	z,.kycut_psg
(1) 1851/     8E7 : FE FF               		cp	-1			; Key off?
(1) 1852/     8E9 : 28 22               		jr	z,.kyoff_psg
(1) 1853/     8EB : DD 36 00 01         		ld	(ix+COM),001b		; Set Key ON
(1) 1854/     8EF : 7B                  		ld	a,e			; a - Channel 0-3
(1) 1855/     8F0 : 11 00 00            		ld	de,0			; Clear de
(1) 1856/     8F3 : FE 03               		cp	3			; NOISE channel?
(1) 1857/     8F5 : 20 0E               		jr	nz,.not_ns
(1) 1858/     8F7 : CF                  		rst	8
(1) 1859/     8F8 : 3A 2F 00            		ld	a,(psgHatMode)		; Tone 3?
(1) 1860/     8FB : E6 03               		and	011b
(1) 1861/     8FD : FE 03               		cp	011b
(1) 1862/     8FF : C2 4C 09            		jp	nz,.psg_keyon		; Normal
(1) 1863/     902 : 11 18 00            		ld	de,12*2			; Add octave to freq
(1) 1864/     905 :                     .not_ns:
(1) 1865/     905 : CD 67 09            		call	.psg_getfreq
(1) 1866/     908 : 18 26               		jr	.psgc_keyon
(1) 1867/     90A :                     
(1) 1868/     90A :                     ; --------------------------------
(1) 1869/     90A :                     ; -1
(1) 1870/     90A :                     .kyoff_psgn:
(1) 1871/     90A : CD 22 09            		call	.kypsgn_hatoff
(1) 1872/     90D :                     .kyoff_psg:
(1) 1873/     90D : DD 36 00 02         		ld	(ix),010b		; Write key off
(1) 1874/     911 : DD E1               		pop	ix			; * Restore ix
(1) 1875/     913 : C3 83 0F            		jp	.chnl_ulnk
(1) 1876/     916 :                     
(1) 1877/     916 :                     ; --------------------------------
(1) 1878/     916 :                     ; -2
(1) 1879/     916 :                     .kycut_psgn:
(1) 1880/     916 : CD 22 09            		call	.kypsgn_hatoff
(1) 1881/     919 :                     .kycut_psg:
(1) 1882/     919 : DD 36 00 04         		ld	(ix),100b		; Write key cut
(1) 1883/     91D : DD E1               		pop	ix			; * Restore ix
(1) 1884/     91F : C3 83 0F            		jp	.chnl_ulnk
(1) 1885/     922 :                     
(1) 1886/     922 :                     
(1) 1887/     922 :                     .kypsgn_hatoff:
(1) 1888/     922 : 3E 00               		ld	a,000b
(1) 1889/     924 : 32 2F 00            		ld	(psgHatMode),a		; ** GLOBAL SETTING
(1) 1890/     927 : CF                  		rst	8
(1) 1891/     928 : C9                  		ret
(1) 1892/     929 :                     
(1) 1893/     929 :                     ; --------------------------------
(1) 1894/     929 :                     ; hl - current freq
(1) 1895/     929 :                     ; ix - psgcom
(1) 1896/     929 :                     ; b - flags
(1) 1897/     929 :                     
(1) 1898/     929 :                     .psgc_proc:
(1) 1899/     929 : CF                  		rst	8
(1) 1900/     92A : DD 6E 1C            		ld	l,(ix+DTL)		; Read saved freq
(1) 1901/     92D : DD 66 20            		ld	h,(ix+DTH)
(1) 1902/     930 :                     .psgc_keyon:
(1) 1903/     930 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1904/     933 : B7                  		or	a
(1) 1905/     934 : CA 46 09            		jp	z,.no_req
(1) 1906/     937 : ED 44               		neg	a
(1) 1907/     939 : 5F                  		ld	e,a
(1) 1908/     93A : 4F                  		ld	c,a
(1) 1909/     93B : AF                  		xor	a
(1) 1910/     93C : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 1911/     93F : 3F                  		ccf
(1) 1912/     940 : CB 21               		sla	c
(1) 1913/     942 : 9F                  		sbc	a,a
(1) 1914/     943 : 57                  		ld	d,a
(1) 1915/     944 : CF                  		rst	8
(1) 1916/     945 : 19                  		add	hl,de
(1) 1917/     946 :                     .no_req:
(1) 1918/     946 : DD 75 1C            		ld	(ix+DTL),l
(1) 1919/     949 : DD 74 20            		ld	(ix+DTH),h
(1) 1920/     94C :                     .psg_keyon:
(1) 1921/     94C : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 1922/     94F : 87                  		add	a,a
(1) 1923/     950 : 5F                  		ld	e,a
(1) 1924/     951 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1925/     954 : 93                  		sub	a,e
(1) 1926/     955 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1927/     958 : ED 44               		neg	a
(1) 1928/     95A : CF                  		rst	8
(1) 1929/     95B : 87                  		add	a,a
(1) 1930/     95C : 87                  		add	a,a
(1) 1931/     95D : 30 02               		jr	nc,.vmuch
(1) 1932/     95F : 3E FF               		ld	a,-1
(1) 1933/     961 :                     .vmuch:
(1) 1934/     961 : DD 77 30            		ld	(ix+MVOL),a
(1) 1935/     964 : DD E1               		pop	ix			; * Restore ix
(1) 1936/     966 : C9                  		ret
(1) 1937/     967 :                     
(1) 1938/     967 :                     ; --------------------------------
(1) 1939/     967 :                     ; de - increment
(1) 1940/     967 :                     
(1) 1941/     967 :                     .psg_getfreq:
(1) 1942/     967 : 21 0A 14            		ld	hl,psgFreq_List-(36*2)
(1) 1943/     96A : 19                  		add	hl,de
(1) 1944/     96B : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; de - note*2
(1) 1945/     96E : 19                  		add	hl,de
(1) 1946/     96F : 7E                  		ld	a,(hl)
(1) 1947/     970 : 23                  		inc	hl
(1) 1948/     971 : CF                  		rst	8
(1) 1949/     972 : 66                  		ld	h,(hl)
(1) 1950/     973 : 6F                  		ld	l,a
(1) 1951/     974 : 3A 88 1F            		ld	a,(palMode)
(1) 1952/     977 : B7                  		or	a
(1) 1953/     978 : 28 01               		jr	z,.fnot_pal
(1) 1954/     97A : 2B                  		dec	hl
(1) 1955/     97B :                     .fnot_pal:
(1) 1956/     97B : C9                  		ret
(1) 1957/     97C :                     
(1) 1958/     97C :                     ; --------------------------------
(1) 1959/     97C :                     ; FM
(1) 1960/     97C :                     ; --------------------------------
(1) 1961/     97C :                     
(1) 1962/     97C :                     .mk_fm:
(1) 1963/     97C : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - YM key
(1) 1964/     97F : 78                  		ld	a,b			; Get NOTE and/or INS?
(1) 1965/     980 : E6 03               		and	0011b
(1) 1966/     982 : 28 32               		jr	z,.mkfm_proc		; Process only
(1) 1967/     984 : DD 7E 02            		ld	a,(ix+chnl_Note)	; Get IT note
(1) 1968/     987 : B7                  		or	a
(1) 1969/     988 : C8                  		ret	z
(1) 1970/     989 : FE FE               		cp	-2			; Key-cut?
(1) 1971/     98B : CA 59 0A            		jp	z,.fm_cut
(1) 1972/     98E : CF                  		rst	8
(1) 1973/     98F : FE FF               		cp	-1			; Key-off?
(1) 1974/     991 : CA 50 0A            		jp	z,.fm_off
(1) 1975/     994 : CD 65 0A            		call	.fm_keyoff		; Turn FM keys off
(1) 1976/     997 : 79                  		ld	a,c
(1) 1977/     998 : FE 06               		cp	6			; Check FM6
(1) 1978/     99A : 20 05               		jr	nz,.not_dac
(1) 1979/     99C : CD 21 13            		call	dac_off			; Turn DAC off
(1) 1980/     99F : 18 15               		jr	.mkfm_proc
(1) 1981/     9A1 :                     .not_dac:
(1) 1982/     9A1 : FE 02               		cp	2			; Check FM3
(1) 1983/     9A3 : 20 11               		jr	nz,.mkfm_proc
(1) 1984/     9A5 : 3A 30 00            		ld	a,(fmSpecial)		; FM3 Special active?
(1) 1985/     9A8 : B7                  		or	a
(1) 1986/     9A9 : 28 0B               		jr	z,.mkfm_proc
(1) 1987/     9AB : CF                  		rst	8
(1) 1988/     9AC : AF                  		xor	a
(1) 1989/     9AD : 32 30 00            		ld	(fmSpecial),a
(1) 1990/     9B0 : 11 00 27            		ld	de,2700h		; Turn FM3 Special OFF
(1) 1991/     9B3 : CD F6 12            		call	fm_send_1
(1) 1992/     9B6 :                     .mkfm_proc:
(1) 1993/     9B6 : CF                  		rst	8
(1) 1994/     9B7 : C5                  		push	bc
(1) 1995/     9B8 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 1996/     9BB : 47                  		ld	b,a
(1) 1997/     9BC : E6 1F               		and	00011111b
(1) 1998/     9BE : 5F                  		ld	e,a
(1) 1999/     9BF : 16 00               		ld	d,0
(1) 2000/     9C1 : 21 3A 14            		ld	hl,fmFreq_List
(1) 2001/     9C4 : 19                  		add	hl,de
(1) 2002/     9C5 : 7E                  		ld	a,(hl)
(1) 2003/     9C6 : CF                  		rst	8
(1) 2004/     9C7 : 23                  		inc	hl
(1) 2005/     9C8 : 66                  		ld	h,(hl)
(1) 2006/     9C9 : 6F                  		ld	l,a			; hl - Current FM freq
(1) 2007/     9CA : 3A 88 1F            		ld	a,(palMode)		; PAL speed check
(1) 2008/     9CD : B7                  		or	a
(1) 2009/     9CE : 28 04               		jr	z,.not_pal
(1) 2010/     9D0 : 11 04 00            		ld	de,4			; freq + 4
(1) 2011/     9D3 : 19                  		add	hl,de
(1) 2012/     9D4 :                     .not_pal:
(1) 2013/     9D4 : 78                  		ld	a,b
(1) 2014/     9D5 : E6 E0               		and	11100000b
(1) 2015/     9D7 : 0F                  		rrca
(1) 2016/     9D8 : 0F                  		rrca
(1) 2017/     9D9 : B4                  		or	h
(1) 2018/     9DA : 67                  		ld	h,a
(1) 2019/     9DB : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; Get pitchbend effect
(1) 2020/     9DE : CF                  		rst	8
(1) 2021/     9DF : AF                  		xor	a			; clear high
(1) 2022/     9E0 : 3F                  		ccf				; clear carry
(1) 2023/     9E1 : CB 23               		sla	e			; pitchbend << 2
(1) 2024/     9E3 : 00                  		nop				; **
(1) 2025/     9E4 : 9F                  		sbc	a,a			; get carry MSB
(1) 2026/     9E5 : 57                  		ld	d,a
(1) 2027/     9E6 : 19                  		add	hl,de			; Pitchbend the freq
(1) 2028/     9E7 : 79                  		ld	a,c
(1) 2029/     9E8 : E6 03               		and	011b
(1) 2030/     9EA : F6 A4               		or	0A4h
(1) 2031/     9EC : 57                  		ld	d,a
(1) 2032/     9ED : 5C                  		ld	e,h
(1) 2033/     9EE : CF                  		rst	8
(1) 2034/     9EF : CD F2 12            		call	fm_autoreg
(1) 2035/     9F2 : 79                  		ld	a,c
(1) 2036/     9F3 : E6 03               		and	011b
(1) 2037/     9F5 : F6 A0               		or	0A0h
(1) 2038/     9F7 : 57                  		ld	d,a
(1) 2039/     9F8 : 5D                  		ld	e,l
(1) 2040/     9F9 : CD F2 12            		call	fm_autoreg
(1) 2041/     9FC : C1                  		pop	bc
(1) 2042/     9FD : C3 9B 0A            		jp	.mkfm_set
(1) 2043/     A00 :                     
(1) 2044/     A00 :                     ; --------------------------------
(1) 2045/     A00 :                     ; FM3 special
(1) 2046/     A00 :                     ; --------------------------------
(1) 2047/     A00 :                     
(1) 2048/     A00 :                     ; TODO: Do to PAL freq increment
(1) 2049/     A00 :                     
(1) 2050/     A00 :                     .mk_fm_sp:
(1) 2051/     A00 : 0E 02               		ld	c,010b			; ** FM3 special ID
(1) 2052/     A02 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 2053/     A03 : E6 03               		and	0011b
(1) 2054/     A05 : CA 9B 0A            		jp	z,.mkfm_set		; Process only
(1) 2055/     A08 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2056/     A0B : B7                  		or	a
(1) 2057/     A0C : C8                  		ret	z
(1) 2058/     A0D : FE FE               		cp	-2
(1) 2059/     A0F : CA 59 0A            		jp	z,.fm_cut
(1) 2060/     A12 : FE FF               		cp	-1
(1) 2061/     A14 : CA 50 0A            		jp	z,.fm_off
(1) 2062/     A17 : CD 65 0A            		call	.fm_keyoff
(1) 2063/     A1A : CF                  		rst	8
(1) 2064/     A1B : 21 D8 16            		ld	hl,fmcach_3		; DIRECT point to FM3 data
(1) 2065/     A1E : 11 20 00            		ld	de,20h			; point to regs
(1) 2066/     A21 : 19                  		add	hl,de
(1) 2067/     A22 : DD E5               		push	ix
(1) 2068/     A24 : DD 21 48 0A         		ld	ix,.this_regs
(1) 2069/     A28 : 06 08               		ld	b,8
(1) 2070/     A2A :                     .wr_spc:
(1) 2071/     A2A : DD 56 00            		ld	d,(ix)			; Manually write the FM3 freqs
(1) 2072/     A2D : 5E                  		ld	e,(hl)
(1) 2073/     A2E : CD F6 12            		call	fm_send_1
(1) 2074/     A31 : CF                  		rst	8
(1) 2075/     A32 : 23                  		inc	hl
(1) 2076/     A33 : DD 23               		inc	ix
(1) 2077/     A35 : 10 F3               		djnz	.wr_spc
(1) 2078/     A37 : DD E1               		pop	ix
(1) 2079/     A39 : CD 9B 0A            		call	.mkfm_set
(1) 2080/     A3C : 11 40 27            		ld	de,2740h		; Turn FM3 Special mode
(1) 2081/     A3F : CD F6 12            		call	fm_send_1
(1) 2082/     A42 : 3E 01               		ld	a,1
(1) 2083/     A44 : 32 30 00            		ld	(fmSpecial),a
(1) 2084/     A47 : C9                  		ret
(1) 2085/     A48 :                     .this_regs:
(1) 2086/     A48 : AD A9               		db 0ADh,0A9h
(1) 2087/     A4A : AC A8               		db 0ACh,0A8h
(1) 2088/     A4C : AE AA               		db 0AEh,0AAh
(1) 2089/     A4E : A6 A2               		db 0A6h,0A2h
(1) 2090/     A50 :                     
(1) 2091/     A50 :                     ; ----------------------------------------
(1) 2092/     A50 :                     
(1) 2093/     A50 :                     .fm_off:
(1) 2094/     A50 : CD 84 0A            		call	.fm_clrrsave
(1) 2095/     A53 : CD 65 0A            		call	.fm_keyoff
(1) 2096/     A56 : C3 83 0F            		jp	.chnl_ulnk
(1) 2097/     A59 :                     .fm_cut:
(1) 2098/     A59 : CD 84 0A            		call	.fm_clrrsave
(1) 2099/     A5C : CD 65 0A            		call	.fm_keyoff
(1) 2100/     A5F : CD 6D 0A            		call	.fm_tloff
(1) 2101/     A62 : C3 83 0F            		jp	.chnl_ulnk
(1) 2102/     A65 :                     
(1) 2103/     A65 :                     ; ----------------------------------------
(1) 2104/     A65 :                     ; iy - current FM table
(1) 2105/     A65 :                     
(1) 2106/     A65 :                     .fm_keyoff:
(1) 2107/     A65 : 16 28               		ld	d,28h
(1) 2108/     A67 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2109/     A6A : C3 F6 12            		jp	fm_send_1
(1) 2110/     A6D :                     
(1) 2111/     A6D :                     .fm_tloff:
(1) 2112/     A6D : 06 04               		ld	b,4
(1) 2113/     A6F : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2114/     A72 : 79                  		ld	a,c
(1) 2115/     A73 : E6 03               		and	011b
(1) 2116/     A75 : F6 40               		or	40h		; TL regs
(1) 2117/     A77 : 1E 7F               		ld	e,7Fh
(1) 2118/     A79 :                     .tl_down:
(1) 2119/     A79 : 57                  		ld	d,a
(1) 2120/     A7A :                     		; e - 7Fh
(1) 2121/     A7A : CD F2 12            		call	fm_autoreg
(1) 2122/     A7D : CF                  		rst	8
(1) 2123/     A7E : 7A                  		ld	a,d
(1) 2124/     A7F : C6 04               		add	a,4
(1) 2125/     A81 : 10 F6               		djnz	.tl_down
(1) 2126/     A83 : C9                  		ret
(1) 2127/     A84 :                     
(1) 2128/     A84 :                     .fm_clrrsave:
(1) 2129/     A84 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2130/     A87 : E6 07               		and	0111b
(1) 2131/     A89 : 87                  		add	a,a
(1) 2132/     A8A : 87                  		add	a,a
(1) 2133/     A8B : 21 78 17            		ld	hl,fmlist_rsave
(1) 2134/     A8E : 16 00               		ld	d,0
(1) 2135/     A90 : 5F                  		ld	e,a
(1) 2136/     A91 : 19                  		add	hl,de
(1) 2137/     A92 : 36 00               		ld	(hl),0
(1) 2138/     A94 : 23                  		inc	hl
(1) 2139/     A95 : 36 00               		ld	(hl),0
(1) 2140/     A97 : 23                  		inc	hl
(1) 2141/     A98 : 36 00               		ld	(hl),0
(1) 2142/     A9A : C9                  		ret
(1) 2143/     A9B :                     
(1) 2144/     A9B :                     ; ----------------------------------------
(1) 2145/     A9B :                     
(1) 2146/     A9B :                     .mkfm_set:
(1) 2147/     A9B : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2148/     A9E : CD A4 0B            		call	.get_fmcach
(1) 2149/     AA1 : E5                  		push	hl			; Save TOP
(1) 2150/     AA2 : 11 1C 00            		ld	de,1Ch			; Go to 1Ch (regs B0, B4...)
(1) 2151/     AA5 : 19                  		add	hl,de
(1) 2152/     AA6 : 46                  		ld	b,(hl)			; b - 0B0h algorithm
(1) 2153/     AA7 : E1                  		pop	hl			; Recover TOP
(1) 2154/     AA8 : CF                  		rst	8
(1) 2155/     AA9 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2156/     AAC : 79                  		ld	a,c
(1) 2157/     AAD : E6 03               		and	011b
(1) 2158/     AAF : F6 30               		or	30h			; Start at reg 30h
(1) 2159/     AB1 : 57                  		ld	d,a
(1) 2160/     AB2 :                     	; hl - reg data
(1) 2161/     AB2 :                     	; b  - 0B0h algorithm
(1) 2162/     AB2 :                     	;  c - current FM channel 0-6
(1) 2163/     AB2 :                     	; d  - Starting FM reg
(1) 2164/     AB2 : CD 04 0B            		call	.mkfm_wregs		; 30h+
(1) 2165/     AB5 : CD 2D 0B            		call	.mkfm_tlvol		; 40h+
(1) 2166/     AB8 : CD 04 0B            		call	.mkfm_wregs		; 50h+
(1) 2167/     ABB : CD 04 0B            		call	.mkfm_wregs		; 60h+
(1) 2168/     ABE : CD 04 0B            		call	.mkfm_wregs		; 70h+
(1) 2169/     AC1 : CD 04 0B            		call	.mkfm_wregs		; 80h+
(1) 2170/     AC4 : CD 04 0B            		call	.mkfm_wregs		; 90h+
(1) 2171/     AC7 : 78                  		ld	a,b			; 0B0h algorithm
(1) 2172/     AC8 : 23                  		inc	hl
(1) 2173/     AC9 : 5F                  		ld	e,a
(1) 2174/     ACA : 79                  		ld	a,c
(1) 2175/     ACB : E6 03               		and	011b
(1) 2176/     ACD : F6 B0               		or	0B0h
(1) 2177/     ACF : 57                  		ld	d,a
(1) 2178/     AD0 : CD F2 12            		call	fm_autoreg		; Write algorithm
(1) 2179/     AD3 : CF                  		rst	8
(1) 2180/     AD4 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2181/     AD7 : 2F                  		cpl				; REVERSE bits
(1) 2182/     AD8 : E6 30               		and	00110000b
(1) 2183/     ADA : 07                  		rlca				; << 2
(1) 2184/     ADB : 07                  		rlca
(1) 2185/     ADC : 5F                  		ld	e,a			; save as e
(1) 2186/     ADD : 7E                  		ld	a,(hl)			; 0B4h %00aa0ppp
(1) 2187/     ADE : 23                  		inc	hl
(1) 2188/     ADF : E6 3F               		and	00111111b
(1) 2189/     AE1 : B3                  		or	e			; Merge panning
(1) 2190/     AE2 : 5F                  		ld	e,a
(1) 2191/     AE3 : 79                  		ld	a,c
(1) 2192/     AE4 : CF                  		rst	8
(1) 2193/     AE5 : E6 03               		and	011b
(1) 2194/     AE7 : F6 B4               		or	0B4h
(1) 2195/     AE9 : 57                  		ld	d,a
(1) 2196/     AEA : CD F2 12            		call	fm_autoreg
(1) 2197/     AED : 7E                  		ld	a,(hl)			; 022h
(1) 2198/     AEE : 23                  		inc	hl
(1) 2199/     AEF : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2200/     AF1 : 28 06               		jr	z,.no_lfo
(1) 2201/     AF3 : 5F                  		ld	e,a
(1) 2202/     AF4 : 16 22               		ld	d,22h
(1) 2203/     AF6 : CD F6 12            		call	fm_send_1
(1) 2204/     AF9 :                     .no_lfo:
(1) 2205/     AF9 :                     
(1) 2206/     AF9 :                     
(1) 2207/     AF9 : CF                  		rst	8
(1) 2208/     AFA : 7E                  		ld	a,(hl)			; 028h
(1) 2209/     AFB : E6 F0               		and	11110000b
(1) 2210/     AFD : B1                  		or	c			; Merge FM channel
(1) 2211/     AFE : 5F                  		ld	e,a
(1) 2212/     AFF : 16 28               		ld	d,28h
(1) 2213/     B01 : C3 F6 12            		jp	fm_send_1		; Set keys
(1) 2214/     B04 :                     
(1) 2215/     B04 :                     ; ----------------------------------------
(1) 2216/     B04 :                     
(1) 2217/     B04 :                     .mkfm_wregs:
(1) 2218/     B04 : CF                  		rst	8
(1) 2219/     B05 : 5E                  		ld	e,(hl)
(1) 2220/     B06 : 23                  		inc	hl
(1) 2221/     B07 : CD F2 12            		call	fm_autoreg
(1) 2222/     B0A : 14                  		inc	d
(1) 2223/     B0B : 14                  		inc	d
(1) 2224/     B0C : 14                  		inc	d
(1) 2225/     B0D : 14                  		inc	d
(1) 2226/     B0E : 5E                  		ld	e,(hl)
(1) 2227/     B0F : 23                  		inc	hl
(1) 2228/     B10 : CF                  		rst	8
(1) 2229/     B11 : CD F2 12            		call	fm_autoreg
(1) 2230/     B14 : 14                  		inc	d
(1) 2231/     B15 : 14                  		inc	d
(1) 2232/     B16 : 14                  		inc	d
(1) 2233/     B17 : 14                  		inc	d
(1) 2234/     B18 : 5E                  		ld	e,(hl)
(1) 2235/     B19 : 23                  		inc	hl
(1) 2236/     B1A : CD F2 12            		call	fm_autoreg
(1) 2237/     B1D : 14                  		inc	d
(1) 2238/     B1E : CF                  		rst	8
(1) 2239/     B1F : 14                  		inc	d
(1) 2240/     B20 : 14                  		inc	d
(1) 2241/     B21 : 14                  		inc	d
(1) 2242/     B22 : 5E                  		ld	e,(hl)
(1) 2243/     B23 : 23                  		inc	hl
(1) 2244/     B24 : CD F2 12            		call	fm_autoreg
(1) 2245/     B27 : 14                  		inc	d
(1) 2246/     B28 : 14                  		inc	d
(1) 2247/     B29 : 14                  		inc	d
(1) 2248/     B2A : 14                  		inc	d
(1) 2249/     B2B : CF                  		rst	8
(1) 2250/     B2C : C9                  		ret
(1) 2251/     B2D :                     
(1) 2252/     B2D :                     ; ----------------------------------------
(1) 2253/     B2D :                     ; Write 40+ TL w/volume
(1) 2254/     B2D :                     
(1) 2255/     B2D :                     ; hl - TL reg data
(1) 2256/     B2D :                     ; b - current 0B0h
(1) 2257/     B2D :                     ; d - 40h+
(1) 2258/     B2D :                     
(1) 2259/     B2D :                     .mkfm_tlvol:
(1) 2260/     B2D : 78                  		ld	a,b			; Read 0B0h copy
(1) 2261/     B2E : C5                  		push	bc
(1) 2262/     B2F : E5                  		push	hl
(1) 2263/     B30 : 21 9C 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2264/     B33 : E6 07               		and	0111b
(1) 2265/     B35 : 06 00               		ld	b,0
(1) 2266/     B37 : 4F                  		ld	c,a
(1) 2267/     B38 : 09                  		add	hl,bc
(1) 2268/     B39 : CF                  		rst	8
(1) 2269/     B3A : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2270/     B3D : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2271/     B40 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2272/     B43 : 4F                  		ld	c,a			; c - Current Volume
(1) 2273/     B44 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2274/     B45 : E1                  		pop	hl
(1) 2275/     B46 : CB 08               		rrc	b			; OP1
(1) 2276/     B48 : DC 7F 0B            		call	c,.write_tl
(1) 2277/     B4B : D4 91 0B            		call	nc,.write_ntl
(1) 2278/     B4E : 23                  		inc	hl
(1) 2279/     B4F : 14                  		inc	d
(1) 2280/     B50 : 14                  		inc	d
(1) 2281/     B51 : CF                  		rst	8
(1) 2282/     B52 : 14                  		inc	d
(1) 2283/     B53 : 14                  		inc	d
(1) 2284/     B54 : CB 08               		rrc	b			; OP2
(1) 2285/     B56 : DC 7F 0B            		call	c,.write_tl
(1) 2286/     B59 : D4 91 0B            		call	nc,.write_ntl
(1) 2287/     B5C : 23                  		inc	hl
(1) 2288/     B5D : 14                  		inc	d
(1) 2289/     B5E : 14                  		inc	d
(1) 2290/     B5F : 14                  		inc	d
(1) 2291/     B60 : 14                  		inc	d
(1) 2292/     B61 : CB 08               		rrc	b			; OP3
(1) 2293/     B63 : DC 7F 0B            		call	c,.write_tl
(1) 2294/     B66 : D4 91 0B            		call	nc,.write_ntl
(1) 2295/     B69 : 23                  		inc	hl
(1) 2296/     B6A : CF                  		rst	8
(1) 2297/     B6B : 14                  		inc	d
(1) 2298/     B6C : 14                  		inc	d
(1) 2299/     B6D : 14                  		inc	d
(1) 2300/     B6E : 14                  		inc	d
(1) 2301/     B6F : CB 08               		rrc	b			; OP4
(1) 2302/     B71 : DC 7F 0B            		call	c,.write_tl
(1) 2303/     B74 : D4 91 0B            		call	nc,.write_ntl
(1) 2304/     B77 : 23                  		inc	hl
(1) 2305/     B78 : 14                  		inc	d
(1) 2306/     B79 : 14                  		inc	d
(1) 2307/     B7A : 14                  		inc	d
(1) 2308/     B7B : 14                  		inc	d
(1) 2309/     B7C : CF                  		rst	8
(1) 2310/     B7D : C1                  		pop	bc
(1) 2311/     B7E : C9                  		ret
(1) 2312/     B7F :                     
(1) 2313/     B7F :                     ; --------------------------------
(1) 2314/     B7F :                     
(1) 2315/     B7F :                     .write_tl:
(1) 2316/     B7F : 7E                  		ld	a,(hl)
(1) 2317/     B80 : 91                  		sub	a,c			; reg - volume
(1) 2318/     B81 : F2 86 0B            		jp	p,.keep_tlmx
(1) 2319/     B84 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2320/     B86 :                     .keep_tlmx:
(1) 2321/     B86 : C5                  		push	bc
(1) 2322/     B87 : 5F                  		ld	e,a
(1) 2323/     B88 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2324/     B8B : CD F2 12            		call	fm_autoreg
(1) 2325/     B8E : CF                  		rst	8
(1) 2326/     B8F : C1                  		pop	bc
(1) 2327/     B90 : C9                  		ret
(1) 2328/     B91 :                     
(1) 2329/     B91 :                     .write_ntl:
(1) 2330/     B91 : C5                  		push	bc
(1) 2331/     B92 : 5E                  		ld	e,(hl)
(1) 2332/     B93 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2333/     B96 : CD F2 12            		call	fm_autoreg
(1) 2334/     B99 : CF                  		rst	8
(1) 2335/     B9A : C1                  		pop	bc
(1) 2336/     B9B : C9                  		ret
(1) 2337/     B9C :                     
(1) 2338/     B9C :                     ; --------------------------------
(1) 2339/     B9C :                     ; Jump carry list
(1) 2340/     B9C :                     .fm_cindx:
(1) 2341/     B9C : 08                  		db 1000b
(1) 2342/     B9D : 08                  		db 1000b
(1) 2343/     B9E : 08                  		db 1000b
(1) 2344/     B9F : 08                  		db 1000b
(1) 2345/     BA0 : 0C                  		db 1100b
(1) 2346/     BA1 : 0E                  		db 1110b
(1) 2347/     BA2 : 0E                  		db 1110b
(1) 2348/     BA3 : 0F                  		db 1111b
(1) 2349/     BA4 :                     
(1) 2350/     BA4 :                     ; --------------------------------
(1) 2351/     BA4 :                     ; Input:
(1) 2352/     BA4 :                     ; a - FM id (0-2,4-6)
(1) 2353/     BA4 :                     ;
(1) 2354/     BA4 :                     ; Ouput:
(1) 2355/     BA4 :                     ; hl - instrument data
(1) 2356/     BA4 :                     ;
(1) 2357/     BA4 :                     ; Uses:
(1) 2358/     BA4 :                     ; de
(1) 2359/     BA4 :                     ; --------------------------------
(1) 2360/     BA4 :                     
(1) 2361/     BA4 :                     .get_fmcach:
(1) 2362/     BA4 : 21 C9 18            		ld	hl,fmcach_list
(1) 2363/     BA7 : E6 07               		and	0111b
(1) 2364/     BA9 : 16 00               		ld	d,0
(1) 2365/     BAB : 87                  		add	a,a
(1) 2366/     BAC : 5F                  		ld	e,a
(1) 2367/     BAD : CF                  		rst	8
(1) 2368/     BAE : 19                  		add	hl,de
(1) 2369/     BAF : 7E                  		ld	a,(hl)
(1) 2370/     BB0 : 23                  		inc	hl
(1) 2371/     BB1 : 66                  		ld	h,(hl)
(1) 2372/     BB2 : 6F                  		ld	l,a
(1) 2373/     BB3 : C9                  		ret
(1) 2374/     BB4 :                     
(1) 2375/     BB4 :                     ; --------------------------------
(1) 2376/     BB4 :                     ; DAC
(1) 2377/     BB4 :                     ; --------------------------------
(1) 2378/     BB4 :                     
(1) 2379/     BB4 :                     .mk_dac:
(1) 2380/     BB4 : 78                  		ld	a,b
(1) 2381/     BB5 : E6 03               		and	0011b
(1) 2382/     BB7 : 28 21               		jr	z,.dac_proc
(1) 2383/     BB9 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2384/     BBC : B7                  		or	a
(1) 2385/     BBD : C8                  		ret	z
(1) 2386/     BBE : FE FE               		cp	-2
(1) 2387/     BC0 : CA CE 0B            		jp	z,.dac_cut
(1) 2388/     BC3 : FE FF               		cp	-1
(1) 2389/     BC5 : CA D4 0B            		jp	z,.dac_off
(1) 2390/     BC8 : CD DA 0B            		call	.dac_proc
(1) 2391/     BCB : C3 36 13            		jp	dac_play
(1) 2392/     BCE :                     .dac_cut:
(1) 2393/     BCE : CD 21 13            		call	dac_off
(1) 2394/     BD1 : C3 83 0F            		jp	.chnl_ulnk
(1) 2395/     BD4 :                     .dac_off:
(1) 2396/     BD4 : CD 21 13            		call	dac_off
(1) 2397/     BD7 : C3 83 0F            		jp	.chnl_ulnk
(1) 2398/     BDA :                     .dac_proc:
(1) 2399/     BDA : 16 00               		ld	d,0			; Freq index
(1) 2400/     BDC : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2401/     BDF : 21 B2 14            		ld	hl,wavFreq_List-(2*36)
(1) 2402/     BE2 : 19                  		add	hl,de
(1) 2403/     BE3 : 7E                  		ld	a,(hl)
(1) 2404/     BE4 : 23                  		inc	hl
(1) 2405/     BE5 : 66                  		ld	h,(hl)
(1) 2406/     BE6 : 6F                  		ld	l,a
(1) 2407/     BE7 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2408/     BEA : CF                  		rst	8
(1) 2409/     BEB : AF                  		xor	a			; Clear high
(1) 2410/     BEC : 3F                  		ccf				; Clear carry
(1) 2411/     BED : CB 23               		sla	e			; << 1
(1) 2412/     BEF : 9F                  		sbc	a,a			; Get carry MSB
(1) 2413/     BF0 : 57                  		ld	d,a
(1) 2414/     BF1 : 19                  		add	hl,de
(1) 2415/     BF2 : 22 F3 1C            		ld	(wave_Pitch),hl
(1) 2416/     BF5 : D9                  		exx				; *
(1) 2417/     BF6 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; *
(1) 2418/     BFA : D9                  		exx				; *
(1) 2419/     BFB : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2420/     BFE : 2F                  		cpl				; REVERSE bits
(1) 2421/     BFF : E6 30               		and	00110000b
(1) 2422/     C01 : 07                  		rlca
(1) 2423/     C02 : 07                  		rlca
(1) 2424/     C03 : CF                  		rst	8
(1) 2425/     C04 : 5F                  		ld	e,a
(1) 2426/     C05 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2427/     C07 : C3 01 13            		jp	fm_send_2
(1) 2428/     C0A :                     
(1) 2429/     C0A :                     ; --------------------------------
(1) 2430/     C0A :                     ; PCM
(1) 2431/     C0A :                     ; --------------------------------
(1) 2432/     C0A :                     
(1) 2433/     C0A :                     .mk_pcm:
(1) 2435/     C0A : 16 00               		ld	d,0
(1) 2436/     C0C : FD 5E 03            		ld	e,(iy+ztbl_Chip)	; e - Channel ID
(1) 2437/     C0F : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Current note
(1) 2438/     C12 : DD E5               		push	ix
(1) 2439/     C14 : DD 21 D4 15         		ld	ix,pcmcom
(1) 2440/     C18 : DD 19               		add	ix,de
(1) 2441/     C1A : 1E 08               		ld	e,00001000b
(1) 2442/     C1C : CF                  		rst	8
(1) 2443/     C1D : 78                  		ld	a,b
(1) 2444/     C1E : E6 03               		and	0011b			; Note and Ins?
(1) 2445/     C20 : 28 11               		jr	z,.mkpcm_wrton
(1) 2446/     C22 : 79                  		ld	a,c
(1) 2447/     C23 : B7                  		or	a
(1) 2448/     C24 : C8                  		ret	z
(1) 2449/     C25 : FE FE               		cp	-2
(1) 2450/     C27 : CA 7B 0C            		jp	z,.pcm_cut
(1) 2451/     C2A : FE FF               		cp	-1
(1) 2452/     C2C : CA 74 0C            		jp	z,.pcm_off
(1) 2453/     C2F : 18 00               		jr	.pcm_note
(1) 2454/     C31 :                     .pcm_note:
(1) 2455/     C31 :                     ; 		ld	(ix+32),-1
(1) 2456/     C31 : 1E 01               		ld	e,00000001b		; KeyON request
(1) 2457/     C33 :                     .mkpcm_wrton:
(1) 2458/     C33 : DD 73 00            		ld	(ix),e			; Write key-on bit
(1) 2459/     C36 : CD 8B 0C            		call	.readfreq_pcm
(1) 2460/     C39 : 11 08 00            		ld	de,8			; Go to Pitch
(1) 2461/     C3C : DD 19               		add	ix,de
(1) 2462/     C3E : DD 74 00            		ld	(ix),h			; Set pitch
(1) 2463/     C41 : DD 19               		add	ix,de
(1) 2464/     C43 : DD 75 00            		ld	(ix),l
(1) 2465/     C46 : DD 19               		add	ix,de			; Go to volume
(1) 2466/     C48 :                     	; PCM volume
(1) 2467/     C48 : 0E FF               		ld	c,-1
(1) 2468/     C4A : FD 7E 04            		ld	a,(iy+ztbl_MasterVol)
(1) 2469/     C4D : FE 40               		cp	40h
(1) 2470/     C4F : 28 14               		jr	z,.vpcm_siln
(1) 2471/     C51 : 30 12               		jr	nc,.vpcm_siln
(1) 2472/     C53 : B7                  		or	a
(1) 2473/     C54 : FA 65 0C            		jp	m,.vpcm_siln
(1) 2474/     C57 : 87                  		add	a,a
(1) 2475/     C58 : 47                  		ld	b,a
(1) 2476/     C59 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2477/     C5C : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2478/     C5F : 87                  		add	a,a			; * 2
(1) 2479/     C60 : 3F                  		ccf
(1) 2480/     C61 : 98                  		sbc	a,b			; + MASTER vol
(1) 2481/     C62 : 87                  		add	a,a			; *2
(1) 2482/     C63 : 38 03               		jr	c,.vpcm_carry
(1) 2483/     C65 :                     .vpcm_siln:
(1) 2484/     C65 : AF                  		xor	a
(1) 2485/     C66 : 18 01               		jr	.vpcm_zero
(1) 2486/     C68 :                     .vpcm_carry:
(1) 2487/     C68 : 81                  		add	a,c
(1) 2488/     C69 :                     .vpcm_zero:
(1) 2489/     C69 : DD 77 00            		ld	(ix),a
(1) 2490/     C6C : 3E 01               		ld	a,1
(1) 2491/     C6E : 32 D0 18            		ld	(mcdUpd),a
(1) 2492/     C71 : DD E1               		pop	ix
(1) 2493/     C73 : C9                  		ret
(1) 2494/     C74 :                     
(1) 2495/     C74 :                     ; --------------------------------
(1) 2496/     C74 :                     ; -1
(1) 2497/     C74 :                     .pcm_off:
(1) 2498/     C74 : CF                  		rst	8
(1) 2499/     C75 : DD 36 00 02         		ld	(ix),0010b
(1) 2500/     C79 : 18 05               		jr	.pcm_setcoff
(1) 2501/     C7B :                     ; -2
(1) 2502/     C7B :                     .pcm_cut:
(1) 2503/     C7B : CF                  		rst	8
(1) 2504/     C7C : DD 36 00 04         		ld	(ix),0100b
(1) 2505/     C80 :                     .pcm_setcoff:
(1) 2506/     C80 : 3E 01               		ld	a,1
(1) 2507/     C82 : 32 D0 18            		ld	(mcdUpd),a
(1) 2508/     C85 : DD E1               		pop	ix
(1) 2509/     C87 : C3 83 0F            		jp	.chnl_ulnk
(1) 2513/     C8A :                     
(1) 2514/     C8A :                     ; --------------------------------
(1) 2515/     C8A :                     ; PWM
(1) 2516/     C8A :                     ; --------------------------------
(1) 2517/     C8A :                     
(1) 2518/     C8A :                     .mk_pwm:
(1) 2600/     C8A : C9                  		ret
(1) 2602/     C8B :                     
(1) 2603/     C8B :                     ; --------------------------------
(1) 2604/     C8B :                     ; SHARED routine
(1) 2605/     C8B :                     
(1) 2606/     C8B :                     .readfreq_pcm:
(1) 2607/     C8B : 21 14 15            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2608/     C8E : 18 03               		jr	.set_wavfreq
(1) 2609/     C90 :                     .readfreq_pwm:
(1) 2610/     C90 : 21 B2 14            		ld	hl,wavFreq_List-(2*36)
(1) 2611/     C93 :                     .set_wavfreq:
(1) 2612/     C93 : 16 00               		ld	d,0			; Freq index
(1) 2613/     C95 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2614/     C98 : 19                  		add	hl,de
(1) 2615/     C99 : 7E                  		ld	a,(hl)
(1) 2616/     C9A : 23                  		inc	hl
(1) 2617/     C9B : 66                  		ld	h,(hl)
(1) 2618/     C9C : 6F                  		ld	l,a
(1) 2619/     C9D : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2620/     CA0 : CF                  		rst	8
(1) 2621/     CA1 : AF                  		xor	a			; Clear high
(1) 2622/     CA2 : 3F                  		ccf				; Clear carry
(1) 2623/     CA3 : CB 23               		sla	e			; Get carry MSB
(1) 2624/     CA5 : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2625/     CA6 : 57                  		ld	d,a
(1) 2626/     CA7 : 19                  		add	hl,de
(1) 2627/     CA8 : C9                  		ret
(1) 2628/     CA9 :                     
(1) 2629/     CA9 :                     ; ----------------------------------------
(1) 2630/     CA9 :                     ; NEW effect
(1) 2631/     CA9 :                     ; ----------------------------------------
(1) 2632/     CA9 :                     
(1) 2633/     CA9 :                     .effc:
(1) 2634/     CA9 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2635/     CAC : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2636/     CAF : 57                  		ld	d,a
(1) 2637/     CB0 : CF                  		rst	8
(1) 2638/     CB1 : FE 04               		cp	4			; Effect D?
(1) 2639/     CB3 : 28 0F               		jr	z,.effc_D
(1) 2640/     CB5 : FE 05               		cp	5			; Effect E?
(1) 2641/     CB7 : 28 44               		jr	z,.effc_E
(1) 2642/     CB9 : FE 06               		cp	6			; Effect F?
(1) 2643/     CBB : 28 4F               		jr	z,.effc_F
(1) 2644/     CBD : CF                  		rst	8
(1) 2645/     CBE : FE 18               		cp	24			; Effect X?
(1) 2646/     CC0 : CA 1D 0D            		jp	z,.effc_X
(1) 2647/     CC3 : C9                  		ret
(1) 2648/     CC4 :                     
(1) 2649/     CC4 :                     ; ----------------------------------------
(1) 2650/     CC4 :                     ; Effect D: Volume slide up/down
(1) 2651/     CC4 :                     ;
(1) 2652/     CC4 :                     ; 00h - DON'T USE HERE
(1) 2653/     CC4 :                     ;       (Original: Keep effect)
(1) 2654/     CC4 :                     ; 0xh - Slide down normal
(1) 2655/     CC4 :                     ; Fxh - Slide down fine
(1) 2656/     CC4 :                     ; xFh - Slide up normal
(1) 2657/     CC4 :                     ; x0h - Slide up fine
(1) 2658/     CC4 :                     ; ----------------------------------------
(1) 2659/     CC4 :                     
(1) 2660/     CC4 :                     .effc_D:
(1) 2661/     CC4 : 7B                  		ld	a,e
(1) 2662/     CC5 : 0F                  		rrca
(1) 2663/     CC6 : 0F                  		rrca
(1) 2664/     CC7 : 0F                  		rrca
(1) 2665/     CC8 : 0F                  		rrca
(1) 2666/     CC9 : E6 0F               		and	0Fh
(1) 2667/     CCB : 4F                  		ld	c,a
(1) 2668/     CCC :                     	; e - DOWN value: ????dddd
(1) 2669/     CCC :                     	; c - UP value:   0000uuuu
(1) 2670/     CCC :                     
(1) 2671/     CCC : 7B                  		ld	a,e
(1) 2672/     CCD : B7                  		or	a
(1) 2673/     CCE : C8                  		ret	z
(1) 2674/     CCF : E6 F0               		and	0F0h		; 0Xh
(1) 2675/     CD1 : 28 1D               		jr	z,.D_down
(1) 2676/     CD3 : FE F0               		cp	0F0h		; FXh
(1) 2677/     CD5 : 28 14               		jr	z,.D_downhf
(1) 2678/     CD7 : 7B                  		ld	a,e
(1) 2679/     CD8 : E6 0F               		and	00Fh		; X0h
(1) 2680/     CDA : 28 06               		jr	z,.D_up
(1) 2681/     CDC : FE 0F               		cp	00Fh		; XFh
(1) 2682/     CDE : C0                  		ret	nz
(1) 2683/     CDF :                     ; 		jr	z,.D_uphf
(1) 2684/     CDF :                     ; Go UP
(1) 2685/     CDF :                     .D_uphf:
(1) 2686/     CDF : 79                  		ld	a,c
(1) 2687/     CE0 : 18 02               		jr	.setefU_D
(1) 2688/     CE2 :                     .D_up:
(1) 2689/     CE2 : 79                  		ld	a,c
(1) 2690/     CE3 : 87                  		add	a,a
(1) 2691/     CE4 :                     .setefU_D:
(1) 2692/     CE4 : 5F                  		ld	e,a
(1) 2693/     CE5 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2694/     CE8 : 93                  		sub	a,e
(1) 2695/     CE9 : 18 0E               		jr	.setef_mcD
(1) 2696/     CEB :                     ; Go DOWN
(1) 2697/     CEB :                     .D_downhf:
(1) 2698/     CEB : 7B                  		ld	a,e
(1) 2699/     CEC : E6 0F               		and	0Fh
(1) 2700/     CEE : 18 04               		jr	.setef_D
(1) 2701/     CF0 :                     .D_down:
(1) 2702/     CF0 : 7B                  		ld	a,e
(1) 2703/     CF1 : E6 0F               		and	0Fh
(1) 2704/     CF3 : 87                  		add	a,a
(1) 2705/     CF4 :                     .setef_D:
(1) 2706/     CF4 : 5F                  		ld	e,a
(1) 2707/     CF5 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2708/     CF8 : 83                  		add	a,e
(1) 2709/     CF9 :                     ; 		jr	.setef_mcD
(1) 2710/     CF9 :                     
(1) 2711/     CF9 :                     ; Write slide
(1) 2712/     CF9 :                     .setef_mcD:
(1) 2713/     CF9 : FD 77 08            		ld	(iy+ztbl_VolSlide),a
(1) 2714/     CFC : C9                  		ret
(1) 2715/     CFD :                     
(1) 2716/     CFD :                     ; ----------------------------------------
(1) 2717/     CFD :                     ; Effect E
(1) 2718/     CFD :                     ; ----------------------------------------
(1) 2719/     CFD :                     
(1) 2720/     CFD :                     .effc_E:
(1) 2721/     CFD : 7B                  		ld	a,e
(1) 2722/     CFE : E6 F0               		and	0F0h
(1) 2723/     D00 : FE F0               		cp	0F0h
(1) 2724/     D02 : C8                  		ret	z
(1) 2725/     D03 : FE E0               		cp	0E0h
(1) 2726/     D05 : C8                  		ret	z
(1) 2727/     D06 : CF                  		rst	8
(1) 2728/     D07 : 7B                  		ld	a,e
(1) 2729/     D08 : ED 44               		neg	a
(1) 2730/     D0A : 18 0B               		jr	.wrt_EF
(1) 2731/     D0C :                     
(1) 2732/     D0C :                     ; ----------------------------------------
(1) 2733/     D0C :                     ; Effect F
(1) 2734/     D0C :                     ; ----------------------------------------
(1) 2735/     D0C :                     
(1) 2736/     D0C :                     .effc_F:
(1) 2737/     D0C : 7B                  		ld	a,e
(1) 2738/     D0D : E6 F0               		and	0F0h
(1) 2739/     D0F : FE F0               		cp	0F0h
(1) 2740/     D11 : C8                  		ret	z
(1) 2741/     D12 : FE E0               		cp	0E0h
(1) 2742/     D14 : C8                  		ret	z
(1) 2743/     D15 : CF                  		rst	8
(1) 2744/     D16 : 7B                  		ld	a,e
(1) 2745/     D17 :                     .wrt_EF:
(1) 2746/     D17 : 87                  		add	a,a
(1) 2747/     D18 : 87                  		add	a,a
(1) 2748/     D19 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2749/     D1C : C9                  		ret
(1) 2750/     D1D :                     
(1) 2751/     D1D :                     ; ----------------------------------------
(1) 2752/     D1D :                     ; Effect X
(1) 2753/     D1D :                     ;
(1) 2754/     D1D :                     ; Common panning values:
(1) 2755/     D1D :                     ;  00h LEFT
(1) 2756/     D1D :                     ;  80h MIDDLE
(1) 2757/     D1D :                     ; 0FFh RIGHT
(1) 2758/     D1D :                     ; ----------------------------------------
(1) 2759/     D1D :                     
(1) 2760/     D1D :                     .effc_X:
(1) 2761/     D1D : 16 00               		ld	d,0
(1) 2762/     D1F : 7E                  		ld	a,(hl)
(1) 2763/     D20 : E6 F0               		and	11110000b
(1) 2764/     D22 : FE 80               		cp	80h		; PSG?
(1) 2765/     D24 : 28 19               		jr	z,.res_pan
(1) 2766/     D26 : FE 90               		cp	90h		; PSGN?
(1) 2767/     D28 : 28 15               		jr	z,.res_pan
(1) 2768/     D2A : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2769/     D2C : CC 49 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2770/     D2F :                     
(1) 2771/     D2F :                     	; ----------------------------------------
(1) 2772/     D2F :                     	; Common panning bits: %00LR0000
(1) 2773/     D2F :                     	; (REVERSE: 0-on 1-off)
(1) 2774/     D2F : CF                  		rst	8
(1) 2775/     D30 : E5                  		push	hl
(1) 2776/     D31 : 21 6C 0D            		ld	hl,.comn_panlist
(1) 2777/     D34 : 7B                  		ld	a,e
(1) 2778/     D35 : 07                  		rlca
(1) 2779/     D36 : 07                  		rlca
(1) 2780/     D37 : 07                  		rlca
(1) 2781/     D38 : E6 07               		and	0111b
(1) 2782/     D3A :                     ; 		ld	d,0
(1) 2783/     D3A : 5F                  		ld	e,a
(1) 2784/     D3B : CF                  		rst	8
(1) 2785/     D3C : 19                  		add	hl,de
(1) 2786/     D3D : 56                  		ld	d,(hl)
(1) 2787/     D3E : E1                  		pop	hl
(1) 2788/     D3F :                     .res_pan:
(1) 2789/     D3F : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2790/     D42 : E6 CF               		and	11001111b
(1) 2791/     D44 : B2                  		or	d
(1) 2792/     D45 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2793/     D48 : C9                  		ret
(1) 2794/     D49 :                     
(1) 2795/     D49 :                     	; ----------------------------------------
(1) 2796/     D49 :                     	; MCD panning
(1) 2797/     D49 :                     .pan_mcd:
(1) 2798/     D49 : E5                  		push	hl
(1) 2799/     D4A : D5                  		push	de
(1) 2800/     D4B : 16 00               		ld	d,0
(1) 2801/     D4D : 21 74 0D            		ld	hl,.pcm_panlist
(1) 2802/     D50 : 7B                  		ld	a,e
(1) 2803/     D51 : E6 F8               		and	0F8h
(1) 2804/     D53 : 0F                  		rrca
(1) 2805/     D54 : 0F                  		rrca
(1) 2806/     D55 : 0F                  		rrca
(1) 2807/     D56 : 5F                  		ld	e,a
(1) 2808/     D57 : 19                  		add	hl,de
(1) 2809/     D58 : 7E                  		ld	a,(hl)
(1) 2810/     D59 : 21 F4 15            		ld	hl,pcmcom+32
(1) 2811/     D5C : 16 00               		ld	d,0
(1) 2812/     D5E : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2813/     D61 : 19                  		add	hl,de
(1) 2814/     D62 : 2F                  		cpl
(1) 2815/     D63 : 77                  		ld	(hl),a
(1) 2816/     D64 : D1                  		pop	de
(1) 2817/     D65 : E1                  		pop	hl
(1) 2818/     D66 : 3E 01               		ld	a,1
(1) 2819/     D68 : 32 D0 18            		ld	(mcdUpd),a
(1) 2820/     D6B : C9                  		ret
(1) 2821/     D6C :                     
(1) 2822/     D6C :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2823/     D6C :                     ; 00LR0000b
(1) 2824/     D6C :                     .comn_panlist:
(1) 2825/     D6C : 10                  		db 00010000b
(1) 2826/     D6D : 10                  		db 00010000b
(1) 2827/     D6E : 10                  		db 00010000b
(1) 2828/     D6F : 00                  		db 00000000b
(1) 2829/     D70 : 00                  		db 00000000b
(1) 2830/     D71 : 20                  		db 00100000b
(1) 2831/     D72 : 20                  		db 00100000b
(1) 2832/     D73 : 20                  		db 00100000b
(1) 2833/     D74 :                     
(1) 2834/     D74 :                     ; REVERSE OUTPUT BITS
(1) 2835/     D74 :                     ; RRRR | LLLL
(1) 2836/     D74 :                     .pcm_panlist:
(1) 2837/     D74 : F0                  		db 0F0h	; 00h
(1) 2838/     D75 : E0                  		db 0E0h
(1) 2839/     D76 : D0                  		db 0D0h	; 10h
(1) 2840/     D77 : C0                  		db 0C0h
(1) 2841/     D78 : B0                  		db 0B0h	; 20h
(1) 2842/     D79 : A0                  		db 0A0h
(1) 2843/     D7A : 90                  		db 090h	; 30h
(1) 2844/     D7B : 80                  		db 080h
(1) 2845/     D7C : 70                  		db 070h	; 40h
(1) 2846/     D7D : 60                  		db 060h
(1) 2847/     D7E : 50                  		db 050h	; 50h
(1) 2848/     D7F : 40                  		db 040h
(1) 2849/     D80 : 30                  		db 030h	; 60h
(1) 2850/     D81 : 20                  		db 020h
(1) 2851/     D82 : 10                  		db 010h	; 70h
(1) 2852/     D83 : 00                  		db 000h
(1) 2853/     D84 : 00                  		db 000h ; 80h
(1) 2854/     D85 : 01                  		db 001h
(1) 2855/     D86 : 02                  		db 002h ; 90h
(1) 2856/     D87 : 03                  		db 003h
(1) 2857/     D88 : 04                  		db 004h ; A0h
(1) 2858/     D89 : 05                  		db 005h
(1) 2859/     D8A : 06                  		db 006h ; B0h
(1) 2860/     D8B : 07                  		db 007h
(1) 2861/     D8C : 08                  		db 008h ; C0h
(1) 2862/     D8D : 09                  		db 009h
(1) 2863/     D8E : 0A                  		db 00Ah ; D0h
(1) 2864/     D8F : 0B                  		db 00Bh
(1) 2865/     D90 : 0C                  		db 00Ch ; E0h
(1) 2866/     D91 : 0D                  		db 00Dh
(1) 2867/     D92 : 0E                  		db 00Eh ; F0h
(1) 2868/     D93 : 0F                  		db 00Fh
(1) 2869/     D94 :                     
(1) 2870/     D94 :                     ; ----------------------------------------
(1) 2871/     D94 :                     ; NEW volume
(1) 2872/     D94 :                     ; ----------------------------------------
(1) 2873/     D94 :                     
(1) 2874/     D94 :                     .volu:
(1) 2875/     D94 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2876/     D97 : D6 40               		sub	a,64
(1) 2877/     D99 : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2878/     D9C : C9                  		ret
(1) 2879/     D9D :                     
(1) 2880/     D9D :                     ; ----------------------------------------
(1) 2881/     D9D :                     ; NEW instrument
(1) 2882/     D9D :                     ; ----------------------------------------
(1) 2883/     D9D :                     
(1) 2884/     D9D :                     .inst:
(1) 2885/     D9D : 7E                  		ld	a,(hl)
(1) 2886/     D9E : E6 F0               		and	11110000b
(1) 2887/     DA0 : FE 80               		cp	080h
(1) 2888/     DA2 : 28 24               		jr	z,.ins_psg
(1) 2889/     DA4 : FE 90               		cp	090h
(1) 2890/     DA6 : 28 1A               		jr	z,.ins_psgn
(1) 2891/     DA8 : FE A0               		cp	0A0h
(1) 2892/     DAA : 28 52               		jr	z,.ins_fm
(1) 2893/     DAC : CF                  		rst	8
(1) 2894/     DAD : FE B0               		cp	0B0h
(1) 2895/     DAF : 28 4D               		jr	z,.ins_fm
(1) 2896/     DB1 : FE C0               		cp	0C0h
(1) 2897/     DB3 : CA 5B 0E            		jp	z,.ins_dac
(1) 2898/     DB6 : FE D0               		cp	0D0h
(1) 2899/     DB8 : CA AF 0E            		jp	z,.ins_pcm
(1) 2900/     DBB : FE E0               		cp	0E0h
(1) 2901/     DBD : CA EE 0E            		jp	z,.ins_pwm
(1) 2902/     DC0 : CF                  		rst	8
(1) 2903/     DC1 :                     .invl_ins:
(1) 2904/     DC1 : C9                  		ret
(1) 2905/     DC2 :                     
(1) 2906/     DC2 :                     ; ----------------------------------------
(1) 2907/     DC2 :                     ; PSG
(1) 2908/     DC2 :                     
(1) 2909/     DC2 :                     .ins_psgn:
(1) 2910/     DC2 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2911/     DC3 : E6 07               		and	0111b
(1) 2912/     DC5 : 32 2F 00            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2913/     DC8 :                     .ins_psg:
(1) 2914/     DC8 : CF                  		rst	8
(1) 2915/     DC9 : DD E5               		push	ix
(1) 2916/     DCB : E5                  		push	hl
(1) 2917/     DCC : 23                  		inc	hl		; Skip ID
(1) 2918/     DCD : DD 21 4C 16         		ld	ix,psgcom	; Read psg control
(1) 2919/     DD1 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2920/     DD4 : 16 00               		ld	d,0
(1) 2921/     DD6 : DD 19               		add	ix,de
(1) 2922/     DD8 : 7E                  		ld	a,(hl)
(1) 2923/     DD9 : CF                  		rst	8
(1) 2924/     DDA : 23                  		inc	hl
(1) 2925/     DDB : 7E                  		ld	a,(hl)
(1) 2926/     DDC : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2927/     DDF : 23                  		inc	hl
(1) 2928/     DE0 : 7E                  		ld	a,(hl)
(1) 2929/     DE1 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2930/     DE4 : 23                  		inc	hl
(1) 2931/     DE5 : 7E                  		ld	a,(hl)
(1) 2932/     DE6 : CF                  		rst	8
(1) 2933/     DE7 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2934/     DEA : 23                  		inc	hl
(1) 2935/     DEB : 7E                  		ld	a,(hl)
(1) 2936/     DEC : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2937/     DEF : 23                  		inc	hl
(1) 2938/     DF0 : 7E                  		ld	a,(hl)
(1) 2939/     DF1 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2940/     DF4 : 23                  		inc	hl
(1) 2941/     DF5 : 7E                  		ld	a,(hl)
(1) 2942/     DF6 : CF                  		rst	8
(1) 2943/     DF7 : DD 77 2C            		ld	(ix+ARP),a	; ARP
(1) 2944/     DFA : E1                  		pop	hl
(1) 2945/     DFB : DD E1               		pop	ix
(1) 2946/     DFD : C9                  		ret
(1) 2947/     DFE :                     
(1) 2948/     DFE :                     ; ----------------------------------------
(1) 2949/     DFE :                     ; FM/FM3
(1) 2950/     DFE :                     
(1) 2951/     DFE :                     .ins_fm:
(1) 2952/     DFE : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2953/     E01 : E6 07               		and	0111b
(1) 2954/     E03 : 16 00               		ld	d,0
(1) 2955/     E05 : 87                  		add	a,a
(1) 2956/     E06 : 5F                  		ld	e,a
(1) 2957/     E07 : DD E5               		push	ix
(1) 2958/     E09 : E5                  		push	hl
(1) 2959/     E0A : C5                  		push	bc
(1) 2960/     E0B : DD 21 C9 18         		ld	ix,fmcach_list
(1) 2961/     E0F : DD 19               		add	ix,de
(1) 2962/     E11 : CF                  		rst	8
(1) 2963/     E12 : DD 5E 00            		ld	e,(ix)
(1) 2964/     E15 : DD 23               		inc	ix
(1) 2965/     E17 : DD 56 00            		ld	d,(ix)
(1) 2966/     E1A :                     
(1) 2967/     E1A : DD 21 78 17         		ld	ix,fmlist_rsave
(1) 2968/     E1E : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2969/     E21 : 87                  		add	a,a
(1) 2970/     E22 : 87                  		add	a,a
(1) 2971/     E23 : 06 00               		ld	b,0
(1) 2972/     E25 : 4F                  		ld	c,a
(1) 2973/     E26 : DD 09               		add	ix,bc
(1) 2974/     E28 : 23                  		inc	hl			; Skip id and pitch
(1) 2975/     E29 : 23                  		inc	hl
(1) 2976/     E2A : 46                  		ld	b,(hl)
(1) 2977/     E2B : 23                  		inc	hl
(1) 2978/     E2C : 7E                  		ld	a,(hl)
(1) 2979/     E2D : 23                  		inc	hl
(1) 2980/     E2E : 6E                  		ld	l,(hl)
(1) 2981/     E2F : 67                  		ld	h,a
(1) 2982/     E30 :                     	;   ix - last MID and LOW bytes
(1) 2983/     E30 :                     	;   de - current FM cache
(1) 2984/     E30 :                     	; b,hl - 24-bit ROM address
(1) 2985/     E30 : DD 7E 02            		ld	a,(ix+2)
(1) 2986/     E33 : B8                  		cp	b
(1) 2987/     E34 : 20 0E               		jr	nz,.new_romdat
(1) 2988/     E36 : CF                  		rst	8
(1) 2989/     E37 : DD 7E 01            		ld	a,(ix+1)
(1) 2990/     E3A : BC                  		cp	h
(1) 2991/     E3B : 20 07               		jr	nz,.new_romdat
(1) 2992/     E3D : DD 7E 00            		ld	a,(ix)
(1) 2993/     E40 : BD                  		cp	l
(1) 2994/     E41 : 28 13               		jr	z,.same_patch
(1) 2995/     E43 : CF                  		rst	8
(1) 2996/     E44 :                     .new_romdat:
(1) 2997/     E44 : DD 70 02            		ld	(ix+2),b
(1) 2998/     E47 : DD 74 01            		ld	(ix+1),h
(1) 2999/     E4A : DD 75 00            		ld	(ix),l
(1) 3000/     E4D : E7                  		rst	20h			; TODO
(1) 3001/     E4E : CF                  		rst	8
(1) 3002/     E4F : 78                  		ld	a,b
(1) 3003/     E50 : 01 28 00            		ld	bc,28h			; <- size
(1) 3004/     E53 : CD D8 10            		call	readRom			; *** ROM ACCESS ***
(1) 3005/     E56 :                     .same_patch:
(1) 3006/     E56 : C1                  		pop	bc
(1) 3007/     E57 : E1                  		pop	hl
(1) 3008/     E58 : DD E1               		pop	ix
(1) 3009/     E5A : C9                  		ret
(1) 3010/     E5B :                     
(1) 3011/     E5B :                     ; ----------------------------------------
(1) 3012/     E5B :                     
(1) 3013/     E5B :                     .ins_dac:
(1) 3014/     E5B : E5                  		push	hl
(1) 3015/     E5C : C5                  		push	bc
(1) 3016/     E5D : CD 21 13            		call	dac_off
(1) 3017/     E60 : 7E                  		ld	a,(hl)
(1) 3018/     E61 : E6 0F               		and	00001111b
(1) 3019/     E63 : 32 F5 1C            		ld	(wave_Flags),a
(1) 3020/     E66 : CF                  		rst	8
(1) 3021/     E67 : 23                  		inc	hl
(1) 3022/     E68 : 23                  		inc	hl
(1) 3023/     E69 : 5E                  		ld	e,(hl)
(1) 3024/     E6A : 23                  		inc	hl
(1) 3025/     E6B : 7E                  		ld	a,(hl)
(1) 3026/     E6C : 23                  		inc	hl
(1) 3027/     E6D : 6E                  		ld	l,(hl)
(1) 3028/     E6E : 67                  		ld	h,a
(1) 3029/     E6F : E5                  		push	hl
(1) 3030/     E70 : 7B                  		ld	a,e
(1) 3031/     E71 : 01 06 00            		ld	bc,6		; Skip head
(1) 3032/     E74 : 09                  		add	hl,bc
(1) 3033/     E75 : CE 00               		adc	a,0
(1) 3034/     E77 : 22 EA 1C            		ld	(wave_Start),hl	; Set START point
(1) 3035/     E7A : 32 EC 1C            		ld	(wave_Start+2),a
(1) 3036/     E7D : E1                  		pop	hl
(1) 3037/     E7E : 7B                  		ld	a,e
(1) 3038/     E7F : 11 ED 18            		ld	de,sampleHead
(1) 3039/     E82 : 01 06 00            		ld	bc,6
(1) 3040/     E85 : D5                  		push	de
(1) 3041/     E86 : CF                  		rst	8
(1) 3042/     E87 : CD D8 10            		call	readRom	; *** ROM ACCESS ***
(1) 3043/     E8A : E1                  		pop	hl
(1) 3044/     E8B :                     	; hl - temporal header
(1) 3045/     E8B : 5E                  		ld	e,(hl)
(1) 3046/     E8C : 23                  		inc	hl
(1) 3047/     E8D : 56                  		ld	d,(hl)
(1) 3048/     E8E : 23                  		inc	hl
(1) 3049/     E8F : 7E                  		ld	a,(hl)
(1) 3050/     E90 : 23                  		inc	hl
(1) 3051/     E91 : ED 53 ED 1C         		ld	(wave_Len),de	; LEN
(1) 3052/     E95 : 32 EF 1C            		ld	(wave_Len+2),a
(1) 3053/     E98 : 5E                  		ld	e,(hl)
(1) 3054/     E99 : 23                  		inc	hl
(1) 3055/     E9A : CF                  		rst	8
(1) 3056/     E9B : 56                  		ld	d,(hl)
(1) 3057/     E9C : 23                  		inc	hl
(1) 3058/     E9D : 7E                  		ld	a,(hl)
(1) 3059/     E9E : 23                  		inc	hl
(1) 3060/     E9F : ED 53 F0 1C         		ld	(wave_Loop),de	; LOOP
(1) 3061/     EA3 : 32 F2 1C            		ld	(wave_Loop+2),a
(1) 3062/     EA6 : 11 06 28            		ld	de,2806h	; keys off
(1) 3063/     EA9 : CD F6 12            		call	fm_send_1
(1) 3064/     EAC : C1                  		pop	bc
(1) 3065/     EAD : E1                  		pop	hl
(1) 3066/     EAE :                     ; .same_dac:
(1) 3067/     EAE : C9                  		ret
(1) 3068/     EAF :                     
(1) 3069/     EAF :                     ; ----------------------------------------
(1) 3070/     EAF :                     
(1) 3071/     EAF :                     .ins_pcm:
(1) 3072/     EAF : DD E5               		push	ix
(1) 3073/     EB1 : E5                  		push	hl
(1) 3074/     EB2 : C5                  		push	bc
(1) 3075/     EB3 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3076/     EB4 : E6 01               		and	00000001b	; Read loop bit
(1) 3077/     EB6 : 0F                  		rrca			; Move to MSB
(1) 3078/     EB7 : CF                  		rst	8
(1) 3079/     EB8 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3080/     EB9 : 23                  		inc	hl
(1) 3081/     EBA : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3082/     EBB : B3                  		or	e
(1) 3083/     EBC : 5F                  		ld	e,a
(1) 3084/     EBD : 23                  		inc	hl
(1) 3085/     EBE : 7E                  		ld	a,(hl)
(1) 3086/     EBF : 23                  		inc	hl
(1) 3087/     EC0 : 6E                  		ld	l,(hl)
(1) 3088/     EC1 : 67                  		ld	h,a
(1) 3089/     EC2 :                     	; d    - Loop enable bit
(1) 3090/     EC2 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3091/     EC2 : CF                  		rst	8
(1) 3092/     EC3 : DD 21 D4 15         		ld	ix,pcmcom
(1) 3093/     EC7 : 06 00               		ld	b,0
(1) 3094/     EC9 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3095/     ECC : DD 09               		add	ix,bc
(1) 3096/     ECE : 01 28 00            		ld	bc,40		; Go to 40
(1) 3097/     ED1 : DD 09               		add	ix,bc
(1) 3098/     ED3 : 01 08 00            		ld	bc,8
(1) 3099/     ED6 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3100/     ED9 : DD 09               		add	ix,bc
(1) 3101/     EDB : DD 74 00            		ld	(ix),h
(1) 3102/     EDE : DD 09               		add	ix,bc
(1) 3103/     EE0 : CF                  		rst	8
(1) 3104/     EE1 : DD 75 00            		ld	(ix),l
(1) 3105/     EE4 : C1                  		pop	bc
(1) 3106/     EE5 : E1                  		pop	hl
(1) 3107/     EE6 : DD E1               		pop	ix
(1) 3108/     EE8 : 3E 01               		ld	a,1
(1) 3109/     EEA : 32 D0 18            		ld	(mcdUpd),a
(1) 3110/     EED : C9                  		ret
(1) 3111/     EEE :                     
(1) 3112/     EEE :                     ; ----------------------------------------
(1) 3113/     EEE :                     
(1) 3114/     EEE :                     .ins_pwm:
(1) 3115/     EEE : DD E5               		push	ix
(1) 3116/     EF0 : E5                  		push	hl
(1) 3117/     EF1 : C5                  		push	bc
(1) 3118/     EF2 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3119/     EF3 : E6 03               		and	00000011b
(1) 3120/     EF5 : 0F                  		rrca
(1) 3121/     EF6 : 0F                  		rrca
(1) 3122/     EF7 : 4F                  		ld	c,a
(1) 3123/     EF8 : CF                  		rst	8
(1) 3124/     EF9 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3125/     EFA : 23                  		inc	hl
(1) 3126/     EFB : 56                  		ld	d,(hl)
(1) 3127/     EFC : 23                  		inc	hl
(1) 3128/     EFD : 5E                  		ld	e,(hl)
(1) 3129/     EFE : 23                  		inc	hl
(1) 3130/     EFF : 7E                  		ld	a,(hl)
(1) 3131/     F00 : 23                  		inc	hl
(1) 3132/     F01 : 6E                  		ld	l,(hl)
(1) 3133/     F02 : 67                  		ld	h,a
(1) 3134/     F03 : 79                  		ld	a,c
(1) 3135/     F04 : B2                  		or	d
(1) 3136/     F05 : 57                  		ld	d,a
(1) 3137/     F06 : CF                  		rst	8
(1) 3138/     F07 :                     	; de,hl - 32-bit PWM pointer
(1) 3139/     F07 : DD 21 14 16         		ld	ix,pwmcom
(1) 3140/     F0B : 06 00               		ld	b,0
(1) 3141/     F0D : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3142/     F10 : DD 09               		add	ix,bc
(1) 3143/     F12 : 01 18 00            		ld	bc,24
(1) 3144/     F15 : DD 09               		add	ix,bc		; Move to PWOUTF
(1) 3145/     F17 : 01 08 00            		ld	bc,8
(1) 3146/     F1A : DD 72 00            		ld	(ix),d
(1) 3147/     F1D : DD 09               		add	ix,bc
(1) 3148/     F1F : DD 73 00            		ld	(ix),e
(1) 3149/     F22 : DD 09               		add	ix,bc
(1) 3150/     F24 : DD 74 00            		ld	(ix),h
(1) 3151/     F27 : CF                  		rst	8
(1) 3152/     F28 : DD 09               		add	ix,bc
(1) 3153/     F2A : DD 75 00            		ld	(ix),l
(1) 3154/     F2D : C1                  		pop	bc
(1) 3155/     F2E : E1                  		pop	hl
(1) 3156/     F2F : DD E1               		pop	ix
(1) 3157/     F31 : 3E 01               		ld	a,1
(1) 3158/     F33 : 32 CF 18            		ld	(marsUpd),a
(1) 3159/     F36 : C9                  		ret
(1) 3160/     F37 :                     
(1) 3161/     F37 :                     ; ----------------------------------------
(1) 3162/     F37 :                     ; NEW note
(1) 3163/     F37 :                     ; ----------------------------------------
(1) 3164/     F37 :                     
(1) 3165/     F37 :                     .note:
(1) 3166/     F37 : 78                  		ld	a,b			; Volume bit?
(1) 3167/     F38 : E6 04               		and	0100b
(1) 3168/     F3A : 20 05               		jr	nz,.fm_hasvol
(1) 3169/     F3C : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3170/     F40 : CF                  		rst	8
(1) 3171/     F41 :                     .fm_hasvol:
(1) 3172/     F41 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3173/     F44 : 4F                  		ld	c,a
(1) 3174/     F45 : FE FF               		cp	-1
(1) 3175/     F47 : C8                  		ret	z
(1) 3176/     F48 : FE FE               		cp	-2
(1) 3177/     F4A : C8                  		ret	z
(1) 3178/     F4B : CF                  		rst	8
(1) 3179/     F4C : 7E                  		ld	a,(hl)
(1) 3180/     F4D : E6 F0               		and	11110000b
(1) 3181/     F4F : FE A0               		cp	0A0h
(1) 3182/     F51 : 28 0B               		jr	z,.n_fm
(1) 3183/     F53 :                     
(1) 3184/     F53 :                     ; --------------------------------
(1) 3185/     F53 :                     
(1) 3186/     F53 :                     .n_indx:
(1) 3187/     F53 : 79                  		ld	a,c
(1) 3188/     F54 :                     .n_stfreq:
(1) 3189/     F54 : 23                  		inc	hl			; Skip ID
(1) 3190/     F55 : 5E                  		ld	e,(hl)			; Read pitch
(1) 3191/     F56 : 2B                  		dec	hl
(1) 3192/     F57 : 83                  		add	a,e			; Note + pitch
(1) 3193/     F58 : CF                  		rst	8
(1) 3194/     F59 : 87                  		add	a,a			; * 2
(1) 3195/     F5A : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3196/     F5D : C9                  		ret
(1) 3197/     F5E :                     
(1) 3198/     F5E :                     ; --------------------------------
(1) 3199/     F5E :                     ; FM custom search
(1) 3200/     F5E :                     
(1) 3201/     F5E :                     .n_fm:
(1) 3202/     F5E : 79                  		ld	a,c
(1) 3203/     F5F : 23                  		inc	hl		; Skip ID
(1) 3204/     F60 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3205/     F61 : 2B                  		dec	hl
(1) 3206/     F62 : CF                  		rst	8
(1) 3207/     F63 : 83                  		add	a,e		; Note + pitch
(1) 3208/     F64 :                     	; Search for octave and note...
(1) 3209/     F64 : 0E 00               		ld	c,0		; c - octave
(1) 3210/     F66 : 16 07               		ld	d,7
(1) 3211/     F68 :                     .get_oct:
(1) 3212/     F68 : 5F                  		ld	e,a		; e - note
(1) 3213/     F69 : D6 0C               		sub	12
(1) 3214/     F6B : FA 72 0F            		jp	m,.fnd_oct
(1) 3215/     F6E : 0C                  		inc	c
(1) 3216/     F6F : 15                  		dec	d
(1) 3217/     F70 : 20 F6               		jr	nz,.get_oct
(1) 3218/     F72 :                     .fnd_oct:
(1) 3219/     F72 : CF                  		rst	8
(1) 3220/     F73 : 7B                  		ld	a,e
(1) 3221/     F74 : 87                  		add	a,a			; Note * 2
(1) 3222/     F75 : E6 1F               		and	00011111b
(1) 3223/     F77 : CB 09               		rrc	c
(1) 3224/     F79 : CB 09               		rrc	c
(1) 3225/     F7B : CB 09               		rrc	c
(1) 3226/     F7D : CF                  		rst	8
(1) 3227/     F7E : B1                  		or	c
(1) 3228/     F7F : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3229/     F82 : C9                  		ret
(1) 3230/     F83 :                     
(1) 3231/     F83 :                     ; ----------------------------------------
(1) 3232/     F83 :                     ; Unlock channel
(1) 3233/     F83 :                     ; ----------------------------------------
(1) 3234/     F83 :                     
(1) 3235/     F83 :                     .chnl_ulnk:
(1) 3236/     F83 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 3237/     F86 : CF                  		rst	8
(1) 3238/     F87 : FD E5               		push	iy
(1) 3239/     F89 : E1                  		pop	hl
(1) 3240/     F8A :                     
(1) 3241/     F8A :                     ; ----------------------------------------
(1) 3242/     F8A :                     ; Reset all table
(1) 3243/     F8A :                     ;
(1) 3244/     F8A :                     ; Input:
(1) 3245/     F8A :                     ; hl - Channel table
(1) 3246/     F8A :                     ; d  - Silence chip
(1) 3247/     F8A :                     ;
(1) 3248/     F8A :                     ; Uses:
(1) 3249/     F8A :                     ; b,de,hl
(1) 3250/     F8A :                     ; ----------------------------------------
(1) 3251/     F8A :                     
(1) 3252/     F8A :                     tblz_clear:
(1) 3253/     F8A : 06 0E               		ld	b,MAX_TBLSIZE-4
(1) 3254/     F8C : AF                  		xor	a
(1) 3255/     F8D : 77                  		ld	(hl),a			; 0 - Delete link
(1) 3256/     F8E : 23                  		inc	hl
(1) 3257/     F8F : 77                  		ld	(hl),a
(1) 3258/     F90 : 23                  		inc	hl
(1) 3259/     F91 : 72                  		ld	(hl),d			; 2 - Write silence request
(1) 3260/     F92 : 23                  		inc	hl
(1) 3261/     F93 : 23                  		inc	hl			; 3 - skip ID
(1) 3262/     F94 :                     .clr_all:
(1) 3263/     F94 : 77                  		ld	(hl),a
(1) 3264/     F95 : 23                  		inc	hl
(1) 3265/     F96 : 10 FC               		djnz	.clr_all
(1) 3266/     F98 : C9                  		ret
(1) 3267/     F99 :                     
(1) 3268/     F99 :                     ; ============================================================
(1) 3269/     F99 :                     ; --------------------------------------------------------
(1) 3270/     F99 :                     ; Communication with the SCD and 32X
(1) 3271/     F99 :                     ;
(1) 3272/     F99 :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3273/     F99 :                     ;    | Uses: commM,comm18-1F
(1) 3274/     F99 :                     ;    |
(1) 3275/     F99 :                     ; 32X: Interrupts Slave SH2
(1) 3276/     F99 :                     ;    | Uses: comm8-comm11 (CMD request)
(1) 3277/     F99 :                     ;    | two bits of comm14
(1) 3278/     F99 :                     ; --------------------------------------------------------
(1) 3279/     F99 :                     
(1) 3280/     F99 :                     zmars_send:
(1) 3281/     F99 :                     	; ----------------------------------------
(1) 3282/     F99 :                     	; Send PCM table
(1) 3284/     F99 : 3A 89 1F            		ld	a,(mcdBlock)	; Enable MARS requests?
(1) 3285/     F9C : B7                  		or	a
(1) 3286/     F9D : C2 18 10            		jp	nz,.mcdt_blocked
(1) 3287/     FA0 : FD 21 0E A0         		ld	iy,8000h|200Eh	; iy - command ports
(1) 3288/     FA4 : CF                  		rst	8
(1) 3289/     FA5 : 3A D0 18            		ld	a,(mcdUpd)	; NEW transfer?
(1) 3290/     FA8 : B7                  		or	a
(1) 3291/     FA9 : CA 18 10            		jp	z,.mcdt_blocked
(1) 3292/     FAC : AF                  		xor	a
(1) 3293/     FAD : 32 D0 18            		ld	(mcdUpd),a
(1) 3294/     FB0 : E7                  		rst	20h
(1) 3295/     FB1 : CD 2E 10            		call	.set_combank
(1) 3296/     FB4 : DD 21 D4 15         		ld	ix,pcmcom
(1) 3297/     FB8 : 21 00 A0            		ld	hl,8000h|2000h
(1) 3298/     FBB :                     .wait_in:
(1) 3299/     FBB : FD 7E 01            		ld	a,(iy+1)	; SUB is busy?
(1) 3300/     FBE : B7                  		or	a
(1) 3301/     FBF : FA BB 0F            		jp	m,.wait_in
(1) 3302/     FC2 : FD 7E 00            		ld	a,(iy)		; MAIN got first?
(1) 3303/     FC5 : B7                  		or	a		; != 0
(1) 3304/     FC6 : 20 F3               		jr	nz,.wait_in
(1) 3305/     FC8 : 0E C0               		ld	c,0C0h
(1) 3306/     FCA : FD 71 00            		ld	(iy),c		; Set our entrance ID
(1) 3307/     FCD : 06 0E               		ld	b,14		; Retry 14 times
(1) 3308/     FCF :                     .make_sure:
(1) 3309/     FCF : FD 7E 00            		ld	a,(iy)		; Check if did write
(1) 3310/     FD2 : B9                  		cp	c
(1) 3311/     FD3 : 20 E6               		jr	nz,.wait_in
(1) 3312/     FD5 : 10 F8               		djnz	.make_sure
(1) 3313/     FD7 : 36 81               		ld	(hl),81h	; Request IRQ
(1) 3314/     FD9 : CF                  		rst	8
(1) 3315/     FDA :                     .test_sub:
(1) 3316/     FDA : FD 7E 01            		ld	a,(iy+1)	; Sub response?
(1) 3317/     FDD : E6 C0               		and	0C0h
(1) 3318/     FDF : FE C0               		cp	0C0h
(1) 3319/     FE1 : 20 F7               		jr	nz,.test_sub
(1) 3320/     FE3 : FD CB 00 EE         		set	5,(iy)		; "MAIN" lock
(1) 3321/     FE7 : CF                  		rst	8
(1) 3322/     FE8 : 11 18 00            		ld	de,10h+8	; ix - MAIN comm ports
(1) 3323/     FEB : 19                  		add	hl,de
(1) 3324/     FEC :                     	; ix - table
(1) 3325/     FEC :                     	; hl - main data
(1) 3326/     FEC : 0E 08               		ld	c,40h/8		; c - Packets to send
(1) 3327/     FEE :                     .mcd_nextp:
(1) 3328/     FEE : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3329/     FF2 : 20 FA               		jr	nz,.mcd_nextp
(1) 3330/     FF4 : 06 08               		ld	b,8		; 2words to write
(1) 3331/     FF6 : E5                  		push	hl
(1) 3332/     FF7 :                     .copy_bytes:
(1) 3333/     FF7 : DD 7E 00            		ld	a,(ix)
(1) 3334/     FFA : 77                  		ld	(hl),a
(1) 3335/     FFB : DD 23               		inc	ix
(1) 3336/     FFD : 23                  		inc	hl
(1) 3337/     FFE : 10 F7               		djnz	.copy_bytes
(1) 3338/    1000 : E1                  		pop	hl
(1) 3339/    1001 : FD CB 00 E6         		set	4,(iy)		; PASS bit
(1) 3340/    1005 : CF                  		rst	8
(1) 3341/    1006 :                     .wait_sub:
(1) 3342/    1006 : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3343/    100A : 28 FA               		jr	z,.wait_sub
(1) 3344/    100C : FD CB 00 A6         		res	4,(iy)		; Clear PASS bit
(1) 3345/    1010 : CF                  		rst	8
(1) 3346/    1011 : 0D                  		dec	c
(1) 3347/    1012 : 20 DA               		jr	nz,.mcd_nextp
(1) 3348/    1014 : FD 36 00 00         		ld	(iy),0		; "MAIN" unlock
(1) 3349/    1018 :                     .mcdt_blocked:
(1) 3350/    1018 : 21 D4 15            		ld	hl,pcmcom
(1) 3351/    101B : AF                  		xor	a
(1) 3352/    101C : 06 08               		ld	b,8		; MAX PCM channels
(1) 3353/    101E : CF                  		rst	8
(1) 3354/    101F :                     .clr_pcm:
(1) 3355/    101F : 77                  		ld	(hl),a
(1) 3356/    1020 : 23                  		inc	hl
(1) 3357/    1021 : 10 FC               		djnz	.clr_pcm
(1) 3358/    1023 :                     .mcdt_noupd:
(1) 3359/    1023 : 06 03               		ld	b,3
(1) 3360/    1025 : 10 FE               		djnz	$
(1) 3361/    1027 : 00                  		nop
(1) 3362/    1028 : 00                  		nop
(1) 3363/    1029 : CF                  		rst	8
(1) 3364/    102A : 00                  		nop
(1) 3365/    102B : 00                  		nop
(1) 3366/    102C : 00                  		nop
(1) 3368/    102D :                     	; ----------------------------------------
(1) 3369/    102D :                     	; Send PWM table
(1) 3449/    102D : C9                  		ret
(1) 3450/    102E :                     
(1) 3451/    102E :                     ; --------------------------------------------------------
(1) 3452/    102E :                     ; Set bank to $A10000 area
(1) 3454/    102E :                     .set_combank:
(1) 3455/    102E : 21 00 60            		ld	hl,6000h
(1) 3456/    1031 : 36 00               		ld	(hl),0
(1) 3457/    1033 : 36 01               		ld	(hl),1
(1) 3458/    1035 : 36 00               		ld	(hl),0
(1) 3459/    1037 : 36 00               		ld	(hl),0
(1) 3460/    1039 : CF                  		rst	8
(1) 3461/    103A : 36 00               		ld	(hl),0
(1) 3462/    103C : 36 00               		ld	(hl),0
(1) 3463/    103E : 36 01               		ld	(hl),1
(1) 3464/    1040 : 36 00               		ld	(hl),0
(1) 3465/    1042 : 36 01               		ld	(hl),1
(1) 3466/    1044 : C9                  		ret
(1) 3468/    1045 :                     
(1) 3469/    1045 :                     ; ====================================================================
(1) 3470/    1045 :                     ; ----------------------------------------------------------------
(1) 3471/    1045 :                     ; Subroutines
(1) 3472/    1045 :                     ; ----------------------------------------------------------------
(1) 3473/    1045 :                     
(1) 3474/    1045 :                     ; --------------------------------------------------------
(1) 3475/    1045 :                     ; Init sound engine
(1) 3476/    1045 :                     ; --------------------------------------------------------
(1) 3477/    1045 :                     
(1) 3478/    1045 :                     gema_init:
(1) 3479/    1045 : CD 30 14            		call	gema_lastbank		; Set last bank slot, solves problem with 32X
(1) 3480/    1048 : CD 21 13            		call	dac_off
(1) 3481/    104B : AF                  		xor	a
(1) 3482/    104C : 32 CF 18            		ld	(marsUpd),a
(1) 3483/    104F : 32 D0 18            		ld	(mcdUpd),a
(1) 3484/    1052 : 32 87 1F            		ld	(cdRamLen),a
(1) 3485/    1055 : FD 21 FB 18         		ld	iy,nikona_BuffList
(1) 3486/    1059 : 0E 01               		ld	c,1			; Start at this priority
(1) 3487/    105B :                     .setup_list:
(1) 3488/    105B : FD 7E 00            		ld	a,(iy)
(1) 3489/    105E : FE FF               		cp	-1
(1) 3490/    1060 : 28 24               		jr	z,.end_setup
(1) 3491/    1062 : FD 23               		inc	iy
(1) 3492/    1064 : 6F                  		ld	l,a
(1) 3493/    1065 : FD 66 00            		ld	h,(iy)
(1) 3494/    1068 : E5                  		push	hl
(1) 3495/    1069 : DD E1               		pop	ix
(1) 3496/    106B : DD 71 14            		ld	(ix+seq_Priority),c
(1) 3497/    106E : DD 36 01 FF         		ld	(ix+seq_Num),-1	; Reset sequence ID
(1) 3498/    1072 : FD 23               		inc	iy
(1) 3499/    1074 :                     	; iy - src
(1) 3500/    1074 :                     	; hl - dst
(1) 3501/    1074 : 11 04 00            		ld	de,seq_Blocks
(1) 3502/    1077 : 19                  		add	hl,de
(1) 3503/    1078 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3504/    107A :                     .st_copy:
(1) 3505/    107A : FD 7E 00            		ld	a,(iy)
(1) 3506/    107D : 77                  		ld	(hl),a
(1) 3507/    107E : FD 23               		inc	iy
(1) 3508/    1080 : 23                  		inc	hl
(1) 3509/    1081 : 10 F7               		djnz	.st_copy
(1) 3510/    1083 : 0C                  		inc	c
(1) 3511/    1084 : 18 D5               		jr	.setup_list
(1) 3512/    1086 :                     .end_setup:
(1) 3513/    1086 :                     
(1) 3514/    1086 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3515/    1089 : CD F6 12            		call	fm_send_1
(1) 3516/    108C : 11 00 27            		ld	de,2700h	; CH3 special/timers OFF
(1) 3517/    108F : CD F6 12            		call	fm_send_1
(1) 3518/    1092 :                     ; 		ld	de,2800h
(1) 3519/    1092 : 14                  		inc	d		; FM KEYS off
(1) 3520/    1093 : CD F6 12            		call	fm_send_1
(1) 3521/    1096 : 1C                  		inc	e
(1) 3522/    1097 : CD F6 12            		call	fm_send_1
(1) 3523/    109A : 1C                  		inc	e
(1) 3524/    109B : CD F6 12            		call	fm_send_1
(1) 3525/    109E : 1C                  		inc	e
(1) 3526/    109F : 1C                  		inc	e
(1) 3527/    10A0 : CD F6 12            		call	fm_send_1
(1) 3528/    10A3 : 1C                  		inc	e
(1) 3529/    10A4 : CD F6 12            		call	fm_send_1
(1) 3530/    10A7 : 1C                  		inc	e
(1) 3531/    10A8 : CD F6 12            		call	fm_send_1
(1) 3532/    10AB : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3533/    10AE : 36 9F               		ld	(hl),09Fh
(1) 3534/    10B0 : 36 BF               		ld	(hl),0BFh
(1) 3535/    10B2 : 36 DF               		ld	(hl),0DFh
(1) 3536/    10B4 : 36 FF               		ld	(hl),0FFh
(1) 3537/    10B6 : C9                  		ret
(1) 3538/    10B7 :                     
(1) 3539/    10B7 :                     ; --------------------------------------------------------
(1) 3540/    10B7 :                     ; get_tick
(1) 3541/    10B7 :                     ;
(1) 3542/    10B7 :                     ; Checks if VBlank triggred a TICK
(1) 3543/    10B7 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3544/    10B7 :                     ; --------------------------------------------------------
(1) 3545/    10B7 :                     
(1) 3546/    10B7 :                     get_tick:
(1) 3547/    10B7 : F3                  		di				; Disable ints
(1) 3548/    10B8 : F5                  		push	af
(1) 3549/    10B9 : E5                  		push	hl
(1) 3550/    10BA : 21 F7 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3551/    10BD : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3552/    10BE : B7                  		or 	a
(1) 3553/    10BF : 28 13               		jr	z,.ctnotick
(1) 3554/    10C1 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3555/    10C3 : 23                  		inc	hl			; Move to tickCnt
(1) 3556/    10C4 : 34                  		inc	(hl)			; and increment
(1) 3557/    10C5 : CF                  		rst	8
(1) 3558/    10C6 : D5                  		push	de
(1) 3559/    10C7 : 2A 31 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3560/    10CA : ED 5B 33 00         		ld	de,(sbeatPtck)
(1) 3561/    10CE : CF                  		rst	8
(1) 3562/    10CF : 19                  		add	hl,de
(1) 3563/    10D0 : 22 31 00            		ld	(sbeatAcc),hl
(1) 3564/    10D3 : D1                  		pop	de
(1) 3565/    10D4 :                     .ctnotick:
(1) 3566/    10D4 : E1                  		pop	hl
(1) 3567/    10D5 : F1                  		pop	af
(1) 3568/    10D6 : FB                  		ei				; Enable ints again
(1) 3569/    10D7 : C9                  		ret
(1) 3570/    10D8 :                     
(1) 3571/    10D8 :                     ; --------------------------------------------------------
(1) 3572/    10D8 :                     ; readRom
(1) 3573/    10D8 :                     ;
(1) 3574/    10D8 :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3575/    10D8 :                     ; This also tells to 68k that we want to access ROM
(1) 3576/    10D8 :                     ;
(1) 3577/    10D8 :                     ; Input:
(1) 3578/    10D8 :                     ; a  | 68K Address $xx0000
(1) 3579/    10D8 :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3580/    10D8 :                     ; hl | 68K Address $00xxxx
(1) 3581/    10D8 :                     ; de | Destination pointer
(1) 3582/    10D8 :                     ;
(1) 3583/    10D8 :                     ; Uses:
(1) 3584/    10D8 :                     ; b
(1) 3585/    10D8 :                     ;
(1) 3586/    10D8 :                     ; Notes:
(1) 3587/    10D8 :                     ; call RST 20h first, so the currenty playing DAC
(1) 3588/    10D8 :                     ; sample has enough data before getting busy here.
(1) 3589/    10D8 :                     ; --------------------------------------------------------
(1) 3590/    10D8 :                     
(1) 3591/    10D8 :                     readRom:
(1) 3592/    10D8 : DD E5               		push	ix
(1) 3593/    10DA : DD 21 81 1F         		ld	ix,commZRomBlk		; ix - rom read/block flags
(1) 3594/    10DE : FE FF               		cp	0FFh			; Reading from 68k's RAM?
(1) 3595/    10E0 : 28 3D               		jr	z,.from_ram
(1) 3596/    10E2 : CF                  		rst	8
(1) 3597/    10E3 : 22 35 00            		ld	(x68ksrclsb),hl		; Backup midlow address
(1) 3598/    10E6 : CB BC               		res	7,h			; Reset MSB bit 7
(1) 3599/    10E8 : 06 00               		ld	b,0			; Clear b
(1) 3600/    10EA : 0B                  		dec	bc			; len-1
(1) 3601/    10EB : 09                  		add	hl,bc			; Add len to the mid and low to this temp address
(1) 3602/    10EC : CB 7C               		bit	7,h			; Did it cross the bank?
(1) 3603/    10EE : 20 0B               		jr	nz,.double		; Then it's a double transfer
(1) 3604/    10F0 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore hl
(1) 3605/    10F3 : 0C                  		inc	c			; len+1
(1) 3606/    10F4 : 47                  		ld	b,a			; b - $xx0000
(1) 3607/    10F5 : CD 3F 11            		call	.transfer
(1) 3608/    10F8 : DD E1               		pop	ix
(1) 3609/    10FA : C9                  		ret
(1) 3610/    10FB :                     .double:
(1) 3611/    10FB : CF                  		rst	8
(1) 3612/    10FC : 47                  		ld	b,a			; b - $xx0000
(1) 3613/    10FD : C5                  		push	bc			; Backup len and midlow address
(1) 3614/    10FE : E5                  		push	hl
(1) 3615/    10FF : 79                  		ld	a,c			; len - LSB
(1) 3616/    1100 : 95                  		sub	a,l
(1) 3617/    1101 : 4F                  		ld	c,a			; Save new size
(1) 3618/    1102 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore TOP
(1) 3619/    1105 : CD 3F 11            		call	.transfer
(1) 3620/    1108 : E1                  		pop	hl			; Restore len and midlow address
(1) 3621/    1109 : C1                  		pop	bc
(1) 3622/    110A : 4D                  		ld	c,l			; Get second len
(1) 3623/    110B : 0C                  		inc	c
(1) 3624/    110C : 3A 36 00            		ld	a,(x68ksrcmid)
(1) 3625/    110F : E6 80               		and	80h
(1) 3626/    1111 : C6 80               		add	a,80h
(1) 3627/    1113 : 67                  		ld	h,a
(1) 3628/    1114 : 2E 00               		ld	l,0
(1) 3629/    1116 : 30 01               		jr	nc,.x68knocarry
(1) 3630/    1118 : 04                  		inc	b			; Next $xx0000
(1) 3631/    1119 :                     .x68knocarry:
(1) 3632/    1119 : CD 3F 11            		call	.transfer
(1) 3633/    111C : DD E1               		pop	ix
(1) 3634/    111E : C9                  		ret
(1) 3635/    111F :                     
(1) 3636/    111F :                     ; ------------------------------------------------
(1) 3637/    111F :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3638/    111F :                     ;
(1) 3639/    111F :                     ; On the 68K side YOU MUST CALL
(1) 3640/    111F :                     ; gemaSendRam manually and every time, normally
(1) 3641/    111F :                     ; from a Vblank wait-loop.
(1) 3642/    111F :                     ; ------------------------------------------------
(1) 3643/    111F :                     
(1) 3644/    111F :                     .from_ram:
(1) 3645/    111F : ED 53 82 1F         		ld	(cdRamDst),de			; Show variables
(1) 3646/    1123 : 22 84 1F            		ld	(cdRamSrc),hl
(1) 3647/    1126 : 32 86 1F            		ld	(cdRamSrcB),a
(1) 3648/    1129 : CD 30 14            		call	gema_lastbank			; Set bank to $FF8000 area
(1) 3649/    112C : CF                  		rst	8
(1) 3650/    112D : 79                  		ld	a,c
(1) 3651/    112E : 32 87 1F            		ld	(cdRamLen),a			; Show length
(1) 3652/    1131 : 21 00 FF            		ld	hl,RAM_ZCdFlagD&07FFFh+8000h	; ** 68K LABEL **
(1) 3653/    1134 : 36 01               		ld	(hl),1				; WRITE flag
(1) 3654/    1136 :                     .wait:
(1) 3655/    1136 : 3A 87 1F            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3656/    1139 : B7                  		or	a
(1) 3657/    113A : 20 FA               		jr	nz,.wait
(1) 3658/    113C : DD E1               		pop	ix
(1) 3659/    113E : C9                  		ret
(1) 3660/    113F :                     
(1) 3661/    113F :                     ; ------------------------------------------------
(1) 3662/    113F :                     ; b  - Source ROM $xx0000
(1) 3663/    113F :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3664/    113F :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3665/    113F :                     ; de - Output location
(1) 3666/    113F :                     ; ix - ROM-block flag
(1) 3667/    113F :                     ; ------------------------------------------------
(1) 3668/    113F :                     
(1) 3669/    113F :                     .transfer:
(1) 3670/    113F : CF                  		rst	8
(1) 3671/    1140 : E5                  		push	hl
(1) 3672/    1141 : 7C                  		ld	a,h
(1) 3673/    1142 : 21 00 60            		ld	hl,6000h
(1) 3674/    1145 : 07                  		rlca
(1) 3675/    1146 : 77                  		ld	(hl),a
(1) 3676/    1147 : 78                  		ld	a,b
(1) 3677/    1148 : CF                  		rst	8
(1) 3678/    1149 : 77                  		ld	(hl),a
(1) 3679/    114A : 0F                  		rrca
(1) 3680/    114B : 77                  		ld	(hl),a
(1) 3681/    114C : 0F                  		rrca
(1) 3682/    114D : 77                  		ld	(hl),a
(1) 3683/    114E : 0F                  		rrca
(1) 3684/    114F : 77                  		ld	(hl),a
(1) 3685/    1150 : 0F                  		rrca
(1) 3686/    1151 : CF                  		rst	8
(1) 3687/    1152 : 77                  		ld	(hl),a
(1) 3688/    1153 : 0F                  		rrca
(1) 3689/    1154 : 77                  		ld	(hl),a
(1) 3690/    1155 : 0F                  		rrca
(1) 3691/    1156 : 77                  		ld	(hl),a
(1) 3692/    1157 : 0F                  		rrca
(1) 3693/    1158 : 77                  		ld	(hl),a
(1) 3694/    1159 : E1                  		pop	hl
(1) 3695/    115A : CB FC               		set	7,h
(1) 3696/    115C : CF                  		rst	8
(1) 3697/    115D :                     	; Transfer ROM data in packets
(1) 3698/    115D :                     	; while playing the cache'd sample
(1) 3699/    115D :                     	; *** CRITICAL PROCESS ***
(1) 3700/    115D :                     	;
(1) 3701/    115D :                     	; pseudo-ref for ldir:
(1) 3702/    115D :                     	; ld (de),(hl)	; load memory (hl) to (de)
(1) 3703/    115D :                     	; inc de	; incr de + 1
(1) 3704/    115D :                     	; inc hl	; incr hl + 1
(1) 3705/    115D :                     	; dec bc	; decr bc - 1
(1) 3706/    115D : 06 00               		ld	b,0
(1) 3707/    115F : 79                  		ld	a,c		; a - Size counter
(1) 3708/    1160 : D6 09               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3709/    1162 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3710/    1164 :                     .x68kloop:
(1) 3711/    1164 : CF                  		rst	8
(1) 3712/    1165 : 00                  		nop
(1) 3713/    1166 : 0E 08               		ld	c,MAX_TRFRPZ-1
(1) 3714/    1168 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3715/    116C : C4 86 11            		call	nz,.x68klpwt
(1) 3716/    116F : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3717/    1171 : CF                  		rst	8
(1) 3718/    1172 : 00                  		nop
(1) 3719/    1173 : D6 08               		sub	a,MAX_TRFRPZ-1
(1) 3720/    1175 : D2 64 11            		jp	nc,.x68kloop
(1) 3721/    1178 :                     ; last block
(1) 3722/    1178 :                     .x68klast:
(1) 3723/    1178 : C6 09               		add	a,MAX_TRFRPZ
(1) 3724/    117A : 4F                  		ld	c,a
(1) 3725/    117B : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3726/    117F : C4 86 11            		call	nz,.x68klpwt
(1) 3727/    1182 : ED B0               		ldir
(1) 3728/    1184 : CF                  		rst	8
(1) 3729/    1185 : C9                  		ret
(1) 3730/    1186 :                     
(1) 3731/    1186 :                     ; Wait here until Genesis unlocks ROM
(1) 3732/    1186 :                     .x68klpwt:
(1) 3733/    1186 : 00                  		nop
(1) 3734/    1187 : CF                  		rst	8
(1) 3735/    1188 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3736/    118C : 20 F8               		jr	nz,.x68klpwt
(1) 3737/    118E : C9                  		ret
(1) 3738/    118F :                     
(1) 3739/    118F :                     ; ====================================================================
(1) 3740/    118F :                     ; ----------------------------------------------------------------
(1) 3741/    118F :                     ; Sound chip routines
(1) 3742/    118F :                     ; ----------------------------------------------------------------
(1) 3743/    118F :                     
(1) 3744/    118F :                     ; --------------------------------------------------------
(1) 3745/    118F :                     ; chip_env
(1) 3746/    118F :                     ;
(1) 3747/    118F :                     ; Process the PSG
(1) 3748/    118F :                     ; --------------------------------------------------------
(1) 3749/    118F :                     
(1) 3750/    118F :                     chip_env:
(1) 3754/    118F : FD 21 4F 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3755/    1193 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3756/    1197 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3757/    1199 : 06 04               		ld	b,4			; b - 4 channels
(1) 3758/    119B :                     .vloop:
(1) 3759/    119B : CF                  		rst	8
(1) 3760/    119C : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3761/    119F : FD 36 00 00         		ld	(iy+COM),0
(1) 3762/    11A3 :                     
(1) 3763/    11A3 :                     	; ----------------------------
(1) 3764/    11A3 :                     	; bit 2 - stop sound
(1) 3765/    11A3 : CB 53               		bit	2,e
(1) 3766/    11A5 : 28 0C               		jr	z,.ckof
(1) 3767/    11A7 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3768/    11AB : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3769/    11AF : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3770/    11B3 :                     .ckof:
(1) 3771/    11B3 :                     	; ----------------------------
(1) 3772/    11B3 :                     	; bit 1 - key off
(1) 3773/    11B3 : CB 4B               		bit	1,e
(1) 3774/    11B5 : 28 0F               		jr      z,.ckon
(1) 3775/    11B7 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3776/    11BA : B7                  		or	a
(1) 3777/    11BB : 28 09               		jr	z,.ckon
(1) 3778/    11BD : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3779/    11C1 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3780/    11C5 : CF                  		rst	8
(1) 3781/    11C6 :                     .ckon:
(1) 3782/    11C6 :                     	; ----------------------------
(1) 3783/    11C6 :                     	; bit 0 - key on
(1) 3784/    11C6 : CB 43               		bit	0,e
(1) 3785/    11C8 : 28 1A               		jr	z,.envproc
(1) 3786/    11CA : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3787/    11CE : 78                  		ld	a,b
(1) 3788/    11CF : FE 04               		cp	4			; NOISE channel?
(1) 3789/    11D1 : 20 08               		jr	nz,.nskip
(1) 3790/    11D3 : CF                  		rst	8			; Set NOISE mode
(1) 3791/    11D4 : 3A 2F 00            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3792/    11D7 : B1                  		or	c
(1) 3793/    11D8 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3794/    11DB :                     .nskip:
(1) 3795/    11DB : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3796/    11DF : CF                  		rst	8
(1) 3797/    11E0 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3798/    11E4 :                     .nblock:
(1) 3799/    11E4 :                     
(1) 3800/    11E4 :                     	; ----------------------------
(1) 3801/    11E4 :                     	; Process effects
(1) 3802/    11E4 :                     	; ----------------------------
(1) 3803/    11E4 :                     .envproc:
(1) 3804/    11E4 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3805/    11E7 : B7                  		or	a			; no modes
(1) 3806/    11E8 : CA 6E 12            		jp	z,.vedlp
(1) 3807/    11EB : FE 01               		cp 	001b			; Attack mode
(1) 3808/    11ED : 20 2C               		jr	nz,.chk2
(1) 3809/    11EF : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3810/    11F3 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3811/    11F6 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3812/    11F9 : B7                  		or	a
(1) 3813/    11FA : 28 16               		jr	z,.atkend
(1) 3814/    11FC : 57                  		ld	d,a			; c - attack rate
(1) 3815/    11FD : 7B                  		ld	a,e			; a - attack level
(1) 3816/    11FE : CF                  		rst	8
(1) 3817/    11FF : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3818/    1202 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3819/    1203 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3820/    1205 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3821/    1207 : BB                  		cp	e			; attack rate == level?
(1) 3822/    1208 : 38 08               		jr	c,.atkend
(1) 3823/    120A : 28 06               		jr	z,.atkend
(1) 3824/    120C : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3825/    120F : CF                  		rst	8
(1) 3826/    1210 : 18 5C               		jr	.vedlp
(1) 3827/    1212 :                     .atkend:
(1) 3828/    1212 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3829/    1215 :                     .atkzero:
(1) 3830/    1215 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3831/    1219 : 18 53               		jr	.vedlp
(1) 3832/    121B :                     .chk2:
(1) 3833/    121B :                     
(1) 3834/    121B : FE 02               		cp	010b			; Decay mode
(1) 3835/    121D : 20 31               		jr	nz,.chk4
(1) 3836/    121F :                     .dectmr:
(1) 3837/    121F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3838/    1223 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3839/    1226 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3840/    1229 : BB                  		cp	e
(1) 3841/    122A : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3842/    122C : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3843/    122E : CF                  		rst	8
(1) 3844/    122F : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3845/    1232 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3846/    1234 : BB                  		cp	e			; compare level
(1) 3847/    1235 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3848/    1237 : 18 08               		jr	.dksav
(1) 3849/    1239 :                     .dkadd:
(1) 3850/    1239 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3851/    123C : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3852/    123E : BB                  		cp	e			; compare level
(1) 3853/    123F : 30 05               		jr	nc,.dkyend
(1) 3854/    1241 :                     .dksav:
(1) 3855/    1241 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3856/    1244 : 18 28               		jr	.vedlp
(1) 3857/    1246 :                     .dkyend:
(1) 3858/    1246 : CF                  		rst	8
(1) 3859/    1247 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3860/    124A : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3861/    124E : 18 1E               		jr	.vedlp
(1) 3862/    1250 :                     .chk4:
(1) 3863/    1250 : FE 04               		cp	100b			; Sustain phase
(1) 3864/    1252 : 20 1A               		jr	nz,.vedlp
(1) 3865/    1254 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3866/    1258 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3867/    125B : CF                  		rst	8
(1) 3868/    125C : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3869/    125F : 38 05               		jr	c,.killenv		; release done
(1) 3870/    1261 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3871/    1264 : 18 08               		jr	.vedlp
(1) 3872/    1266 :                     .killenv:
(1) 3873/    1266 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3874/    126A : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3875/    126E :                     .vedlp:
(1) 3876/    126E :                     	; ----------------------------
(1) 3877/    126E :                     	; PSG UPDATE
(1) 3878/    126E :                     	; ----------------------------
(1) 3879/    126E : FD 7E 28            		ld	a,(iy+FLG)
(1) 3880/    1271 : B7                  		or	a
(1) 3881/    1272 : 28 72               		jr	z,.noupd
(1) 3882/    1274 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3883/    1278 : 59                  		ld	e,c
(1) 3884/    1279 : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3885/    127C : 57                  		ld	d,a
(1) 3886/    127D : E6 03               		and	011b
(1) 3887/    127F : FE 03               		cp	011b
(1) 3888/    1281 : 20 1D               		jr	nz,.normal
(1) 3889/    1283 : CF                  		rst	8
(1) 3890/    1284 : 78                  		ld	a,b		; Channel 4?
(1) 3891/    1285 : FE 03               		cp	3
(1) 3892/    1287 : 28 13               		jr	z,.silnc_3
(1) 3893/    1289 : FE 04               		cp	4
(1) 3894/    128B : 20 18               		jr	nz,.do_nfreq
(1) 3895/    128D : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3896/    1290 : 57                  		ld	d,a
(1) 3897/    1291 : E6 03               		and	011b
(1) 3898/    1293 : CF                  		rst	8
(1) 3899/    1294 : FE 03               		cp	011b
(1) 3900/    1296 : 20 30               		jr	nz,.vonly
(1) 3901/    1298 : 1E C0               		ld	e,0C0h
(1) 3902/    129A : 18 09               		jr	.do_nfreq
(1) 3903/    129C :                     .silnc_3:
(1) 3904/    129C : 3E FF               		ld	a,-1
(1) 3905/    129E : 18 32               		jr	.vlmuch
(1) 3906/    12A0 :                     .normal:
(1) 3907/    12A0 : 78                  		ld	a,b
(1) 3908/    12A1 : FE 04               		cp	4
(1) 3909/    12A3 : 28 23               		jr	z,.vonly
(1) 3910/    12A5 :                     .do_nfreq:
(1) 3911/    12A5 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3912/    12A8 : FD 66 20            		ld	h,(iy+DTH)
(1) 3913/    12AB :                     	; freq effects go here
(1) 3914/    12AB :                     	; (save e FIRST.)
(1) 3915/    12AB :                     	;	push	de
(1) 3916/    12AB :                     	;	pop	de
(1) 3917/    12AB : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3918/    12AC : E6 0F               		and	00001111b
(1) 3919/    12AE : B3                  		or	e		; OR with channel set in e
(1) 3920/    12AF : CF                  		rst	8
(1) 3921/    12B0 : DD 77 00            		ld	(ix),a		; write it
(1) 3922/    12B3 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3923/    12B4 : 0F                  		rrca
(1) 3924/    12B5 : 0F                  		rrca
(1) 3925/    12B6 : 0F                  		rrca
(1) 3926/    12B7 : 0F                  		rrca
(1) 3927/    12B8 : E6 0F               		and	00001111b
(1) 3928/    12BA : 5F                  		ld	e,a
(1) 3929/    12BB : 7C                  		ld	a,h		; Grab MSB bits
(1) 3930/    12BC : CF                  		rst	8
(1) 3931/    12BD : 07                  		rlca
(1) 3932/    12BE : 07                  		rlca
(1) 3933/    12BF : 07                  		rlca
(1) 3934/    12C0 : 07                  		rlca
(1) 3935/    12C1 : E6 30               		and	00110000b
(1) 3936/    12C3 : B3                  		or	e
(1) 3937/    12C4 : DD 77 00            		ld	(ix),a
(1) 3938/    12C7 : CF                  		rst	8
(1) 3939/    12C8 :                     .vonly:
(1) 3940/    12C8 : FD 7E 30            		ld	a,(iy+MVOL)		; c - Level
(1) 3941/    12CB : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3942/    12CE : 30 02               		jr	nc,.vlmuch
(1) 3943/    12D0 : 3E FF               		ld	a,-1
(1) 3944/    12D2 :                     .vlmuch:
(1) 3945/    12D2 : CB 3F               		srl	a			; (Level >> 4)
(1) 3946/    12D4 : CB 3F               		srl	a
(1) 3947/    12D6 : CB 3F               		srl	a
(1) 3948/    12D8 : CF                  		rst	8
(1) 3949/    12D9 : CB 3F               		srl	a
(1) 3950/    12DB : E6 0F               		and	00001111b		; Filter volume value
(1) 3951/    12DD : B1                  		or	c			; and OR with current channel
(1) 3952/    12DE : F6 90               		or	90h			; Set volume-set mode
(1) 3953/    12E0 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3954/    12E3 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3955/    12E6 :                     .noupd:
(1) 3956/    12E6 :                     	; ----------------------------
(1) 3957/    12E6 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3958/    12E8 : 79                  		ld	a,c
(1) 3959/    12E9 : CF                  		rst	8
(1) 3960/    12EA : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3961/    12EC : 4F                  		ld	c,a
(1) 3962/    12ED : 05                  		dec	b
(1) 3963/    12EE : C2 9B 11            		jp	nz,.vloop
(1) 3964/    12F1 : C9                  		ret
(1) 3965/    12F2 :                     
(1) 3966/    12F2 :                     ; ---------------------------------------------
(1) 3967/    12F2 :                     ; FM register writes
(1) 3968/    12F2 :                     ;
(1) 3969/    12F2 :                     ; Input:
(1) 3970/    12F2 :                     ; d - ctrl
(1) 3971/    12F2 :                     ; e - data
(1) 3972/    12F2 :                     ; ---------------------------------------------
(1) 3973/    12F2 :                     
(1) 3974/    12F2 :                     ; c - KeyID
(1) 3975/    12F2 :                     fm_autoreg:
(1) 3976/    12F2 : CB 51               		bit	2,c
(1) 3977/    12F4 : 20 0B               		jr	nz,fm_send_2
(1) 3978/    12F6 :                     
(1) 3979/    12F6 :                     ; Channels 1-3 and global registers
(1) 3980/    12F6 :                     fm_send_1:
(1) 3981/    12F6 : 7A                  		ld	a,d
(1) 3982/    12F7 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3983/    12FA : 00                  		nop
(1) 3984/    12FB : 7B                  		ld	a,e
(1) 3985/    12FC : 32 01 40            		ld	(Zym_data_1),a
(1) 3986/    12FF : 00                  		nop
(1) 3987/    1300 : C9                  		ret
(1) 3988/    1301 :                     ; Channels 4-6
(1) 3989/    1301 :                     fm_send_2:
(1) 3990/    1301 : 7A                  		ld	a,d
(1) 3991/    1302 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3992/    1305 : 00                  		nop
(1) 3993/    1306 : 7B                  		ld	a,e
(1) 3994/    1307 : 32 03 40            		ld	(Zym_data_2),a
(1) 3995/    130A : 00                  		nop
(1) 3996/    130B : C9                  		ret
(1) 3997/    130C :                     
(1) 3998/    130C :                     ; --------------------------------------------------------
(1) 3999/    130C :                     ; brute-force WAVE ON/OFF playback
(1) 4000/    130C :                     ; --------------------------------------------------------
(1) 4001/    130C :                     
(1) 4002/    130C :                     dac_on:
(1) 4003/    130C : 3E 2B               		ld	a,2Bh
(1) 4004/    130E : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4005/    1311 : 3E 80               		ld	a,80h
(1) 4006/    1313 : 32 01 40            		ld	(Zym_data_1),a
(1) 4007/    1316 : 3E D9               		ld 	a,zopcExx
(1) 4008/    1318 : 32 08 00            		ld	(dac_me),a
(1) 4009/    131B : 3E F5               		ld 	a,zopcPushAf
(1) 4010/    131D : 32 20 00            		ld	(dac_fill),a
(1) 4011/    1320 : C9                  		ret
(1) 4012/    1321 :                     dac_off:
(1) 4013/    1321 : 3E 2B               		ld	a,2Bh
(1) 4014/    1323 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4015/    1326 : 3E 00               		ld	a,00h
(1) 4016/    1328 : 32 01 40            		ld	(Zym_data_1),a
(1) 4017/    132B : 3E C9               		ld 	a,zopcRet
(1) 4018/    132D : 32 08 00            		ld	(dac_me),a
(1) 4019/    1330 : 3E C9               		ld 	a,zopcRet
(1) 4020/    1332 : 32 20 00            		ld	(dac_fill),a
(1) 4021/    1335 : C9                  		ret
(1) 4022/    1336 :                     
(1) 4023/    1336 :                     ; --------------------------------------------------------
(1) 4024/    1336 :                     ; dac_play
(1) 4025/    1336 :                     ;
(1) 4026/    1336 :                     ; Plays a new sample
(1) 4027/    1336 :                     ;
(1) 4028/    1336 :                     ; NOTE:
(1) 4029/    1336 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4030/    1336 :                     ; getting here.
(1) 4031/    1336 :                     ; --------------------------------------------------------
(1) 4032/    1336 :                     
(1) 4033/    1336 :                     dac_play:
(1) 4034/    1336 : F3                  		di
(1) 4035/    1337 : CD 21 13            		call	dac_off
(1) 4036/    133A : D9                  		exx				; flip exx regs
(1) 4037/    133B : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4038/    133E : ED 5B F3 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4039/    1342 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4040/    1345 : D9                  		exx				; move them back
(1) 4041/    1346 : 2A EA 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4042/    1349 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4043/    134C : 22 D7 18            		ld	(dDacPntr),hl
(1) 4044/    134F : 32 D9 18            		ld	(dDacPntr+2),a
(1) 4045/    1352 : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4046/    1355 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4047/    1358 : 22 DA 18            		ld	(dDacCntr),hl
(1) 4048/    135B : 32 DC 18            		ld	(dDacCntr+2),a
(1) 4049/    135E : AF                  		xor	a
(1) 4050/    135F : 32 37 00            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4051/    1362 : CD 6A 13            		call	dac_refill
(1) 4052/    1365 : CD 0C 13            		call	dac_on
(1) 4053/    1368 : FB                  		ei
(1) 4054/    1369 : C9                  		ret
(1) 4055/    136A :                     
(1) 4056/    136A :                     ; --------------------------------------------------------
(1) 4057/    136A :                     
(1) 4058/    136A :                     dac_refill:
(1) 4059/    136A : CF                  		rst	8
(1) 4060/    136B : C5                  		push	bc
(1) 4061/    136C : D5                  		push	de
(1) 4062/    136D : E5                  		push	hl
(1) 4063/    136E : 3A F5 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4064/    1371 : FE 07               		cp	111b
(1) 4065/    1373 : D2 29 14            		jp	nc,.dacfill_end
(1) 4066/    1376 : 3A DC 18            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4067/    1379 : 2A DA 18            		ld	hl,(dDacCntr)
(1) 4068/    137C : 01 80 00            		ld	bc,80h
(1) 4069/    137F : 37                  		scf
(1) 4070/    1380 : 3F                  		ccf
(1) 4071/    1381 : ED 42               		sbc	hl,bc
(1) 4072/    1383 : DE 00               		sbc	a,0
(1) 4073/    1385 : 32 DC 18            		ld	(dDacCntr+2),a
(1) 4074/    1388 : 22 DA 18            		ld	(dDacCntr),hl
(1) 4075/    138B : 16 1D               		ld	d,dWaveBuff>>8
(1) 4076/    138D : B7                  		or	a
(1) 4077/    138E : FA B8 13            		jp	m,.dac_over
(1) 4078/    1391 : 3A 37 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4079/    1394 : 5F                  		ld	e,a
(1) 4080/    1395 : C6 80               		add 	a,80h
(1) 4081/    1397 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4082/    139A : 2A D7 18            		ld	hl,(dDacPntr)
(1) 4083/    139D : 3A D9 18            		ld	a,(dDacPntr+2)
(1) 4084/    13A0 : CD D8 10            		call	readRom	; *** ROM ACCESS ***
(1) 4085/    13A3 : 2A D7 18            		ld	hl,(dDacPntr)
(1) 4086/    13A6 : 3A D9 18            		ld	a,(dDacPntr+2)
(1) 4087/    13A9 : 01 80 00            		ld	bc,80h
(1) 4088/    13AC : 09                  		add	hl,bc
(1) 4089/    13AD : CE 00               		adc	a,0
(1) 4090/    13AF : 22 D7 18            		ld	(dDacPntr),hl
(1) 4091/    13B2 : 32 D9 18            		ld	(dDacPntr+2),a
(1) 4092/    13B5 : C3 2C 14            		jp	.dacfill_ret
(1) 4093/    13B8 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4094/    13B8 :                     ; but the USER won't notice it.
(1) 4095/    13B8 :                     .dac_over:
(1) 4096/    13B8 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4097/    13BA : 3A F5 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4098/    13BD : E6 01               		and	001b
(1) 4099/    13BF : C2 E2 13            		jp	nz,.dacfill_loop
(1) 4100/    13C2 : 7D                  		ld	a,l
(1) 4101/    13C3 : C6 80               		add	a,80h
(1) 4102/    13C5 : 4F                  		ld	c,a
(1) 4103/    13C6 : 06 00               		ld	b,0
(1) 4104/    13C8 : C5                  		push	bc
(1) 4105/    13C9 : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4106/    13CC : 5F                  		ld	e,a
(1) 4107/    13CD : C6 80               		add	a,80h
(1) 4108/    13CF : 32 37 00            		ld	(dDacFifoMid),a
(1) 4109/    13D2 : C1                  		pop	bc
(1) 4110/    13D3 : 79                  		ld	a,c
(1) 4111/    13D4 : B0                  		or	b
(1) 4112/    13D5 : 28 52               		jr	z,.dacfill_end
(1) 4113/    13D7 : 2A D7 18            		ld	hl,(dDacPntr)
(1) 4114/    13DA : 3A D9 18            		ld	a,(dDacPntr+2)
(1) 4115/    13DD : CD D8 10            		call	readRom	; *** ROM ACCESS ***
(1) 4116/    13E0 : 18 47               		jr	.dacfill_end
(1) 4117/    13E2 :                     ; loop sample
(1) 4118/    13E2 :                     .dacfill_loop:
(1) 4119/    13E2 : C5                  		push	bc
(1) 4120/    13E3 : D5                  		push	de
(1) 4121/    13E4 : 3A F2 1C            		ld	a,(wave_Loop+2)
(1) 4122/    13E7 : 4F                  		ld	c,a
(1) 4123/    13E8 : ED 5B F0 1C         		ld	de,(wave_Loop)
(1) 4124/    13EC : 2A EA 1C            		ld	hl,(wave_Start)
(1) 4125/    13EF : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4126/    13F2 : 81                  		add	a,c
(1) 4127/    13F3 : 19                  		add	hl,de
(1) 4128/    13F4 : CE 00               		adc	a,0
(1) 4129/    13F6 : 22 D7 18            		ld	(dDacPntr),hl
(1) 4130/    13F9 : 32 D9 18            		ld	(dDacPntr+2),a
(1) 4131/    13FC : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4132/    13FF : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4133/    1402 : 91                  		sub	a,c
(1) 4134/    1403 : 37                  		scf
(1) 4135/    1404 : 3F                  		ccf
(1) 4136/    1405 : ED 52               		sbc	hl,de
(1) 4137/    1407 : DE 00               		sbc	a,0
(1) 4138/    1409 : 22 DA 18            		ld	(dDacCntr),hl
(1) 4139/    140C : 32 DC 18            		ld	(dDacCntr+2),a
(1) 4140/    140F : D1                  		pop	de
(1) 4141/    1410 : C1                  		pop	bc
(1) 4142/    1411 : 78                  		ld	a,b
(1) 4143/    1412 : B1                  		or	c
(1) 4144/    1413 : 28 17               		jr	z,.dacfill_ret
(1) 4145/    1415 : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4146/    1418 : 5F                  		ld	e,a
(1) 4147/    1419 : C6 80               		add	a,80h
(1) 4148/    141B : 32 37 00            		ld	(dDacFifoMid),a
(1) 4149/    141E : 2A D7 18            		ld	hl,(dDacPntr)
(1) 4150/    1421 : 3A D9 18            		ld	a,(dDacPntr+2)
(1) 4151/    1424 : CD D8 10            		call	readRom	; *** ROM ACCESS ***
(1) 4152/    1427 : 18 03               		jr	.dacfill_ret
(1) 4153/    1429 :                     .dacfill_end:
(1) 4154/    1429 : CD 21 13            		call	dac_off		; DAC finished
(1) 4155/    142C :                     .dacfill_ret:
(1) 4156/    142C : E1                  		pop	hl
(1) 4157/    142D : D1                  		pop	de
(1) 4158/    142E : C1                  		pop	bc
(1) 4159/    142F : C9                  		ret
(1) 4160/    1430 :                     
(1) 4161/    1430 :                     ; ----------------------------------------------------------------
(1) 4162/    1430 :                     ; gema_lastbank
(1) 4163/    1430 :                     ;
(1) 4164/    1430 :                     ; Two purposes:
(1) 4165/    1430 :                     ; - Set the BANK to the very last part of memory for the
(1) 4166/    1430 :                     ;   readRom to read from RAM
(1) 4167/    1430 :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4168/    1430 :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4169/    1430 :                     ;
(1) 4170/    1430 :                     ; Uses:
(1) 4171/    1430 :                     ; hl,b
(1) 4172/    1430 :                     ; ----------------------------------------------------------------
(1) 4173/    1430 :                     
(1) 4174/    1430 :                     gema_lastbank:
(1) 4175/    1430 : 21 00 60            		ld	hl,6000h
(1) 4176/    1433 : 06 09               		ld	b,9		; 9 bits
(1) 4177/    1435 :                     .write:
(1) 4178/    1435 : 36 01               		ld	(hl),1
(1) 4179/    1437 : 10 FC               		djnz	.write
(1) 4180/    1439 : C9                  		ret
(1) 4181/    143A :                     
(1) 4182/    143A :                     ; ====================================================================
(1) 4183/    143A :                     ; ----------------------------------------------------------------
(1) 4184/    143A :                     ; Frequency tables
(1) 4185/    143A :                     ; ----------------------------------------------------------------
(1) 4186/    143A :                     
(1) 4187/    143A : 84 02               fmFreq_List:	dw 644
(1) 4188/    143C : A9 02               		dw 681
(1) 4189/    143E : D2 02               		dw 722
(1) 4190/    1440 : FD 02               		dw 765
(1) 4191/    1442 : 2A 03               		dw 810
(1) 4192/    1444 : 5A 03               		dw 858
(1) 4193/    1446 : 8E 03               		dw 910
(1) 4194/    1448 : C4 03               		dw 964
(1) 4195/    144A : FD 03               		dw 1021
(1) 4196/    144C : 39 04               		dw 1081
(1) 4197/    144E : 7A 04               		dw 1146
(1) 4198/    1450 : BE 04               		dw 1214
(1) 4199/    1452 :                     
(1) 4200/    1452 :                     ; ----------------------------------------
(1) 4201/    1452 :                     ; DAC and PWM
(1) 4202/    1452 :                     ; ----------------------------------------
(1) 4203/    1452 :                     
(1) 4204/    1452 :                     psgFreq_List:
(1) 4205/    1452 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4206/    1452 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4207/    1452 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4208/    1452 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1458 : FF FF FF FF FF FF 
             145E : FF FF FF FF FF FF 
             1464 : F8 03 BF 03 89 03 
(1) 4209/    146A : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1470 : CE 02 A5 02 80 02 
             1476 : 5C 02 3A 02 1A 02 
             147C : FB 01 DF 01 C4 01 
(1) 4210/    1482 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             1488 : 67 01 53 01 40 01 
             148E : 2E 01 1D 01 0D 01 
             1494 : FE 00 EF 00 E2 00 
(1) 4211/    149A : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             14A0 : B4 00 A9 00 A0 00 
             14A6 : 97 00 8F 00 87 00 
             14AC : 7F 00 78 00 71 00 
(1) 4212/    14B2 : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             14B8 : 5A 00 55 00 50 00 
             14BE : 4B 00 47 00 43 00 
             14C4 : 40 00 3C 00 39 00 
(1) 4213/    14CA : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             14D0 : 2D 00 2B 00 28 00 
             14D6 : 26 00 24 00 22 00 
             14DC : 20 00 1F 00 1D 00 
(1) 4214/    14E2 : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             14E8 : 17 00 16 00 15 00 
             14EE : 13 00 12 00 11 00 
             14F4 : 10 00 09 00 01 00 
(1) 4215/    14FA :                     
(1) 4216/    14FA :                     ; ----------------------------------------
(1) 4217/    14FA :                     ; DAC and PWM shared list
(1) 4218/    14FA :                     ; ----------------------------------------
(1) 4219/    14FA :                     
(1) 4220/    14FA :                     wavFreq_List:
(1) 4221/    14FA :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4222/    14FA :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4223/    14FA :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4224/    14FA :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4225/    14FA : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0051h,0056h,005Bh,0060h,0066h,006Ch,0073h,0079h	; x-3 4000 ok
             1500 : 4C 00 51 00 56 00 
             1506 : 5B 00 60 00 66 00 
             150C : 6C 00 73 00 79 00 
(1) 4226/    1512 : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,0099h,00A2h,00ACh,00B6h,00C1h,00CCh,00D8h,00E5h,00F2h	; x-4 8000 ok
             1518 : 99 00 A2 00 AC 00 
             151E : B6 00 C1 00 CC 00 
             1524 : D8 00 E5 00 F2 00 
(1) 4227/    152A : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,0132h,0145h,0158h,016Ch,0182h,0198h,01AEh,01C7h,01E0h	; x-5 16000 ok
             1530 : 32 01 45 01 58 01 
             1536 : 6C 01 82 01 98 01 
             153C : AE 01 C7 01 E0 01 
(1) 4228/    1542 : 00 02 20 02 40 02   	dw 0200h,0220h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0328h,0352h,0390h,03C8h	; x-6 32000 bad/ok
             1548 : 60 02 80 02 A0 02 
             154E : D0 02 F8 02 28 03 
             1554 : 52 03 90 03 C8 03 
(1) 4229/    155A : 00 04               	dw 0400h;,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4230/    155C :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4231/    155C :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4232/    155C :                     
(1) 4233/    155C :                     ; ----------------------------------------
(1) 4234/    155C :                     ; SegaCD PCM
(1) 4235/    155C :                     ; ----------------------------------------
(1) 4236/    155C :                     wavFreq_CdPcm:
(1) 4237/    155C :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4238/    155C :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4239/    155C :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4240/    155C : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             1562 : 28 01 3C 01 4C 01 
             1568 : 60 01 7C 01 88 01 
             156E : AA 01 BC 01 DC 01 
(1) 4241/    1574 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             157A : 58 02 7C 02 A0 02 
             1580 : C8 02 FC 02 1C 03 
             1586 : 54 03 7C 03 B8 03 
(1) 4242/    158C : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1592 : AC 04 EC 04 40 05 
             1598 : 90 05 E4 05 3C 06 
             159E : 98 06 04 07 60 07 
(1) 4243/    15A4 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             15AA : 60 09 F0 09 64 0A 
             15B0 : 04 0B AA 0B 60 0C 
             15B6 : 18 0D E4 0D B8 0E 
(1) 4244/    15BC : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 untested
             15C2 : 80 12 9C 13 C8 14 
             15C8 : 24 16 4C 17 DC 18 
             15CE : 38 1A E0 1B 94 1D 
(1) 4245/    15D4 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4246/    15D4 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4247/    15D4 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4248/    15D4 :                     
(1) 4249/    15D4 :                     ; ====================================================================
(1) 4250/    15D4 :                     ; ----------------------------------------------------------------
(1) 4251/    15D4 :                     ; Chip buffers
(1) 4252/    15D4 :                     ; ----------------------------------------------------------------
(1) 4253/    15D4 :                     
(1) 4254/    15D4 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             15DA : 00 00             
(1) 4255/    15DC : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             15E2 : 00 00             
(1) 4256/    15E4 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             15EA : 00 00             
(1) 4257/    15EC : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 24 - Volume
             15F2 : FF FF             
(1) 4258/    15F4 : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 32 - CURRENT Panning %RRRRLLLL
             15FA : FF FF             
(1) 4259/    15FC : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             1602 : 00 00             
(1) 4260/    1604 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             160A : 00 00             
(1) 4261/    160C : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             1612 : 00 00             
(1) 4262/    1614 :                     
(1) 4263/    1614 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             161A : 00 00             
(1) 4264/    161C : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             1622 : 00 00             
(1) 4265/    1624 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             162A : 00 00             
(1) 4266/    162C : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1632 : 00 00             
(1) 4267/    1634 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             163A : 00 00             
(1) 4268/    163C : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1642 : 00 00             
(1) 4269/    1644 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             164A : 00 00             
(1) 4270/    164C :                     
(1) 4271/    164C : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4272/    1650 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4273/    1654 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4274/    1658 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4275/    165C : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4276/    1660 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4277/    1664 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4278/    1668 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4279/    166C : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4280/    1670 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4281/    1674 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4282/    1678 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4283/    167C : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4284/    1680 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4285/    1684 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4286/    1688 :                     
(1) 4287/    1688 :                     ; --------------------------------------------------------
(1) 4288/    1688 :                     fmcach_1	ds 28h
(1) 4289/    16B0 :                     fmcach_2	ds 28h
(1) 4290/    16D8 :                     fmcach_3	ds 28h
(1) 4291/    1700 :                     fmcach_4	ds 28h
(1) 4292/    1728 :                     fmcach_5	ds 28h
(1) 4293/    1750 :                     fmcach_6	ds 28h
(1) 4294/    1778 :                     fmlist_rsave	ds 4*3		; 4 bytes per channel: 0000h,00h,00h
(1) 4295/    1784 :                     trkInfoCach	ds 4
(1) 4296/    1788 :                     		ds 4*3		; _rsave followup
(1) 4297/    1794 :                     
(1) 4298/    1794 :                     ; ====================================================================
(1) 4299/    1794 :                     ; ----------------------------------------------------------------
(1) 4300/    1794 :                     ; Track buffers
(1) 4301/    1794 :                     ; ----------------------------------------------------------------
(1) 4302/    1794 :                     
(1) 4303/    1794 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4304/    17B4 :                     trkHdrs_1	ds 8*4
(1) 4305/    17D4 :                     trkHdrs_2	ds 8*4
(1) 4306/    17F4 :                     trkBlks_0	ds 8
(1) 4307/    17FC :                     trkBlks_1	ds 8
(1) 4308/    1804 :                     trkBlks_2	ds 8
(1) 4309/    180C :                     trkBuff_0	ds seq_ChnIndx+MAX_TRKINDX
(1) 4310/    184B :                     trkBuff_1	ds seq_ChnIndx+MAX_TRKINDX
(1) 4311/    188A :                     trkBuff_2	ds seq_ChnIndx+MAX_TRKINDX
(1) 4312/    18C9 : 88 16               fmcach_list:	dw fmcach_1
(1) 4313/    18CB : B0 16               		dw fmcach_2
(1) 4314/    18CD : D8 16               		dw fmcach_3
(1) 4315/    18CF : 00                  marsUpd		db 0			; Flag to request a PWM transfer
(1) 4316/    18D0 : 00                  mcdUpd		db 0			; Flag to request a PCM transfer
(1) 4317/    18D1 : 00 17               		dw fmcach_4		; Followup
(1) 4318/    18D3 : 28 17               		dw fmcach_5
(1) 4319/    18D5 : 50 17               		dw fmcach_6
(1) 4320/    18D7 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4321/    18DA : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4322/    18DD :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4323/    18EB :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4324/    18ED :                     sampleHead	ds 006h
(1) 4325/    18F3 :                     instListOut	ds 8
(1) 4326/    18FB :                     
(1) 4327/    18FB :                     ; ====================================================================
(1) 4328/    18FB :                     ; --------------------------------------------------------
(1) 4329/    18FB :                     ; MASTER buffers list
(1) 4330/    18FB :                     ;
(1) 4331/    18FB :                     ; dw track_buffer
(1) 4332/    18FB :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4333/    18FB :                     ;
(1) 4334/    18FB :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4335/    18FB :                     ; --------------------------------------------------------
(1) 4336/    18FB :                     
(1) 4337/    18FB :                     nikona_BuffList:
(1) 4338/    18FB : 0C 18 F4 17 94 17   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1901 : 00 1F             
(1) 4339/    1903 : 4B 18 FC 17 B4 17   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1909 : 20 1F             
(1) 4340/    190B : 8A 18 04 18 D4 17   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1911 : 40 1F             
(1) 4341/    1913 :                     nikona_BuffList_e:
(1) 4342/    1913 : FF FF               	dw -1	; ENDOFLIST
(1) 4343/    1915 :                     
(1) 4344/    1915 :                     ; ====================================================================
(1) 4345/    1915 :                     ; --------------------------------------------------------
(1) 4346/    1915 :                     ; Channel tables
(1) 4347/    1915 :                     ;
(1) 4348/    1915 :                     ; PSG   80h
(1) 4349/    1915 :                     ; PSGN  90h
(1) 4350/    1915 :                     ; FM   0A0h
(1) 4351/    1915 :                     ; FM3  0B0h
(1) 4352/    1915 :                     ; DAC  0C0h
(1) 4353/    1915 :                     ; PCM  0D0h
(1) 4354/    1915 :                     ; PWM  0E0h
(1) 4355/    1915 :                     ; --------------------------------------------------------
(1) 4356/    1915 :                     
(1) 4357/    1B00 :                     		org 1B00h			; <-- MUST BE x0h ALIGNED
(1) 4358/    1B00 : 0E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4359/    1B02 : 46 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4360/    1B04 : A0 00               		dw tblFM-tblList		; 0A0h
(1) 4361/    1B06 : E8 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4362/    1B08 : FA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4363/    1B0A : 0E 00               		dw tblPCM-tblList		; 0D0h
(1) 4364/    1B0C : 58 01               		dw tblPWM-tblList		; 0E0h
(1) 4365/    1B0E :                     ; 		dw 0				; 0F0h
(1) 4366/    1B0E :                     ; --------------------------------------------------------
(1) 4367/    1B0E : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B14 : 00 00 00 00       
(1) 4368/    1B18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1E : 00 00             
(1) 4369/    1B20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1B26 : 00 00 00 00       
(1) 4370/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4371/    1B32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1B38 : 00 00 00 00       
(1) 4372/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4373/    1B44 : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1B4A : 00 00 00 00       
(1) 4374/    1B4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B54 : 00 00             
(1) 4375/    1B56 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1B5C : 00 00 00 00       
(1) 4376/    1B60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B66 : 00 00             
(1) 4377/    1B68 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1B6E : 00 00 00 00       
(1) 4378/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4379/    1B7A : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1B80 : 00 00 00 00       
(1) 4380/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4381/    1B8C : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1B92 : 00 00 00 00       
(1) 4382/    1B96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9C : 00 00             
(1) 4383/    1B9E : FF FF               		dw -1	; end-of-list
(1) 4384/    1BA0 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BA6 : 00 00 00 00       
(1) 4385/    1BAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB0 : 00 00             
(1) 4386/    1BB2 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1BB8 : 00 00 00 00       
(1) 4387/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4388/    1BC4 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 4 <--
             1BCA : 00 00 00 00       
(1) 4389/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4390/    1BD6 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 5
             1BDC : 00 00 00 00       
(1) 4391/    1BE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BE6 : 00 00             
(1) 4392/    1BE8 : 00 00 00 02 00 00   tblFM3:		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3 <--
             1BEE : 00 00 00 00       
(1) 4393/    1BF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF8 : 00 00             
(1) 4394/    1BFA : 00 00 00 06 00 00   tblFM6:		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 6 <--
             1C00 : 00 00 00 00       
(1) 4395/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4396/    1C0C : FF FF               		dw -1	; end-of-list
(1) 4397/    1C0E : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C14 : 00 00 00 00       
(1) 4398/    1C18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1E : 00 00             
(1) 4399/    1C20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C26 : 00 00 00 00       
(1) 4400/    1C2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C30 : 00 00             
(1) 4401/    1C32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C38 : 00 00 00 00       
(1) 4402/    1C3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C42 : 00 00             
(1) 4403/    1C44 : FF FF               		dw -1	; end-of-list
(1) 4404/    1C46 : 00 00 00 03 00 00   tblPSGN:	db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Noise
             1C4C : 00 00 00 00       
(1) 4405/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4406/    1C58 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C5E : 00 00 00 00       
(1) 4407/    1C62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C68 : 00 00             
(1) 4408/    1C6A : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C70 : 00 00 00 00       
(1) 4409/    1C74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C7A : 00 00             
(1) 4410/    1C7C : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C82 : 00 00 00 00       
(1) 4411/    1C86 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8C : 00 00             
(1) 4412/    1C8E : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1C94 : 00 00 00 00       
(1) 4413/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4414/    1CA0 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1CA6 : 00 00 00 00       
(1) 4415/    1CAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB0 : 00 00             
(1) 4416/    1CB2 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1CB8 : 00 00 00 00       
(1) 4417/    1CBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC2 : 00 00             
(1) 4418/    1CC4 : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1CCA : 00 00 00 00       
(1) 4419/    1CCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD4 : 00 00             
(1) 4420/    1CD6 : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1CDC : 00 00 00 00       
(1) 4421/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4422/    1CE8 : FF FF               		dw -1	; end-of-list
(1) 4423/    1CEA :                     ; ----------------------------------------------------------------
(1) 4424/    1CEA : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4425/    1CEC : 00                  		db 0
(1) 4426/    1CED : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4427/    1CEF : 00                  		db 0
(1) 4428/    1CF0 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4429/    1CF2 : 00                  		db 0
(1) 4430/    1CF3 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4431/    1CF5 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4432/    1CF6 :                     
(1) 4433/    1CF6 : 00                  tickSpSet	db 0		; **
(1) 4434/    1CF7 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4435/    1CF8 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4436/    1CF9 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4437/    1CFA :                     
(1) 4438/    1CFA :                     ; ====================================================================
(1) 4439/    1CFA :                     ; ----------------------------------------------------------------
(1) 4440/    1CFA :                     ; Special aligned buffers
(1) 4441/    1CFA :                     ;
(1) 4442/    1CFA :                     ; Located at 1D00h
(1) 4443/    1CFA :                     ; ----------------------------------------------------------------
(1) 4444/    1CFA :                     
(1) 4445/    1D00 :                     		org 1D00h
(1) 4446/    1D00 :                     dWaveBuff	ds 100h				; WAVE data buffer: 100h bytes
(1) 4447/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4448/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4449/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4450/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4451/    1F60 :                     
(1) 4452/    1F60 :                     ; ====================================================================
(1) 4453/    1F60 :                     ; ----------------------------------------------------------------
(1) 4454/    1F60 :                     ; Control area
(1) 4455/    1F60 :                     ; * MANUAL ORDER, check gema.asm *
(1) 4456/    1F60 :                     ; ----------------------------------------------------------------
(1) 4457/    1F60 :                     
(1) 4458/    1F60 :                     		org 1F60h
(1) 4459/    1F60 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1) 4460/    1F80 : 00                  commZWrite	db 0				; cmd fifo wptr (from 68k)
(1) 4461/    1F81 : 00                  commZRomBlk	db 0				; 68k ROM block flag
(1) 4462/    1F82 : 00 00               cdRamDst	db 0,0				; ** Z80 destination
(1) 4463/    1F84 : 00 00               cdRamSrc	db 0,0				; ** 68k 24-bit source
(1) 4464/    1F86 : 00                  cdRamSrcB	db 0				; **
(1) 4465/    1F87 : 00                  cdRamLen	db 0				; Size + status flag
(1) 4466/    1F88 : 00                  palMode		db 0				; PAL mode flag
(1) 4467/    1F89 : 00                  mcdBlock	db 0				; Flag to BLOCK PCM transfers.
(1) 4468/    1F8A : 00                  marsBlock	db 0				; Flag to BLOCK PWM transfers.
(1) 4469/    1F8B :                     
(1) 4470/    1F8B :                     ; --------------------------------------------------------
(1) 4471/  201F8B :                     		dephase
(1) 4472/  201F8B :                     		cpu 68000		; [AS] Return to 68k
(1) 4473/  201F8B :                     		padding off		; [AS] NO padding
(1) 4474/  201F8B :                     		align 2
(1) 4475/  201F8C :                     
     317/  201F8C :                     Z80_CODE_END:
     321/    DF8C :                     		dephase
     322/    DF8C :                     		align $800
     324/    E000 :                     Z80_CODE_EOF:
     325/    E000 :                     
     326/    E000 :                     ; ====================================================================
     327/    E000 :                     ; --------------------------------------------------------
     328/    E000 :                     ; SEGA CD SUB-CPU data
     329/    E000 :                     ; --------------------------------------------------------
     330/    E000 :                     
     332/    E000 :                     		align $800
     333/    E000 :                     MCD_SMPDATA:
     334/   40000 :                     		phase $40000				; <-- MANUAL location on Sub-CPU area
     335/   40000 :                     	; ------------------------------------------------
     336/   40000 :                     		include "sound/smpl_pcm.asm"		; PCM samples
(1)    1/   40000 :                     ; ===========================================================================
(1)    2/   40000 :                     ; -------------------------------------------------------------------
(1)    3/   40000 :                     ; GEMA/Nikona PCM instruments for SCD's PCM soundchip
(1)    4/   40000 :                     ;
(1)    5/   40000 :                     ; Stored on DISC and loaded to Sub-CPU on boot
(1)    6/   40000 :                     ;
(1)    7/   40000 :                     ; MACRO:
(1)    8/   40000 :                     ; gSmplData Label,"file_path",loop_start
(1)    9/   40000 :                     ; Set loop_start to 0 if not using it.
(1)   10/   40000 :                     ;
(1)   11/   40000 :                     ; BASE C-5 samplerate is 16000hz
(1)   12/   40000 :                     ; -------------------------------------------------------------------
(1)   13/   40000 :                     
(1)   14/   40000 :                     	align 4
(1)   15/   40000 :                     	;gSmplData Label,"file_path",loop_start
(1)   16/   40000 : 4649 4C4C 4552      	dc.b "FILLER"
(1)   17/   40006 :                     
     337/   40006 :                     	; ------------------------------------------------
     338/   40006 : (MACRO)              .here:		erreport "SUB-CPU DATA",.here,$60000
     339/    E006 :                     		dephase
     340/    E006 :                     		phase MCD_SMPDATA+(.here-$40000)
     341/    E006 :                     		align $800
     342/    E800 :                     MCD_SMPDATA_E:
     343/    E800 :                     		align $800
     345/    E800 :                     
     346/    E800 :                     ; ====================================================================
     347/    E800 :                     ; ----------------------------------------------------------------
     348/    E800 :                     ; SH2 code sent to SDRAM area
     349/    E800 :                     ; ----------------------------------------------------------------
     350/    E800 :                     
     352/    E800 :                     		align $800
     356/    E800 :                     MARS_RAMCODE:
     362/    E800 :                     		align 4
     364/    E800 :                     MARS_RAMCODE_E:
     366/    E800 :                     		align $800
     367/    E800 :                     MARS_RAMCODE_EOF:
     369/    E800 :                     
     370/    E800 :                     ; ====================================================================
     371/    E800 :                     ; --------------------------------------------------------
     372/    E800 :                     ; CODE
     373/    E800 :                     ; --------------------------------------------------------
     374/    E800 :                     
     375/    E800 :                     		include "game/incl_code.asm"
(1)    1/    E800 :                     ; ====================================================================
(1)    2/    E800 :                     ; ----------------------------------------------------------------
(1)    3/    E800 :                     ; CODE Section
(1)    4/    E800 :                     ; ----------------------------------------------------------------
(1)    5/    E800 :                     
(1)    6/    E800 :                     ; ------------------------------------------------------------
(1)    7/    E800 :                     ; Usage:
(1)    8/    E800 :                     ; 	code_bank START_LABEL,END_LABEL,CODE_PATH
(1)    9/    E800 :                     ;
(1)   10/    E800 :                     ; Go to incl_list.asm add an entry in .screen_list:
(1)   11/    E800 :                     ; 	dc.l START_LABEL		; Label
(1)   12/    E800 :                     ; 	dc.b "SCR_EXMP.BIN"		; ISO filename
(1)   13/    E800 :                     ;
(1)   14/    E800 :                     ; CD/CD32X:
(1)   15/    E800 :                     ; Labels and ISO filename at iso_files.asm
(1)   16/    E800 :                     ; ------------------------------------------------------------
(1)   17/    E800 :                     
(1)   18/    E800 : (MACRO)              	code_bank Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   18/    E800 :                                     align $800              ; SCD/CD32X sector align
(1)   18/    E800 : =$E800               MD_SCREEN00 label *                        ; Register start label
(1)   18/    E800 :                     mctopscrn:
(1)   18/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; Phase code to RAM area
(1)   18/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   18/FFFFFFFFFFFF2C00 :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/FFFFFFFFFFFF2C00 :                     
(2)   13/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   16/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     
(2)   18/FFFFFFFFFFFF2C00 :                     ; 			memory 2
(2)   19/FFFFFFFFFFFF2C00 :                     ; 			ds.b 2
(2)   20/FFFFFFFFFFFF2C00 :                     ; thisVram_BG		ds.b $419
(2)   21/FFFFFFFFFFFF2C00 :                     ; thisVram_BG_e		ds.b 0
(2)   22/FFFFFFFFFFFF2C00 :                     ; 			endmemory
(2)   23/FFFFFFFFFFFF2C00 :                     
(2)   24/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   25/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   26/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     
(2)   29/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   29/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   29/    E800 :                                     dephase
(2)   29/FFFFFFFFFFFFB000 :                                     phase RAM_SCRNBUFF
(2)   29/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(2)   30/FFFFFFFFFFFFB000 :                     RAM_SC0_CurrOption	ds.w 1
(2)   31/FFFFFFFFFFFFB002 :                     RAM_SC0_OldOption	ds.w 1
(2)   32/FFFFFFFFFFFFB004 :                     .sizeof_this		ds.l 0
(2)   33/FFFFFFFFFFFFB008 :  (MACRO-2)           			endmemory
(2)   33/    E808 :                     .here:          dephase
(2)   33/    E808 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   33/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   35/FFFFFFFFFFFF2C00 :                     
(2)   36/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   37/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   38/FFFFFFFFFFFF2C00 :                     ; Init
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 : 6100 DACE           		bsr	Video_DisplayOff			; Disable VDP Display
(2)   42/FFFFFFFFFFFF2C04 : 6100 F11C           		bsr	System_Default				; Default system settings
(2)   43/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   44/FFFFFFFFFFFF2C08 :                     	; Init/Load save
(2)   45/FFFFFFFFFFFF2C08 :                     ; 		addq.l	#1,(RAM_Save_Counter).w
(2)   46/FFFFFFFFFFFF2C08 :                     ; 		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   47/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   48/FFFFFFFFFFFF2C08 :                     	; Init Print
(2)   49/FFFFFFFFFFFF2C08 : 203C 0001 0000      		move.l	#DATA_BANK0,d0				; Load MAIN DATA bank
(2)   50/FFFFFFFFFFFF2C0E : 6100 F59C           		bsr	System_SetDataBank
(2)   51/FFFFFFFFFFFF2C12 : 203C 0023 200A      		move.l	#ASCII_FONT,d0
(2)   52/FFFFFFFFFFFF2C18 : 323C 05A0           		move.w	#DEF_PrintVram,d1
(2)   53/FFFFFFFFFFFF2C1C : 6100 E368           		bsr	Video_PrintInit
(2)   54/FFFFFFFFFFFF2C20 : 203C 0023 2C0A      		move.l	#ASCII_FONT_W,d0
(2)   55/FFFFFFFFFFFF2C26 : 323C 04E0           		move.w	#DEF_PrintVramW,d1
(2)   56/FFFFFFFFFFFF2C2A : 6100 E354           		bsr	Video_PrintInitW
(2)   57/FFFFFFFFFFFF2C2E : 6100 E360           		bsr	Video_PrintDefPal_Fade
(2)   58/FFFFFFFFFFFF2C32 :                     	; ----------------------------------------------
(2)   59/FFFFFFFFFFFF2C32 :                     ; 		move.l	#ART_TESTBG,d0
(2)   60/FFFFFFFFFFFF2C32 :                     ; 		move.w	#cell_num(thisVram_BG),d1
(2)   61/FFFFFFFFFFFF2C32 :                     ; 		move.w	#cell_num(thisVram_BG_e-thisVram_BG),d2
(2)   62/FFFFFFFFFFFF2C32 :                     ; 		bsr	Video_LoadArt
(2)   63/FFFFFFFFFFFF2C32 :                     ; 		lea	(MAP_TESTBG),a0
(2)   64/FFFFFFFFFFFF2C32 :                     ; 		move.l	#splitw(0,0),d0
(2)   65/FFFFFFFFFFFF2C32 :                     ; 		move.l	#splitw(320/8,224/8),d1
(2)   66/FFFFFFFFFFFF2C32 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2
(2)   67/FFFFFFFFFFFF2C32 :                     ; 		move.w	#thisVram_BG|$4000,d3
(2)   68/FFFFFFFFFFFF2C32 :                     ; 		bsr	Video_LoadMap
(2)   69/FFFFFFFFFFFF2C32 :                     ; 		lea	(PAL_TESTBG),a0
(2)   70/FFFFFFFFFFFF2C32 :                     ; 		moveq	#32,d0
(2)   71/FFFFFFFFFFFF2C32 :                     ; 		moveq	#16,d1
(2)   72/FFFFFFFFFFFF2C32 :                     ; 		bsr	Video_FadePal
(2)   89/FFFFFFFFFFFF2C32 :                     	; ----------------------------------------------
(2)   90/FFFFFFFFFFFF2C32 : 41FA 0068           		lea	str_MenuText(pc),a0
(2)   91/FFFFFFFFFFFF2C36 : 7001                		moveq	#1,d0					; X/Y position: 1,1
(2)   92/FFFFFFFFFFFF2C38 : 7201                		moveq	#1,d1
(2)   93/FFFFFFFFFFFF2C3A : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; FG VRAM location
(2)   94/FFFFFFFFFFFF2C3E : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)   95/FFFFFFFFFFFF2C44 : 6100 E3F2           		bsr	Video_PrintW
(2)   96/FFFFFFFFFFFF2C48 :                     ; 		lea	(RAM_Save_Counter).w,a0
(2)   97/FFFFFFFFFFFF2C48 :                     ; 		move.l	#3,a1
(2)   98/FFFFFFFFFFFF2C48 :                     ; 		moveq	#1,d0
(2)   99/FFFFFFFFFFFF2C48 :                     ; 		moveq	#3,d1
(2)  100/FFFFFFFFFFFF2C48 :                     ; 		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  101/FFFFFFFFFFFF2C48 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  102/FFFFFFFFFFFF2C48 :                     ; 		bsr	Video_PrintValW
(2)  103/FFFFFFFFFFFF2C48 : 612E                		bsr	.loop_print				; Draw counter
(2)  104/FFFFFFFFFFFF2C4A :                     	; ----------------------------------------------
(2)  105/FFFFFFFFFFFF2C4A : 6100 DA78           		bsr	Video_DisplayOn				; Enable VDP Display
(2)  106/FFFFFFFFFFFF2C4E : 6100 E256           		bsr	Video_FadeIn_Full			; Full fade-in w/Delay
(2)  107/FFFFFFFFFFFF2C52 :                     
(2)  108/FFFFFFFFFFFF2C52 :                     ; ====================================================================
(2)  109/FFFFFFFFFFFF2C52 :                     ; ------------------------------------------------------
(2)  110/FFFFFFFFFFFF2C52 :                     ; Loop
(2)  111/FFFFFFFFFFFF2C52 :                     ; ------------------------------------------------------
(2)  112/FFFFFFFFFFFF2C52 :                     
(2)  113/FFFFFFFFFFFF2C52 :                     .loop:
(2)  114/FFFFFFFFFFFF2C52 : 6100 ECE8           		bsr	System_Render
(2)  115/FFFFFFFFFFFF2C56 : 6120                		bsr	.loop_print
(2)  116/FFFFFFFFFFFF2C58 :                     
(2)  122/FFFFFFFFFFFF2C58 :                     
(2)  123/FFFFFFFFFFFF2C58 :                     	; CD only
(2)  124/FFFFFFFFFFFF2C58 :                     	; check ABC+Start "home" combo
(2)  126/FFFFFFFFFFFF2C58 : 6100 F4A6           		bsr	System_MdMcd_CheckHome
(2)  127/FFFFFFFFFFFF2C5C : 6536                		bcs.s	.exit_shell
(2)  129/FFFFFFFFFFFF2C5E :                     
(2)  130/FFFFFFFFFFFF2C5E : 4DF8 EE18           		lea	(Controller_1).w,a6
(2)  131/FFFFFFFFFFFF2C62 : 3E2E 0004           		move.w	pad_press(a6),d7
(2)  132/FFFFFFFFFFFF2C66 : 0807 0007           		btst	#bitJoyStart,d7
(2)  133/FFFFFFFFFFFF2C6A : 67E6                		beq.s	.loop
(2)  134/FFFFFFFFFFFF2C6C : 6100 E24A           		bsr	Video_FadeOut_Full
(2)  135/FFFFFFFFFFFF2C70 : 31FC 0007 EE7C      		move.w	#7,(RAM_ScreenMode).w			; Go to Screen $07: GEMA tester
(2)  136/FFFFFFFFFFFF2C76 : 4E75                		rts
(2)  137/FFFFFFFFFFFF2C78 :                     
(2)  138/FFFFFFFFFFFF2C78 :                     ; ------------------------------------------------------
(2)  139/FFFFFFFFFFFF2C78 :                     ; Show framecounter and input
(2)  140/FFFFFFFFFFFF2C78 :                     ; ------------------------------------------------------
(2)  141/FFFFFFFFFFFF2C78 :                     
(2)  142/FFFFFFFFFFFF2C78 :                     .loop_print:
(2)  143/FFFFFFFFFFFF2C78 : 41F8 EBFC           		lea	(RAM_Framecount),a0			; Memory location to print
(2)  144/FFFFFFFFFFFF2C7C : 227C 0000 0003      		move.l	#3,a1					; Display type 3
(2)  145/FFFFFFFFFFFF2C82 : 701F                		moveq	#31,d0
(2)  146/FFFFFFFFFFFF2C84 : 7201                		moveq	#1,d1
(2)  147/FFFFFFFFFFFF2C86 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; VRAM ascii location w/attr
(2)  148/FFFFFFFFFFFF2C8A : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; VRAM output location and width size
(2)  149/FFFFFFFFFFFF2C90 : 6000 E4F0           		bra	Video_PrintValW
(2)  150/FFFFFFFFFFFF2C94 :                     
(2)  151/FFFFFFFFFFFF2C94 :                     ; ------------------------------------------------------
(2)  152/FFFFFFFFFFFF2C94 :                     ; SCD ONLY
(2)  153/FFFFFFFFFFFF2C94 :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2C94 :                     
(2)  156/FFFFFFFFFFFF2C94 :                     .exit_shell:
(2)  157/FFFFFFFFFFFF2C94 : 6100 E222           		bsr	Video_FadeOut_Full
(2)  158/FFFFFFFFFFFF2C98 : 6000 F496           		bra	System_MdMcd_ExitShell
(2)  160/FFFFFFFFFFFF2C9C :                     
(2)  161/FFFFFFFFFFFF2C9C :                     ; ====================================================================
(2)  162/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  163/FFFFFFFFFFFF2C9C :                     ; Objects
(2)  164/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  165/FFFFFFFFFFFF2C9C :                     
(2)  166/FFFFFFFFFFFF2C9C :                     ; ====================================================================
(2)  167/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  168/FFFFFFFFFFFF2C9C :                     ; Custom VBlank
(2)  169/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  170/FFFFFFFFFFFF2C9C :                     
(2)  171/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  172/FFFFFFFFFFFF2C9C :                     ; Custom HBlank
(2)  173/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  174/FFFFFFFFFFFF2C9C :                     
(2)  175/FFFFFFFFFFFF2C9C :                     ; ====================================================================
(2)  176/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  177/FFFFFFFFFFFF2C9C :                     ; Includes for this screen
(2)  178/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  179/FFFFFFFFFFFF2C9C :                     
(2)  180/FFFFFFFFFFFF2C9C :                     ; ====================================================================
(2)  181/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  182/FFFFFFFFFFFF2C9C :                     ; Small data section
(2)  183/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2C9C :                     
(2)  185/FFFFFFFFFFFF2C9C :                     str_MenuText:
(2)  186/FFFFFFFFFFFF2C9C : 4E69 6B6F 6E61      		dc.b "Nikona screen template",$0A
         FFFFFFFFFFFF2CA2 : 2073 6372 6565 
         FFFFFFFFFFFF2CA8 : 6E20 7465 6D70 
         FFFFFFFFFFFF2CAE : 6C61 7465 0A       
(2)  187/FFFFFFFFFFFF2CB3 : 00                  		dc.b 0
(2)  188/FFFFFFFFFFFF2CB4 :                     		align 2
(2)  189/FFFFFFFFFFFF2CB6 :                     
(2)  190/FFFFFFFFFFFF2CB6 :                     ; ====================================================================
(2)  191/FFFFFFFFFFFF2CB6 :                     
(1)   18/FFFFFFFFFFFF2CB6 :                     mcscrn_e:
(1)   18/    E8B6 :                                     dephase
(1)   18/    E8B6 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode) ; Add the used bytes
(1)   18/    E8B6 :                                     align $800
(1)   18/    F000 : =$F000               MD_SCREEN00_E label *
(1)   18/    F000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   19/    F000 : (MACRO)              	code_bank Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   19/    F000 :                                     align $800              ; SCD/CD32X sector align
(1)   19/    F000 : =$F000               MD_SCREEN07 label *                        ; Register start label
(1)   19/    F000 :                     mctopscrn:
(1)   19/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; Phase code to RAM area
(1)   19/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   19/FFFFFFFFFFFF2C00 :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; GEMA SOUND TESTER
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Settings
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$0                  VIEW_GEMAINFO		equ False		; ** Using this causes loss of DAC quality **
(2)   12/FFFFFFFFFFFF2C00 : =$1                  VIEW_FAIRY		equ True		; Show status Dodo/Mifi/Fifi
(2)   13/FFFFFFFFFFFF2C00 :                     
(2)   14/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   15/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   16/FFFFFFFFFFFF2C00 :                     ; Variables
(2)   17/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   18/FFFFFFFFFFFF2C00 :                     
(2)   19/FFFFFFFFFFFF2C00 : =$7                  MAX_SNDPICK		equ 7
(2)   20/FFFFFFFFFFFF2C00 : =$10                 SET_SNDVIEWY		equ 16
(2)   21/FFFFFFFFFFFF2C00 :                     
(2)   22/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   23/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   24/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   25/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   26/FFFFFFFFFFFF2C00 :                     
(2)   27/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2
(2)   27/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   27/    F000 :                                     dephase
(2)   27/       2 :                                     phase 2
(2)   27/       2 : =$2                  GLBL_LASTORG    := *
(2)   28/       2 :                     setVram_Dodo		ds.b $30
(2)   29/      32 :                     setVram_Mimi		ds.b $30
(2)   30/      62 :                     setVram_Fifi		ds.b $30
(2)   31/      92 :  (MACRO-2)           			endmemory
(2)   31/    F090 :                     .here:          dephase
(2)   31/    F090 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   31/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   32/FFFFFFFFFFFF2C00 :                     
(2)   33/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   34/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   35/FFFFFFFFFFFF2C00 :                     ; This mode's RAM
(2)   36/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   38/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   38/    F000 :                                     dephase
(2)   38/FFFFFFFFFFFFB000 :                                     phase RAM_SCRNBUFF
(2)   38/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(2)   39/FFFFFFFFFFFFB000 :                     RAM_ThisObjList		ds.b obj_len*64
(2)   40/FFFFFFFFFFFFCA00 :                     RAM_GemaCache_PSG	ds.l 3
(2)   41/FFFFFFFFFFFFCA0C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   42/FFFFFFFFFFFFCA10 :                     RAM_GemaCache_FM	ds.l 4
(2)   43/FFFFFFFFFFFFCA20 :                     RAM_GemaCache_FM3	ds.l 1
(2)   44/FFFFFFFFFFFFCA24 :                     RAM_GemaCache_FM6	ds.l 1
(2)   45/FFFFFFFFFFFFCA28 :                     RAM_GemaCache_PCM	ds.l 8
(2)   46/FFFFFFFFFFFFCA48 :                     RAM_GemaCache_PWM	ds.l 8
(2)   47/FFFFFFFFFFFFCA68 :                     RAM_CurrPick		ds.w 1
(2)   48/FFFFFFFFFFFFCA6A :                     RAM_LastPick		ds.w 1
(2)   49/FFFFFFFFFFFFCA6C :                     RAM_GemaIndx		ds.w 1		; DONT MOVE
(2)   50/FFFFFFFFFFFFCA6E :                     RAM_GemaSeq		ds.w 1		; ''
(2)   51/FFFFFFFFFFFFCA70 :                     RAM_GemaBlk		ds.w 1		; ''
(2)   52/FFFFFFFFFFFFCA72 :                     RAM_GemaStatus		ds.w 4
(2)   53/FFFFFFFFFFFFCA7A :                     RAM_FairyVars		ds.w 1
(2)   54/FFFFFFFFFFFFCA7C :                     RAM_CurrBeats		ds.w 1
(2)   55/FFFFFFFFFFFFCA7E :                     RAM_Copy_fmSpecial	ds.w 1
(2)   56/FFFFFFFFFFFFCA80 :                     RAM_Copy_HasDac		ds.w 1
(2)   57/FFFFFFFFFFFFCA82 :                     sizeof_thisbuff		ds.l 0
(2)   58/FFFFFFFFFFFFCA88 :  (MACRO-2)           			endmemory
(2)   58/   10A88 :                     .here:          dephase
(2)   58/   10A88 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   58/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   59/FFFFFFFFFFFF2C00 :                     
(2)   60/FFFFFFFFFFFF2C00 :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   61/FFFFFFFFFFFF2C00 :                     
(2)   62/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   63/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   64/FFFFFFFFFFFF2C00 :                     ; Init
(2)   65/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   66/FFFFFFFFFFFF2C00 :                     
(2)   67/FFFFFFFFFFFF2C00 : 6100 DACE           		bsr	Video_DisplayOff
(2)   68/FFFFFFFFFFFF2C04 : 6100 F11C           		bsr	System_Default
(2)   69/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   70/FFFFFFFFFFFF2C08 :                     	; Load assets
(2)   71/FFFFFFFFFFFF2C08 : 203C 0001 0000      		move.l	#DATA_BANK0,d0
(2)   72/FFFFFFFFFFFF2C0E : 6100 F59C           		bsr	System_SetDataBank
(2)   73/FFFFFFFFFFFF2C12 :                     	; ----------------------------------------------
(2)   74/FFFFFFFFFFFF2C12 : 203C 0023 200A      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   75/FFFFFFFFFFFF2C18 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   76/FFFFFFFFFFFF2C1C : 6100 E368           		bsr	Video_PrintInit
(2)   77/FFFFFFFFFFFF2C20 : 203C 0023 2C0A      		move.l	#ASCII_FONT_W,d0
(2)   78/FFFFFFFFFFFF2C26 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   79/FFFFFFFFFFFF2C2A : 6100 E354           		bsr	Video_PrintInitW
(2)   80/FFFFFFFFFFFF2C2E : 41F8 EA2E           		lea	(RAM_PaletteFade+$40).w,a0
(2)   81/FFFFFFFFFFFF2C32 : 30BC 0000           		move.w	#$0000,(a0)
(2)   82/FFFFFFFFFFFF2C36 : 317C 00E0 0002      		move.w	#$00E0,2(a0)
(2)   83/FFFFFFFFFFFF2C3C : 317C 00A0 0004      		move.w	#$00A0,4(a0)
(2)   84/FFFFFFFFFFFF2C42 : 317C 0080 0004      		move.w	#$0080,4(a0)
(2)   85/FFFFFFFFFFFF2C48 : D0FC 0020           		adda	#$20,a0
(2)   86/FFFFFFFFFFFF2C4C : 30BC 0000           		move.w	#$0000,(a0)
(2)   87/FFFFFFFFFFFF2C50 : 317C 0EEE 0002      		move.w	#$0EEE,2(a0)
(2)   88/FFFFFFFFFFFF2C56 : 317C 0AAA 0004      		move.w	#$0AAA,4(a0)
(2)   89/FFFFFFFFFFFF2C5C : 317C 0888 0004      		move.w	#$0888,4(a0)
(2)   90/FFFFFFFFFFFF2C62 : 41F9 0023 558C      		lea	(objPal_Dodo+2),a0
(2)   91/FFFFFFFFFFFF2C68 : 7001                		moveq	#1,d0
(2)   92/FFFFFFFFFFFF2C6A : 323C 000F           		move.w	#15,d1
(2)   93/FFFFFFFFFFFF2C6E : 6100 E29A           		bsr	Video_FadePal
(2)   94/FFFFFFFFFFFF2C72 : 41FA 03F6           		lea	ArtList_Stuff(pc),a0
(2)   95/FFFFFFFFFFFF2C76 : 6100 DD40           		bsr	Video_LoadArt_List
(2)   96/FFFFFFFFFFFF2C7A :                     	; ----------------------------------------------
(2)   97/FFFFFFFFFFFF2C7A : 41FA 0408           		lea	str_TesterTitle(pc),a0
(2)   98/FFFFFFFFFFFF2C7E : 700C                		moveq	#12,d0
(2)   99/FFFFFFFFFFFF2C80 : 7202                		moveq	#2,d1
(2)  100/FFFFFFFFFFFF2C82 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  101/FFFFFFFFFFFF2C86 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  102/FFFFFFFFFFFF2C8C : 6100 E3AA           		bsr	Video_PrintW
(2)  103/FFFFFFFFFFFF2C90 : 41FA 0404           		lea	str_TesterInfo(pc),a0
(2)  105/FFFFFFFFFFFF2C94 : 7006                		moveq	#6,d0
(2)  109/FFFFFFFFFFFF2C96 : 7207                		moveq	#7,d1
(2)  110/FFFFFFFFFFFF2C98 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  111/FFFFFFFFFFFF2C9C : 6100 E310           		bsr	Video_Print
(2)  112/FFFFFFFFFFFF2CA0 : 41FA 0410           		lea	str_Instruc(pc),a0
(2)  113/FFFFFFFFFFFF2CA4 : 7002                		moveq	#2,d0
(2)  114/FFFFFFFFFFFF2CA6 : 7215                		moveq	#21,d1
(2)  115/FFFFFFFFFFFF2CA8 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  116/FFFFFFFFFFFF2CAC : 6100 E300           		bsr	Video_Print
(2)  117/FFFFFFFFFFFF2CB0 : 6100 017A           		bsr	.gema_viewinit
(2)  118/FFFFFFFFFFFF2CB4 :                     ; 		bsr	.show_cursor
(2)  119/FFFFFFFFFFFF2CB4 :                     	; ----------------------------------------------
(2)  120/FFFFFFFFFFFF2CB4 : 6100 D3BC           		bsr	gemaReset				; Load default GEMA sound data
(2)  121/FFFFFFFFFFFF2CB8 : 6100 0132           		bsr	.show_me
(2)  122/FFFFFFFFFFFF2CBC : 6100 0192           		bsr	.gema_view
(2)  123/FFFFFFFFFFFF2CC0 :                     ; 		bsr	.steal_vars
(2)  124/FFFFFFFFFFFF2CC0 :                     	; ----------------------------------------------
(2)  125/FFFFFFFFFFFF2CC0 : 6100 DA02           		bsr	Video_DisplayOn
(2)  126/FFFFFFFFFFFF2CC4 : 6100 F560           		bsr	Object_Run
(2)  127/FFFFFFFFFFFF2CC8 : 6100 D79E           		bsr	Video_BuildSprites
(2)  128/FFFFFFFFFFFF2CCC : 6100 EC6E           		bsr	System_Render
(2)  129/FFFFFFFFFFFF2CD0 : 6100 E1D4           		bsr	Video_FadeIn_Full
(2)  130/FFFFFFFFFFFF2CD4 :                     
(2)  131/FFFFFFFFFFFF2CD4 :                     ; ====================================================================
(2)  132/FFFFFFFFFFFF2CD4 :                     ; ------------------------------------------------------
(2)  133/FFFFFFFFFFFF2CD4 :                     ; Loop
(2)  134/FFFFFFFFFFFF2CD4 :                     ; ------------------------------------------------------
(2)  135/FFFFFFFFFFFF2CD4 :                     
(2)  136/FFFFFFFFFFFF2CD4 :                     .loop:
(2)  137/FFFFFFFFFFFF2CD4 : 6100 EC66           		bsr	System_Render
(2)  138/FFFFFFFFFFFF2CD8 :                     ; 		bsr	.show_cursor
(2)  139/FFFFFFFFFFFF2CD8 : 6100 0176           		bsr	.gema_view
(2)  140/FFFFFFFFFFFF2CDC : 6100 F548           		bsr	Object_Run
(2)  141/FFFFFFFFFFFF2CE0 : 6100 D786           		bsr	Video_BuildSprites
(2)  142/FFFFFFFFFFFF2CE4 :                     
(2)  143/FFFFFFFFFFFF2CE4 :                     	; NEW controls
(2)  144/FFFFFFFFFFFF2CE4 : 4DF8 EE18           		lea	(Controller_1).w,a6
(2)  145/FFFFFFFFFFFF2CE8 :                     	; LEFT/RIGHT
(2)  146/FFFFFFFFFFFF2CE8 : 3E2E 0004           		move.w	pad_press(a6),d7
(2)  147/FFFFFFFFFFFF2CEC : 3C07                		move.w	d7,d6
(2)  148/FFFFFFFFFFFF2CEE : 0246 0080           		andi.w	#JoyStart,d6
(2)  149/FFFFFFFFFFFF2CF2 : 6600 00C4           		bne	.exit_this
(2)  150/FFFFFFFFFFFF2CF6 : 0247 000C           		andi.w	#JoyLeft+JoyRight,d7
(2)  151/FFFFFFFFFFFF2CFA : 6718                		beq.s	.lr_seq
(2)  152/FFFFFFFFFFFF2CFC : 7001                		moveq	#1,d0
(2)  153/FFFFFFFFFFFF2CFE : 0247 0004           		andi.w	#JoyLeft,d7
(2)  154/FFFFFFFFFFFF2D02 : 6708                		beq.s	.lr_right
(2)  155/FFFFFFFFFFFF2D04 : 4A78 CA6E           		tst.w	(RAM_GemaSeq).w
(2)  156/FFFFFFFFFFFF2D08 : 670A                		beq.s	.lr_seq
(2)  157/FFFFFFFFFFFF2D0A : 4440                		neg.w	d0
(2)  158/FFFFFFFFFFFF2D0C :                     .lr_right:
(2)  159/FFFFFFFFFFFF2D0C : D178 CA6E           		add.w	d0,(RAM_GemaSeq).w
(2)  160/FFFFFFFFFFFF2D10 : 6100 00DA           		bsr	.show_me
(2)  161/FFFFFFFFFFFF2D14 :                     .lr_seq:
(2)  162/FFFFFFFFFFFF2D14 :                     
(2)  163/FFFFFFFFFFFF2D14 :                     	; UP/DOWN
(2)  164/FFFFFFFFFFFF2D14 : 3E2E 0004           		move.w	pad_press(a6),d7
(2)  165/FFFFFFFFFFFF2D18 : 0247 0003           		andi.w	#JoyUp+JoyDown,d7
(2)  166/FFFFFFFFFFFF2D1C : 6718                		beq.s	.ud_seq
(2)  167/FFFFFFFFFFFF2D1E : 7001                		moveq	#1,d0
(2)  168/FFFFFFFFFFFF2D20 :                     ; 		andi.w	#JoyUp,d7
(2)  169/FFFFFFFFFFFF2D20 : 0247 0001           		andi.w	#JoyUp,d7
(2)  170/FFFFFFFFFFFF2D24 : 6708                		beq.s	.ud_right
(2)  171/FFFFFFFFFFFF2D26 : 4A78 CA70           		tst.w	(RAM_GemaBlk).w
(2)  172/FFFFFFFFFFFF2D2A : 670A                		beq.s	.ud_seq
(2)  173/FFFFFFFFFFFF2D2C : 4440                		neg.w	d0
(2)  174/FFFFFFFFFFFF2D2E :                     .ud_right:
(2)  175/FFFFFFFFFFFF2D2E : D178 CA70           		add.w	d0,(RAM_GemaBlk).w
(2)  176/FFFFFFFFFFFF2D32 : 6100 00B8           		bsr	.show_me
(2)  177/FFFFFFFFFFFF2D36 :                     .ud_seq:
(2)  178/FFFFFFFFFFFF2D36 :                     
(2)  179/FFFFFFFFFFFF2D36 :                     	; X/Y
(2)  180/FFFFFFFFFFFF2D36 : 3E2E 0004           		move.w	pad_press(a6),d7
(2)  181/FFFFFFFFFFFF2D3A : 0247 0600           		andi.w	#JoyX+JoyY,d7
(2)  182/FFFFFFFFFFFF2D3E : 6718                		beq.s	.xy_seq
(2)  183/FFFFFFFFFFFF2D40 : 7001                		moveq	#1,d0
(2)  184/FFFFFFFFFFFF2D42 : 0247 0400           		andi.w	#JoyX,d7
(2)  185/FFFFFFFFFFFF2D46 : 6708                		beq.s	.xy_right
(2)  186/FFFFFFFFFFFF2D48 : 4A78 CA6C           		tst.w	(RAM_GemaIndx).w
(2)  187/FFFFFFFFFFFF2D4C : 670A                		beq.s	.xy_seq
(2)  188/FFFFFFFFFFFF2D4E : 4440                		neg.w	d0
(2)  189/FFFFFFFFFFFF2D50 :                     .xy_right:
(2)  190/FFFFFFFFFFFF2D50 : D178 CA6C           		add.w	d0,(RAM_GemaIndx).w
(2)  191/FFFFFFFFFFFF2D54 : 6100 0096           		bsr	.show_me
(2)  192/FFFFFFFFFFFF2D58 :                     .xy_seq:
(2)  193/FFFFFFFFFFFF2D58 :                     
(2)  194/FFFFFFFFFFFF2D58 :                     	; C BUTTON
(2)  195/FFFFFFFFFFFF2D58 : 3E2E 0004           		move.w	pad_press(a6),d7
(2)  196/FFFFFFFFFFFF2D5C : 0247 0120           		andi.w	#JoyC+JoyZ,d7
(2)  197/FFFFFFFFFFFF2D60 : 672E                		beq.s	.c_press
(2)  198/FFFFFFFFFFFF2D62 : 4BF8 CA6C           		lea	(RAM_GemaIndx).w,a5
(2)  199/FFFFFFFFFFFF2D66 :                     
(2)  200/FFFFFFFFFFFF2D66 : 341D                		move.w	(a5)+,d2
(2)  201/FFFFFFFFFFFF2D68 : 0247 0100           		andi.w	#JoyZ,d7
(2)  202/FFFFFFFFFFFF2D6C : 6702                		beq.s	.not_auto
(2)  203/FFFFFFFFFFFF2D6E : 74FF                		moveq	#-1,d2
(2)  204/FFFFFFFFFFFF2D70 :                     .not_auto:
(2)  205/FFFFFFFFFFFF2D70 : 301D                		move.w	(a5)+,d0
(2)  206/FFFFFFFFFFFF2D72 : 321D                		move.w	(a5)+,d1
(2)  207/FFFFFFFFFFFF2D74 : 6100 D45A           		bsr	gemaPlaySeq
(2)  208/FFFFFFFFFFFF2D78 :                     
(2)  209/FFFFFFFFFFFF2D78 : 3038 CA6E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  210/FFFFFFFFFFFF2D7C : 3200                		move.w	d0,d1
(2)  211/FFFFFFFFFFFF2D7E : D241                		add.w	d1,d1
(2)  212/FFFFFFFFFFFF2D80 : 41FA 02B8           		lea	exgema_beats(pc),a0
(2)  213/FFFFFFFFFFFF2D84 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  214/FFFFFFFFFFFF2D88 : 31C0 CA7C           		move.w	d0,(RAM_CurrBeats).w
(2)  215/FFFFFFFFFFFF2D8C : 6100 D4F2           		bsr	gemaSetBeats
(2)  216/FFFFFFFFFFFF2D90 :                     .c_press:
(2)  217/FFFFFFFFFFFF2D90 :                     	; B BUTTON
(2)  218/FFFFFFFFFFFF2D90 : 3E2E 0004           		move.w	pad_press(a6),d7
(2)  219/FFFFFFFFFFFF2D94 : 0247 0010           		andi.w	#JoyB,d7
(2)  220/FFFFFFFFFFFF2D98 : 670C                		beq.s	.b_press
(2)  221/FFFFFFFFFFFF2D9A : 4BF8 CA6C           		lea	(RAM_GemaIndx).w,a5
(2)  222/FFFFFFFFFFFF2D9E : 321D                		move.w	(a5)+,d1
(2)  223/FFFFFFFFFFFF2DA0 : 301D                		move.w	(a5)+,d0
(2)  224/FFFFFFFFFFFF2DA2 : 6100 D46C           		bsr	gemaStopSeq
(2)  225/FFFFFFFFFFFF2DA6 :                     .b_press:
(2)  226/FFFFFFFFFFFF2DA6 : 3E2E 0004           		move.w	pad_press(a6),d7
(2)  227/FFFFFFFFFFFF2DAA : 0247 0040           		andi.w	#JoyA,d7
(2)  228/FFFFFFFFFFFF2DAE : 6704                		beq.s	.a_press
(2)  229/FFFFFFFFFFFF2DB0 : 6100 D47A           		bsr	gemaStopAll
(2)  230/FFFFFFFFFFFF2DB4 :                     .a_press:
(2)  231/FFFFFFFFFFFF2DB4 :                     
(2)  232/FFFFFFFFFFFF2DB4 :                     
(2)  233/FFFFFFFFFFFF2DB4 :                     ; 		move.w	pad_hold(a6),d7
(2)  234/FFFFFFFFFFFF2DB4 :                     ; 		andi.w	#JoyA+JoyB+JoyC,d7
(2)  235/FFFFFFFFFFFF2DB4 :                     ; 		bne.s	.n_up
(2)  236/FFFFFFFFFFFF2DB4 :                     ; 		move.w	pad_press(a6),d7
(2)  237/FFFFFFFFFFFF2DB4 :                     ; 		btst	#bitJoyDown,d7
(2)  238/FFFFFFFFFFFF2DB4 :                     ; 		beq.s	.n_down
(2)  239/FFFFFFFFFFFF2DB4 :                     ; 		addq.w	#1,(a5)
(2)  240/FFFFFFFFFFFF2DB4 :                     ; 		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  241/FFFFFFFFFFFF2DB4 :                     ; 		ble.s	.n_downd
(2)  242/FFFFFFFFFFFF2DB4 :                     ; 		clr.w	(a5)
(2)  243/FFFFFFFFFFFF2DB4 :                     ; .n_downd:
(2)  244/FFFFFFFFFFFF2DB4 :                     ; 		bsr.s	.show_me
(2)  245/FFFFFFFFFFFF2DB4 :                     ; .n_down:
(2)  246/FFFFFFFFFFFF2DB4 :                     ; 		move.w	pad_press(a6),d7
(2)  247/FFFFFFFFFFFF2DB4 :                     ; 		btst	#bitJoyUp,d7
(2)  248/FFFFFFFFFFFF2DB4 :                     ; 		beq.s	.n_up
(2)  249/FFFFFFFFFFFF2DB4 :                     ; 		subq.w	#1,(a5)
(2)  250/FFFFFFFFFFFF2DB4 :                     ; 		bpl.s	.n_ups
(2)  251/FFFFFFFFFFFF2DB4 :                     ; 		move.w	#MAX_SNDPICK,(a5)
(2)  252/FFFFFFFFFFFF2DB4 :                     ; .n_ups:
(2)  253/FFFFFFFFFFFF2DB4 :                     ; 		bsr.s	.show_me
(2)  254/FFFFFFFFFFFF2DB4 :                     ; .n_up:
(2)  255/FFFFFFFFFFFF2DB4 :                     ; 		move.w	(RAM_CurrPick).w,d7
(2)  256/FFFFFFFFFFFF2DB4 :                     ; 		lsl.w	#2,d7
(2)  257/FFFFFFFFFFFF2DB4 :                     ; 		jsr	.jump_list(pc,d7.w)
(2)  258/FFFFFFFFFFFF2DB4 :                     ; 		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  259/FFFFFFFFFFFF2DB4 :                     ; 		bpl.s	.n_cbtn
(2)  260/FFFFFFFFFFFF2DB4 :                     
(2)  261/FFFFFFFFFFFF2DB4 :                     ; .n_cbtn:
(2)  262/FFFFFFFFFFFF2DB4 : 6000 FF1E           		bra	.loop
(2)  263/FFFFFFFFFFFF2DB8 :                     
(2)  264/FFFFFFFFFFFF2DB8 :                     .exit_this:
(2)  265/FFFFFFFFFFFF2DB8 : 6100 E0FE           		bsr	Video_FadeOut_Full
(2)  266/FFFFFFFFFFFF2DBC :                     	; Stop ALL sequences
(2)  267/FFFFFFFFFFFF2DBC : 6100 D46E           		bsr	gemaStopAll
(2)  268/FFFFFFFFFFFF2DC0 :                     	rept 4
(2)  269/FFFFFFFFFFFF2DC0 :                     		bsr	System_Render		; Wait 4 frames...
(2)  270/FFFFFFFFFFFF2DC0 :                     	endm
(2)  269/FFFFFFFFFFFF2DC0 : 6100 EB7A           		bsr	System_Render		; Wait 4 frames...
(2)  269/FFFFFFFFFFFF2DC4 : 6100 EB76           		bsr	System_Render		; Wait 4 frames...
(2)  269/FFFFFFFFFFFF2DC8 : 6100 EB72           		bsr	System_Render		; Wait 4 frames...
(2)  269/FFFFFFFFFFFF2DCC : 6100 EB6E           		bsr	System_Render		; Wait 4 frames...
(2)  271/FFFFFFFFFFFF2DD0 : 31FC 0000 EE7C      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  272/FFFFFFFFFFFF2DD6 : 4E75                		rts				; <-- RTS
(2)  273/FFFFFFFFFFFF2DD8 :                     
(2)  274/FFFFFFFFFFFF2DD8 :                     ; ------------------------------------------------------
(2)  275/FFFFFFFFFFFF2DD8 :                     
(2)  276/FFFFFFFFFFFF2DD8 :                     .exit_shell:
(2)  277/FFFFFFFFFFFF2DD8 : 6100 E0DE           		bsr	Video_FadeOut_Full
(2)  278/FFFFFFFFFFFF2DDC : 6100 D44E           		bsr	gemaStopAll
(2)  279/FFFFFFFFFFFF2DE0 : 6100 EB5A           		bsr	System_Render
(2)  280/FFFFFFFFFFFF2DE4 : 6100 EB56           		bsr	System_Render
(2)  281/FFFFFFFFFFFF2DE8 : 6000 F346           		bra	System_MdMcd_ExitShell
(2)  282/FFFFFFFFFFFF2DEC :                     
(2)  283/FFFFFFFFFFFF2DEC :                     ; ------------------------------------------------------
(2)  284/FFFFFFFFFFFF2DEC :                     
(2)  285/FFFFFFFFFFFF2DEC :                     .show_me:
(2)  286/FFFFFFFFFFFF2DEC : 3038 CA6E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  287/FFFFFFFFFFFF2DF0 : 3200                		move.w	d0,d1
(2)  288/FFFFFFFFFFFF2DF2 : D241                		add.w	d1,d1
(2)  289/FFFFFFFFFFFF2DF4 : 41FA 0244           		lea	exgema_beats(pc),a0
(2)  290/FFFFFFFFFFFF2DF8 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  291/FFFFFFFFFFFF2DFC : 31C0 CA7C           		move.w	d0,(RAM_CurrBeats).w
(2)  292/FFFFFFFFFFFF2E00 :                     
(2)  293/FFFFFFFFFFFF2E00 : 41FA 06A8           		lea	str_ShowBeats(pc),a0
(2)  295/FFFFFFFFFFFF2E04 : 700D                		moveq	#13,d0
(2)  299/FFFFFFFFFFFF2E06 : 720C                		moveq	#12,d1
(2)  300/FFFFFFFFFFFF2E08 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  301/FFFFFFFFFFFF2E0C : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  302/FFFFFFFFFFFF2E12 : 6100 E19A           		bsr	Video_Print
(2)  303/FFFFFFFFFFFF2E16 : 41FA 067E           		lea	str_ShowVars(pc),a0
(2)  305/FFFFFFFFFFFF2E1A : 7007                		moveq	#7,d0
(2)  309/FFFFFFFFFFFF2E1C : 7209                		moveq	#9,d1
(2)  310/FFFFFFFFFFFF2E1E : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  311/FFFFFFFFFFFF2E22 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  312/FFFFFFFFFFFF2E28 : 6000 E20E           		bra	Video_PrintW
(2)  313/FFFFFFFFFFFF2E2C :                     
(2)  314/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  315/FFFFFFFFFFFF2E2C :                     ;
(2)  316/FFFFFFFFFFFF2E2C :                     ; .jump_list:
(2)  317/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.nothing
(2)  318/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_1
(2)  319/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_2
(2)  320/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_3
(2)  321/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_4
(2)  322/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_5
(2)  323/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_6
(2)  324/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_7
(2)  325/FFFFFFFFFFFF2E2C :                     ;
(2)  326/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  327/FFFFFFFFFFFF2E2C :                     ; ; OPTION 0
(2)  328/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  329/FFFFFFFFFFFF2E2C :                     ;
(2)  330/FFFFFFFFFFFF2E2C :                     ; .nothing:
(2)  331/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  332/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  333/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press
(2)  334/FFFFFFFFFFFF2E2C :                     ; 		bsr.s	.show_me
(2)  335/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaTest
(2)  336/FFFFFFFFFFFF2E2C :                     ; .no_press:
(2)  337/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  338/FFFFFFFFFFFF2E2C :                     ;
(2)  339/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  340/FFFFFFFFFFFF2E2C :                     ; OPTION 1
(2)  341/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  342/FFFFFFFFFFFF2E2C :                     
(2)  343/FFFFFFFFFFFF2E2C :                     ; 		bra.s	.show_me
(2)  344/FFFFFFFFFFFF2E2C :                     ; .option1_args:
(2)  345/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_hold(a6),d7
(2)  346/FFFFFFFFFFFF2E2C :                     ; 		move.w	d7,d6
(2)  347/FFFFFFFFFFFF2E2C :                     ; 		andi.w	#JoyA+JoyB+JoyC,d6
(2)  348/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press
(2)  349/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyB,d7
(2)  350/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.d2_opt
(2)  351/FFFFFFFFFFFF2E2C :                     ; 		adda	#2,a5
(2)  352/FFFFFFFFFFFF2E2C :                     ; .d2_opt:
(2)  353/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyC,d7
(2)  354/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.d3_opt
(2)  355/FFFFFFFFFFFF2E2C :                     ; 		adda	#4,a5
(2)  356/FFFFFFFFFFFF2E2C :                     ; .d3_opt:
(2)  357/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  358/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyRight,d7
(2)  359/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_right
(2)  360/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  361/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  362/FFFFFFFFFFFF2E2C :                     ; .op1_right:
(2)  363/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyLeft,d7
(2)  364/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_left
(2)  365/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  366/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  367/FFFFFFFFFFFF2E2C :                     ; .op1_left:
(2)  368/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_hold(a6),d7
(2)  369/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyUp,d7
(2)  370/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_down
(2)  371/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  372/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  373/FFFFFFFFFFFF2E2C :                     ; .op1_down:
(2)  374/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyDown,d7
(2)  375/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_up
(2)  376/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  377/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  378/FFFFFFFFFFFF2E2C :                     ; .op1_up:
(2)  379/FFFFFFFFFFFF2E2C :                     ;
(2)  380/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  381/FFFFFFFFFFFF2E2C :                     ;
(2)  382/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  383/FFFFFFFFFFFF2E2C :                     ; ; OPTION 2
(2)  384/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  385/FFFFFFFFFFFF2E2C :                     ;
(2)  386/FFFFFFFFFFFF2E2C :                     ; .option_2:
(2)  387/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaIndx).w,a5
(2)  388/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  389/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  390/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.option1_args
(2)  391/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d0
(2)  392/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d1
(2)  393/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaStopSeq
(2)  394/FFFFFFFFFFFF2E2C :                     ;
(2)  395/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  396/FFFFFFFFFFFF2E2C :                     ; ; OPTION 3
(2)  397/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  398/FFFFFFFFFFFF2E2C :                     ;
(2)  399/FFFFFFFFFFFF2E2C :                     ; .option_3:
(2)  400/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  401/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  402/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  403/FFFFFFFFFFFF2E2C :                     ; 		beq	.option1_args
(2)  404/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d0
(2)  405/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d1
(2)  406/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaFadeSeq
(2)  407/FFFFFFFFFFFF2E2C :                     ;
(2)  408/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  409/FFFFFFFFFFFF2E2C :                     ; ; OPTION 4
(2)  410/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  411/FFFFFFFFFFFF2E2C :                     ;
(2)  412/FFFFFFFFFFFF2E2C :                     ; .option_4:
(2)  413/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  414/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  415/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  416/FFFFFFFFFFFF2E2C :                     ; 		beq	.option1_args
(2)  417/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d0
(2)  418/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d1
(2)  419/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaSetSeqVol
(2)  420/FFFFFFFFFFFF2E2C :                     ;
(2)  421/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  422/FFFFFFFFFFFF2E2C :                     ; ; OPTION 5
(2)  423/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  424/FFFFFFFFFFFF2E2C :                     ;
(2)  425/FFFFFFFFFFFF2E2C :                     ; .option_5:
(2)  426/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  427/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  428/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  429/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me
(2)  430/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaStopAll
(2)  431/FFFFFFFFFFFF2E2C :                     ; .no_press2:
(2)  432/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  433/FFFFFFFFFFFF2E2C :                     ;
(2)  434/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  435/FFFFFFFFFFFF2E2C :                     ; ; OPTION 6
(2)  436/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  437/FFFFFFFFFFFF2E2C :                     ;
(2)  438/FFFFFFFFFFFF2E2C :                     ; .option_6:
(2)  439/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaArg6).w,a5
(2)  440/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_hold(a6),d7
(2)  441/FFFFFFFFFFFF2E2C :                     ; 		andi.w	#JoyA,d7
(2)  442/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  443/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  444/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyRight,d7
(2)  445/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_right
(2)  446/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  447/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me_2
(2)  448/FFFFFFFFFFFF2E2C :                     ; .op2_right:
(2)  449/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyLeft,d7
(2)  450/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_left
(2)  451/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  452/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me_2
(2)  453/FFFFFFFFFFFF2E2C :                     ; .op2_left:
(2)  454/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_hold(a6),d7
(2)  455/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyDown,d7
(2)  456/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_down
(2)  457/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  458/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me_2
(2)  459/FFFFFFFFFFFF2E2C :                     ; .op2_down:
(2)  460/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyUp,d7
(2)  461/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_up
(2)  462/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  463/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me_2
(2)  464/FFFFFFFFFFFF2E2C :                     ; .op2_up:
(2)  465/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  466/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  467/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  468/FFFFFFFFFFFF2E2C :                     ; .show_me_2:
(2)  469/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me
(2)  470/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5),d0
(2)  471/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaSetBeats
(2)  472/FFFFFFFFFFFF2E2C :                     ;
(2)  473/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  474/FFFFFFFFFFFF2E2C :                     ; ; OPTION 7
(2)  475/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  476/FFFFFFFFFFFF2E2C :                     ;
(2)  477/FFFFFFFFFFFF2E2C :                     ; .option_7:
(2)  478/FFFFFFFFFFFF2E2C :                     ; 		move.w	pad_press(a6),d7
(2)  479/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  480/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  481/FFFFFFFFFFFF2E2C :                     ; 		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  482/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  483/FFFFFFFFFFFF2E2C :                     
(2)  484/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  485/FFFFFFFFFFFF2E2C :                     
(2)  486/FFFFFFFFFFFF2E2C :                     .gema_viewinit:
(2)  487/FFFFFFFFFFFF2E2C : 41F8 B000           		lea	(RAM_ThisObjList).w,a0
(2)  488/FFFFFFFFFFFF2E30 : 303C 0004           		move.w	#4,d0
(2)  489/FFFFFFFFFFFF2E34 : 6100 F3CE           		bsr	Object_Enable
(2)  491/FFFFFFFFFFFF2E38 : 203C FFFF 2F1A      		move.l	#obj_Fairy,d0		; <-- If you don't like the fairies comment out or
(2)  492/FFFFFFFFFFFF2E3E : 7200                		moveq	#0,d1			; delete all of this
(2)  493/FFFFFFFFFFFF2E40 : 6100 F41E           		bsr	Object_Make		;
(2)  494/FFFFFFFFFFFF2E44 : 5241                		addq.w	#1,d1			;
(2)  495/FFFFFFFFFFFF2E46 : 6100 F418           		bsr	Object_Make		;
(2)  496/FFFFFFFFFFFF2E4A : 5241                		addq.w	#1,d1			;
(2)  497/FFFFFFFFFFFF2E4C : 6100 F412           		bsr	Object_Make		; <-- until here
(2)  499/FFFFFFFFFFFF2E50 :                     
(2)  508/FFFFFFFFFFFF2E50 :                     
(2)  509/FFFFFFFFFFFF2E50 :                     .gema_view:
(2)  511/FFFFFFFFFFFF2E50 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF2E56 : 1100             
(2)  512/FFFFFFFFFFFF2E58 : 43F8 CA72           		lea	(RAM_GemaStatus),a1
(2)  513/FFFFFFFFFFFF2E5C : 7000                		moveq	#0,d0
(2)  514/FFFFFFFFFFFF2E5E : 7200                		moveq	#0,d1
(2)  515/FFFFFFFFFFFF2E60 : 7400                		moveq	#0,d2
(2)  516/FFFFFFFFFFFF2E62 : 0839 0000 00A1      .wait:		btst	#0,(z80_bus).l
         FFFFFFFFFFFF2E68 : 1100             
(2)  517/FFFFFFFFFFFF2E6A : 66F6                		bne.s	.wait
(2)  518/FFFFFFFFFFFF2E6C : 1039 00A0 180C      		move.b	(z80_cpu+trkBuff_0),d0
(2)  519/FFFFFFFFFFFF2E72 : 1239 00A0 184B      		move.b	(z80_cpu+trkBuff_1),d1
(2)  520/FFFFFFFFFFFF2E78 : 1439 00A0 188A      		move.b	(z80_cpu+trkBuff_2),d2
(2)  521/FFFFFFFFFFFF2E7E : 6100 D21C           		bsr	sndUnlockZ80
(2)  522/FFFFFFFFFFFF2E82 : 32C0                		move.w	d0,(a1)+
(2)  523/FFFFFFFFFFFF2E84 : 32C1                		move.w	d1,(a1)+
(2)  524/FFFFFFFFFFFF2E86 : 32C2                		move.w	d2,(a1)+
(2)  526/FFFFFFFFFFFF2E88 :                     
(2)  556/FFFFFFFFFFFF2E88 :                     
(2)  617/FFFFFFFFFFFF2E88 :                     
(2)  618/FFFFFFFFFFFF2E88 : 4E75                		rts
(2)  619/FFFFFFFFFFFF2E8A :                     
(2)  620/FFFFFFFFFFFF2E8A :                     ; ----------------------------------------------
(2)  621/FFFFFFFFFFFF2E8A :                     
(2)  622/FFFFFFFFFFFF2E8A :                     .copy_me:
(2)  623/FFFFFFFFFFFF2E8A : 7200                		moveq	#0,d1
(2)  624/FFFFFFFFFFFF2E8C :                     ; 		bsr	sndLockZ80
(2)  625/FFFFFFFFFFFF2E8C : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  626/FFFFFFFFFFFF2E90 : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  627/FFFFFFFFFFFF2E94 : 1010                		move.b	ztbl_Link(a0),d0
(2)  628/FFFFFFFFFFFF2E96 :                     ; 		bsr	sndUnlockZ80
(2)  629/FFFFFFFFFFFF2E96 : 8002                		or.b	d2,d0
(2)  630/FFFFFFFFFFFF2E98 : 6602                		bne.s	.link_ok
(2)  631/FFFFFFFFFFFF2E9A : 72FF                		moveq	#-1,d1
(2)  632/FFFFFFFFFFFF2E9C :                     .link_ok:
(2)  633/FFFFFFFFFFFF2E9C : 3281                		move.w	d1,(a1)
(2)  634/FFFFFFFFFFFF2E9E : D0FC 0012           		adda	#MAX_TBLSIZE,a0		; *** EXTERNAL LABEL
(2)  635/FFFFFFFFFFFF2EA2 : D2FC 0004           		adda	#4,a1
(2)  636/FFFFFFFFFFFF2EA6 : 51CF FFE2           		dbf	d7,.copy_me
(2)  637/FFFFFFFFFFFF2EAA : 4E75                		rts
(2)  638/FFFFFFFFFFFF2EAC :                     
(2)  639/FFFFFFFFFFFF2EAC :                     ; ----------------------------------------------
(2)  640/FFFFFFFFFFFF2EAC :                     
(2)  641/FFFFFFFFFFFF2EAC :                     .show_table_fm:
(2)  642/FFFFFFFFFFFF2EAC : 41F9 FFFF 343A      		lea	(strL_FmOnly),a0
(2)  643/FFFFFFFFFFFF2EB2 : 7C00                		moveq	#0,d6
(2)  644/FFFFFFFFFFFF2EB4 : 7A00                		moveq	#0,d5
(2)  645/FFFFFFFFFFFF2EB6 : 3C13                		move.w	(a3),d6
(2)  646/FFFFFFFFFFFF2EB8 : 6A06                		bpl.s	.is_fmgood
(2)  647/FFFFFFFFFFFF2EBA : 6100 E0F2           		bsr	Video_Print
(2)  648/FFFFFFFFFFFF2EBE : 602A                		bra.s	.from_fmbad
(2)  649/FFFFFFFFFFFF2EC0 :                     .is_fmgood:
(2)  650/FFFFFFFFFFFF2EC0 : 3A06                		move.w	d6,d5
(2)  651/FFFFFFFFFFFF2EC2 : D0FC 0004           		adda	#4,a0
(2)  652/FFFFFFFFFFFF2EC6 : 0246 001F           		andi.w	#%00011111,d6
(2)  653/FFFFFFFFFFFF2ECA : E34E                		lsl.w	#1,d6
(2)  654/FFFFFFFFFFFF2ECC : D0C6                		adda	d6,a0
(2)  655/FFFFFFFFFFFF2ECE : 6100 E0DE           		bsr	Video_Print
(2)  656/FFFFFFFFFFFF2ED2 : 3800                		move.w	d0,d4
(2)  657/FFFFFFFFFFFF2ED4 : 5440                		addq.w	#2,d0
(2)  658/FFFFFFFFFFFF2ED6 : 0245 00E0           		andi.w	#%11100000,d5
(2)  659/FFFFFFFFFFFF2EDA : E84D                		lsr.w	#4,d5
(2)  660/FFFFFFFFFFFF2EDC : 41F9 FFFF 347A      		lea	(strL_LazyVal),a0
(2)  661/FFFFFFFFFFFF2EE2 : D0C5                		adda	d5,a0
(2)  662/FFFFFFFFFFFF2EE4 : 6100 E0C8           		bsr	Video_Print
(2)  663/FFFFFFFFFFFF2EE8 : 3004                		move.w	d4,d0
(2)  664/FFFFFFFFFFFF2EEA :                     .from_fmbad:
(2)  665/FFFFFFFFFFFF2EEA :                     ; 		addq.w	#1,d1
(2)  666/FFFFFFFFFFFF2EEA : 5840                		addq.w	#4,d0
(2)  667/FFFFFFFFFFFF2EEC : D6FC 0004           		adda	#4,a3
(2)  668/FFFFFFFFFFFF2EF0 : 51CF FFBA           		dbf	d7,.show_table_fm
(2)  669/FFFFFFFFFFFF2EF4 : 4E75                		rts
(2)  670/FFFFFFFFFFFF2EF6 :                     
(2)  671/FFFFFFFFFFFF2EF6 :                     .show_table:
(2)  672/FFFFFFFFFFFF2EF6 : 41F9 FFFF 3136      		lea	(strL_NoteList),a0
(2)  673/FFFFFFFFFFFF2EFC : 7C00                		moveq	#0,d6
(2)  674/FFFFFFFFFFFF2EFE : 3C13                		move.w	(a3),d6
(2)  675/FFFFFFFFFFFF2F00 : 6B08                		bmi.s	.val_bad
(2)  676/FFFFFFFFFFFF2F02 : D0FC 0004           		adda	#4,a0
(2)  677/FFFFFFFFFFFF2F06 : DC46                		add.w	d6,d6
(2)  678/FFFFFFFFFFFF2F08 : D0C6                		adda	d6,a0
(2)  679/FFFFFFFFFFFF2F0A :                     .val_bad:
(2)  680/FFFFFFFFFFFF2F0A : 6100 E0A2           		bsr	Video_Print
(2)  681/FFFFFFFFFFFF2F0E :                     ; 		addq.w	#1,d1
(2)  682/FFFFFFFFFFFF2F0E : 5840                		addq.w	#4,d0
(2)  683/FFFFFFFFFFFF2F10 : D6FC 0004           		adda	#4,a3
(2)  684/FFFFFFFFFFFF2F14 : 51CF FFE0           		dbf	d7,.show_table
(2)  685/FFFFFFFFFFFF2F18 : 4E75                		rts
(2)  686/FFFFFFFFFFFF2F1A :                     
(2)  687/FFFFFFFFFFFF2F1A :                     ; ====================================================================
(2)  688/FFFFFFFFFFFF2F1A :                     ; ------------------------------------------------------
(2)  689/FFFFFFFFFFFF2F1A :                     ; Objects
(2)  690/FFFFFFFFFFFF2F1A :                     ; ------------------------------------------------------
(2)  691/FFFFFFFFFFFF2F1A :                     
(2)  692/FFFFFFFFFFFF2F1A :                     ; ====================================================================
(2)  693/FFFFFFFFFFFF2F1A :                     ; ------------------------------------------------------
(2)  694/FFFFFFFFFFFF2F1A :                     ; Objects
(2)  695/FFFFFFFFFFFF2F1A :                     ; ------------------------------------------------------
(2)  696/FFFFFFFFFFFF2F1A :                     
(2)  697/FFFFFFFFFFFF2F1A :                     ; --------------------------------------------------
(2)  698/FFFFFFFFFFFF2F1A :                     ; Sisi
(2)  699/FFFFFFFFFFFF2F1A :                     ; --------------------------------------------------
(2)  700/FFFFFFFFFFFF2F1A :                     
(2)  701/FFFFFFFFFFFF2F1A :                     obj_Fairy:
(2)  702/FFFFFFFFFFFF2F1A : 7000                		moveq	#0,d0
(2)  703/FFFFFFFFFFFF2F1C : 102E 001C           		move.b	obj_index(a6),d0
(2)  704/FFFFFFFFFFFF2F20 : D040                		add.w	d0,d0
(2)  705/FFFFFFFFFFFF2F22 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  706/FFFFFFFFFFFF2F26 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  707/FFFFFFFFFFFF2F2A :                     ; ----------------------------------------------
(2)  708/FFFFFFFFFFFF2F2A : 0004                .list:		dc.w .init-.list
(2)  709/FFFFFFFFFFFF2F2C : 003A                		dc.w .main-.list
(2)  710/FFFFFFFFFFFF2F2E :                     ; ----------------------------------------------
(2)  711/FFFFFFFFFFFF2F2E :                     .init:
(2)  712/FFFFFFFFFFFF2F2E : 1D7C 0001 001C      		move.b	#1,obj_index(a6)
(2)  713/FFFFFFFFFFFF2F34 : 426E 0020           		clr.w	obj_frame(a6)
(2)  714/FFFFFFFFFFFF2F38 : 6100 F392           		bsr	object_ResetAnim
(2)  715/FFFFFFFFFFFF2F3C :                     
(2)  716/FFFFFFFFFFFF2F3C : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  717/FFFFFFFFFFFF2F40 : 3C07                		move.w	d7,d6
(2)  718/FFFFFFFFFFFF2F42 : E54E                		lsl.w	#2,d6
(2)  719/FFFFFFFFFFFF2F44 : 41FA 00E6           		lea	.fixd_pos(pc),a0
(2)  720/FFFFFFFFFFFF2F48 : 43EE 0028           		lea	obj_ram(a6),a1
(2)  721/FFFFFFFFFFFF2F4C : D0C6                		adda	d6,a0
(2)  722/FFFFFFFFFFFF2F4E : 32D8                		move.w	(a0)+,(a1)+
(2)  723/FFFFFFFFFFFF2F50 : 32D8                		move.w	(a0)+,(a1)+
(2)  724/FFFFFFFFFFFF2F52 :                     
(2)  725/FFFFFFFFFFFF2F52 : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  726/FFFFFFFFFFFF2F56 : CEFC 002A           		mulu.w	#42,d7
(2)  727/FFFFFFFFFFFF2F5A : EB4F                		lsl.w	#5,d7
(2)  728/FFFFFFFFFFFF2F5C : 2007                		move.l	d7,d0
(2)  729/FFFFFFFFFFFF2F5E : 6100 EE4C           		bsr	System_DiceRoll
(2)  730/FFFFFFFFFFFF2F62 :                     ; 		neg.w	d7
(2)  731/FFFFFFFFFFFF2F62 : 32C0                		move.w	d0,(a1)+
(2)  732/FFFFFFFFFFFF2F64 :                     
(2)  733/FFFFFFFFFFFF2F64 :                     ; ----------------------------------------------
(2)  734/FFFFFFFFFFFF2F64 :                     .main:
(2)  735/FFFFFFFFFFFF2F64 : 4BEE 0028           		lea	obj_ram(a6),a5
(2)  736/FFFFFFFFFFFF2F68 : 49F8 CA72           		lea	(RAM_GemaStatus).w,a4
(2)  737/FFFFFFFFFFFF2F6C :                     	; a5
(2)  738/FFFFFFFFFFFF2F6C :                     	; 0 - X base
(2)  739/FFFFFFFFFFFF2F6C :                     	; 2 - Y base
(2)  740/FFFFFFFFFFFF2F6C :                     	; 4 - Tan
(2)  741/FFFFFFFFFFFF2F6C : 7600                		moveq	#0,d3
(2)  742/FFFFFFFFFFFF2F6E : 162E 001D           		move.b	obj_subid(a6),d3
(2)  743/FFFFFFFFFFFF2F72 : D643                		add.w	d3,d3
(2)  744/FFFFFFFFFFFF2F74 : D8C3                		adda	d3,a4
(2)  745/FFFFFFFFFFFF2F76 :                     ; 		lsl.w	#3,d3
(2)  746/FFFFFFFFFFFF2F76 : 3415                		move.w	(a5),d2
(2)  747/FFFFFFFFFFFF2F78 : 362D 0002           		move.w	2(a5),d3
(2)  748/FFFFFFFFFFFF2F7C : 383C 0002           		move.w	#2,d4			; Multiply
(2)  749/FFFFFFFFFFFF2F80 : 082C 0007 0001      		btst	#7,1(a4)
(2)  750/FFFFFFFFFFFF2F86 : 6704                		beq.s	.not_enbls
(2)  751/FFFFFFFFFFFF2F88 : 383C 0004           		move.w	#4,d4
(2)  752/FFFFFFFFFFFF2F8C :                     .not_enbls:
(2)  753/FFFFFFFFFFFF2F8C : 302D 0004           		move.w	4(a5),d0
(2)  754/FFFFFFFFFFFF2F90 : E848                		lsr.w	#4,d0
(2)  755/FFFFFFFFFFFF2F92 : 6100 EE3C           		bsr	System_SineWave
(2)  756/FFFFFFFFFFFF2F96 : C3C4                		muls.w	d4,d1
(2)  757/FFFFFFFFFFFF2F98 : E041                		asr.w	#8,d1
(2)  758/FFFFFFFFFFFF2F9A : 9441                		sub.w	d1,d2
(2)  759/FFFFFFFFFFFF2F9C : 302D 0004           		move.w	4(a5),d0
(2)  760/FFFFFFFFFFFF2FA0 : E848                		lsr.w	#4,d0
(2)  761/FFFFFFFFFFFF2FA2 : 082C 0000 0001      		btst	#0,1(a4)
(2)  762/FFFFFFFFFFFF2FA8 : 6702                		beq.s	.not_enbl2
(2)  763/FFFFFFFFFFFF2FAA : D040                		add.w	d0,d0
(2)  764/FFFFFFFFFFFF2FAC :                     .not_enbl2:
(2)  765/FFFFFFFFFFFF2FAC : 6100 EE18           		bsr	System_SineWave_Cos
(2)  766/FFFFFFFFFFFF2FB0 : C3C4                		muls.w	d4,d1
(2)  767/FFFFFFFFFFFF2FB2 : E041                		asr.w	#8,d1
(2)  768/FFFFFFFFFFFF2FB4 : 9641                		sub.w	d1,d3
(2)  769/FFFFFFFFFFFF2FB6 :                     
(2)  770/FFFFFFFFFFFF2FB6 : 383C 0040           		move.w	#$40,d4
(2)  771/FFFFFFFFFFFF2FBA : 082C 0007 0001      		btst	#7,1(a4)
(2)  772/FFFFFFFFFFFF2FC0 : 6704                		beq.s	.not_enbl
(2)  773/FFFFFFFFFFFF2FC2 : 383C 0090           		move.w	#$90,d4
(2)  774/FFFFFFFFFFFF2FC6 :                     .not_enbl:
(2)  775/FFFFFFFFFFFF2FC6 : D96D 0004           		addi.w	d4,4(a5)
(2)  776/FFFFFFFFFFFF2FCA : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  777/FFFFFFFFFFFF2FCE : 3D43 0008           		move.w	d3,obj_y(a6)
(2)  778/FFFFFFFFFFFF2FD2 :                     
(2)  779/FFFFFFFFFFFF2FD2 :                     .not_mouse:
(2)  780/FFFFFFFFFFFF2FD2 : 41FA 002E           		lea	.anim_data(pc),a0
(2)  781/FFFFFFFFFFFF2FD6 : 6100 F32C           		bsr	object_Animate
(2)  782/FFFFFFFFFFFF2FDA :                     
(2)  783/FFFFFFFFFFFF2FDA : 7000                		moveq	#0,d0
(2)  784/FFFFFFFFFFFF2FDC : 102E 001D           		move.b	obj_subid(a6),d0
(2)  785/FFFFFFFFFFFF2FE0 : E748                		lsl.w	#3,d0
(2)  786/FFFFFFFFFFFF2FE2 : 41FB 002E           		lea	.sub_ids(pc,d0.w),a0
(2)  787/FFFFFFFFFFFF2FE6 : 3428 0004           		move.w	4(a0),d2
(2)  788/FFFFFFFFFFFF2FEA : 2250                		move.l	(a0),a1
(2)  789/FFFFFFFFFFFF2FEC : 207C 0000 0000      		move.l	#0,a0
(2)  790/FFFFFFFFFFFF2FF2 : 302E 0004           		move.w	obj_x(a6),d0
(2)  791/FFFFFFFFFFFF2FF6 : 322E 0008           		move.w	obj_y(a6),d1
(2)  792/FFFFFFFFFFFF2FFA : 362E 0020           		move.w	obj_frame(a6),d3
(2)  793/FFFFFFFFFFFF2FFE : 6000 E3EE           		bra	Video_MakeSprMap
(2)  794/FFFFFFFFFFFF3002 :                     
(2)  795/FFFFFFFFFFFF3002 :                     ; ----------------------------------------------
(2)  796/FFFFFFFFFFFF3002 :                     
(2)  797/FFFFFFFFFFFF3002 :                     .anim_data:
(2)  798/FFFFFFFFFFFF3002 : 0002                		dc.w .anim_00-.anim_data
(2)  799/FFFFFFFFFFFF3004 :                     .anim_00:
(2)  800/FFFFFFFFFFFF3004 : 0008                		dc.w 8
(2)  801/FFFFFFFFFFFF3006 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF300C : 0001             
(2)  802/FFFFFFFFFFFF300E : FFFE                		dc.w -2
(2)  803/FFFFFFFFFFFF3010 :                     		align 2
(2)  804/FFFFFFFFFFFF3012 :                     .sub_ids:
(2)  805/FFFFFFFFFFFF3012 : 0023 55AA           		dc.l objMap_Dodo
(2)  806/FFFFFFFFFFFF3016 : 0002 0000           		dc.w setVram_Dodo,0
(2)  807/FFFFFFFFFFFF301A : 0023 55CE           		dc.l objMap_Mimi
(2)  808/FFFFFFFFFFFF301E : 0032 0000           		dc.w setVram_Mimi,0
(2)  809/FFFFFFFFFFFF3022 : 0023 55F2           		dc.l objMap_Fifi
(2)  810/FFFFFFFFFFFF3026 : 0062 0000           		dc.w setVram_Fifi,0
(2)  811/FFFFFFFFFFFF302A :                     		align 2
(2)  812/FFFFFFFFFFFF302C :                     
(2)  813/FFFFFFFFFFFF302C :                     .fixd_pos:
(2)  814/FFFFFFFFFFFF302C : 00B8 0050           		dc.w $B8,$50
(2)  815/FFFFFFFFFFFF3030 : 00DC 0050           		dc.w $B8+$24,$50
(2)  816/FFFFFFFFFFFF3034 : 0100 0050           		dc.w $B8+$48,$50
(2)  817/FFFFFFFFFFFF3038 :                     		align 2
(2)  818/FFFFFFFFFFFF303A :                     
(2)  819/FFFFFFFFFFFF303A :                     ; ====================================================================
(2)  820/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  821/FFFFFFFFFFFF303A :                     ; Subroutines
(2)  822/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  823/FFFFFFFFFFFF303A :                     
(2)  824/FFFFFFFFFFFF303A :                     ; ====================================================================
(2)  825/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  826/FFFFFFFFFFFF303A :                     ; Includes for this screen
(2)  827/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  828/FFFFFFFFFFFF303A :                     
(2)  829/FFFFFFFFFFFF303A :                     ; ====================================================================
(2)  830/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  831/FFFFFFFFFFFF303A :                     ; Custom VBlank
(2)  832/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  833/FFFFFFFFFFFF303A :                     
(2)  834/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  835/FFFFFFFFFFFF303A :                     ; Custom HBlank
(2)  836/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  837/FFFFFFFFFFFF303A :                     
(2)  838/FFFFFFFFFFFF303A :                     ; ====================================================================
(2)  839/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  840/FFFFFFFFFFFF303A :                     ; Small data section
(2)  841/FFFFFFFFFFFF303A :                     ; ------------------------------------------------------
(2)  842/FFFFFFFFFFFF303A :                     
(2)  843/FFFFFFFFFFFF303A :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  844/FFFFFFFFFFFF303A :                     exgema_beats:
(2)  845/FFFFFFFFFFFF303A : 00D6                	dc.w 214
(2)  846/FFFFFFFFFFFF303C : 00D6                	dc.w 214
(2)  847/FFFFFFFFFFFF303E : 00D6                	dc.w 214
(2)  848/FFFFFFFFFFFF3040 : 00C0                	dc.w 192
(2)  849/FFFFFFFFFFFF3042 : 00C0                	dc.w 192
(2)  850/FFFFFFFFFFFF3044 : 00D6                	dc.w 214
(2)  851/FFFFFFFFFFFF3046 : 00B8                	dc.w $00B8
(2)  852/FFFFFFFFFFFF3048 : 00C0                	dc.w 192
(2)  853/FFFFFFFFFFFF304A : 00C0                	dc.w 192
(2)  854/FFFFFFFFFFFF304C : 00D6                	dc.w 214
(2)  855/FFFFFFFFFFFF304E : 00D6                	dc.w 214
(2)  856/FFFFFFFFFFFF3050 : 00D6                	dc.w 214
(2)  857/FFFFFFFFFFFF3052 : 00D6                	dc.w 214
(2)  858/FFFFFFFFFFFF3054 : 00D6                	dc.w 214
(2)  859/FFFFFFFFFFFF3056 : 00D6                	dc.w 214
(2)  860/FFFFFFFFFFFF3058 : 00D6                	dc.w 214
(2)  861/FFFFFFFFFFFF305A : 00D6                	dc.w 214
(2)  862/FFFFFFFFFFFF305C : 00D6                	dc.w 214
(2)  863/FFFFFFFFFFFF305E : 00D6                	dc.w 214
(2)  864/FFFFFFFFFFFF3060 : 00D6                	dc.w 214
(2)  865/FFFFFFFFFFFF3062 : 00D6                	dc.w 214
(2)  866/FFFFFFFFFFFF3064 : 00D6                	dc.w 214
(2)  867/FFFFFFFFFFFF3066 : 00D6                	dc.w 214
(2)  868/FFFFFFFFFFFF3068 : 00D6                	dc.w 214
(2)  869/FFFFFFFFFFFF306A :                     
(2)  870/FFFFFFFFFFFF306A :                     ArtList_Stuff:
(2)  871/FFFFFFFFFFFF306A : 0003                		dc.w 3
(2)  872/FFFFFFFFFFFF306C : 0023 440A           		dc.l Art_FairyDodo
(2)  873/FFFFFFFFFFFF3070 : 0040                		dc.w cell_num(setVram_Dodo)
(2)  874/FFFFFFFFFFFF3072 : 0600                		dc.w cell_num($30)
(2)  875/FFFFFFFFFFFF3074 : 0023 4A0A           		dc.l Art_FairyMimi
(2)  876/FFFFFFFFFFFF3078 : 0640                		dc.w cell_num(setVram_Mimi)
(2)  877/FFFFFFFFFFFF307A : 0600                		dc.w cell_num($30)
(2)  878/FFFFFFFFFFFF307C : 0023 500A           		dc.l Art_FairyFifi
(2)  879/FFFFFFFFFFFF3080 : 0C40                		dc.w cell_num(setVram_Fifi)
(2)  880/FFFFFFFFFFFF3082 : 0600                		dc.w cell_num($30)
(2)  881/FFFFFFFFFFFF3084 :                     
(2)  882/FFFFFFFFFFFF3084 :                     str_TesterTitle:
(2)  883/FFFFFFFFFFFF3084 : 4745 4D41 2053      		dc.b "GEMA Sound Test",0
         FFFFFFFFFFFF308A : 6F75 6E64 2054 
         FFFFFFFFFFFF3090 : 6573 7400          
(2)  884/FFFFFFFFFFFF3094 :                     		align 2
(2)  885/FFFFFFFFFFFF3096 :                     str_TesterInfo:
(2)  886/FFFFFFFFFFFF3096 : 5365 7123 2042      		dc.b "Seq# Blk# Indx",$0A
         FFFFFFFFFFFF309C : 6C6B 2320 496E 
         FFFFFFFFFFFF30A2 : 6478 0A          
(2)  887/FFFFFFFFFFFF30A5 : 0A0A 0A0A           		dc.b $0A,$0A,$0A,$0A
(2)  888/FFFFFFFFFFFF30A9 : 4265 6174 733A 20   		dc.b "Beats: "
(2)  889/FFFFFFFFFFFF30B0 : 00                  		dc.b 0
(2)  890/FFFFFFFFFFFF30B1 :                     		align 2
(2)  891/FFFFFFFFFFFF30B2 :                     str_Instruc:
(2)  892/FFFFFFFFFFFF30B2 : 4C52 202D 2053      		dc.b "LR - Seq. Num#   XY - Track index",$0A
         FFFFFFFFFFFF30B8 : 6571 2E20 4E75 
         FFFFFFFFFFFF30BE : 6D23 2020 2058 
         FFFFFFFFFFFF30C4 : 5920 2D20 5472 
         FFFFFFFFFFFF30CA : 6163 6B20 696E 
         FFFFFFFFFFFF30D0 : 6465 780A          
(2)  893/FFFFFFFFFFFF30D4 : 5544 202D 2053      		dc.b "UD - Seq. Blk#",$0A
         FFFFFFFFFFFF30DA : 6571 2E20 426C 
         FFFFFFFFFFFF30E0 : 6B23 0A          
(2)  894/FFFFFFFFFFFF30E3 : 2041 202D 2053      		dc.b " A - STOP ALL",$0A
         FFFFFFFFFFFF30E9 : 544F 5020 414C 
         FFFFFFFFFFFF30EF : 4C0A             
(2)  895/FFFFFFFFFFFF30F1 : 2042 202D 2053      		dc.b " B - STOP Seq.",$0A
         FFFFFFFFFFFF30F7 : 544F 5020 5365 
         FFFFFFFFFFFF30FD : 712E 0A          
(2)  896/FFFFFFFFFFFF3100 : 2043 202D 2050      		dc.b " C - PLAY Seq.    Z - PLAY auto-fill"
         FFFFFFFFFFFF3106 : 4C41 5920 5365 
         FFFFFFFFFFFF310C : 712E 2020 2020 
         FFFFFFFFFFFF3112 : 5A20 2D20 504C 
         FFFFFFFFFFFF3118 : 4159 2061 7574 
         FFFFFFFFFFFF311E : 6F2D 6669 6C6C    
(2)  897/FFFFFFFFFFFF3124 : 00                  		dc.b 0
(2)  898/FFFFFFFFFFFF3125 :                     		align 2
(2)  899/FFFFFFFFFFFF3126 :                     
(2)  900/FFFFFFFFFFFF3126 :                     str_VmInfo:
(2)  901/FFFFFFFFFFFF3126 : 5053 470A           		dc.b "PSG",$0A
(2)  902/FFFFFFFFFFFF312A : 464D 0A             		dc.b "FM",$0A
(2)  903/FFFFFFFFFFFF312D : 5043 4D0A           		dc.b "PCM",$0A
(2)  904/FFFFFFFFFFFF3131 : 5057 4D             		dc.b "PWM"
(2)  905/FFFFFFFFFFFF3134 : 00                  		dc.b 0
(2)  906/FFFFFFFFFFFF3135 :                     		align 2
(2)  907/FFFFFFFFFFFF3136 :                     
(2)  908/FFFFFFFFFFFF3136 : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  909/FFFFFFFFFFFF313A : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
         FFFFFFFFFFFF3140 : 3000 442D 3000 
         FFFFFFFFFFFF3146 : 4423 3000 452D 
         FFFFFFFFFFFF314C : 3000 462D 3000 
         FFFFFFFFFFFF3152 : 4623 3000 472D 
         FFFFFFFFFFFF3158 : 3000 4723 3000 
         FFFFFFFFFFFF315E : 412D 3000 4123 
         FFFFFFFFFFFF3164 : 3000 422D 3000    
(2)  910/FFFFFFFFFFFF316A : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
         FFFFFFFFFFFF3170 : 3100 442D 3100 
         FFFFFFFFFFFF3176 : 4423 3100 452D 
         FFFFFFFFFFFF317C : 3100 462D 3100 
         FFFFFFFFFFFF3182 : 4623 3100 472D 
         FFFFFFFFFFFF3188 : 3100 4723 3100 
         FFFFFFFFFFFF318E : 412D 3100 4123 
         FFFFFFFFFFFF3194 : 3100 422D 3100    
(2)  911/FFFFFFFFFFFF319A : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
         FFFFFFFFFFFF31A0 : 3200 442D 3200 
         FFFFFFFFFFFF31A6 : 4423 3200 452D 
         FFFFFFFFFFFF31AC : 3200 462D 3200 
         FFFFFFFFFFFF31B2 : 4623 3200 472D 
         FFFFFFFFFFFF31B8 : 3200 4723 3200 
         FFFFFFFFFFFF31BE : 412D 3200 4123 
         FFFFFFFFFFFF31C4 : 3200 422D 3200    
(2)  912/FFFFFFFFFFFF31CA : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
         FFFFFFFFFFFF31D0 : 3300 442D 3300 
         FFFFFFFFFFFF31D6 : 4423 3300 452D 
         FFFFFFFFFFFF31DC : 3300 462D 3300 
         FFFFFFFFFFFF31E2 : 4623 3300 472D 
         FFFFFFFFFFFF31E8 : 3300 4723 3300 
         FFFFFFFFFFFF31EE : 412D 3300 4123 
         FFFFFFFFFFFF31F4 : 3300 422D 3300    
(2)  913/FFFFFFFFFFFF31FA : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
         FFFFFFFFFFFF3200 : 3400 442D 3400 
         FFFFFFFFFFFF3206 : 4423 3400 452D 
         FFFFFFFFFFFF320C : 3400 462D 3400 
         FFFFFFFFFFFF3212 : 4623 3400 472D 
         FFFFFFFFFFFF3218 : 3400 4723 3400 
         FFFFFFFFFFFF321E : 412D 3400 4123 
         FFFFFFFFFFFF3224 : 3400 422D 3400    
(2)  914/FFFFFFFFFFFF322A : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
         FFFFFFFFFFFF3230 : 3500 442D 3500 
         FFFFFFFFFFFF3236 : 4423 3500 452D 
         FFFFFFFFFFFF323C : 3500 462D 3500 
         FFFFFFFFFFFF3242 : 4623 3500 472D 
         FFFFFFFFFFFF3248 : 3500 4723 3500 
         FFFFFFFFFFFF324E : 412D 3500 4123 
         FFFFFFFFFFFF3254 : 3500 422D 3500    
(2)  915/FFFFFFFFFFFF325A : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
         FFFFFFFFFFFF3260 : 3600 442D 3600 
         FFFFFFFFFFFF3266 : 4423 3600 452D 
         FFFFFFFFFFFF326C : 3600 462D 3600 
         FFFFFFFFFFFF3272 : 4623 3600 472D 
         FFFFFFFFFFFF3278 : 3600 4723 3600 
         FFFFFFFFFFFF327E : 412D 3600 4123 
         FFFFFFFFFFFF3284 : 3600 422D 3600    
(2)  916/FFFFFFFFFFFF328A : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
         FFFFFFFFFFFF3290 : 3700 442D 3700 
         FFFFFFFFFFFF3296 : 4423 3700 452D 
         FFFFFFFFFFFF329C : 3700 462D 3700 
         FFFFFFFFFFFF32A2 : 4623 3700 472D 
         FFFFFFFFFFFF32A8 : 3700 4723 3700 
         FFFFFFFFFFFF32AE : 412D 3700 4123 
         FFFFFFFFFFFF32B4 : 3700 422D 3700    
(2)  917/FFFFFFFFFFFF32BA : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
         FFFFFFFFFFFF32C0 : 3800 442D 3800 
         FFFFFFFFFFFF32C6 : 4423 3800 452D 
         FFFFFFFFFFFF32CC : 3800 462D 3800 
         FFFFFFFFFFFF32D2 : 4623 3800 472D 
         FFFFFFFFFFFF32D8 : 3800 4723 3800 
         FFFFFFFFFFFF32DE : 412D 3800 4123 
         FFFFFFFFFFFF32E4 : 3800 422D 3800    
(2)  918/FFFFFFFFFFFF32EA : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
         FFFFFFFFFFFF32F0 : 3900 442D 3900 
         FFFFFFFFFFFF32F6 : 4423 3900 452D 
         FFFFFFFFFFFF32FC : 3900 462D 3900 
         FFFFFFFFFFFF3302 : 4623 3900 472D 
         FFFFFFFFFFFF3308 : 3900 4723 3900 
         FFFFFFFFFFFF330E : 412D 3900 4123 
         FFFFFFFFFFFF3314 : 3900 422D 3900    
(2)  919/FFFFFFFFFFFF331A : 3F2D 4100 3F2D      		dc.b "?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0
         FFFFFFFFFFFF3320 : 4100 3F2D 4100 
         FFFFFFFFFFFF3326 : 3F2D 4100 3F2D 
         FFFFFFFFFFFF332C : 4100 3F2D 4100 
         FFFFFFFFFFFF3332 : 3F2D 4100 3F2D 
         FFFFFFFFFFFF3338 : 4100 3F2D 4100 
         FFFFFFFFFFFF333E : 3F2D 4100 3F2D 
         FFFFFFFFFFFF3344 : 4100 3F2D 4100    
(2)  920/FFFFFFFFFFFF334A : 3F2D 4200 3F2D      		dc.b "?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0
         FFFFFFFFFFFF3350 : 4200 3F2D 4200 
         FFFFFFFFFFFF3356 : 3F2D 4200 3F2D 
         FFFFFFFFFFFF335C : 4200 3F2D 4200 
         FFFFFFFFFFFF3362 : 3F2D 4200 3F2D 
         FFFFFFFFFFFF3368 : 4200 3F2D 4200 
         FFFFFFFFFFFF336E : 3F2D 4200 3F2D 
         FFFFFFFFFFFF3374 : 4200 3F2D 4200    
(2)  921/FFFFFFFFFFFF337A : 3F2D 4300 3F2D      		dc.b "?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0
         FFFFFFFFFFFF3380 : 4300 3F2D 4300 
         FFFFFFFFFFFF3386 : 3F2D 4300 3F2D 
         FFFFFFFFFFFF338C : 4300 3F2D 4300 
         FFFFFFFFFFFF3392 : 3F2D 4300 3F2D 
         FFFFFFFFFFFF3398 : 4300 3F2D 4300 
         FFFFFFFFFFFF339E : 3F2D 4300 3F2D 
         FFFFFFFFFFFF33A4 : 4300 3F2D 4300    
(2)  922/FFFFFFFFFFFF33AA : 3F2D 4400 3F2D      		dc.b "?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0
         FFFFFFFFFFFF33B0 : 4400 3F2D 4400 
         FFFFFFFFFFFF33B6 : 3F2D 4400 3F2D 
         FFFFFFFFFFFF33BC : 4400 3F2D 4400 
         FFFFFFFFFFFF33C2 : 3F2D 4400 3F2D 
         FFFFFFFFFFFF33C8 : 4400 3F2D 4400 
         FFFFFFFFFFFF33CE : 3F2D 4400 3F2D 
         FFFFFFFFFFFF33D4 : 4400 3F2D 4400    
(2)  923/FFFFFFFFFFFF33DA : 3F2D 4500 3F2D      		dc.b "?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0
         FFFFFFFFFFFF33E0 : 4500 3F2D 4500 
         FFFFFFFFFFFF33E6 : 3F2D 4500 3F2D 
         FFFFFFFFFFFF33EC : 4500 3F2D 4500 
         FFFFFFFFFFFF33F2 : 3F2D 4500 3F2D 
         FFFFFFFFFFFF33F8 : 4500 3F2D 4500 
         FFFFFFFFFFFF33FE : 3F2D 4500 3F2D 
         FFFFFFFFFFFF3404 : 4500 3F2D 4500    
(2)  924/FFFFFFFFFFFF340A : 3F2D 4600 3F2D      		dc.b "?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0
         FFFFFFFFFFFF3410 : 4600 3F2D 4600 
         FFFFFFFFFFFF3416 : 3F2D 4600 3F2D 
         FFFFFFFFFFFF341C : 4600 3F2D 4600 
         FFFFFFFFFFFF3422 : 3F2D 4600 3F2D 
         FFFFFFFFFFFF3428 : 4600 3F2D 4600 
         FFFFFFFFFFFF342E : 3F2D 4600 3F2D 
         FFFFFFFFFFFF3434 : 4600 3F2D 4600    
(2)  925/FFFFFFFFFFFF343A : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  926/FFFFFFFFFFFF343E : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
         FFFFFFFFFFFF3444 : 2000 442D 2000 
         FFFFFFFFFFFF344A : 4423 2000 452D 
         FFFFFFFFFFFF3450 : 2000 462D 2000 
         FFFFFFFFFFFF3456 : 4623 2000 472D 
         FFFFFFFFFFFF345C : 2000 4723 2000 
         FFFFFFFFFFFF3462 : 412D 2000 4123 
         FFFFFFFFFFFF3468 : 2000 422D 2000    
(2)  927/FFFFFFFFFFFF346E : 3F2D 2000 3F2D      		dc.b "?- ",0,"?- ",0,"?- ",0
         FFFFFFFFFFFF3474 : 2000 3F2D 2000    
(2)  928/FFFFFFFFFFFF347A : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
         FFFFFFFFFFFF3480 : 3300 3400 3500 
         FFFFFFFFFFFF3486 : 3600 3700 3800 
         FFFFFFFFFFFF348C : 3900             
(2)  929/FFFFFFFFFFFF348E :                     
(2)  930/FFFFFFFFFFFF348E : 464D 3300           str_Speci:	dc.b "FM3",0
(2)  931/FFFFFFFFFFFF3492 : 4441 4300           str_Sampl:	dc.b "DAC",0
(2)  932/FFFFFFFFFFFF3496 :                     
(2)  933/FFFFFFFFFFFF3496 :                     str_ShowVars:
(2)  934/FFFFFFFFFFFF3496 : 80FF CA6F           		dc.l pstr_mem(0,RAM_GemaSeq+1)
(2)  935/FFFFFFFFFFFF349A : 2020 20             		dc.b "   "
(2)  936/FFFFFFFFFFFF349D : 80FF CA71           		dc.l pstr_mem(0,RAM_GemaBlk+1)
(2)  937/FFFFFFFFFFFF34A1 : 2020 20             		dc.b "   "
(2)  938/FFFFFFFFFFFF34A4 : 80FF CA6D           		dc.l pstr_mem(0,RAM_GemaIndx+1)
(2)  939/FFFFFFFFFFFF34A8 : 00                  		dc.b 0
(2)  940/FFFFFFFFFFFF34A9 :                     		align 2
(2)  941/FFFFFFFFFFFF34AA :                     str_ShowBeats:
(2)  942/FFFFFFFFFFFF34AA : 81FF CA7C           		dc.l pstr_mem(1,RAM_CurrBeats)
(2)  943/FFFFFFFFFFFF34AE : 00                  		dc.b 0
(2)  944/FFFFFFFFFFFF34AF :                     		align 2
(2)  945/FFFFFFFFFFFF34B0 :                     
(2)  946/FFFFFFFFFFFF34B0 :                     str_Info:
(2)  947/FFFFFFFFFFFF34B0 : 83FF EBFC           		dc.l pstr_mem(3,RAM_Framecount)
(2)  948/FFFFFFFFFFFF34B4 : 00                  		dc.b 0
(2)  949/FFFFFFFFFFFF34B5 :                     		align 2
(2)  950/FFFFFFFFFFFF34B6 :                     
(1)   19/FFFFFFFFFFFF34B6 :                     mcscrn_e:
(1)   19/    F8B6 :                                     dephase
(1)   19/    F8B6 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode) ; Add the used bytes
(1)   19/    F8B6 :                                     align $800
(1)   19/   10000 : =$10000              MD_SCREEN07_E label *
(1)   19/   10000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/   10000 :                     
     376/   10000 :                     
     377/   10000 :                     ; ====================================================================
     378/   10000 :                     ; ----------------------------------------------------------------
     379/   10000 :                     ; DATA
     380/   10000 :                     ; ----------------------------------------------------------------
     381/   10000 :                     
     382/   10000 :                     		include "game/incl_data.asm"
(1)    1/   10000 :                     ; ====================================================================
(1)    2/   10000 :                     ; ----------------------------------------------------------------
(1)    3/   10000 :                     ; DATA Section
(1)    4/   10000 :                     ; ----------------------------------------------------------------
(1)    5/   10000 :                     
(1)    6/   10000 :                     ; ------------------------------------------------------------
(1)    7/   10000 :                     ; Usage:
(1)    8/   10000 :                     ;	data_bank LABEL_START
(1)    9/   10000 :                     ;	include "game/data/your_bank.asm"
(1)   10/   10000 :                     ;	dend_bank LABEL_END
(1)   11/   10000 :                     ;
(1)   12/   10000 :                     ; CD/CD32X ONLY:
(1)   13/   10000 :                     ; Go to incl_list.asm add an entry in disc_banklist:
(1)   14/   10000 :                     ; 	dc.l DATA_BANK			; Label
(1)   15/   10000 :                     ; 	dc.b "BNK_EXMP.BIN"		; ISO filename
(1)   16/   10000 :                     ;
(1)   17/   10000 :                     ; And add the labels and ISO filename at iso_files.asm
(1)   18/   10000 :                     ;
(1)   19/   10000 :                     ; * This is ONLY required for CD/CD32X, if you forget to
(1)   20/   10000 :                     ; include it it will crash the entire system.
(1)   21/   10000 :                     ;
(1)   22/   10000 :                     ; During your screen code load banks with:
(1)   23/   10000 :                     ; 	move.l	#DATA_BANK,d0
(1)   24/   10000 :                     ; 	bsr	System_SetDataBank
(1)   25/   10000 :                     ;
(1)   26/   10000 :                     ; You MUST use the banks for compatibility to all systems
(1)   27/   10000 :                     ; even if the standard Genesis doesn't require it.
(1)   28/   10000 :                     ; DO note that on SCD and CD32X the DATA banks are stored
(1)   29/   10000 :                     ; on DISC so loading banks will be SLOW.
(1)   30/   10000 :                     ; ------------------------------------------------------------
(1)   31/   10000 :                     
(1)   32/   10000 : (MACRO)              	data_bank DATA_BANK0
(1)   32/   10000 :                                     align $800              ; Sector alignment
(1)   32/   10000 : =$10000              DATA_BANK0 label *                        ; Register label
(1)   32/  200000 :                                     phase sysmcd_wram
(1)   32/  200000 : =$200000             GLBL_MDATA_ST := *                      ; Save current pos globally
(1)   33/  200000 :                     	include "game/data/bank_main.asm"
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; ----------------------------------------------------------------
(2)    3/  200000 :                     ; BANK data
(2)    4/  200000 :                     ;
(2)    5/  200000 :                     ; Special macros:
(2)    6/  200000 :                     ;
(2)    7/  200000 :                     ; - VDP graphics:
(2)    8/  200000 :                     ;	binclude_dma   LABEL_START,"filename"		; For single label
(2)    9/  200000 :                     ;	binclude_dma_e LABEL_START,LABEL_END,"filename"	; Start and End labels
(2)   10/  200000 :                     ;
(2)   11/  200000 :                     ; - 32X SVDP graphics:
(2)   12/  200000 :                     ; GfxPack_Start:
(2)   13/  200000 :                     ; 	marsVramData
(2)   14/  200000 :                     ;
(2)   15/  200000 :                     ; example_0:
(2)   16/  200000 :                     ; 	include "your_svdp_graphics.bin"
(2)   17/  200000 :                     ; 	align 4						; ** Don't forget to align by 4 at the end **
(2)   18/  200000 :                     ; example_1:
(2)   19/  200000 :                     ; 	include "more_svdp.bin"
(2)   20/  200000 :                     ;	align 4
(2)   21/  200000 :                     ;
(2)   22/  200000 :                     ;	marsVramDEnd
(2)   23/  200000 :                     ; GfxPack_End:
(2)   24/  200000 :                     ; ----------------------------------------------------------------
(2)   25/  200000 :                     
(2)   26/  200000 :                     		include "sound/data.asm"		; GEMA sound data
(3)    1/  200000 :                     ; ===========================================================================
(3)    2/  200000 :                     ; -------------------------------------------------------------------
(3)    3/  200000 :                     ; Main sound data
(3)    4/  200000 :                     ; -------------------------------------------------------------------
(3)    5/  200000 :                     
(3)    6/  200000 :                     MainGemaSeqList:
(3)    7/  200000 : (MACRO)              	gemaTrk 1,3,gtrk_Test0
(3)    7/  200000 : 8320 0008                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(3)    8/  200004 : (MACRO)              	gemaTrk 1,3,gtrk_Test1	; $0F
(3)    8/  200004 : 8320 002C                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST1&$FFFFFF)
(3)    9/  200008 :                     
(3)   10/  200008 :                     ; ----------------------------------------------------
(3)   11/  200008 :                     gtrk_Test0:
(3)   12/  200008 : (MACRO)              	gemaHead .blk,.pat,.ins,10
(3)   12/  200008 : 000A                        dc.w 10
(3)   12/  20000A : 0020 0016                   dc.l .BLK
(3)   12/  20000E : 0020 0018                   dc.l .PAT
(3)   12/  200012 : 0020 0024                   dc.l .INS
(3)   13/  200016 :                     .blk:	binclude "sound/seq/test_blk.bin"
(3)   14/  200018 :                     .pat:	binclude "sound/seq/test_patt.bin"
(3)   15/  200024 :                     .ins:
(3)   16/  200024 : (MACRO)              	gInsDac 0,DacIns_TEST,1
(3)   16/  200024 : C100 20A7                   dc.b $C0|1,0,((DACINS_TEST>>16)&$FF),((DACINS_TEST>>8)&$FF)
(3)   16/  200028 : 9C00 0000                   dc.b DACINS_TEST&$FF,0,0,0
(3)   17/  20002C :                     ; 	gInsDac 0,DacIns_Snare_Rap,0
(3)   18/  20002C :                     
(3)   19/  20002C :                     ; ----------------------------------------------------
(3)   20/  20002C :                     gtrk_Test1:
(3)   21/  20002C : (MACRO)              	gemaHead .blk,.pat,.ins,10
(3)   21/  20002C : 000A                        dc.w 10
(3)   21/  20002E : 0020 003A                   dc.l .BLK
(3)   21/  200032 : 0020 0048                   dc.l .PAT
(3)   21/  200036 : 0020 4146                   dc.l .INS
(3)   22/  20003A :                     .blk:	binclude "sound/seq/axe_blk.bin"
(3)   23/  200048 :                     .pat:	binclude "sound/seq/axe_patt.bin"
(3)   24/  204146 :                     .ins:
(3)   25/  204146 : (MACRO)              	gInsFm 0,FmIns_Vibraphone_1
(3)   25/  204146 : A000 2045                   dc.b $A0,0,((FMINS_VIBRAPHONE_1>>16)&$FF),((FMINS_VIBRAPHONE_1>>8)&$FF)
(3)   25/  20414A : FE00 0000                   dc.b FMINS_VIBRAPHONE_1&$FF,$00,$00,$00
(3)   26/  20414E : (MACRO)              	gInsFm 0,FmIns_Organ_drawbar
(3)   26/  20414E : A000 2045                   dc.b $A0,0,((FMINS_ORGAN_DRAWBAR>>16)&$FF),((FMINS_ORGAN_DRAWBAR>>8)&$FF)
(3)   26/  204152 : 9E00 0000                   dc.b FMINS_ORGAN_DRAWBAR&$FF,$00,$00,$00
(3)   27/  204156 : (MACRO)              	gInsFm -12,FmIns_Bass_Groove_1
(3)   27/  204156 : A0F4 2043                   dc.b $A0,-12,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(3)   27/  20415A : 7E00 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(3)   28/  20415E : (MACRO)              	gInsFm +12,FmIns_bass_italo
(3)   28/  20415E : A00C 204B                   dc.b $A0,+12,((FMINS_BASS_ITALO>>16)&$FF),((FMINS_BASS_ITALO>>8)&$FF)
(3)   28/  204162 : DE00 0000                   dc.b FMINS_BASS_ITALO&$FF,$00,$00,$00
(3)   29/  204166 : (MACRO)              	gInsDac 0,DacIns_conga,0
(3)   29/  204166 : C000 2059                   dc.b $C0|0,0,((DACINS_CONGA>>16)&$FF),((DACINS_CONGA>>8)&$FF)
(3)   29/  20416A : 7A00 0000                   dc.b DACINS_CONGA&$FF,0,0,0
(3)   30/  20416E : (MACRO)              	gInsDac 0,DacIns_conga_low,0
(3)   30/  20416E : C000 2064                   dc.b $C0|0,0,((DACINS_CONGA_LOW>>16)&$FF),((DACINS_CONGA_LOW>>8)&$FF)
(3)   30/  204172 : 5400 0000                   dc.b DACINS_CONGA_LOW&$FF,0,0,0
(3)   31/  204176 : (MACRO)              	gInsDac -12,DacIns_clap,0
(3)   31/  204176 : C0F4 2050                   dc.b $C0|0,-12,((DACINS_CLAP>>16)&$FF),((DACINS_CLAP>>8)&$FF)
(3)   31/  20417A : 0000 0000                   dc.b DACINS_CLAP&$FF,0,0,0
(3)   32/  20417E : (MACRO)              	gInsFm 0,FmIns_Flaute_1
(3)   32/  20417E : A000 2045                   dc.b $A0,0,((FMINS_FLAUTE_1>>16)&$FF),((FMINS_FLAUTE_1>>8)&$FF)
(3)   32/  204182 : BE00 0000                   dc.b FMINS_FLAUTE_1&$FF,$00,$00,$00
(3)   33/  204186 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(3)   33/  204186 : A000 2046                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(3)   33/  20418A : DE00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(3)   34/  20418E : (MACRO)              	gInsDac +24+2,DacIns_Kick_Strong,0
(3)   34/  20418E : C01A 2073                   dc.b $C0|0,+24+2,((DACINS_KICK_STRONG>>16)&$FF),((DACINS_KICK_STRONG>>8)&$FF)
(3)   34/  204192 : 2E00 0000                   dc.b DACINS_KICK_STRONG&$FF,0,0,0
(3)   35/  204196 : (MACRO)              	gInsDac +12,DacIns_Snare,0
(3)   35/  204196 : C00C 208D                   dc.b $C0|0,+12,((DACINS_SNARE>>16)&$FF),((DACINS_SNARE>>8)&$FF)
(3)   35/  20419A : F800 0000                   dc.b DACINS_SNARE&$FF,0,0,0
(3)   36/  20419E : (MACRO)              	gInsNull
(3)   36/  20419E : 0000 0000                   dc.b $00,$00,$00,$00
(3)   36/  2041A2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   37/  2041A6 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$02,$00
(3)   37/  2041A6 : 8000 0000                   dc.b $80,0,$00,$00
(3)   37/  2041AA : 0000 0200                   dc.b $00,$00,$02,$00
(3)   38/  2041AE : (MACRO)              	gInsNull
(3)   38/  2041AE : 0000 0000                   dc.b $00,$00,$00,$00
(3)   38/  2041B2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   39/  2041B6 : (MACRO)              	gInsNull
(3)   39/  2041B6 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   39/  2041BA : 0000 0000                   dc.b $00,$00,$00,$00
(3)   40/  2041BE : (MACRO)              	gInsNull
(3)   40/  2041BE : 0000 0000                   dc.b $00,$00,$00,$00
(3)   40/  2041C2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   41/  2041C6 : (MACRO)              	gInsNull
(3)   41/  2041C6 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   41/  2041CA : 0000 0000                   dc.b $00,$00,$00,$00
(3)   42/  2041CE : (MACRO)              	gInsNull
(3)   42/  2041CE : 0000 0000                   dc.b $00,$00,$00,$00
(3)   42/  2041D2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   43/  2041D6 : (MACRO)              	gInsNull
(3)   43/  2041D6 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   43/  2041DA : 0000 0000                   dc.b $00,$00,$00,$00
(3)   44/  2041DE :                     
(3)   45/  2041DE :                     ; ===========================================================================
(3)   46/  2041DE :                     ; -------------------------------------------------------------------
(3)   47/  2041DE :                     ; GEMA/Nikona FM instruments
(3)   48/  2041DE :                     ; -------------------------------------------------------------------
(3)   49/  2041DE :                     
(3)   50/  2041DE :                     ; -----------------------------------------------------------
(3)   51/  2041DE :                     ; Normal FM Instruments
(3)   52/  2041DE :                     ; -----------------------------------------------------------
(3)   53/  2041DE :                     
(3)   54/  2041DE :                     FmIns_Bass_big_81:
(3)   55/  2041DE :                     		binclude "sound/ins/fm/bin/bass_big_82.bin"
(3)   56/  2041FE :                     FmIns_Bass_big_110:
(3)   57/  2041FE :                     		binclude "sound/ins/fm/bin/bass_big_110.bin"
(3)   58/  20421E :                     FmIns_Bass_big_114:
(3)   59/  20421E :                     		binclude "sound/ins/fm/bin/bass_big_114.bin"
(3)   60/  20423E :                     FmIns_Bass_big_122:
(3)   61/  20423E :                     		binclude "sound/ins/fm/bin/bass_big_122.bin"
(3)   62/  20425E :                     FmIns_Bass_cave_47:
(3)   63/  20425E :                     		binclude "sound/ins/fm/bin/bass_cave_47.bin"
(3)   64/  20427E :                     FmIns_Bass_club_108:
(3)   65/  20427E :                     		binclude "sound/ins/fm/bin/bass_club_108.bin"
(3)   66/  20429E :                     FmIns_Bass_foot_75:
(3)   67/  20429E :                     		binclude "sound/ins/fm/bin/bass_foot_75.bin"
(3)   68/  2042BE :                     FmIns_Bass_gem_26:
(3)   69/  2042BE :                     		binclude "sound/ins/fm/bin/bass_gem_26.bin"
(3)   70/  2042DE :                     FmIns_Bass_groove_119:
(3)   71/  2042DE :                     		binclude "sound/ins/fm/bin/bass_groove_119.bin"
(3)   72/  2042FE :                     FmIns_Bass_heavy_107:
(3)   73/  2042FE :                     		binclude "sound/ins/fm/bin/bass_heavy_107.bin"
(3)   74/  20431E :                     FmIns_Bass_heavy_118:
(3)   75/  20431E :                     		binclude "sound/ins/fm/bin/bass_heavy_118.bin"
(3)   76/  20433E :                     FmIns_Bass_loud_117:
(3)   77/  20433E :                     		binclude "sound/ins/fm/bin/bass_loud_117.bin"
(3)   78/  20435E :                     FmIns_bass_low_46:
(3)   79/  20435E :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(3)   80/  20437E :                     FmIns_Bass_Groove_1:
(3)   81/  20437E :                     		binclude "sound/ins/fm/bin/bass_groove_1.bin"
(3)   82/  20439E :                     FmIns_bass_low_81:
(3)   83/  20439E :                     		binclude "sound/ins/fm/bin/bass_low_81.bin"
(3)   84/  2043BE :                     FmIns_bass_low_103:
(3)   85/  2043BE :                     		binclude "sound/ins/fm/bin/bass_low_103.bin"
(3)   86/  2043DE :                     FmIns_bass_low_106:
(3)   87/  2043DE :                     		binclude "sound/ins/fm/bin/bass_low_106.bin"
(3)   88/  2043FE :                     FmIns_bass_low_126:
(3)   89/  2043FE :                     		binclude "sound/ins/fm/bin/bass_low_126.bin"
(3)   90/  20441E :                     FmIns_bass_mid_19:
(3)   91/  20441E :                     		binclude "sound/ins/fm/bin/bass_mid_19.bin"
(3)   92/  20443E :                     FmIns_bass_mid_80:
(3)   93/  20443E :                     		binclude "sound/ins/fm/bin/bass_mid_80.bin"
(3)   94/  20445E :                     FmIns_bass_mid_111:
(3)   95/  20445E :                     		binclude "sound/ins/fm/bin/bass_mid_111.bin"
(3)   96/  20447E :                     FmIns_bass_power_123:
(3)   97/  20447E :                     		binclude "sound/ins/fm/bin/bass_power_123.bin"
(3)   98/  20449E :                     FmIns_bass_silent_53:
(3)   99/  20449E :                     		binclude "sound/ins/fm/bin/bass_silent_53.bin"
(3)  100/  2044BE :                     FmIns_bass_slap_10:
(3)  101/  2044BE :                     		binclude "sound/ins/fm/bin/bass_slap_10.bin"
(3)  102/  2044DE :                     FmIns_bass_slap_105:
(3)  103/  2044DE :                     		binclude "sound/ins/fm/bin/bass_slap_105.bin"
(3)  104/  2044FE :                     FmIns_bass_synth_60:
(3)  105/  2044FE :                     		binclude "sound/ins/fm/bin/bass_synth_60.bin"
(3)  106/  20451E :                     FmIns_bass_synth_61:
(3)  107/  20451E :                     		binclude "sound/ins/fm/bin/bass_synth_61.bin"
(3)  108/  20453E :                     FmIns_bass_synth_72:
(3)  109/  20453E :                     		binclude "sound/ins/fm/bin/bass_synth_72.bin"
(3)  110/  20455E :                     FmIns_bass_synth_73:
(3)  111/  20455E :                     		binclude "sound/ins/fm/bin/bass_synth_73.bin"
(3)  112/  20457E :                     FmIns_bass_vlow_74:
(3)  113/  20457E :                     		binclude "sound/ins/fm/bin/bass_vlow_74.bin"
(3)  114/  20459E :                     FmIns_Organ_drawbar:
(3)  115/  20459E :                     		binclude "sound/ins/fm/bin/organ_drawbar.bin"
(3)  116/  2045BE :                     FmIns_Flaute_1:
(3)  117/  2045BE :                     		binclude "sound/ins/fm/bin/flaute_1.bin"
(3)  118/  2045DE :                     FmIns_Flaute_2:
(3)  119/  2045DE :                     		binclude "sound/ins/fm/bin/flaute_2.bin"
(3)  120/  2045FE :                     FmIns_Vibraphone_1:
(3)  121/  2045FE :                     		binclude "sound/ins/fm/bin/vibraphone_1.bin"
(3)  122/  20461E :                     FmIns_Vibraphone_2:
(3)  123/  20461E :                     		binclude "sound/ins/fm/bin/vibraphone_2.bin"
(3)  124/  20463E :                     FmIns_Xylophone:
(3)  125/  20463E :                     		binclude "sound/ins/fm/bin/xylophone2_43.bin"
(3)  126/  20465E :                     FmIns_Bass_low81:
(3)  127/  20465E :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(3)  128/  20467E :                     FmIns_Trumpet_low:
(3)  129/  20467E :                     		binclude "sound/ins/fm/bin/trumpet_low.bin"
(3)  130/  20469E :                     FmIns_Trumpet_genie:
(3)  131/  20469E :                     		binclude "sound/ins/fm/bin/trumpet_genie.bin"
(3)  132/  2046BE :                     FmIns_Trumpet_bus:
(3)  133/  2046BE :                     		binclude "sound/ins/fm/bin/trumpet_bus.bin"
(3)  134/  2046DE :                     FmIns_Hats_1:
(3)  135/  2046DE :                     		binclude "sound/ins/fm/bin/hats_96.bin"
(3)  136/  2046FE :                     FmIns_Bell_mid36:
(3)  137/  2046FE :                     		binclude "sound/ins/fm/bin/bell_mid_36.bin"
(3)  138/  20471E :                     FmIns_Bell_62:
(3)  139/  20471E :                     		binclude "sound/ins/fm/bin/bell_62.bin"
(3)  140/  20473E :                     FmIns_Bell_93:
(3)  141/  20473E :                     		binclude "sound/ins/fm/bin/bell_93.bin"
(3)  142/  20475E :                     FmIns_Bell_low13:
(3)  143/  20475E :                     		binclude "sound/ins/fm/bin/bell_low_13.bin"
(3)  144/  20477E :                     
(3)  145/  20477E :                     FmIns_Drum_Kick:
(3)  146/  20477E :                     		binclude "sound/ins/fm/bin/kick_low.bin"
(3)  147/  20479E :                     FmIns_Tick:
(3)  148/  20479E :                     		binclude "sound/ins/fm/bin/tick_44.bin"
(3)  149/  2047BE :                     
(3)  150/  2047BE :                     ; -----------------------------------------------------------
(3)  151/  2047BE :                     ; Special FM3 Instruments
(3)  152/  2047BE :                     ; -----------------------------------------------------------
(3)  153/  2047BE :                     
(3)  154/  2047BE :                     FmSpIns_clack_1:
(3)  155/  2047BE :                     		binclude "sound/ins/fm/bin/fm3_clack_1.bin"
(3)  156/  2047E6 :                     FmSpIns_cowbell_h:
(3)  157/  2047E6 :                     		binclude "sound/ins/fm/bin/fm3_cowbell_h.bin"
(3)  158/  20480E :                     FmSpIns_cowbell_l:
(3)  159/  20480E :                     		binclude "sound/ins/fm/bin/fm3_cowbell_l.bin"
(3)  160/  204836 :                     FmSpIns_hats_hq:
(3)  161/  204836 :                     		binclude "sound/ins/fm/bin/fm3_hats_hq.bin"
(3)  162/  20485E :                     FmSpIns_sfx_alien:
(3)  163/  20485E :                     		binclude "sound/ins/fm/bin/fm3_sfx_alien.bin"
(3)  164/  204886 :                     FmSpIns_sfx_knckbuzz:
(3)  165/  204886 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knckbuzz.bin"
(3)  166/  2048AE :                     FmSpIns_sfx_knock_h:
(3)  167/  2048AE :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_h.bin"
(3)  168/  2048D6 :                     FmSpIns_sfx_knock_l:
(3)  169/  2048D6 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_l.bin"
(3)  170/  2048FE :                     FmSpIns_sfx_laser:
(3)  171/  2048FE :                     		binclude "sound/ins/fm/bin/fm3_sfx_laser.bin"
(3)  172/  204926 :                     
(3)  173/  204926 :                     ; -----------------------------------------------------------
(3)  174/  204926 :                     ; FM sound effects
(3)  175/  204926 :                     ; -----------------------------------------------------------
(3)  176/  204926 :                     
(3)  177/  204926 :                     FmIns_sfx_punch:
(3)  178/  204926 :                     		binclude "sound/ins/fm/bin/sfx_punch.bin"
(3)  179/  204946 :                     FmIns_sfx_explode:
(3)  180/  204946 :                     		binclude "sound/ins/fm/bin/sfx_explode.bin"
(3)  181/  204966 :                     FmIns_sfx_slash:
(3)  182/  204966 :                     		binclude "sound/ins/fm/bin/sfx_slash.bin"
(3)  183/  204986 :                     FmIns_sfx_alien1:
(3)  184/  204986 :                     		binclude "sound/ins/fm/bin/sfx_alien_83.bin"
(3)  185/  2049A6 :                     FmIns_sfx_alien2:
(3)  186/  2049A6 :                     		binclude "sound/ins/fm/bin/sfx_alien_84.bin"
(3)  187/  2049C6 :                     
(3)  188/  2049C6 :                     ; ====================================================================
(3)  189/  2049C6 :                     
(3)  190/  2049C6 :                     ; FM3 Special
(3)  191/  2049C6 :                     FmIns_Sp_OpenHat:
(3)  192/  2049C6 :                     		binclude "sound/ins/fm/gsx/fm3_openhat.gsx",$2478,$28
(3)  193/  2049EE :                     FmIns_Sp_ClosedHat:
(3)  194/  2049EE :                     		binclude "sound/ins/fm/gsx/fm3_closedhat.gsx",$2478,$28
(3)  195/  204A16 :                     FmIns_Sp_Cowbell:
(3)  196/  204A16 :                     		binclude "sound/ins/fm/gsx/fm3_cowbell.gsx",$2478,$28
(3)  197/  204A3E :                     FmIns_Drums_Kick1:
(3)  198/  204A3E :                     		binclude "sound/ins/fm/gsx/drum_kick_gem.gsx",$2478,$20
(3)  199/  204A5E :                     FmIns_Piano_Aqua:
(3)  200/  204A5E :                     		binclude "sound/ins/fm/gsx/piano_aqua.gsx",$2478,$20
(3)  201/  204A7E :                     FmIns_HBeat_tom:
(3)  202/  204A7E :                     		binclude "sound/ins/fm/gsx/nadia_tom.gsx",$2478,$20
(3)  203/  204A9E :                     FmIns_Trumpet_1:
(3)  204/  204A9E :                     		binclude "sound/ins/fm/gsx/trumpet_1.gsx",$2478,$20
(3)  205/  204ABE :                     FmIns_Bass_duck:
(3)  206/  204ABE :                     		binclude "sound/ins/fm/gsx/bass_duck.gsx",$2478,$20
(3)  207/  204ADE :                     FmIns_ClosedHat:
(3)  208/  204ADE :                     		binclude "sound/ins/fm/gsx/hats_closed.gsx",$2478,$20
(3)  209/  204AFE :                     FmIns_Trumpet_carnival:
(3)  210/  204AFE :                     		binclude "sound/ins/fm/gsx/OLD_trumpet_carnivl.gsx",$2478,$20
(3)  211/  204B1E :                     FmIns_Bass_club:
(3)  212/  204B1E :                     		binclude "sound/ins/fm/gsx/OLD_bass_club.gsx",$2478,$20
(3)  213/  204B3E :                     FmIns_Bass_groove_2:
(3)  214/  204B3E :                     		binclude "sound/ins/fm/gsx/bass_groove_2.gsx",$2478,$20
(3)  215/  204B5E :                     FmIns_PSynth_plus:
(3)  216/  204B5E :                     		binclude "sound/ins/fm/gsx/psynth_plus.gsx",$2478,$20
(3)  217/  204B7E :                     FmIns_Brass_7:
(3)  218/  204B7E :                     		binclude "sound/ins/fm/gsx/brass_7.gsx",$2478,$20
(3)  219/  204B9E :                     
(3)  220/  204B9E :                     FmIns_sfx_punch_2:
(3)  221/  204B9E :                     		binclude "sound/ins/fm/gsx/fmsfx_punch.gsx",$2478,$20
(3)  222/  204BBE :                     FmIns_sfx_smash:
(3)  223/  204BBE :                     		binclude "sound/ins/fm/gsx/fmsfx_smash.gsx",$2478,$20
(3)  224/  204BDE :                     
(3)  225/  204BDE :                     FmIns_bass_italo:
(3)  226/  204BDE :                     		binclude "sound/ins/fm/gsx/bass_italo.gsx",$2478,$20
(3)  227/  204BFE :                     FmIns_Guitar_bball:
(3)  228/  204BFE :                     		binclude "sound/ins/fm/gsx/guitar_bball.gsx",$2478,$20
(3)  229/  204C1E :                     
(3)  230/  204C1E :                     ; ===========================================================================
(3)  231/  204C1E :                     ; -------------------------------------------------------------------
(3)  232/  204C1E :                     ; GEMA/Nikona DAC samples
(3)  233/  204C1E :                     ;
(3)  234/  204C1E :                     ; 16000hz base
(3)  235/  204C1E :                     ; -------------------------------------------------------------------
(3)  236/  204C1E :                     
(3)  237/  204C1E :                     		align $800
(3)  238/  205000 :                     		;gSmplData Label,"file_path",loop_start
(3)  239/  205000 : (MACRO)              		gSmplData DacIns_clap,"sound/ins/smpl/clap.wav",0
(3)  239/  205000 : =$205000             DACINS_CLAP    label *
(3)  239/  205000 : 7409 00                     dc.b ((DACINS_CLAP_e-DACINS_CLAP_s)&$FF),(((DACINS_CLAP_e-DACINS_CLAP_s)>>8)&$FF),(((DACINS_CLAP_e-DACINS_CLAP_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  239/  205003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  239/  205006 :                     DACINS_CLAP_s:
(3)  239/  205006 :                             binclude "sound/ins/smpl/clap.wav",$2C       ; dc.b (data)
(3)  239/  20597A :                     DACINS_CLAP_e:
(3)  240/  20597A : (MACRO)              		gSmplData DacIns_conga,"sound/ins/smpl/conga.wav",0
(3)  240/  20597A : =$20597A             DACINS_CONGA    label *
(3)  240/  20597A : D40A 00                     dc.b ((DACINS_CONGA_e-DACINS_CONGA_s)&$FF),(((DACINS_CONGA_e-DACINS_CONGA_s)>>8)&$FF),(((DACINS_CONGA_e-DACINS_CONGA_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  240/  20597D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  240/  205980 :                     DACINS_CONGA_s:
(3)  240/  205980 :                             binclude "sound/ins/smpl/conga.wav",$2C       ; dc.b (data)
(3)  240/  206454 :                     DACINS_CONGA_e:
(3)  241/  206454 : (MACRO)              		gSmplData DacIns_conga_low,"sound/ins/smpl/conga_low.wav",0
(3)  241/  206454 : =$206454             DACINS_CONGA_LOW    label *
(3)  241/  206454 : D40E 00                     dc.b ((DACINS_CONGA_LOW_e-DACINS_CONGA_LOW_s)&$FF),(((DACINS_CONGA_LOW_e-DACINS_CONGA_LOW_s)>>8)&$FF),(((DACINS_CONGA_LOW_e-DACINS_CONGA_LOW_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  241/  206457 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  241/  20645A :                     DACINS_CONGA_LOW_s:
(3)  241/  20645A :                             binclude "sound/ins/smpl/conga_low.wav",$2C       ; dc.b (data)
(3)  241/  20732E :                     DACINS_CONGA_LOW_e:
(3)  242/  20732E : (MACRO)              		gSmplData DacIns_Kick_Strong,"sound/ins/smpl/kick_strong.wav",0
(3)  242/  20732E : =$20732E             DACINS_KICK_STRONG    label *
(3)  242/  20732E : C41A 00                     dc.b ((DACINS_KICK_STRONG_e-DACINS_KICK_STRONG_s)&$FF),(((DACINS_KICK_STRONG_e-DACINS_KICK_STRONG_s)>>8)&$FF),(((DACINS_KICK_STRONG_e-DACINS_KICK_STRONG_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  242/  207331 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  242/  207334 :                     DACINS_KICK_STRONG_s:
(3)  242/  207334 :                             binclude "sound/ins/smpl/kick_strong.wav",$2C       ; dc.b (data)
(3)  242/  208DF8 :                     DACINS_KICK_STRONG_e:
(3)  243/  208DF8 : (MACRO)              		gSmplData DacIns_Snare,"sound/ins/smpl/snare.wav",0
(3)  243/  208DF8 : =$208DF8             DACINS_SNARE    label *
(3)  243/  208DF8 : F40E 00                     dc.b ((DACINS_SNARE_e-DACINS_SNARE_s)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>8)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  243/  208DFB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  243/  208DFE :                     DACINS_SNARE_s:
(3)  243/  208DFE :                             binclude "sound/ins/smpl/snare.wav",$2C       ; dc.b (data)
(3)  243/  209CF2 :                     DACINS_SNARE_e:
(3)  244/  209CF2 : (MACRO)              		gSmplData DacIns_Snare_Rap,"sound/ins/smpl/snare_rap.wav",0
(3)  244/  209CF2 : =$209CF2             DACINS_SNARE_RAP    label *
(3)  244/  209CF2 : A40A 00                     dc.b ((DACINS_SNARE_RAP_e-DACINS_SNARE_RAP_s)&$FF),(((DACINS_SNARE_RAP_e-DACINS_SNARE_RAP_s)>>8)&$FF),(((DACINS_SNARE_RAP_e-DACINS_SNARE_RAP_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  244/  209CF5 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  244/  209CF8 :                     DACINS_SNARE_RAP_s:
(3)  244/  209CF8 :                             binclude "sound/ins/smpl/snare_rap.wav",$2C       ; dc.b (data)
(3)  244/  20A79C :                     DACINS_SNARE_RAP_e:
(3)  245/  20A79C : (MACRO)              		gSmplData DacIns_TEST,"sound/ins/smpl/test.wav",0
(3)  245/  20A79C : =$20A79C             DACINS_TEST    label *
(3)  245/  20A79C : 6878 02                     dc.b ((DACINS_TEST_e-DACINS_TEST_s)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>8)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  245/  20A79F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  245/  20A7A2 :                     DACINS_TEST_s:
(3)  245/  20A7A2 :                             binclude "sound/ins/smpl/test.wav",$2C       ; dc.b (data)
(3)  245/  23200A :                     DACINS_TEST_e:
(3)  246/  23200A :                     
(3)  247/  23200A :                     ; 		gSmplData DacIns_Kick_2,"sound/ins/smpl/kick_2.wav",0
(3)  248/  23200A :                     ; 		gSmplData DacIns_Snare_2,"sound/ins/smpl/snare_2.wav",0
(3)  249/  23200A :                     ; 		gSmplData DacIns_Timpani,"sound/ins/smpl/timpani.wav",0
(3)  250/  23200A :                     ; 		gSmplData DacIns_wegot_kick,"sound/ins/smpl/wegot_kick.wav",0
(3)  251/  23200A :                     ; 		gSmplData DacIns_wegot_crash,"sound/ins/smpl/wegot_crash.wav",0
(3)  252/  23200A :                     
(2)   27/  23200A : (MACRO)              		binclude_dma ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)   27/  23200A :                             ; 32X: Temporally show ROM position
(2)   27/  23200A :                     
(2)   27/  23200A :                                     align 2
(2)   27/  23200A : =$23200A             ASCII_FONT        label *
(2)   27/  23200A :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)   27/  232C0A :                                     align 2
(2)   27/  232C0A :                             ; 32X: Return to last phase
(2)   28/  232C0A : (MACRO)              		binclude_dma ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)   28/  232C0A :                             ; 32X: Temporally show ROM position
(2)   28/  232C0A :                     
(2)   28/  232C0A :                                     align 2
(2)   28/  232C0A : =$232C0A             ASCII_FONT_W        label *
(2)   28/  232C0A :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)   28/  23440A :                                     align 2
(2)   28/  23440A :                             ; 32X: Return to last phase
(2)   29/  23440A : (MACRO)              		binclude_dma Art_FairyDodo,"game/data/md/sprites/dodo/art.bin"
(2)   29/  23440A :                             ; 32X: Temporally show ROM position
(2)   29/  23440A :                     
(2)   29/  23440A :                                     align 2
(2)   29/  23440A : =$23440A             ART_FAIRYDODO        label *
(2)   29/  23440A :                                     binclude "game/data/md/sprites/dodo/art.bin"
(2)   29/  234A0A :                                     align 2
(2)   29/  234A0A :                             ; 32X: Return to last phase
(2)   30/  234A0A : (MACRO)              		binclude_dma Art_FairyMimi,"game/data/md/sprites/mimi/art.bin"
(2)   30/  234A0A :                             ; 32X: Temporally show ROM position
(2)   30/  234A0A :                     
(2)   30/  234A0A :                                     align 2
(2)   30/  234A0A : =$234A0A             ART_FAIRYMIMI        label *
(2)   30/  234A0A :                                     binclude "game/data/md/sprites/mimi/art.bin"
(2)   30/  23500A :                                     align 2
(2)   30/  23500A :                             ; 32X: Return to last phase
(2)   31/  23500A : (MACRO)              		binclude_dma Art_FairyFifi,"game/data/md/sprites/fifi/art.bin"
(2)   31/  23500A :                             ; 32X: Temporally show ROM position
(2)   31/  23500A :                     
(2)   31/  23500A :                                     align 2
(2)   31/  23500A : =$23500A             ART_FAIRYFIFI        label *
(2)   31/  23500A :                                     binclude "game/data/md/sprites/fifi/art.bin"
(2)   31/  23558A :                                     align 2
(2)   31/  23558A :                             ; 32X: Return to last phase
(2)   32/  23558A :                     ; 		binclude_dma ART_TESTBG,"game/data/md/maps/test/art.bin"
(2)   33/  23558A :                     ; PAL_TESTBG:	binclude "game/data/md/maps/test/pal.bin"
(2)   34/  23558A :                     ; 		align 2
(2)   35/  23558A :                     ; MAP_TESTBG:	binclude "game/data/md/maps/test/map.bin"
(2)   36/  23558A :                     ; 		align 2
(2)   37/  23558A :                     objPal_Dodo:	binclude "game/data/md/sprites/dodo/pal.bin"
(2)   38/  2355AA :                     		align 2
(2)   39/  2355AA :                     objMap_Dodo:	binclude "game/data/md/sprites/dodo/map.bin"
(2)   40/  2355CE :                     		align 2
(2)   41/  2355CE :                     objMap_Mimi:	binclude "game/data/md/sprites/mimi/map.bin"
(2)   42/  2355F2 :                     		align 2
(2)   43/  2355F2 :                     objMap_Fifi:	binclude "game/data/md/sprites/fifi/map.bin"
(2)   44/  23562E :                     		align 2
(2)   45/  23562E :                     
(2)   46/  23562E :                     ; ----------------------------------------------------------------
(2)   47/  23562E :                     
(2)   48/  23562E :                     MPal_Test:
(2)   49/  23562E :                     	binclude "game/data/mars/objects/test/mtrl/002_pal.bin"
(2)   50/  23582E :                     	align 2
(2)   51/  23582E :                     
(2)   52/  23582E :                     MVram_test:
(2)   53/  23582E : (MACRO)              	marsVramData
(2)   53/       0 :                                     phase 0
(2)   54/       0 :                     Textr_test:
(2)   55/       0 :                     	binclude "game/data/mars/objects/test/mtrl/002_art.bin"
(2)   56/    8DC2 :                     	align 8
(2)   57/    8DC8 : (MACRO)              	marsVramDEnd
(2)   57/    8DC8 :                                     align 8
(2)   57/    8DC8 :                     .end:
(2)   57/    8DC8 :  (MACRO-2)                           erreport "This 32X graphics data",.end,$18000
(2)   57/  23E5F6 :                                     dephase
(2)   58/  23E5F6 :                     MVram_test_e:
(2)   59/  23E5F6 :                     
(2)   60/  23E5F6 :                     ; ----------------------------------------------------------------
(2)   61/  23E5F6 :                     
(1)   34/  23E5F6 : (MACRO)              	dend_bank DATA_BANK0_e
(1)   34/  23E5F6 : =$3E5F6              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; Get used size to report
(1)   34/  23E5F6 :                     
(1)   34/  23E5F6 :                             ; Set 32X bank end
(1)   34/   4E5F6 :                                     dephase                 ; Dephase WRAM
(1)   34/   4E5F6 : =$4E5F6              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   34/   4E5F6 : =$4E800              mpadlbl := (mlastpos&$FFF800)+$800      ; Fill sectors
(1)   34/   4E5F6 :  (MACRO-2)                           rompad mpadlbl
(1)   34/   4E5F6 : =$20A                .this_sz := MPADLBL - *
(1)   34/   4E5F6 : 0000 0000 0000                              dc.b [.this_sz]0
            4E5FC : 0000 0000 0000 
            4E602 : 0000 0000 0000 
            4E608 : 0000 0000 0000 
            4E60E : 0000 0000 0000 
            4E614 : 0000 0000 0000 
            4E61A : 0000 0000 0000 
            4E620 : 0000 0000 0000 
            4E626 : 0000 0000 0000 
            4E62C : 0000 0000 0000 
            4E632 : 0000 0000 0000 
            4E638 : 0000 0000 0000 
            4E63E : 0000 0000 0000 
            4E644 : 0000 0000 0000 
            4E64A : 0000 0000 0000 
            4E650 : 0000 0000 0000 
            4E656 : 0000 0000 0000 
            4E65C : 0000 0000 0000 
            4E662 : 0000 0000 0000 
            4E668 : 0000 0000 0000 
            4E66E : 0000 0000 0000 
            4E674 : 0000 0000 0000 
            4E67A : 0000 0000 0000 
            4E680 : 0000 0000 0000 
            4E686 : 0000 0000 0000 
            4E68C : 0000 0000 0000 
            4E692 : 0000 0000 0000 
            4E698 : 0000 0000 0000 
            4E69E : 0000 0000 0000 
            4E6A4 : 0000 0000 0000 
            4E6AA : 0000 0000 0000 
            4E6B0 : 0000 0000 0000 
            4E6B6 : 0000 0000 0000 
            4E6BC : 0000 0000 0000 
            4E6C2 : 0000 0000 0000 
            4E6C8 : 0000 0000 0000 
            4E6CE : 0000 0000 0000 
            4E6D4 : 0000 0000 0000 
            4E6DA : 0000 0000 0000 
            4E6E0 : 0000 0000 0000 
            4E6E6 : 0000 0000 0000 
            4E6EC : 0000 0000 0000 
            4E6F2 : 0000 0000 0000 
            4E6F8 : 0000 0000 0000 
            4E6FE : 0000 0000 0000 
            4E704 : 0000 0000 0000 
            4E70A : 0000 0000 0000 
            4E710 : 0000 0000 0000 
            4E716 : 0000 0000 0000 
            4E71C : 0000 0000 0000 
            4E722 : 0000 0000 0000 
            4E728 : 0000 0000 0000 
            4E72E : 0000 0000 0000 
            4E734 : 0000 0000 0000 
            4E73A : 0000 0000 0000 
            4E740 : 0000 0000 0000 
            4E746 : 0000 0000 0000 
            4E74C : 0000 0000 0000 
            4E752 : 0000 0000 0000 
            4E758 : 0000 0000 0000 
            4E75E : 0000 0000 0000 
            4E764 : 0000 0000 0000 
            4E76A : 0000 0000 0000 
            4E770 : 0000 0000 0000 
            4E776 : 0000 0000 0000 
            4E77C : 0000 0000 0000 
            4E782 : 0000 0000 0000 
            4E788 : 0000 0000 0000 
            4E78E : 0000 0000 0000 
            4E794 : 0000 0000 0000 
            4E79A : 0000 0000 0000 
            4E7A0 : 0000 0000 0000 
            4E7A6 : 0000 0000 0000 
            4E7AC : 0000 0000 0000 
            4E7B2 : 0000 0000 0000 
            4E7B8 : 0000 0000 0000 
            4E7BE : 0000 0000 0000 
            4E7C4 : 0000 0000 0000 
            4E7CA : 0000 0000 0000 
            4E7D0 : 0000 0000 0000 
            4E7D6 : 0000 0000 0000 
            4E7DC : 0000 0000 0000 
            4E7E2 : 0000 0000 0000 
            4E7E8 : 0000 0000 0000 
            4E7EE : 0000 0000 0000 
            4E7F4 : 0000 0000 0000 
            4E7FA : 0000 0000 0000    
(1)   34/   4E800 : =$4E800              DATA_BANK0_E label *  ; <-- CD/CD32X ONLY
(1)   34/   4E800 :                     
(1)   35/   4E800 :                     
     383/   4E800 :                     
     384/   4E800 :                     ; ====================================================================
     385/   4E800 :                     ; ----------------------------------------------------------------
     386/   4E800 :                     ; Cartridge-ONLY Section, direct label access
     387/   4E800 :                     ;
     388/   4E800 :                     ; For Genesis, 32X Cartridge and Pico ONLY.
     389/   4E800 :                     ; ----------------------------------------------------------------
     390/   4E800 :                     
     423/   4E800 :                     
     424/   4E800 :                     ; ====================================================================
     425/   4E800 :                     ; ------------------------------------------------
     426/   4E800 :                     ; End
     427/   4E800 :                     ; ------------------------------------------------
     428/   4E800 :                     
     429/   4E800 :                     ROM_END:
     430/   4E800 : 00                  		dc.b 0
     431/   4E801 :                     		align $8000
     432/   50000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 01/10/2025 01:25:22 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - | *ARCHITECTURE :      "x86_64-Linux" - |
 ARP :                           2C - |  ART_FAIRYDODO :             23440A C |
 ART_FAIRYFIFI :             23500A C |  ART_FAIRYMIMI :             234A0A C |
 ASCII_FONT :                23200A C |  ASCII_FONT_W :              232C0A C |
 ATK :                            8 - | *ATTRH :                        800 - |
*ATTRPRIO :                    8000 - | *ATTRV :                       1000 - |
*BANKSET :                        4 - | *BIGENDIAN :                      0 - |
*BITATTRH :                       3 - | *BITATTRPRIO :                    7 - |
*BITATTRV :                       4 - | *BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYPEN :                      7 - |
*BITJOYRED :                      4 - | *BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - | *BRANCHEXT :                      0 - |
*BRMDEL :                         5 - | *BRMDIR :                         7 - |
*BRMFORMAT :                      6 - |  BRMINIT :                        0 - |
 BRMREAD :                        3 - |  BRMSERCH :                       2 - |
 BRMSTAT :                        1 - | *BRMVERIFY :                      8 - |
 BRMWRITE :                       4 - | *CASESENSITIVE :                  0 - |
*CBTCHKDISC :                     4 - | *CBTCHKSTAT :                     5 - |
*CBTINIT :                        0 - | *CBTINT :                         1 - |
*CBTIPDISC :                      6 - | *CBTIPSTAT :                      7 - |
*CBTOPENDISC :                    2 - | *CBTOPENSTAT :                    3 - |
*CBTSPDISC :                      8 - | *CBTSPSTAT :                      9 - |
*CDBCHK :                        80 - | *CDBPAUSE :                      84 - |
*CDBSTAT :                       81 - | *CDBTOCREAD :                    83 - |
*CDBTOCWRITE :                   82 - |  CDCACK :                        8D - |
 CDCREAD :                       8B - | *CDCSETMODE :                    96 - |
*CDCSTART :                      87 - | *CDCSTARTP :                     88 - |
 CDCSTAT :                       8A - |  CDCSTOP :                       89 - |
 CDCTRN :                        8C - |  CDPCM_CBLK :                    1A - |
 CDPCM_CLEN :                     E - |  CDPCM_COUT :                    1C - |
 CDPCM_CREAD :                   12 - |  CDPCM_ENV :                     1F - |
 CDPCM_FLAGS :                    1 - |  CDPCM_LEN :                     20 - |
 CDPCM_LENGTH :                   6 - |  CDPCM_LOOP :                     A - |
 CDPCM_PAN :                     1E - |  CDPCM_PITCH :                   18 - |
 CDPCM_START :                    2 - |  CDPCM_STATUS :                   0 - |
*CDPCM_STRMHALF :                16 - |  CDRAMDST :                    1F82 C |
 CDRAMLEN :                    1F87 C |  CDRAMSRC :                    1F84 C |
 CDRAMSRCB :                   1F86 C |  CDREGION :                       2 - |
 CDSTAMP_CX :                     2 - |  CDSTAMP_CY :                     4 - |
 CDSTAMP_FLAGS :                  0 - |  CDSTAMP_HGHT :                   C - |
 CDSTAMP_LEN :                   20 - |  CDSTAMP_MAP :                    1 - |
 CDSTAMP_ROT :                   10 - |  CDSTAMP_SCALE :                  E - |
 CDSTAMP_WDTH :                   A - |  CDSTAMP_X :                      6 - |
 CDSTAMP_Y :                      8 - |  CDSUB_PCM_INIT :              6C7E C |
 CDSUB_PCM_INIT.CLR_PWM :      6C98 C |  CDSUB_PCM_INIT.WR_END :       6CA6 C |
 CDSUB_PCM_PROCESS :           6CD8 C |  CDSUB_PCM_PROCESS.EXIT_NOW :  6D6E C |
 CDSUB_PCM_PROCESS.GET_TABLE : 6D0A C |
 CDSUB_PCM_PROCESS.NEXT_PACKET :                                       6D3A C |
*CDSUB_PCM_PROCESS.NOT_NOW :   6D7A C |  CDSUB_PCM_PROCESS.NO_REQ :    6D08 C |
*CDSUB_PCM_PROCESS.TRNSFR_MODE :                                       6D14 C |
 CDSUB_PCM_PROCESS.WAIT_MAIN : 6D5C C |
 CDSUB_PCM_PROCESS.WAIT_START :                                        6D24 C |
 CDSUB_PCM_READTABLE :         6D8E C |
 CDSUB_PCM_READTABLE.CDCOM_KEYCUT :                                    6EA2 C |
 CDSUB_PCM_READTABLE.CDCOM_KEYOFF :                                    6EA2 C |
 CDSUB_PCM_READTABLE.CDCOM_KEYON :                                     6DE0 C |
 CDSUB_PCM_READTABLE.CONT_TLOOP :                                      6E8E C |
 CDSUB_PCM_READTABLE.GET_CHNLSET :                                     6EFA C |
 CDSUB_PCM_READTABLE.GET_TBL : 6DA4 C |  CDSUB_PCM_READTABLE.NO_COMM : 6DD0 C |
 CDSUB_PCM_READTABLE.NO_KEYCUT :                                       6DC8 C |
 CDSUB_PCM_READTABLE.NO_KEYOFF :                                       6DBE C |
 CDSUB_PCM_READTABLE.NO_UPDSET :                                       6DB4 C |
 CDSUB_PCM_READTABLE.SMALL_SAMPL :                                     6E74 C |
 CDSUB_PCM_READTABLE.UPDATE_SET :                                      6F1C C |
 CDSUB_PCM_STREAM :            6F5A C |  CDSUB_PCM_STREAM.END_POINT :  7034 C |
 CDSUB_PCM_STREAM.LAST_BYTES : 7046 C |  CDSUB_PCM_STREAM.LOOP_POINT : 7012 C |
 CDSUB_PCM_STREAM.MAKE_BLOCK : 6FEC C |  CDSUB_PCM_STREAM.MID_BLOCKS : 6F9E C |
 CDSUB_PCM_STREAM.NEXT_ONE :   6FD0 C |  CDSUB_PCM_STREAM.NOT_LAST :   6FB6 C |
 CDSUB_PCM_STREAM.NO_STRM :    6FDC C |
 CDSUB_PCM_STREAM.PICK_STREAM :                                        6F6E C |
 CDSUB_PCM_STREAM.STRLEN_IT :  7026 C |  CDSUB_PCM_STREAM.WAVE_LIST :  704E C |
 CDSUB_PCM_WAIT :              6D7C C |  CDSUB_SINEWAVE :              6B30 C |
 CDSUB_SINEWAVE.LOC_7EFA :     6B40 C |  CDSUB_SINEWAVE.LOC_7F0C :     6B52 C |
 CDSUB_SINEWAVE.SINE_DATA :    6B58 C |  CDSUB_SINEWAVE_COS :          6B2C C |
 CDSUB_STAMPDEFAULTS :         6C64 C |  CDSUB_STAMPRENDER :           65C6 C |
 CDSUB_STAMPRENDER.CLEAR_FRAME :                                       6AC8 C |
 CDSUB_STAMPRENDER.DOTC_0 :    6AF6 C |  CDSUB_STAMPRENDER.DOT_0 :     6A72 C |
 CDSUB_STAMPRENDER.EXIT_LAST : 66D4 C |
 CDSUB_STAMPRENDER.EXIT_RENDER :                                       6676 C |
 CDSUB_STAMPRENDER.FLIP_TURN : 662E C |  CDSUB_STAMPRENDER.INVALID :   692E C |
 CDSUB_STAMPRENDER.LOOP_LIST : 6688 C |  CDSUB_STAMPRENDER.MAKE_LIST : 667A C |
 CDSUB_STAMPRENDER.MAKE_STAMP :                                        66A0 C |
 CDSUB_STAMPRENDER.MAKE_TRACE :                                        67A4 C |
 CDSUB_STAMPRENDER.MK_VARS :   6934 C |  CDSUB_STAMPRENDER.NEXT_LINE : 684A C |
 CDSUB_STAMPRENDER.NO_BREAK :  65FA C |  CDSUB_STAMPRENDER.NO_STAMP :  6696 C |
 CDSUB_STAMPRENDER.NO_XL :     6828 C |  CDSUB_STAMPRENDER.NO_YL :     6830 C |
 CDSUB_STAMPRENDER.PROCESS_TRACE :                                     6A0A C |
 CDSUB_STAMPRENDER.RESET_OUT : 66DE C |  CDSUB_STAMPRENDER.RETRY :     66A4 C |
 CDSUB_STAMPRENDER.RETURN_RET :                                        6658 C |
 CDSUB_STAMPRENDER.SPLUS :     689C C |  CDSUB_STAMPRENDER.SPLUSV :    67F4 C |
 CDSUB_STAMPRENDER.TRACE_BLANK :                                       66D6 C |
 CDSUB_STAMPRENDER.WAIT_DONE : 65E4 C |  CDSUB_STAMPRENDER.WAIT_RET :  65EE C |
 CDSUB_STAMPRENDER.WAIT_RETE : 666C C |  CDSUB_STAMPRENDER.XL_P :      6906 C |
 CDSUB_STAMPRENDER.XR_P :      6912 C |  CDSUB_STAMPRENDER.YL_P :      690C C |
 CDSUB_STAMPRENDER.YR_P :      6918 C |  CDSUB_STAMPRESETVCELL :       6C58 C |
 CHIP_ENV :                    118F C |  CHIP_ENV.ATKEND :             1212 C |
*CHIP_ENV.ATKZERO :            1215 C |  CHIP_ENV.CHK2 :               121B C |
 CHIP_ENV.CHK4 :               1250 C |  CHIP_ENV.CKOF :               11B3 C |
 CHIP_ENV.CKON :               11C6 C | *CHIP_ENV.DECTMR :             121F C |
 CHIP_ENV.DKADD :              1239 C |  CHIP_ENV.DKSAV :              1241 C |
 CHIP_ENV.DKYEND :             1246 C |  CHIP_ENV.DO_NFREQ :           12A5 C |
 CHIP_ENV.ENVPROC :            11E4 C |  CHIP_ENV.KILLENV :            1266 C |
*CHIP_ENV.NBLOCK :             11E4 C |  CHIP_ENV.NORMAL :             12A0 C |
 CHIP_ENV.NOUPD :              12E6 C |  CHIP_ENV.NSKIP :              11DB C |
 CHIP_ENV.SILNC_3 :            129C C |  CHIP_ENV.VEDLP :              126E C |
 CHIP_ENV.VLMUCH :             12D2 C |  CHIP_ENV.VLOOP :              119B C |
 CHIP_ENV.VONLY :              12C8 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                   1F60 C |  COMMZREAD :                     2E C |
 COMMZROMBLK :                 1F81 C |  COMMZWRITE :                  1F80 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFEE18 - | *CONTROLLER_2 :    FFFFFFFFFFFFEE28 - |
*CONTROLLER_3 :    FFFFFFFFFFFFEE38 - | *CONTROLLER_4 :    FFFFFFFFFFFFEE48 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
 CTREG :                          F - |  CURRTICKBITS :                1CF9 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
 DACINS_CLAP :               205000 C |  DACINS_CONGA :              20597A C |
 DACINS_CONGA_LOW :          206454 C |  DACINS_KICK_STRONG :        20732E C |
 DACINS_SNARE :              208DF8 C | *DACINS_SNARE_RAP :          209CF2 C |
 DACINS_TEST :               20A79C C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     1321 C |
 DAC_ON :                      130C C |  DAC_PLAY :                    1336 C |
 DAC_REFILL :                  136A C |  DAC_REFILL.DACFILL_END :      1429 C |
 DAC_REFILL.DACFILL_LOOP :     13E2 C |  DAC_REFILL.DACFILL_RET :      142C C |
 DAC_REFILL.DAC_OVER :         13B8 C |  DATA_BANK0 :                 10000 C |
 DATA_BANK0_E :               4E800 C | *DATE :                "01/10/2025" - |
 DDACCNTR :                    18DA C |  DDACFIFOMID :                   37 C |
 DDACPNTR :                    18D7 C | *DEF_HSIZE_128 :                100 - |
*DEF_HSIZE_32 :                  40 - |  DEF_HSIZE_64 :                  80 - |
*DEF_MAXSTAMPCOUT :              60 - |  DEF_PRINTPAL :                6000 - |
 DEF_PRINTVRAM :                5A0 - |  DEF_PRINTVRAMW :               4E0 - |
 DEF_SAVEINFO :    FFFFFFFFFFFF219A C |  DEF_VRAM_BG :                 E000 - |
 DEF_VRAM_FG :                 C000 - |  DEF_VRAM_HSCRL :              FC00 - |
 DEF_VRAM_SPR :                F800 - |  DEF_VRAM_WD :                 D000 - |
 DISC_BANKLIST :   FFFFFFFFFFFF255E C |
 DISC_BANKLIST.END :                                       FFFFFFFFFFFF2574 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DREQCTL :                        6 - |
*DREQDEST :                       C - | *DREQFIFO :                      12 - |
*DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DRVINIT :                       10 - | *DRVOPEN :                        A - |
 DRV_LOOP :                      41 C |  DRV_LOOP.CMND_0 :               DD C |
 DRV_LOOP.CMND_1 :               E0 C |  DRV_LOOP.CMND_2 :               F9 C |
 DRV_LOOP.CMND_3 :              133 C |  DRV_LOOP.CMND_5 :              171 C |
 DRV_LOOP.CMND_6 :              1AA C |  DRV_LOOP.CMND_7 :              1E3 C |
 DRV_LOOP.CMND_RDSLOT :         201 C |  DRV_LOOP.DEL_ALL :             16A C |
 DRV_LOOP.GETCBYTEL :            B0 C |  DRV_LOOP.GRAB_ARG :             AE C |
 DRV_LOOP.LIST :                 CD C |  DRV_LOOP.NEITHER :              82 C |
 DRV_LOOP.NEXT_CMD :             8B C |  DRV_LOOP.NOBEATS :              68 C |
 DRV_LOOP.NOTICKS :              5B C |  DRV_LOOP.NOT_PAL :             1F6 C |
 DRV_LOOP.SRCH_DEL :            151 C |  DRV_LOOP.SRCH_FVOL :           18F C |
 DRV_LOOP.SRCH_MODE :           119 C |  DRV_LOOP.SRCH_SLOT :           213 C |
 DRV_LOOP.SRCH_VOL :            1C8 C |  DRV_LOOP.WRTTO_DEL :           15E C |
 DRV_LOOP.WRTTO_FVOL :          19C C |  DRV_LOOP.WRTTO_SLOT :          128 C |
 DRV_LOOP.WRTTO_VOL :           1D5 C |  DTBL_MULTI :                   7EE C |
 DTBL_SINGL :                   802 C |  DTBL_SINGL.CHNL_ULNK :         F83 C |
 DTBL_SINGL.COMN_PANLIST :      D6C C |  DTBL_SINGL.DAC_CUT :           BCE C |
 DTBL_SINGL.DAC_OFF :           BD4 C |  DTBL_SINGL.DAC_PROC :          BDA C |
 DTBL_SINGL.D_DOWN :            CF0 C |  DTBL_SINGL.D_DOWNHF :          CEB C |
 DTBL_SINGL.D_UP :              CE2 C | *DTBL_SINGL.D_UPHF :            CDF C |
 DTBL_SINGL.EFFC :              CA9 C |  DTBL_SINGL.EFFC_D :            CC4 C |
 DTBL_SINGL.EFFC_E :            CFD C |  DTBL_SINGL.EFFC_F :            D0C C |
 DTBL_SINGL.EFFC_X :            D1D C |  DTBL_SINGL.FM_CINDX :          B9C C |
 DTBL_SINGL.FM_CLRRSAVE :       A84 C |  DTBL_SINGL.FM_CUT :            A59 C |
 DTBL_SINGL.FM_HASVOL :         F41 C |  DTBL_SINGL.FM_KEYOFF :         A65 C |
 DTBL_SINGL.FM_OFF :            A50 C |  DTBL_SINGL.FM_TLOFF :          A6D C |
 DTBL_SINGL.FND_OCT :           F72 C |  DTBL_SINGL.FNOT_PAL :          97B C |
 DTBL_SINGL.GET_FMCACH :        BA4 C |  DTBL_SINGL.GET_OCT :           F68 C |
 DTBL_SINGL.INST :              D9D C |  DTBL_SINGL.INS_DAC :           E5B C |
 DTBL_SINGL.INS_FM :            DFE C |  DTBL_SINGL.INS_PCM :           EAF C |
 DTBL_SINGL.INS_PSG :           DC8 C |  DTBL_SINGL.INS_PSGN :          DC2 C |
 DTBL_SINGL.INS_PWM :           EEE C | *DTBL_SINGL.INVL_INS :          DC1 C |
 DTBL_SINGL.KEEP_TLMX :         B86 C |  DTBL_SINGL.KYCUT_PSG :         919 C |
*DTBL_SINGL.KYCUT_PSGN :        916 C |  DTBL_SINGL.KYOFF_PSG :         90D C |
*DTBL_SINGL.KYOFF_PSGN :        90A C |  DTBL_SINGL.KYPSGN_HATOFF :     922 C |
 DTBL_SINGL.LINKED :            86C C |  DTBL_SINGL.MKFM_PROC :         9B6 C |
 DTBL_SINGL.MKFM_SET :          A9B C |  DTBL_SINGL.MKFM_TLVOL :        B2D C |
 DTBL_SINGL.MKFM_WREGS :        B04 C |  DTBL_SINGL.MKPCM_WRTON :       C33 C |
 DTBL_SINGL.MK_DAC :            BB4 C |  DTBL_SINGL.MK_FM :             97C C |
 DTBL_SINGL.MK_FM_SP :          A00 C |  DTBL_SINGL.MK_LIST :           8BB C |
 DTBL_SINGL.MK_PCM :            C0A C |  DTBL_SINGL.MK_PSG :            8C9 C |
 DTBL_SINGL.MK_PWM :            C8A C |  DTBL_SINGL.NEW_ROMDAT :        E44 C |
 DTBL_SINGL.NOTE :              F37 C |  DTBL_SINGL.NOT_DAC :           9A1 C |
 DTBL_SINGL.NOT_NS :            905 C |  DTBL_SINGL.NOT_PAL :           9D4 C |
 DTBL_SINGL.NO_LFO :            AF9 C |  DTBL_SINGL.NO_REQ :            946 C |
 DTBL_SINGL.N_FM :              F5E C | *DTBL_SINGL.N_INDX :            F53 C |
*DTBL_SINGL.N_STFREQ :          F54 C |  DTBL_SINGL.PAN_MCD :           D49 C |
 DTBL_SINGL.PCM_CUT :           C7B C |  DTBL_SINGL.PCM_NOTE :          C31 C |
 DTBL_SINGL.PCM_OFF :           C74 C |  DTBL_SINGL.PCM_PANLIST :       D74 C |
 DTBL_SINGL.PCM_SETCOFF :       C80 C |  DTBL_SINGL.PSGC_KEYON :        930 C |
 DTBL_SINGL.PSGC_PROC :         929 C |  DTBL_SINGL.PSG_GETFREQ :       967 C |
 DTBL_SINGL.PSG_KEYON :         94C C |  DTBL_SINGL.RCYL_COM :          85F C |
 DTBL_SINGL.READFREQ_PCM :      C8B C | *DTBL_SINGL.READFREQ_PWM :      C90 C |
 DTBL_SINGL.RESET_EFFC :        8AE C |  DTBL_SINGL.RES_PAN :           D3F C |
 DTBL_SINGL.SAME_PATCH :        E56 C |  DTBL_SINGL.SETEFU_D :          CE4 C |
 DTBL_SINGL.SETEF_D :           CF4 C |  DTBL_SINGL.SETEF_MCD :         CF9 C |
 DTBL_SINGL.SET_WAVFREQ :       C93 C |  DTBL_SINGL.SILN_DAC :          863 C |
 DTBL_SINGL.SILN_FM :           866 C |  DTBL_SINGL.SILN_PCM :          845 C |
 DTBL_SINGL.SILN_PSG :          83F C |  DTBL_SINGL.SILN_PSG_N :        83B C |
 DTBL_SINGL.SILN_PWM :          856 C |  DTBL_SINGL.THIS_REGS :         A48 C |
 DTBL_SINGL.TL_DOWN :           A79 C |  DTBL_SINGL.VMUCH :             961 C |
 DTBL_SINGL.VOLU :              D94 C |  DTBL_SINGL.VPCM_CARRY :        C68 C |
 DTBL_SINGL.VPCM_SILN :         C65 C |  DTBL_SINGL.VPCM_ZERO :         C69 C |
 DTBL_SINGL.WRITE_NTL :         B91 C |  DTBL_SINGL.WRITE_TL :          B7F C |
 DTBL_SINGL.WRT_EF :            D17 C |  DTBL_SINGL.WR_SPC :            A2A C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EFFV :                          34 - |
*EMU :                            1 - |  ENV :                            1 - |
 EXTINT_DEFAULT :  FFFFFFFFFFFF1D46 C |  FALSE :                          0 - |
 FDH :                            7 - |  FDL :                            5 - |
 FDRCHG :                        86 - |  FDRSET :                        85 - |
*FEN :                            2 - | *FILEN_MARSCODE :              291A C |
 FILEN_Z80FILE :               290C C | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    1688 C |  FMCACH_2 :                    16B0 C |
 FMCACH_3 :                    16D8 C |  FMCACH_4 :                    1700 C |
 FMCACH_5 :                    1728 C |  FMCACH_6 :                    1750 C |
 FMCACH_LIST :                 18C9 C |  FMFREQ_LIST :                 143A C |
*FMINS_BASS_BIG_110 :        2041FE C | *FMINS_BASS_BIG_114 :        20421E C |
*FMINS_BASS_BIG_122 :        20423E C | *FMINS_BASS_BIG_81 :         2041DE C |
*FMINS_BASS_CAVE_47 :        20425E C | *FMINS_BASS_CLUB :           204B1E C |
*FMINS_BASS_CLUB_108 :       20427E C | *FMINS_BASS_DUCK :           204ABE C |
*FMINS_BASS_FOOT_75 :        20429E C | *FMINS_BASS_GEM_26 :         2042BE C |
 FMINS_BASS_GROOVE_1 :       20437E C | *FMINS_BASS_GROOVE_119 :     2042DE C |
*FMINS_BASS_GROOVE_2 :       204B3E C | *FMINS_BASS_HEAVY_107 :      2042FE C |
*FMINS_BASS_HEAVY_118 :      20431E C |  FMINS_BASS_ITALO :          204BDE C |
*FMINS_BASS_LOUD_117 :       20433E C | *FMINS_BASS_LOW81 :          20465E C |
*FMINS_BASS_LOW_103 :        2043BE C | *FMINS_BASS_LOW_106 :        2043DE C |
*FMINS_BASS_LOW_126 :        2043FE C | *FMINS_BASS_LOW_46 :         20435E C |
*FMINS_BASS_LOW_81 :         20439E C | *FMINS_BASS_MID_111 :        20445E C |
*FMINS_BASS_MID_19 :         20441E C | *FMINS_BASS_MID_80 :         20443E C |
*FMINS_BASS_POWER_123 :      20447E C | *FMINS_BASS_SILENT_53 :      20449E C |
*FMINS_BASS_SLAP_10 :        2044BE C | *FMINS_BASS_SLAP_105 :       2044DE C |
*FMINS_BASS_SYNTH_60 :       2044FE C | *FMINS_BASS_SYNTH_61 :       20451E C |
*FMINS_BASS_SYNTH_72 :       20453E C | *FMINS_BASS_SYNTH_73 :       20455E C |
*FMINS_BASS_VLOW_74 :        20457E C | *FMINS_BELL_62 :             20471E C |
*FMINS_BELL_93 :             20473E C | *FMINS_BELL_LOW13 :          20475E C |
*FMINS_BELL_MID36 :          2046FE C | *FMINS_BRASS_7 :             204B7E C |
*FMINS_CLOSEDHAT :           204ADE C | *FMINS_DRUMS_KICK1 :         204A3E C |
*FMINS_DRUM_KICK :           20477E C |  FMINS_FLAUTE_1 :            2045BE C |
*FMINS_FLAUTE_2 :            2045DE C | *FMINS_GUITAR_BBALL :        204BFE C |
 FMINS_HATS_1 :              2046DE C | *FMINS_HBEAT_TOM :           204A7E C |
 FMINS_ORGAN_DRAWBAR :       20459E C | *FMINS_PIANO_AQUA :          204A5E C |
*FMINS_PSYNTH_PLUS :         204B5E C | *FMINS_SFX_ALIEN1 :          204986 C |
*FMINS_SFX_ALIEN2 :          2049A6 C | *FMINS_SFX_EXPLODE :         204946 C |
*FMINS_SFX_PUNCH :           204926 C | *FMINS_SFX_PUNCH_2 :         204B9E C |
*FMINS_SFX_SLASH :           204966 C | *FMINS_SFX_SMASH :           204BBE C |
*FMINS_SP_CLOSEDHAT :        2049EE C | *FMINS_SP_COWBELL :          204A16 C |
*FMINS_SP_OPENHAT :          2049C6 C | *FMINS_TICK :                20479E C |
*FMINS_TRUMPET_1 :           204A9E C | *FMINS_TRUMPET_BUS :         2046BE C |
*FMINS_TRUMPET_CARNIVAL :    204AFE C | *FMINS_TRUMPET_GENIE :       20469E C |
*FMINS_TRUMPET_LOW :         20467E C |  FMINS_VIBRAPHONE_1 :        2045FE C |
*FMINS_VIBRAPHONE_2 :        20461E C | *FMINS_XYLOPHONE :           20463E C |
 FMLIST_RSAVE :                1778 C |  FMSPECIAL :                     30 C |
*FMSPINS_CLACK_1 :           2047BE C | *FMSPINS_COWBELL_H :         2047E6 C |
*FMSPINS_COWBELL_L :         20480E C | *FMSPINS_HATS_HQ :           204836 C |
*FMSPINS_SFX_ALIEN :         20485E C | *FMSPINS_SFX_KNCKBUZZ :      204886 C |
*FMSPINS_SFX_KNOCK_H :       2048AE C | *FMSPINS_SFX_KNOCK_L :       2048D6 C |
*FMSPINS_SFX_LASER :         2048FE C |  FM_AUTOREG :                  12F2 C |
 FM_SEND_1 :                   12F6 C |  FM_SEND_2 :                   1301 C |
*FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :    FFFFFFFFFFFF0174 C |
 GEMADMARESUME :   FFFFFFFFFFFF0192 C | *GEMAFADESEQ :     FFFFFFFFFFFF0248 C |
 GEMAINIT :        FFFFFFFFFFFF0000 C |
 GEMAINIT.CLEAR_REST :                                     FFFFFFFFFFFF0038 C |
 GEMAINIT.COPY_DRVR :                                      FFFFFFFFFFFF002E C |
 GEMAINIT.NOT_PAL :                                        FFFFFFFFFFFF005E C |
 GEMAINIT.WAIT :   FFFFFFFFFFFF001A C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYSEQ :     FFFFFFFFFFFF01D0 C | *GEMAPLAYSEQAUTO : FFFFFFFFFFFF01EE C |
 GEMARESET :       FFFFFFFFFFFF0072 C |  GEMASENDRAM :     FFFFFFFFFFFF00A6 C |
 GEMASENDRAM.COPY_BYTES :                                  FFFFFFFFFFFF00E4 C |
 GEMASENDRAM.NO_SIZE :                                     FFFFFFFFFFFF00F2 C |
 GEMASENDRAM.NO_TASK :                                     FFFFFFFFFFFF00F8 C |
 GEMASETBEATS :    FFFFFFFFFFFF0280 C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01BE C |
*GEMASETSEQVOL :   FFFFFFFFFFFF0264 C |  GEMASTOPALL :     FFFFFFFFFFFF022C C |
 GEMASTOPSEQ :     FFFFFFFFFFFF0210 C | *GEMATEST :        FFFFFFFFFFFF01B0 C |
 GEMA_INIT :                   1045 C |  GEMA_INIT.END_SETUP :         1086 C |
 GEMA_INIT.SETUP_LIST :        105B C |  GEMA_INIT.ST_COPY :           107A C |
 GEMA_LASTBANK :               1430 C |  GEMA_LASTBANK.WRITE :         1435 C |
 GET_TICK :                    10B7 C |  GET_TICK.CTNOTICK :           10D4 C |
 GLBL_LASTORG :    FFFFFFFFFFFFB000 - |  GLBL_LASTPC :     FFFFFFFFFFFF2C00 - |
 GLBL_MDATA_RP :              3E5F6 - |  GLBL_MDATA_ST :             200000 - |
 GTRK_TEST0 :                200008 C |  GTRK_TEST0.BLK :            200016 C |
 GTRK_TEST0.INS :            200024 C |  GTRK_TEST0.PAT :            200018 C |
 GTRK_TEST1 :                20002C C |  GTRK_TEST1.BLK :            20003A C |
 GTRK_TEST1.INS :            204146 C |  GTRK_TEST1.PAT :            200048 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - |  HEADEROUT :                   18DD C |
 HEADEROUT_E :                 18EB C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF1D44 C |
*HIRQ_ON :                        4 - |  HTAG_CDSAVE :        "NIKONACD___" - |
 HTAG_CDVER :                   102 - |  HTAG_DATEINFO : "(C)GF64 2024.???" - |
 HTAG_DISCID :        "NIKONACD   " - | *HTAG_DISCID_M :      "NIKONACD32X" - |
*HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
*HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
 HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
*HTAG_NDM_PICO :         "Nikona PICO                                     " - |
*HTAG_NOV_MARS :         "Nikona 32X                                      " - |
*HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
 HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
*HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
 HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
 HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
*HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 18F3 C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  IP_END :                       800 C |
 IP_START :                     200 C |  IP_START.WAIT :                77E C |
 IP_START.WAIT_VINT :           78E C |  ISOFILELIST :                 B844 C |
 ISOFILELIST_E :               C000 C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
 JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
 JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
 JOYUP :                          1 - |  JOYX :                         400 - |
 JOYY :                         200 - |  JOYZ :                         100 - |
*LCHWIDTH :                      34 - | *LEDSET :                        95 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LSH :                            B - |  LSL :                            9 - |
*MACEXP :                         7 - |  MAINGEMASEQLIST :           200000 C |
 MARS :                           0 - | *MARSBLOCK :                   1F8A C |
 MARSCD :                         0 - |  MARSUPD :                     18CF C |
 MARS_RAMCODE :                E800 C | *MARS_RAMCODE_E :              E800 C |
 MARS_RAMCODE_EOF :            E800 C |  MAX_BUFFNTRY :                   8 - |
 MAX_GLOBALS :                  800 - |  MAX_MCDSTAMPS :                 20 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDMAPSPR :                  18 - |
 MAX_PALFDREQ :                   8 - |  MAX_RCACH :                     20 - |
*MAX_SC0_OPTIONS :                4 - |  MAX_SCRNBUFF :                2000 - |
 MAX_SLOTS :                      3 - | *MAX_SNDPICK :                    7 - |
 MAX_SYSCODE :                 2C00 - |  MAX_TBLSIZE :                   12 - |
 MAX_TRFRPZ :                     9 - |  MAX_TRKCHN :                    20 - |
 MAX_TRKINDX :                   1A - |  MAX_USERCODE :                8400 - |
 MAX_WRAMBANK :               3F800 - |  MAX_ZCMND :                     20 - |
 MCD :                            1 - |  MCDBLOCK :                    1F89 C |
 MCDUPD :                      18D0 C |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - |  MCD_DCOMM_M :                   10 - |
 MCD_DCOMM_S :                   20 - |  MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MAIN :                    2800 C |
 MCD_MAIN.CLEANUP :            28A0 C |  MCD_MAIN.COPY_CODE :          28C6 C |
 MCD_MAIN.COPY_COLORS :        2818 C |  MCD_MAIN.COPY_NEW :           2886 C |
 MCD_MAIN.FADE_OUT :           281E C |  MCD_MAIN.LIL_CLNUP :          28AE C |
 MCD_MAIN.LOOP_RAM :           28E2 C |  MCD_MAIN.NEXT_COLOR :         2830 C |
 MCD_MAIN.NOTHING :            2870 C |  MCD_MAIN.NO_BLUE :            286C C |
 MCD_MAIN.NO_GREEN :           2858 C |  MCD_MAIN.NO_RED :             2844 C |
 MCD_MAIN.WAIT_NEXT :          288C C |  MCD_MEMORY :                     3 - |
 MCD_SMPDATA :                 E000 C |  MCD_SMPDATA.HERE :           40006 C |
 MCD_SMPDATA_E :               E800 C |  MDSTMP_BUFFINCR :               1A - |
 MDSTMP_CELLSTORAGE :            12 - |  MDSTMP_CURROUTFLIP :             E - |
*MDSTMP_DOTINCR :                16 - | *MDSTMP_FDROP :                  10 - |
 MDSTMP_FLAGS :                   0 - |  MDSTMP_LEN :                    1E - |
 MDSTMP_STMPOUTB :                C - |  MDSTMP_VRAMINCR :                A - |
 MDSTMP_VRAMLEN :                 8 - |  MDSTMP_VRAMMAIN :                2 - |
 MDSTMP_VRAMSEC :                 4 - |  MDSTMP_VRAMSIZE :                6 - |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :    FFFFFFFFFFFF249C C |
 MD_READMODES.SCREEN_LIST :                                FFFFFFFFFFFF24DA C |
 MD_SCREEN00 :                 E800 C |  MD_SCREEN00_E :               F000 C |
 MD_SCREEN07 :                 F000 C |  MD_SCREEN07_E :              10000 C |
 MD_SYSCODE :                  2928 C |  MD_SYSCODE_E :                4E9C C |
 MLASTPOS :                   4E5F6 - |  MODE :                          18 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MPADLBL :                    4E800 - |
 MPADLBL.THIS_SZ :              20A - | *MPAL_TEST :                 23562E C |
*MSCPAUSEOFF :                    4 - | *MSCPAUSEON :                     3 - |
*MSCPLAY :                       11 - |  MSCPLAY1 :                      12 - |
 MSCPLAYR :                      13 - | *MSCPLAYT :                      14 - |
*MSCSCANFF :                      5 - | *MSCSCANFR :                      6 - |
*MSCSCANOFF :                     7 - | *MSCSEEK :                       15 - |
*MSCSEEK1 :                      19 - | *MSCSEEKT :                      16 - |
 MSCSTOP :                        2 - |  MVOL :                          30 - |
*MVRAM_TEST :                23582E C | *MVRAM_TEST_E :              23E5F6 C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             18FB C |
*NIKONA_BUFFLIST_E :           1913 C |  OBJECT_ANIMATE :  FFFFFFFFFFFF2304 C |
 OBJECT_ANIMATE.EXIT_ANIM :                                FFFFFFFFFFFF2392 C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF2384 C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF234A C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF238E C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF2376 C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF2374 C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF2322 C |
 OBJECT_ENABLE :   FFFFFFFFFFFF2204 C |
 OBJECT_ENABLE.CLR_FIRST :                                 FFFFFFFFFFFF2212 C |
 OBJECT_INIT :     FFFFFFFFFFFF21F4 C |  OBJECT_MAKE :     FFFFFFFFFFFF2260 C |
 OBJECT_MAKE.SEARCH :                                      FFFFFFFFFFFF2270 C |
*OBJECT_MDMARS_GETSPRINFO :                                FFFFFFFFFFFF249A C |
 OBJECT_RESETANIM :                                        FFFFFFFFFFFF22CC C |
*OBJECT_RESETVARS :                                        FFFFFFFFFFFF22B2 C |
 OBJECT_RESETVARS.CLR_RAM :                                FFFFFFFFFFFF22C0 C |
 OBJECT_RUN :      FFFFFFFFFFFF2226 C |
 OBJECT_RUN.INVLD_NUM :                                    FFFFFFFFFFFF224A C |
 OBJECT_RUN.NEXT_ONE :                                     FFFFFFFFFFFF2236 C |
 OBJECT_RUN.NO_CODE :                                      FFFFFFFFFFFF2242 C |
*OBJECT_SET :      FFFFFFFFFFFF224C C | *OBJECT_SPEED :    FFFFFFFFFFFF22D4 C |
*OBJECT_TOUCH :    FFFFFFFFFFFF2398 C |
 OBJECT_TOUCH.CHECK_THIS :                                 FFFFFFFFFFFF23DC C |
 OBJECT_TOUCH.EXIT_THIS :                                  FFFFFFFFFFFF23D6 C |
 OBJECT_TOUCH.NEXT :                                       FFFFFFFFFFFF23B8 C |
 OBJECT_TOUCH.NOT_YTOP :                                   FFFFFFFFFFFF2498 C |
 OBJECT_TOUCH.RAN_OUT :                                    FFFFFFFFFFFF23D4 C |
 OBJECT_TOUCH.SET_OK :                                     FFFFFFFFFFFF2496 C |
 OBJECT_TOUCH.SKIP :                                       FFFFFFFFFFFF23CC C |
 OBJMAP_DODO :               2355AA C |  OBJMAP_FIFI :               2355F2 C |
 OBJMAP_MIMI :               2355CE C |  OBJPAL_DODO :               23558A C |
 OBJSET_ERROR :    FFFFFFFFFFFF2284 C |  OBJSET_GO :       FFFFFFFFFFFF228E C |
 OBJSET_GO.CLR :   FFFFFFFFFFFF22A2 C |
 OBJSET_GO.EXIT_THIS :                                     FFFFFFFFFFFF22A8 C |
 OBJSET_GO.FROM_DEL :                                      FFFFFFFFFFFF229C C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
*OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ONREG :                         11 - |
*PACKING :                        0 - | *PADDING :                        0 - |
*PAD_EXT :                        E - |  PAD_HOLD :                       2 - |
 PAD_ID :                         0 - |  PAD_LEN :                       10 - |
*PAD_PAGE :                       C - |  PAD_PRESS :                      4 - |
 PAD_RELEASE :                    6 - |  PAD_VER :                        1 - |
 PAD_X :                          8 - |  PAD_Y :                          A - |
 PALFD_DELAY :                    1 - |  PALFD_INCR :                     3 - |
 PALFD_LEN :                      8 - |  PALFD_NUM :                      6 - |
 PALFD_REQ :                      0 - |  PALFD_START :                    2 - |
*PALFD_TARGET :                   4 - |  PALFD_TIMER :                    5 - |
 PALMODE :                     1F88 C |  PAN :                            3 - |
*PCM :                            0 - |  PCMCOM :                      15D4 C |
*PEN :                           20 - |  PICO :                           0 - |
 PSGCOM :                      164C C |  PSGFREQ_LIST :                1452 C |
 PSGHATMODE :                    2F C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PWMCOM :                      1614 C |
*PWMCTL :                        31 - | *PWMINTCLR :                     1C - |
*PWMIRQ_ON :                      1 - |  RAM_CDSUB_BRAMSTRINGS :      14AE2 C |
 RAM_CDSUB_BRAMWORK :         144A2 C |  RAM_CDSUB_CURRSAVEINFO :     14492 C |
 RAM_CDSUB_DOTCLEARFLAG :      7190 C |  RAM_CDSUB_FSBUFF :           14412 C |
 RAM_CDSUB_GOTDATA :           BC12 C | *RAM_CDSUB_IRQINDEX :          7198 C |
 RAM_CDSUB_ISOFILES :          7412 C |  RAM_CDSUB_PCMBUFF :           72D2 C |
 RAM_CDSUB_PCMENBL :           719A C | *RAM_CDSUB_PCMMKNEW :          719D C |
 RAM_CDSUB_PCMREQUPD :         719B C |  RAM_CDSUB_PCMTABLE :          73D2 C |
 RAM_CDSUB_SRAMCOPY :         14AEE C |  RAM_CDSUB_STAMPBUSY :         7188 C |
 RAM_CDSUB_STAMPCBUFF :        7194 C |  RAM_CDSUB_STAMPENBL :         7186 C |
 RAM_CDSUB_STAMPH :            7184 C |  RAM_CDSUB_STAMPINDXW :        7192 C |
 RAM_CDSUB_STAMPLIST :         71D2 C |  RAM_CDSUB_STAMPNEXTRD :       718E C |
 RAM_CDSUB_STAMPNEXTWR :       718C C |  RAM_CDSUB_STAMPNUM :          7180 C |
 RAM_CDSUB_STAMPOUTBOX :       71C6 C | *RAM_CDSUB_STAMPPENDING :      7196 C |
 RAM_CDSUB_STAMPPROC :         719E C |  RAM_CDSUB_STAMPREQUPD :       719C C |
 RAM_CDSUB_STAMPSIZE :         718A C |  RAM_CDSUB_STAMPW :            7182 C |
 RAM_CURROBJLIST : FFFFFFFFFFFFEE64 C |  RAM_CURROBJNUM :  FFFFFFFFFFFFEE80 C |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFEE74 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFEBFC C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFD006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFD000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFD004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFEE6E C |  RAM_HORSCROLL :   FFFFFFFFFFFFE05E C |
 RAM_INDXPALFADE : FFFFFFFFFFFFEC00 C |  RAM_INPUTDATA :   FFFFFFFFFFFFEE18 C |
 RAM_MDGLOBAL :    FFFFFFFFFFFFD000 C |
*RAM_MDMARS_COMMBUFF :                                     FFFFFFFFFFFFD808 C |
*RAM_MDMARS_MPALFDLIST :                                   FFFFFFFFFFFFD810 C |
*RAM_MDMARS_PALFD :                                        FFFFFFFFFFFFD80C C |
 RAM_MDMCD_STAMPS :                                        FFFFFFFFFFFFD800 C |
 RAM_MDMCD_STAMPSETT :                                     FFFFFFFFFFFFDC00 C |
 RAM_MDMISC :      FFFFFFFFFFFFD800 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFEC18 C |
 RAM_MDVIDCLR_E :  FFFFFFFFFFFFEA76 C |  RAM_MDVIDEO :     FFFFFFFFFFFFDC1E C |
 RAM_MEGACD :              FFFFFD00 - |  RAM_PALETTE :     FFFFFFFFFFFFE96E C |
 RAM_PALETTEFADE : FFFFFFFFFFFFE9EE C |  RAM_PALFADELIST : FFFFFFFFFFFFDC1E C |
 RAM_SAVEDATA :    FFFFFFFFFFFFEC18 C |  RAM_SAVEENABLE :  FFFFFFFFFFFFEE7A C |
*RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFEC1C C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFEC18 C |  RAM_SCREENMODE :  FFFFFFFFFFFFEE7C C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFEE7E C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB000 C |  RAM_SOUNDBUFF :           FFFFFF00 - |
 RAM_SPRITES :     FFFFFFFFFFFFE46E C |  RAM_SPRLINKNUM :  FFFFFFFFFFFFEC02 C |
 RAM_SPRMAPLIST :  FFFFFFFFFFFFDC5E C |  RAM_SPROFFSETX :  FFFFFFFFFFFFEA72 C |
 RAM_SPROFFSETY :  FFFFFFFFFFFFEA74 C |  RAM_SPRPZLIST :   FFFFFFFFFFFFDDDE C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSLASTBANK : FFFFFFFFFFFFEE60 C |
 RAM_SYSRANDOM :   FFFFFFFFFFFFEE5C C | *RAM_SYSRANDVAL :  FFFFFFFFFFFFEE58 C |
 RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |  RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFEE68 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFEA6E C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFEA7C C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFEA70 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFEC0E C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFEC10 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFEC12 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFEC14 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFEC16 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFEC06 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFEC04 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFEC0C C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFEC0A C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFEC08 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFE41E C |  RAM_ZCDFLAGD :            FFFFFF00 - |
*RCHWIDTH :                      36 - |  READROM :                     10D8 C |
 READROM.DOUBLE :              10FB C |  READROM.FROM_RAM :            111F C |
 READROM.TRANSFER :            113F C |  READROM.WAIT :                1136 C |
 READROM.X68KLAST :            1178 C |  READROM.X68KLOOP :            1164 C |
 READROM.X68KLPWT :            1186 C |  READROM.X68KNOCARRY :         1119 C |
*RELAXED :                        0 - | *RES :                            2 - |
*ROMPAUSEOFF :                    9 - | *ROMPAUSEON :                     8 - |
*ROMREAD :                       17 - | *ROMREADE :                      21 - |
 ROMREADN :                      20 - | *ROMSEEK :                       18 - |
*ROM_END :                    4E800 C |  RRT :                           14 - |
 SAMPLEHEAD :                  18ED C |  SBEATACC :                      31 C |
 SBEATPTCK :                     33 C | *SCDINIT :                       8E - |
*SCDPQ :                         93 - | *SCDPQL :                        94 - |
*SCDREAD :                       92 - | *SCDSTART :                      8F - |
*SCDSTAT :                       91 - | *SCDSTOP :                       90 - |
*SCPU_BRAM :               FFFE8000 - |  SCPU_CMDLIST :                6104 C |
 SCPU_DATA :                  40000 C |  SCPU_INIT :                   602A C |
 SCPU_INIT.CLR_RAM :           6064 C |  SCPU_INIT.DRV_INIT :          6094 C |
 SCPU_INIT.SUB_FILE :          6096 C |  SCPU_IRQ :                    60AA C |
 SCPU_IRQ.NOT_REQ :            60C8 C |  SCPU_IRQ.NOT_SOUND :          60BE C |
 SCPU_MAIN :                   60CE C |  SCPU_PCM :                FFFF0000 - |
 SCPU_RAM :                    7180 C |  SCPU_REG :                FFFF8000 - |
 SCPU_STAMP :                  60A4 C |  SCPU_TIMER :                  60CA C |
 SCPU_USER :                   60CC C |  SCPU_WRAM :                  80000 - |
 SEQ_BANKBLK :                   16 - |  SEQ_BANKHEADS :                 15 - |
 SEQ_BLOCKS :                     4 - |  SEQ_CACH :                       8 - |
 SEQ_CACHHALF :                  10 - |  SEQ_CHNINDX :                   25 - |
 SEQ_CURRBLK :                   13 - |  SEQ_MAXCHNL :                   17 - |
 SEQ_NUM :                        1 - |  SEQ_PATT :                       6 - |
 SEQ_PRIORITY :                  14 - |  SEQ_READ :                       A - |
 SEQ_ROMBLKS :                   22 - |  SEQ_ROMINST :                   1F - |
 SEQ_ROMPATT :                   1C - |  SEQ_ROMPATTREAD :               19 - |
 SEQ_ROWPAUSE :                  11 - |  SEQ_ROWS :                       C - |
 SEQ_SETBLK :                     2 - |  SEQ_STATUS :                     0 - |
 SEQ_TICKSET :                    3 - |  SEQ_TICKTMR :                   12 - |
 SEQ_VOLFDTARGET :               18 - |  SEQ_VOLMASTER :                  E - |
 SET_CHIPS :                    5FE C | *SET_DEFAUTODMA :               480 - |
 SET_ENBLSAVE :                   1 - |  SET_FIRSTSCRN :                  0 - |
 SET_NULLVRAM :                 7FE - |  SET_PCMBLK :                   100 - |
 SET_PCMLAST :                  F00 - |  SET_RAMLIMIT :              FFFC00 - |
*SET_SNDVIEWY :                  10 - |  SET_SRAMSIZE :                 200 - |
 SET_STAMPPOV :                 100 - | *SHIFT :                          2 - |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFD008 C |  SIZEOF_MDMISC :   FFFFFFFFFFFFDC1E C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFEE82 C |  SIZEOF_MDSYS :    FFFFFFFFFFFFEE82 C |
 SIZEOF_MDVID :    FFFFFFFFFFFFEC18 C |  SIZEOF_SAVEINFO : FFFFFFFFFFFFEC22 C |
*SIZEOF_SUBCPU :              14CEE C |  SLV :                           10 - |
 SNDLOCKZ80 :      FFFFFFFFFFFF0088 C |  SNDLOCKZ80.WAIT : FFFFFFFFFFFF0090 C |
 SNDREQ_ENTER :    FFFFFFFFFFFF00FA C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF0120 C |
 SNDREQ_EXIT :     FFFFFFFFFFFF0130 C | *SNDREQ_SADDR :    FFFFFFFFFFFF015E C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF0166 C |  SNDREQ_SCMD :     FFFFFFFFFFFF014C C |
 SNDREQ_SLONG :    FFFFFFFFFFFF015A C |  SNDREQ_SWORD :    FFFFFFFFFFFF0162 C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF009C C |  SOUND_INIT :      FFFFFFFFFFFF19BE C |
 SOUND_UPDATE :    FFFFFFFFFFFF19BA C |  SPCDDA_RESETVOLUME :          6428 C |
 SPINITFS :                    6536 C |  SPREADSECTORSN :              64AE C |
 SPREADSECTORSN.WAITTRANSFER : 650A C |  SPREADSECTORSN.WAIT_READ :    64F4 C |
 SPREADSECTORSN.WAIT_STAT :    64E2 C |  SPSEARCHFILE :                6572 C |
 SPSEARCHFILE.CHK_STR :        659C C |  SPSEARCHFILE.FAILED_SRCH :    65C0 C |
 SPSEARCHFILE.FOUND_FILE :     65AC C |  SPSEARCHFILE.NEXT_FILE :      657E C |
 SPSEARCHFILE.NON_FILE :       65A8 C |  SP_END :                      2180 C |
 SP_START :                    1000 C |  ST :                             D - |
 STANDBY :                        3 - | *STMPC_DX :                       C - |
*STMPC_DY :                      10 - |  STMPC_LEN :                     28 - |
 STMPC_ROT_COS :                 26 - |  STMPC_ROT_SIN :                 24 - |
 STMPC_TX :                      14 - |  STMPC_TY :                      18 - |
 STMPC_X :                        4 - |  STMPC_XC :                       0 - |
 STMPC_XMUL :                    1C - |  STMPC_Y :                        8 - |
 STMPC_YC :                       2 - |  STMPC_ZMUL :                    1E - |
 STMPC_ZMUL_COS :                22 - |  STMPC_ZMUL_SIN :                20 - |
*STMPI_FLAGS :                    A - |  STMPI_LEN :                      C - |
 STMPI_MAP :                      0 - |  STMPI_X :                        2 - |
 STMPI_XR :                       6 - |  STMPI_Y :                        4 - |
 STMPI_YD :                       8 - |  SUBTASK_CMND00 :              6144 C |
 SUBTASK_CMND01 :              6146 C |  SUBTASK_CMND01.EXIT_NOW :     61B0 C |
 SUBTASK_CMND01.NEXT_PACKET :  616A C |  SUBTASK_CMND01.WAIT_MAIN :    6188 C |
 SUBTASK_CMND01.WAIT_MAIN_O :  61A4 C |  SUBTASK_CMND02 :              61B8 C |
 SUBTASK_CMND02.WAIT_RET :     61EC C |  SUBTASK_CMND04 :              61F8 C |
 SUBTASK_CMND04.EXIT_NOW :     6266 C |  SUBTASK_CMND04.NEXT_PACKET :  6228 C |
 SUBTASK_CMND04.WAIT_ENTER :   6204 C |  SUBTASK_CMND04.WAIT_MAIN :    624E C |
 SUBTASK_CMND07 :              6268 C |  SUBTASK_CMND08 :              6274 C |
 SUBTASK_CMND08.BIG_FAIL :     62C8 C |  SUBTASK_CMND08.COPY_PASTE :   6286 C |
 SUBTASK_CMND09 :              62D6 C |  SUBTASK_CMND09.SEND_DATA :    631A C |
 SUBTASK_CMND09.WAIT_LOCK :    6304 C |  SUBTASK_CMND09.WAIT_SIGNI :   6332 C |
 SUBTASK_CMND09.WAIT_SIGNO :   6340 C |  SUBTASK_CMND0A :              634E C |
 SUBTASK_CMND0A.EXIT_NOW :     63A8 C |  SUBTASK_CMND0A.MAIN_LOOP :    6370 C |
 SUBTASK_CMND0A.WAIT_LOCK :    635E C |  SUBTASK_CMND0A.WAIT_PASS :    6398 C |
 SUBTASK_CMND10 :              63E4 C |  SUBTASK_CMND11 :              63FA C |
 SUBTASK_CMND14 :              6410 C |  SUBTASK_CMND16 :              641A C |
 SUBTASK_CMND17 :              6428 C |  SUBTASK_CMND18 :              644A C |
 SUBTASK_CMND19 :              647E C |  SUBTASK_CMND19.SET_RET :      64A4 C |
 SUBTASK_RETERR_NOFILE :       63DC C |  SUBTSK_BRAMCALL :             63C2 C |
 SUBTSK_RETURNFAIL :           63D4 C |  SYSBCD_SPOUT :    FFFFFFFFFFFF1F4C C |
*SYSMARS_FRAMEBUFFER :       840000 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_OVERWRITE :         860000 - |  SYSMARS_REG :               A15100 - |
*SYSMARS_SVDP :              A15180 - |  SYSMCD_REG :                A12000 - |
 SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :                                        FFFFFFFFFFFF2150 C |
 SYSMDMCD_SETCDDA.FAIL_SAFE :                              FFFFFFFFFFFF2168 C |
 SYSRND_MKVALUE :  FFFFFFFFFFFF1D62 C |
 SYSRND_MKVALUE.HAS_SEED :                                 FFFFFFFFFFFF1D74 C |
*SYSTEM_BCD_ADDB : FFFFFFFFFFFF1F24 C |  SYSTEM_BCD_ADDL : FFFFFFFFFFFF1F32 C |
*SYSTEM_BCD_ADDW : FFFFFFFFFFFF1F2C C | *SYSTEM_BCD_SUBB : FFFFFFFFFFFF1EFC C |
 SYSTEM_BCD_SUBL : FFFFFFFFFFFF1F0A C | *SYSTEM_BCD_SUBW : FFFFFFFFFFFF1F04 C |
 SYSTEM_DEFAULT :  FFFFFFFFFFFF1D22 C |
 SYSTEM_DEFAULT.CLR_LOOP :                                 FFFFFFFFFFFF1D30 C |
 SYSTEM_DICEROLL : FFFFFFFFFFFF1DAC C |
*SYSTEM_DICEROLL_SEED :                                    FFFFFFFFFFFF1D8C C |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF19B2 C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF1978 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF19B6 C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF197C C |
 SYSTEM_INIT :     FFFFFFFFFFFF18C4 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF192C C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF18D0 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF19C2 C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF19EE C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF1A44 C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF1AEE C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF1AE8 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF1A24 C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF1B74 C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF19F4 C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF1A0A C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF1A16 C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF1A22 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF19D6 C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF1AB6 C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF1AE2 C |
*SYSTEM_MDMARS_SENDDATA :                                  FFFFFFFFFFFF21AC C |
*SYSTEM_MDMARS_UPDATE :                                    FFFFFFFFFFFF21AC C |
*SYSTEM_MDMCD_CDDAFADE :                                   FFFFFFFFFFFF217C C |
*SYSTEM_MDMCD_CDDAPLAY :                                   FFFFFFFFFFFF213E C |
*SYSTEM_MDMCD_CDDAPLAYL :                                  FFFFFFFFFFFF2148 C |
 SYSTEM_MDMCD_CDDASTOP :                                   FFFFFFFFFFFF216E C |
 SYSTEM_MDMCD_CHECKHOME :                                  FFFFFFFFFFFF2100 C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                        FFFFFFFFFFFF2126 C |
 SYSTEM_MDMCD_CHECKWRAM :                                  FFFFFFFFFFFF1FF4 C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                           FFFFFFFFFFFF2004 C |
 SYSTEM_MDMCD_EXITSHELL :                                  FFFFFFFFFFFF2130 C |
 SYSTEM_MDMCD_GIVEWRAM :                                   FFFFFFFFFFFF200A C |
 SYSTEM_MDMCD_INTERRUPT :                                  FFFFFFFFFFFF1F7E C |
 SYSTEM_MDMCD_RDFILE_RAM :                                 FFFFFFFFFFFF2016 C |
 SYSTEM_MDMCD_RDFILE_RAM.COPY_RAM :                        FFFFFFFFFFFF2054 C |
 SYSTEM_MDMCD_RDFILE_RAM.WAIT_SUB :                        FFFFFFFFFFFF2082 C |
 SYSTEM_MDMCD_RDFILE_WRAM :                                FFFFFFFFFFFF20B8 C |
*SYSTEM_MDMCD_SUBENTER :                                   FFFFFFFFFFFF1F9A C |
 SYSTEM_MDMCD_SUBENTER.WAIT_SUB_O :                        FFFFFFFFFFFF1F9C C |
 SYSTEM_MDMCD_SUBTASK :                                    FFFFFFFFFFFF1FA8 C |
 SYSTEM_MDMCD_SUBTASK.MAKE_SURE :                          FFFFFFFFFFFF1FC4 C |
 SYSTEM_MDMCD_SUBTASK.WAIT_FIRST :                         FFFFFFFFFFFF1FB2 C |
 SYSTEM_MDMCD_SUBTASK.WAIT_SUB_I :                         FFFFFFFFFFFF1FCE C |
 SYSTEM_MDMCD_SUBWAIT :                                    FFFFFFFFFFFF1F8C C |
 SYSTEM_MDMCD_SUBWAIT.WAIT_SUB_O :                         FFFFFFFFFFFF1F8E C |
 SYSTEM_MDMCD_WAITWRAM :                                   FFFFFFFFFFFF1FE8 C |
 SYSTEM_RANDOM :   FFFFFFFFFFFF1D52 C |
 SYSTEM_RANDOM_SEED :                                      FFFFFFFFFFFF1D48 C |
 SYSTEM_RENDER :   FFFFFFFFFFFF193C C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF1962 C |
*SYSTEM_RENDER.FROM_LATE :                                 FFFFFFFFFFFF195A C |
 SYSTEM_RENDER.WAIT_EARLY :                                FFFFFFFFFFFF194A C |
 SYSTEM_RENDER.WAIT_VBLANK :                               FFFFFFFFFFFF1964 C |
 SYSTEM_SETDATABANK :                                      FFFFFFFFFFFF21AC C |
 SYSTEM_SETDATABANK.FOUND_IT :                             FFFFFFFFFFFF21E2 C |
 SYSTEM_SETDATABANK.FROM_ERR :                             FFFFFFFFFFFF21EE C |
 SYSTEM_SETDATABANK.RAN_OUT :                              FFFFFFFFFFFF21DC C |
 SYSTEM_SETDATABANK.SAME_BANK :                            FFFFFFFFFFFF21EA C |
 SYSTEM_SETDATABANK.SRCH_CDBANK :                          FFFFFFFFFFFF21C8 C |
 SYSTEM_SETINTJUMPS :                                      FFFFFFFFFFFF1F64 C |
 SYSTEM_SETINTJUMPS.NO_EXINT :                             FFFFFFFFFFFF1F7C C |
 SYSTEM_SETINTJUMPS.NO_HINT :                              FFFFFFFFFFFF1F74 C |
 SYSTEM_SETINTJUMPS.NO_VINT :                              FFFFFFFFFFFF1F6C C |
 SYSTEM_SINEWAVE : FFFFFFFFFFFF1DD0 C |
 SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF1DC6 C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF1B7A C |
 SYSTEM_SRAMINIT.ALREADY_SET :                             FFFFFFFFFFFF1BE8 C |
*SYSTEM_SRAMINIT.CANT_USE :                                FFFFFFFFFFFF1BE6 C |
 SYSTEM_SRAMINIT.CLR_SRAM :                                FFFFFFFFFFFF1BCE C |
 SYSTEM_SRAMINIT.CONT_SAVE :                               FFFFFFFFFFFF1BE4 C |
 SYSTEM_SRAMINIT.COPY_PASTE :                              FFFFFFFFFFFF1B90 C |
*SYSTEM_SRAMINIT.NOT_FAIL :                                FFFFFFFFFFFF1BB0 C |
 SYSTEM_SRAMLOAD : FFFFFFFFFFFF1BEA C |
 SYSTEM_SRAMLOAD.CANT_USE :                                FFFFFFFFFFFF1C8C C |
 SYSTEM_SRAMLOAD.EXIT_NOW :                                FFFFFFFFFFFF1C7A C |
 SYSTEM_SRAMLOAD.GET_DATA :                                FFFFFFFFFFFF1C38 C |
 SYSTEM_SRAMLOAD.SET_BAD :                                 FFFFFFFFFFFF1C86 C |
 SYSTEM_SRAMLOAD.WAIT_SIGNO :                              FFFFFFFFFFFF1C66 C |
 SYSTEM_SRAMLOAD.WAIT_SUB :                                FFFFFFFFFFFF1C10 C |
 SYSTEM_SRAMSAVE : FFFFFFFFFFFF1C8E C |
 SYSTEM_SRAMSAVE.CANT_USE :                                FFFFFFFFFFFF1D20 C |
 SYSTEM_SRAMSAVE.SEND_DATA :                               FFFFFFFFFFFF1CD4 C |
 SYSTEM_SRAMSAVE.SET_BAD :                                 FFFFFFFFFFFF1D1A C |
 SYSTEM_SRAMSAVE.WAIT_SIGNI :                              FFFFFFFFFFFF1CEE C |
 SYSTEM_SRAMSAVE.WAIT_SIGNO :                              FFFFFFFFFFFF1D00 C |
 SYSTEM_SRAMSAVE.WAIT_SUB :                                FFFFFFFFFFFF1CB4 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
 SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :  FFFFFFFFFFFF197E C |
 SYS_MARSSLVCMD.WAIT_EXIT :                                FFFFFFFFFFFF19A4 C |
 SYS_SINEWAVE :    FFFFFFFFFFFF1DD4 C |
 SYS_SINEWAVE.LOC_7EFA :                                   FFFFFFFFFFFF1DE2 C |
 SYS_SINEWAVE.LOC_7F0C :                                   FFFFFFFFFFFF1DF4 C |
 SYS_SINEWAVE.SINE_DATA :                                  FFFFFFFFFFFF1DFA C |
*SYS_SRAM :                  200000 - | *SYS_TMSS :                  A14000 - |
 TAG_SRAMDATA :              "SAVE" - |  TBLBUFF_READ :                 63E C |
 TBLBUFF_READ.DONT_RES :        6FC C |  TBLBUFF_READ.DO_CHIP :         696 C |
 TBLBUFF_READ.FOUND_TNEW :      77E C |  TBLBUFF_READ.GOT_LINK :        737 C |
 TBLBUFF_READ.GRAB_LINK :       6E0 C |  TBLBUFF_READ.HAS_INDX :        672 C |
 TBLBUFF_READ.INVLDL :          724 C | *TBLBUFF_READ.L_HIPRIO :        7BB C |
 TBLBUFF_READ.NEW_CHIP :        75D C |  TBLBUFF_READ.NEW_LINK :        7B8 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7C9 C |  TBLBUFF_READ.NEXT_INDX :       66C C |
 TBLBUFF_READ.NEXT_PRIO :       783 C |  TBLBUFF_READ.NOT_SAMEL :       759 C |
 TBLBUFF_READ.NO_INDX :         68E C |  TBLBUFF_READ.OVRW_LINK :       7B0 C |
 TBLBUFF_READ.PASS_2 :          782 C |  TBLBUFF_READ.PICK_TBL :        7D2 C |
 TBLBUFF_READ.RNOT_PSG :        75B C |  TBLBUFF_READ.SAME_LINK :       6FF C |
 TBLBUFF_READ.SET_ASFULL :      7AD C |  TBLBUFF_READ.SINGL_FREE :      798 C |
 TBLBUFF_READ.SINGL_LINK :      729 C |  TBLBUFF_READ.SRCH_FREE :       76E C |
 TBLBUFF_READ.SRCH_LINK :       70B C |  TBLBUFF_READ.SRCH_LLOOP :      715 C |
 TBLBUFF_READ.TRACK_CONT :      656 C |  TBLBUFF_READ.VALID :           66A C |
 TBLFM :                       1BA0 C |  TBLFM3 :                      1BE8 C |
 TBLFM6 :                      1BFA C |  TBLLIST :                     1B00 C |
 TBLPCM :                      1B0E C |  TBLPSG :                      1C0E C |
 TBLPSGN :                     1C46 C |  TBLPWM :                      1C58 C |
 TBLZ_CLEAR :                   F8A C |  TBLZ_CLEAR.CLR_ALL :           F94 C |
*TESTENTRY :                     1E - | *TESTENTRYLOOP :                 1F - |
*TEXTR_TEST :                     0 C |  TH :                      20000000 - |
 TICKCNT :                     1CF8 C |  TICKFLAG :                    1CF7 C |
 TICKSPSET :                   1CF6 C | *TIME :               "01:25:22 AM" - |
*TIMERCTL :                      30 - |  TRACK_OUT :                    5B0 C |
 TRACK_OUT.INDX_DEL :           5C5 C |  TRACK_OUT.NOTHIN :             5F2 C |
 TRACK_OUT.VALID :              5C4 C |  TRKBLKS_0 :                   17F4 C |
 TRKBLKS_1 :                   17FC C |  TRKBLKS_2 :                   1804 C |
 TRKBUFF_0 :                   180C C |  TRKBUFF_1 :                   184B C |
 TRKBUFF_2 :                   188A C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   1794 C |
 TRKHDRS_1 :                   17B4 C |  TRKHDRS_2 :                   17D4 C |
 TRKINFOCACH :                 1784 C |  TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_SEQ :                      226 C |
 UPD_SEQ.CHNL_FREE :            33C C |  UPD_SEQ.CONT_CHNL :            346 C |
 UPD_SEQ.DEC_ROW :              2DD C |  UPD_SEQ.DEC_ROW_E :            2E0 C |
 UPD_SEQ.EFFECT_FILL :          508 C |  UPD_SEQ.EFF_A :                3C1 C |
 UPD_SEQ.EFF_B :                3D2 C |  UPD_SEQ.EFF_C :                3F0 C |
 UPD_SEQ.EXIT :                 2D1 C |  UPD_SEQ.FADE_OUT :             25E C |
 UPD_SEQ.FIRST_BLK :            447 C |  UPD_SEQ.FIRST_FILL :           50F C |
 UPD_SEQ.FIRST_HEAD :           48D C |  UPD_SEQ.GRAB_RHEAD :           59D C |
 UPD_SEQ.HAS_NOTE :             2E8 C |  UPD_SEQ.INC_CPATT :            3F3 C |
 UPD_SEQ.KEEP_BLK :             463 C |  UPD_SEQ.KEEP_IT :              4B3 C |
 UPD_SEQ.KEEP_VOL :             274 C |  UPD_SEQ.NEXT_CHNL :            31E C |
 UPD_SEQ.NEXT_NOTE :            2C1 C |  UPD_SEQ.NO_EFF :               38D C |
 UPD_SEQ.NO_GLBL :              54F C |  UPD_SEQ.NO_INS :               36E C |
 UPD_SEQ.NO_NOTE :              363 C |  UPD_SEQ.NO_VOL :               37A C |
 UPD_SEQ.OLD_TYPE :             357 C |  UPD_SEQ.RAN_OUT :              401 C |
 UPD_SEQ.READ_SEQ :             23B C |  UPD_SEQ.ROW_ACTIVE :           2BA C |
 UPD_SEQ.SET_TRACK :            42B C |  UPD_SEQ.SFXMD :                27E C |
 UPD_SEQ.SRCH_NEW :             319 C |  UPD_SEQ.SRCH_REROLL :          315 C |
 UPD_SEQ.TOO_MUCH :             26A C |  UPD_SEQ.TRACK_END :            502 C |
*VATTR_FLIPH :                  800 - | *VATTR_FLIPV :                 1000 - |
*VATTR_HI :                    8000 - | *VATTR_PAL1 :                  2000 - |
*VATTR_PAL2 :                  4000 - | *VATTR_PAL3 :                  6000 - |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |
 VIDEO_BUILDSPRITES :                                      FFFFFFFFFFFF0468 C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                           FFFFFFFFFFFF0628 C |
 VIDEO_BUILDSPRITES.CHK_SPR_R :                            FFFFFFFFFFFF0606 C |
 VIDEO_BUILDSPRITES.DONT_ADD :                             FFFFFFFFFFFF05DA C |
 VIDEO_BUILDSPRITES.EX_VRAM :                              FFFFFFFFFFFF051E C |
 VIDEO_BUILDSPRITES.EX_VRAMS :                             FFFFFFFFFFFF0542 C |
 VIDEO_BUILDSPRITES.EX_YEXT :                              FFFFFFFFFFFF05AE C |
 VIDEO_BUILDSPRITES.FIRST_SPR :                            FFFFFFFFFFFF0488 C |
 VIDEO_BUILDSPRITES.MK_PZ :                                FFFFFFFFFFFF04F4 C |
 VIDEO_BUILDSPRITES.NEXT :                                 FFFFFFFFFFFF04D0 C |
 VIDEO_BUILDSPRITES.NEXT_PZ :                              FFFFFFFFFFFF0490 C |
 VIDEO_BUILDSPRITES.NO_MAP :                               FFFFFFFFFFFF05EE C |
 VIDEO_BUILDSPRITES.NO_PZ :                                FFFFFFFFFFFF05EA C |
*VIDEO_BUILDSPRITES.NO_SLOT :                              FFFFFFFFFFFF05F4 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                           FFFFFFFFFFFF063C C |
 VIDEO_BUILDSPRITES.NO_SLOT_R :                            FFFFFFFFFFFF061A C |
 VIDEO_BUILDSPRITES.NO_SLOT_S :                            FFFFFFFFFFFF04C0 C |
 VIDEO_BUILDSPRITES.STOP_ALL :                             FFFFFFFFFFFF05F8 C |
 VIDEO_BUILDSPRITES.VRAM_H :                               FFFFFFFFFFFF0572 C |
 VIDEO_BUILDSPRITES.VRAM_V :                               FFFFFFFFFFFF055A C |
 VIDEO_CLEAR :     FFFFFFFFFFFF0676 C |
 VIDEO_CLEAR.CLR_ME :                                      FFFFFFFFFFFF0680 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF0696 C |
 VIDEO_CLEARSCREEN.NOT_SMALL :                             FFFFFFFFFFFF06BC C |
*VIDEO_COPY :      FFFFFFFFFFFF0A50 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF0A5A C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF0AB6 C |
 VIDEO_DEFAULT :   FFFFFFFFFFFF0326 C |
 VIDEO_DISPLAYOFF :                                        FFFFFFFFFFFF06D0 C |
 VIDEO_DISPLAYON : FFFFFFFFFFFF06C4 C |  VIDEO_DMAOFF :    FFFFFFFFFFFF06E8 C |
 VIDEO_DMAON :     FFFFFFFFFFFF06DC C |
 VIDEO_FADEIN_FULL :                                       FFFFFFFFFFFF0EA6 C |
 VIDEO_FADEOUT_FULL :                                      FFFFFFFFFFFF0EB8 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0F0A C |
*VIDEO_FADEPAL_LIST :                                      FFFFFFFFFFFF0F60 C |
 VIDEO_FADEPAL_LIST.INVALID :                              FFFFFFFFFFFF0F7A C |
 VIDEO_FADEPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0F6E C |
 VIDEO_FILL :      FFFFFFFFFFFF09D8 C |  VIDEO_INIT :      FFFFFFFFFFFF0296 C |
 VIDEO_INIT.CLR_D :                                        FFFFFFFFFFFF02CC C |
 VIDEO_INIT.CLR_PREQ :                                     FFFFFFFFFFFF02E4 C |
 VIDEO_INIT.CLR_RAM :                                      FFFFFFFFFFFF02A0 C |
 VIDEO_INIT.COPY_DMA :                                     FFFFFFFFFFFF02B2 C |
 VIDEO_INIT.DEF_REGSET :                                   FFFFFFFFFFFF031C C |
 VIDEO_INIT.DMA_ENTRY :                                    FFFFFFFFFFFF030A C |
*VIDEO_INTENABLE : FFFFFFFFFFFF0700 C |  VIDEO_LOADART :   FFFFFFFFFFFF0882 C |
 VIDEO_LOADART.BAD_SIZE :                                  FFFFFFFFFFFF0960 C |
 VIDEO_LOADART.LAST_SET :                                  FFFFFFFFFFFF08D2 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF08DA C |
 VIDEO_LOADART.NON_WRAM :                                  FFFFFFFFFFFF0904 C |
 VIDEO_LOADART.NON_WRAM_L :                                FFFFFFFFFFFF0960 C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF08CC C |
 VIDEO_LOADART.RAM_WRITE :                                 FFFFFFFFFFFF0962 C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF0976 C |
 VIDEO_LOADART_LIST :                                      FFFFFFFFFFFF09B8 C |
 VIDEO_LOADART_LIST.INVALID :                              FFFFFFFFFFFF09D2 C |
 VIDEO_LOADART_LIST.NEXT_ONE :                             FFFFFFFFFFFF09C4 C |
*VIDEO_LOADMAP :   FFFFFFFFFFFF0BB2 C |
 VIDEO_LOADMAP.BAD_SIZE :                                  FFFFFFFFFFFF0C22 C |
 VIDEO_LOADMAP.MK_CELL :                                   FFFFFFFFFFFF0C12 C |
 VIDEO_LOADMAP.NON_BLANK :                                 FFFFFFFFFFFF0C10 C |
 VIDEO_LOADMAP.X_LOOP :                                    FFFFFFFFFFFF0C00 C |
 VIDEO_LOADMAP.Y_LOOP :                                    FFFFFFFFFFFF0BEC C |
*VIDEO_LOADMAPV :  FFFFFFFFFFFF0C28 C |
 VIDEO_LOADMAPV.BAD_SIZE :                                 FFFFFFFFFFFF0CAA C |
 VIDEO_LOADMAPV.BAD_SIZE_D :                               FFFFFFFFFFFF0D12 C |
 VIDEO_LOADMAPV.DBLE_MODE :                                FFFFFFFFFFFF0CB0 C |
 VIDEO_LOADMAPV.MK_CELL :                                  FFFFFFFFFFFF0C94 C |
 VIDEO_LOADMAPV.MK_CELL_D :                                FFFFFFFFFFFF0CFC C |
 VIDEO_LOADMAPV.NON_BLANK :                                FFFFFFFFFFFF0C92 C |
 VIDEO_LOADMAPV.NON_BLANK_D :                              FFFFFFFFFFFF0CF4 C |
 VIDEO_LOADMAPV.X_LOOP :                                   FFFFFFFFFFFF0C6C C |
 VIDEO_LOADMAPV.X_LOOP_D :                                 FFFFFFFFFFFF0CCA C |
 VIDEO_LOADMAPV.Y_LOOP :                                   FFFFFFFFFFFF0C72 C |
 VIDEO_LOADMAPV.Y_LOOP_D :                                 FFFFFFFFFFFF0CD0 C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0F14 C |
*VIDEO_LOADPAL_LIST :                                      FFFFFFFFFFFF0F40 C |
 VIDEO_LOADPAL_LIST.INVALID :                              FFFFFFFFFFFF0F5A C |
 VIDEO_LOADPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0F4E C |
 VIDEO_MAKEDMAENTRY :                                      FFFFFFFFFFFF0ACC C |
 VIDEO_MAKEDMAENTRY.LAST_SET :                             FFFFFFFFFFFF0B1C C |
 VIDEO_MAKEDMAENTRY.MK_SET :                               FFFFFFFFFFFF0B24 C |
 VIDEO_MAKEDMAENTRY.NORMAL :                               FFFFFFFFFFFF0B16 C |
 VIDEO_MAKEDMAENTRY.NOT_WRAM :                             FFFFFFFFFFFF0B70 C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :                              FFFFFFFFFFFF0BB0 C |
 VIDEO_MAKEFADE :  FFFFFFFFFFFF0ECC C | *VIDEO_MAKESPR :   FFFFFFFFFFFF133E C |
 VIDEO_MAKESPR.CHK_FREE :                                  FFFFFFFFFFFF134A C |
 VIDEO_MAKESPR.MK_SPR :                                    FFFFFFFFFFFF135C C |
 VIDEO_MAKESPRMAP :                                        FFFFFFFFFFFF13EE C |
 VIDEO_MAKESPRMAP.CHK_FREE :                               FFFFFFFFFFFF13FA C |
 VIDEO_MAKESPRMAP.MK_SPR :                                 FFFFFFFFFFFF140A C |
*VIDEO_MAKESPRMAP_DMA :                                    FFFFFFFFFFFF13D6 C |
*VIDEO_MDMARS_MAKEFADE :                                   FFFFFFFFFFFF0ECA C |
*VIDEO_MDMCD_MAKESTAMP :                                   FFFFFFFFFFFF180C C |
 VIDEO_MDMCD_MAKESTAMP.CHK_FREE :                          FFFFFFFFFFFF1818 C |
 VIDEO_MDMCD_MAKESTAMP.MK_SPR :                            FFFFFFFFFFFF1828 C |
*VIDEO_MDMCD_SETSTAMP :                                    FFFFFFFFFFFF17FE C |
 VIDEO_MDMCD_STAMPDISABLE :                                FFFFFFFFFFFF176C C |
*VIDEO_MDMCD_STAMPDOTMAP :                                 FFFFFFFFFFFF178C C |
 VIDEO_MDMCD_STAMPDOTMAP.BAD_SIZE :                        FFFFFFFFFFFF17F8 C |
 VIDEO_MDMCD_STAMPDOTMAP.X_LOOP :                          FFFFFFFFFFFF17C8 C |
 VIDEO_MDMCD_STAMPDOTMAP.Y_LOOP :                          FFFFFFFFFFFF17CE C |
*VIDEO_MDMCD_STAMPENABLE :                                 FFFFFFFFFFFF16FA C |
 VIDEO_MDMCD_STAMPENABLE.CLR_SETT :                        FFFFFFFFFFFF170A C |
 VIDEO_MDMCD_STAMPENABLE.DONT_USE :                        FFFFFFFFFFFF1742 C |
*VIDEO_MDMCD_STAMPINIT :                                   FFFFFFFFFFFF1498 C |
 VIDEO_MDMCD_STAMPINIT.EXIT_NOW :                          FFFFFFFFFFFF14CC C |
 VIDEO_MDMCD_STAMPINIT.MK_INITBUFF :                       FFFFFFFFFFFF14BA C |
 VIDEO_MDMCD_STAMPINIT.WAIT_FINISH :                       FFFFFFFFFFFF14C0 C |
*VIDEO_MDMCD_STAMPMAP :                                    FFFFFFFFFFFF189C C |
 VIDEO_MDMCD_STAMPRENDER :                                 FFFFFFFFFFFF14D0 C |
 VIDEO_MDMCD_STAMPRENDER.COPY_LSB :                        FFFFFFFFFFFF16AC C |
 VIDEO_MDMCD_STAMPRENDER.COPY_MID :                        FFFFFFFFFFFF15FA C |
 VIDEO_MDMCD_STAMPRENDER.DRAW_CELLS :                      FFFFFFFFFFFF1528 C |
 VIDEO_MDMCD_STAMPRENDER.EXACT_SIZE :                      FFFFFFFFFFFF1598 C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_ONE :                       FFFFFFFFFFFF1582 C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_STEP :                      FFFFFFFFFFFF153A C |
 VIDEO_MDMCD_STAMPRENDER.MAKE_CELLBUFF :                   FFFFFFFFFFFF15C8 C |
 VIDEO_MDMCD_STAMPRENDER.MAXIMUM :                         FFFFFFFFFFFF15A0 C |
 VIDEO_MDMCD_STAMPRENDER.MKDMA_BUFF :                      FFFFFFFFFFFF1568 C |
 VIDEO_MDMCD_STAMPRENDER.NOT_DONE :                        FFFFFFFFFFFF15B4 C |
 VIDEO_MDMCD_STAMPRENDER.NOT_YET :                         FFFFFFFFFFFF155E C |
 VIDEO_MDMCD_STAMPRENDER.NO_LSB :                          FFFFFFFFFFFF16BC C |
 VIDEO_MDMCD_STAMPRENDER.OUT_LOCS :                        FFFFFFFFFFFF15C0 C |
 VIDEO_MDMCD_STAMPRENDER.WAIT_WRAM :                       FFFFFFFFFFFF152C C |
*VIDEO_MDMCD_STAMPRESET :                                  FFFFFFFFFFFF189E C |
 VIDEO_MDMCD_STAMPRESET.CLR_STAMPS :                       FFFFFFFFFFFF18AA C |
 VIDEO_PRINT :     FFFFFFFFFFFF0FAE C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF101A C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF0FE2 C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF1014 C |
 VIDEO_PRINT.Q_LOOP :                                      FFFFFFFFFFFF0FF8 C |
 VIDEO_PRINT.SPECIAL :                                     FFFFFFFFFFFF1020 C |
*VIDEO_PRINTDEFPAL :                                       FFFFFFFFFFFF0F98 C |
 VIDEO_PRINTDEFPAL_FADE :                                  FFFFFFFFFFFF0F90 C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0F86 C |
 VIDEO_PRINTINITW :                                        FFFFFFFFFFFF0F80 C |
*VIDEO_PRINTVAL :  FFFFFFFFFFFF112C C |
*VIDEO_PRINTVAL.LOOP :                                     FFFFFFFFFFFF1160 C |
*VIDEO_PRINTVAL.Q_LOOP :                                   FFFFFFFFFFFF1176 C |
 VIDEO_PRINTVALW : FFFFFFFFFFFF1182 C |
*VIDEO_PRINTVALW.LOOP :                                    FFFFFFFFFFFF11D6 C |
 VIDEO_PRINTVALW.NO_DBLE_Y :                               FFFFFFFFFFFF11AA C |
 VIDEO_PRINTW :    FFFFFFFFFFFF1038 C |
 VIDEO_PRINTW.EXIT :                                       FFFFFFFFFFFF110C C |
 VIDEO_PRINTW.LOOP :                                       FFFFFFFFFFFF108C C |
 VIDEO_PRINTW.NEXT :                                       FFFFFFFFFFFF1104 C |
 VIDEO_PRINTW.NO_DBLE_Y :                                  FFFFFFFFFFFF1060 C |
 VIDEO_PRINTW.SPECIAL :                                    FFFFFFFFFFFF1112 C |
 VIDEO_PRINTW.VER_CONT :                                   FFFFFFFFFFFF10FE C |
 VIDEO_PRINTW.VER_NORMAL :                                 FFFFFFFFFFFF10CC C |
 VIDEO_RENDER :    FFFFFFFFFFFF036A C |
 VIDEO_RENDER.END :                                        FFFFFFFFFFFF045C C |
 VIDEO_RENDER.EXIT :                                       FFFFFFFFFFFF0466 C |
 VIDEO_RENDER.NEXT :                                       FFFFFFFFFFFF0434 C |
 VIDEO_RESOLUTION :                                        FFFFFFFFFFFF0752 C |
 VIDEO_RESOLUTION.EX_BIT :                                 FFFFFFFFFFFF0786 C |
 VIDEO_RUNFADE :   FFFFFFFFFFFF0D16 C |
 VIDEO_RUNFADE.ALL_BLACK :                                 FFFFFFFFFFFF0DE2 C |
 VIDEO_RUNFADE.BUSY_TIMER :                                FFFFFFFFFFFF0D5C C |
 VIDEO_RUNFADE.FADE_IN :                                   FFFFFFFFFFFF0DF0 C |
 VIDEO_RUNFADE.FADE_LIST :                                 FFFFFFFFFFFF0D68 C |
 VIDEO_RUNFADE.FADE_OUT :                                  FFFFFFFFFFFF0D80 C |
*VIDEO_RUNFADE.FDIN_NEND :                                 FFFFFFFFFFFF0E86 C |
*VIDEO_RUNFADE.FDOUT_NEND :                                FFFFFFFFFFFF0DEE C |
 VIDEO_RUNFADE.NEXT_COLOR :                                FFFFFFFFFFFF0D8E C |
 VIDEO_RUNFADE.NEXT_IN :                                   FFFFFFFFFFFF0DFC C |
 VIDEO_RUNFADE.NEXT_REQ :                                  FFFFFFFFFFFF0D1A C |
 VIDEO_RUNFADE.NOTHING :                                   FFFFFFFFFFFF0D78 C |
 VIDEO_RUNFADE.NO_REQ :                                    FFFFFFFFFFFF0D62 C |
 VIDEO_RUNFADE.PFADE_DEL :                                 FFFFFFFFFFFF0D78 C |
 VIDEO_RUNFADE.SAME_IN :                                   FFFFFFFFFFFF0E70 C |
 VIDEO_SETMAPSIZE :                                        FFFFFFFFFFFF082E C |
 VIDEO_SETMAPSIZE.SIZE_TBL :                               FFFFFFFFFFFF0862 C |
*VIDEO_SETSPR :    FFFFFFFFFFFF1334 C |  VIDEO_SETSPRMAP : FFFFFFFFFFFF13CC C |
*VIDEO_SETSPRMAP_DMA :                                     FFFFFFFFFFFF13C2 C |
 VIDEO_UPDMAPVRAM :                                        FFFFFFFFFFFF07A2 C |
 VIDEO_UPDSPRHVRAM :                                       FFFFFFFFFFFF07F4 C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF0E88 C |
 VIDEO_WAITFADE.LOOP :                                     FFFFFFFFFFFF0E88 C |
 VIDEO_WAITFADE.NEXT_ONE :                                 FFFFFFFFFFFF0E96 C |
 VIDMDMCD_CERROR : FFFFFFFFFFFF1884 C |
 VIDMDMCD_MKSTAMP :                                        FFFFFFFFFFFF182A C |
*VIDMDMCD_RDSTMPSLOT :                                     FFFFFFFFFFFF188E C |
 VIDMDMCD_SENDSTAMPINFO :                                  FFFFFFFFFFFF16C0 C |
 VIDMDMCD_SENDSTAMPINFO.CHK_SPR :                          FFFFFFFFFFFF16E8 C |
 VIDMDMCD_SENDSTAMPINFO.COPY_TOWRAM :                      FFFFFFFFFFFF16CE C |
 VIDMDMCD_SENDSTAMPINFO.NOT_SPRTEMP :                      FFFFFFFFFFFF16F0 C |
 VIDMDSPR_MKSPR :  FFFFFFFFFFFF135E C |
 VIDMDSPR_MKSPR.DONT_ADD :                                 FFFFFFFFFFFF1388 C |
 VIDMDSPR_MKSPRMAP :                                       FFFFFFFFFFFF140C C |
 VIDMD_CERROR :    FFFFFFFFFFFF13B8 C | *VIDMD_CFREEZE :   FFFFFFFFFFFF13C0 C |
 VIDMD_PAL :       FFFFFFFFFFFF0F1C C |  VIDMD_PAL.BAD :   FFFFFFFFFFFF0F3A C |
 VIDMD_PAL.LOOP :  FFFFFFFFFFFF0F34 C |  VIDMKFADE_GO :    FFFFFFFFFFFF0EE4 C |
 VIDPRINT_INIT :   FFFFFFFFFFFF0F8A C |
 VID_CHECKLASTSPR :                                        FFFFFFFFFFFF0644 C |
 VID_CHECKLASTSPR.BLNK_FIRST :                             FFFFFFFFFFFF065E C |
 VID_CHECKLASTSPR.LAST_ONE :                               FFFFFFFFFFFF0664 C |
 VID_CHECKLASTSPR.SPR_EXIT :                               FFFFFFFFFFFF0674 C |
*VID_FILLGO :      FFFFFFFFFFFF09E0 C |  VID_FILLGO.DMAW : FFFFFFFFFFFF09E6 C |
 VID_FILLGO.DMA_W :                                        FFFFFFFFFFFF0A3A C |
 VID_FONTDEFPAL :  FFFFFFFFFFFF0F9E C |  VID_MKDMACARRY :  FFFFFFFFFFFF13E8 C |
 VID_MKDMANEXT :   FFFFFFFFFFFF13DE C |  VID_MKMAPDMA :    FFFFFFFFFFFF1448 C |
 VID_MKMAPDMA.NEXT_PZ :                                    FFFFFFFFFFFF1468 C |
 VID_MKMAPDMA.NO_DMA :                                     FFFFFFFFFFFF1492 C |
 VID_PRINTTVAL :   FFFFFFFFFFFF11EA C |
 VID_PRINTTVAL.HEX_INCR :                                  FFFFFFFFFFFF1244 C |
 VID_PRINTTVAL.MK_VALUE :                                  FFFFFFFFFFFF1222 C |
 VID_PRINTTVAL.SHOW_24 :                                   FFFFFFFFFFFF1216 C |
*VID_PRINTTVAL.SHOW_BYTE :                                 FFFFFFFFFFFF1206 C |
 VID_PRINTTVAL.SHOW_LONG :                                 FFFFFFFFFFFF121E C |
 VID_PRINTTVAL.SHOW_NIBBL :                                FFFFFFFFFFFF1234 C |
 VID_PRINTTVAL.SHOW_WORD :                                 FFFFFFFFFFFF120E C |
 VID_PRINTTVALW :  FFFFFFFFFFFF1256 C |
 VID_PRINTTVALW.GET_PREVAL :                               FFFFFFFFFFFF1320 C |
 VID_PRINTTVALW.HEX_INCR :                                 FFFFFFFFFFFF132E C |
 VID_PRINTTVALW.MK_VALUE :                                 FFFFFFFFFFFF1292 C |
 VID_PRINTTVALW.MK_VALUE_IN :                              FFFFFFFFFFFF128E C |
 VID_PRINTTVALW.NIBBL_CONT :                               FFFFFFFFFFFF1318 C |
 VID_PRINTTVALW.NIBBL_NORM :                               FFFFFFFFFFFF12E2 C |
 VID_PRINTTVALW.SHOW_24 :                                  FFFFFFFFFFFF1282 C |
*VID_PRINTTVALW.SHOW_BYTE :                                FFFFFFFFFFFF1272 C |
 VID_PRINTTVALW.SHOW_LONG :                                FFFFFFFFFFFF128A C |
 VID_PRINTTVALW.SHOW_NIBBL :                               FFFFFFFFFFFF12A4 C |
 VID_PRINTTVALW.SHOW_WORD :                                FFFFFFFFFFFF127A C |
 VID_WRTREG01 :    FFFFFFFFFFFF06F2 C |  VIEW_FAIRY :                     1 - |
 VIEW_GEMAINFO :                  0 - | *VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :    FFFFFFFFFFFF1D42 C |
*VIRQ_ON :                        8 - | *VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1CF5 C |  WAVE_LEN :                    1CED C |
 WAVE_LOOP :                   1CF0 C |  WAVE_PITCH :                  1CF3 C |
 WAVE_START :                  1CEA C |  WAVFREQ_CDPCM :               155C C |
 WAVFREQ_LIST :                14FA C | *WONDERCHK :                     98 - |
*WONDERREQ :                     97 - |  WRAM_DOTOUTPUT_0 :           20000 - |
 WRAM_DOTOUTPUT_1 :           28000 - |  WRAM_MDMAPTABLE :            30000 - |
 WRAM_MDSTAMPLIST :           3A000 - |  WRAM_STAMPCURRFLIP :         3BFFE - |
 WRAM_STAMPSDONE :            3BFFC - |  WRAM_TRACEBUFF :             3B000 - |
 X68KSRCLSB :                    35 C |  X68KSRCMID :                    36 C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                  200000 C |  Z80_CODE_END :              201F8C C |
 Z80_CODE_EOF :                E000 C |  Z80_CODE_FILE :               C000 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                    1F60 - |  ZDRVFWRT :                    1F80 - |
*ZDRVMARSBLK :                 1F89 - |  ZDRVMAXCMND :                   20 - |
*ZDRVMCDBLK :                  1F8A - |  ZDRVPALMODE :                 1F88 - |
 ZDRVRAMLEN :                  1F87 - |  ZDRVRAMSRC :                  1F86 - |
 ZDRVROMBLK :                  1F81 - |  ZMARS_SEND :                   F99 C |
 ZMARS_SEND.CLR_PCM :          101F C |  ZMARS_SEND.COPY_BYTES :        FF7 C |
 ZMARS_SEND.MAKE_SURE :         FCF C |  ZMARS_SEND.MCDT_BLOCKED :     1018 C |
*ZMARS_SEND.MCDT_NOUPD :       1023 C |  ZMARS_SEND.MCD_NEXTP :         FEE C |
 ZMARS_SEND.SET_COMBANK :      102E C |  ZMARS_SEND.TEST_SUB :          FDA C |
 ZMARS_SEND.WAIT_IN :           FBB C |  ZMARS_SEND.WAIT_SUB :         1006 C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZTBL_CHIP :                      3 - |  ZTBL_FREQINDX :                  5 - |
 ZTBL_INSTCACH :                  A - |  ZTBL_LINK :                      0 - |
 ZTBL_MASTERVOL :                 4 - |  ZTBL_PITCHBEND :                 6 - |
 ZTBL_PRIORITY :                  2 - |  ZTBL_VOLSLIDE :                  8 - |
 ZTBL_VOLUME :                    7 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_ADRERR :                     5F40 - |
*_BOOTSTAT :                   5EA0 - |  _BURAM :                      5F16 - |
*_CCR :                    FFFFFE92 - |  _CDBIOS :                     5F22 - |
*_CDBOOT :                     5F1C - | *_CDSTAT :                     5E80 - |
*_CHKERR :                     5F52 - | *_CODERR :                     5F46 - |
*_DEVERR :                     5F4C - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
 _LEVEL1 :                     5F76 - | *_LEVEL2 :                     5F7C - |
 _LEVEL3 :                     5F82 - | *_LEVEL4 :                     5F88 - |
*_LEVEL5 :                     5F8E - | *_LEVEL6 :                     5F94 - |
*_LEVEL7 :                     5F9A - | *_NOCOD0 :                     5F6A - |
*_NOCOD1 :                     5F70 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SETJMPTBL :                  5F0A - | *_SPVERR :                     5F5E - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_TRACE :                      5F64 - |
*_TRAP00 :                     5FA0 - | *_TRAP01 :                     5FA6 - |
*_TRAP02 :                     5FAC - | *_TRAP03 :                     5FB2 - |
*_TRAP04 :                     5FB8 - | *_TRAP05 :                     5FBE - |
*_TRAP06 :                     5FC4 - | *_TRAP07 :                     5FCA - |
*_TRAP08 :                     5FD0 - | *_TRAP09 :                     5FD6 - |
*_TRAP10 :                     5FDC - | *_TRAP11 :                     5FE2 - |
*_TRAP12 :                     5FE8 - | *_TRAP13 :                     5FEE - |
*_TRAP14 :                     5FF4 - | *_TRAP15 :                     5FFA - |
*_TRPERR :                     5F58 - | *_USERCALL0 :                  5F28 - |
*_USERCALL1 :                  5F2E - | *_USERCALL2 :                  5F34 - |
*_USERCALL3 :                  5F3A - | *_USERMODE :                   5EA6 - |
*_VDPREG :                 20004100 - | *_WAITVSYNC :                  5F10 - |
 _WAITVSYNC.TABLE :            6020 C |

   1781 symbols
    494 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 01/10/2025 01:25:22 AM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
CODE_BANK                             | DATA_BANK                            
DEND_BANK                             | ENDMEMORY                            
ERREPORT                              | FILLSECTORS                          
FS_FILE                               | FS_MKLIST                            
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | GSMPLRAW                             
MARSVRAMDATA                          | MARSVRAMDEND                         
MCDSTAMPDATA                          | MCDSTAMPDEND                         
MEMORY                                | REPORT                               
ROMPAD                                | VDP_SHOWME                           

     30 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 01/10/2025 01:25:22 AM


  Defined Structures/Unions:
  --------------------------

CDPCM
  0      (I8) STATUS
  1      (I8) FLAGS
  2      (I32) START
  6      (I32) LENGTH
  A      (I32) LOOP
  E      (I32) CLEN
 12      (I32) CREAD
 16      (I16) STRMHALF
 18      (I16) PITCH
 1A      (I16) CBLK
 1C      (I16) COUT
 1E      (I8) PAN
 1F      (I8) ENV

CDSTAMP
  0      (I8) FLAGS
  1      (I8) MAP
  2      (I16) CX
  4      (I16) CY
  6      (I16) X
  8      (I16) Y
  A      (I16) WDTH
  C      (I16) HGHT
  E      (I16) SCALE
 10      (I16) ROT

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PAD
  0      (I8) ID
  1      (I8) VER
  2      (I16) HOLD
  4      (I16) PRESS
  6      (I16) RELEASE
  8      (I16) X
  A      (I16) Y
  C      (I16) PAGE
  E      (I16) EXT

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM

STMPC
  0      (I16) XC
  2      (I16) YC
  4      (I32) X
  8      (I32) Y
  C      (I32) DX
 10      (I32) DY
 14      (I32) TX
 18      (I32) TY
 1C      (I16) XMUL
 1E      (I16) ZMUL
 20      (I16) ZMUL_SIN
 22      (I16) ZMUL_COS
 24      (I16) ROT_SIN
 26      (I16) ROT_COS

STMPI
  0      (I16) MAP
  2      (I16) X
  4      (I16) Y
  6      (I16) XR
  8      (I16) YD
  A      (I16) FLAGS
8 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 01/10/2025 01:25:22 AM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_NUM                             
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 01/10/2025 01:25:22 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.27 seconds assembly time

  16886 lines source file
  17632 lines incl. macro expansions
      6 passes
      0 errors
      0 warnings
